{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "node_modules/an-array/index.js",
    "node_modules/animejs/anime.min.js",
    "node_modules/as-number/index.js",
    "node_modules/base64-js/index.js",
    "node_modules/browserify-css/browser.js",
    "node_modules/buffer-equal/index.js",
    "node_modules/buffer/index.js",
    "node_modules/debug/browser.js",
    "node_modules/debug/debug.js",
    "node_modules/deep-assign/index.js",
    "node_modules/document-register-element/build/document-register-element.js",
    "node_modules/dtype/index.js",
    "node_modules/flatten-vertex-data/index.js",
    "node_modules/global/window.js",
    "node_modules/ieee754/index.js",
    "node_modules/inherits/inherits_browser.js",
    "node_modules/is-buffer/index.js",
    "node_modules/is-function/index.js",
    "node_modules/is-obj/index.js",
    "node_modules/isarray/index.js",
    "node_modules/layout-bmfont-text/index.js",
    "node_modules/load-bmfont/browser.js",
    "node_modules/load-bmfont/lib/is-binary.js",
    "node_modules/object-assign/index.js",
    "node_modules/parse-bmfont-ascii/index.js",
    "node_modules/parse-bmfont-binary/index.js",
    "node_modules/parse-bmfont-xml/lib/browser.js",
    "node_modules/parse-bmfont-xml/lib/parse-attribs.js",
    "node_modules/parse-headers/parse-headers.js",
    "node_modules/process/browser.js",
    "node_modules/quad-indices/index.js",
    "node_modules/three-bmfont-text/index.js",
    "node_modules/three-bmfont-text/lib/utils.js",
    "node_modules/three-bmfont-text/lib/vertices.js",
    "node_modules/three-buffer-vertex-data/index.js",
    "node_modules/word-wrapper/index.js",
    "node_modules/xhr/index.js",
    "node_modules/xml-parse-from-string/index.js",
    "node_modules/xtend/immutable.js",
    "package.json",
    "src/components/animation.js",
    "src/components/camera.js",
    "src/components/collada-model.js",
    "src/components/cursor.js",
    "src/components/geometry.js",
    "src/components/gltf-model.js",
    "src/components/index.js",
    "src/components/light.js",
    "src/components/line.js",
    "src/components/link.js",
    "src/components/look-controls.js",
    "src/components/material.js",
    "src/components/obj-model.js",
    "src/components/orthographic-camera.js",
    "src/components/position.js",
    "src/components/raycaster.js",
    "src/components/rotation.js",
    "src/components/scale.js",
    "src/components/scene/background.js",
    "src/components/scene/debug.js",
    "src/components/scene/effects/bloom.js",
    "src/components/scene/effects/index.js",
    "src/components/scene/effects/sepia.js",
    "src/components/scene/effects/ssao.js",
    "src/components/scene/embedded.js",
    "src/components/scene/fog.js",
    "src/components/scene/inspector.js",
    "src/components/scene/overlay.js",
    "src/components/scene/pool.js",
    "src/components/scene/renderer.js",
    "src/components/scene/screenshot.js",
    "src/components/scene/stats.js",
    "src/components/shadow.js",
    "src/components/sound.js",
    "src/components/text.js",
    "src/components/visible.js",
    "src/components/wasd-controls.js",
    "src/constants/index.js",
    "src/constants/keyboardevent.js",
    "src/core/a-assets.js",
    "src/core/a-cubemap.js",
    "src/core/a-entity.js",
    "src/core/a-mixin.js",
    "src/core/a-node.js",
    "src/core/a-register-element.js",
    "src/core/component.js",
    "src/core/effect.js",
    "src/core/geometry.js",
    "src/core/propertyTypes.js",
    "src/core/scene/a-scene.js",
    "src/core/scene/loadingScreen.js",
    "src/core/scene/metaTags.js",
    "src/core/scene/postMessage.js",
    "src/core/scene/scenes.js",
    "src/core/scene/wakelock.js",
    "src/core/schema.js",
    "src/core/shader.js",
    "src/core/system.js",
    "src/extras/components/index.js",
    "src/extras/components/pivot.js",
    "src/extras/primitives/getMeshMixin.js",
    "src/extras/primitives/index.js",
    "src/extras/primitives/primitives.js",
    "src/extras/primitives/primitives/a-camera.js",
    "src/extras/primitives/primitives/a-collada-model.js",
    "src/extras/primitives/primitives/a-cursor.js",
    "src/extras/primitives/primitives/a-curvedimage.js",
    "src/extras/primitives/primitives/a-gltf-model.js",
    "src/extras/primitives/primitives/a-image.js",
    "src/extras/primitives/primitives/a-light.js",
    "src/extras/primitives/primitives/a-link.js",
    "src/extras/primitives/primitives/a-obj-model.js",
    "src/extras/primitives/primitives/a-sky.js",
    "src/extras/primitives/primitives/a-sound.js",
    "src/extras/primitives/primitives/a-text.js",
    "src/extras/primitives/primitives/a-video.js",
    "src/extras/primitives/primitives/a-videosphere.js",
    "src/extras/primitives/primitives/meshPrimitives.js",
    "src/geometries/box.js",
    "src/geometries/circle.js",
    "src/geometries/cone.js",
    "src/geometries/cylinder.js",
    "src/geometries/dodecahedron.js",
    "src/geometries/icosahedron.js",
    "src/geometries/index.js",
    "src/geometries/octahedron.js",
    "src/geometries/plane.js",
    "src/geometries/ring.js",
    "src/geometries/sphere.js",
    "src/geometries/tetrahedron.js",
    "src/geometries/torus.js",
    "src/geometries/torusKnot.js",
    "src/geometries/triangle.js",
    "src/index.js",
    "src/lib/rStatsAframe.js",
    "src/lib/three.js",
    "src/shaders/flat.js",
    "src/shaders/index.js",
    "src/shaders/ios10hls.js",
    "src/shaders/msdf.js",
    "src/shaders/sdf.js",
    "src/shaders/standard.js",
    "src/style/aframe.css",
    "src/style/rStats.css",
    "src/systems/camera.js",
    "src/systems/geometry.js",
    "src/systems/gltf-model.js",
    "src/systems/index.js",
    "src/systems/light.js",
    "src/systems/material.js",
    "src/systems/shadow.js",
    "src/utils/bind.js",
    "src/utils/coordinates.js",
    "src/utils/debug.js",
    "src/utils/device.js",
    "src/utils/entity.js",
    "src/utils/forceCanvasResizeSafariMobile.js",
    "src/utils/index.js",
    "src/utils/material.js",
    "src/utils/object-pool.js",
    "src/utils/split.js",
    "src/utils/src-loader.js",
    "src/utils/styleParser.js",
    "vendor/ColladaLoader.js",
    "vendor/DRACOLoader.js",
    "vendor/GLTFLoader.js",
    "vendor/MTLLoader.js",
    "vendor/MainRenderer.js",
    "vendor/OBJLoader.js",
    "vendor/effects/CopyShader.js",
    "vendor/effects/EffectComposer.js",
    "vendor/effects/LuminosityHighPassShader.js",
    "vendor/effects/RenderPass.js",
    "vendor/effects/SSAOPass.js",
    "vendor/effects/SSAOShader.js",
    "vendor/effects/SepiaShader.js",
    "vendor/effects/ShaderPass.js",
    "vendor/effects/UnrealBloomPass.js",
    "vendor/rStats.extras.js",
    "vendor/rStats.js",
    "vendor/three.js",
    "vendor/wakelock/util.js",
    "vendor/wakelock/wakelock.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChtJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACdvvtLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACztlGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9ZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9kpSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrleA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptzSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhbpSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjpj2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxunIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfntLA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACztNA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfvvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdvjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACntzxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5ktzrdnpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhpnnvdj0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "var str = Object.prototype.toString\n\nmodule.exports = anArray\n\nfunction anArray(arr) {\n  return (\n       arr.BYTES_PER_ELEMENT\n    && str.call(arr.buffer) === '[object ArrayBuffer]'\n    || Array.isArray(arr)\n  )\n}\n",
    "/*\n 2017 Julian Garnier\n Released under the MIT license\n*/\nvar $jscomp={scope:{}};$jscomp.defineProperty=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(e,r,p){if(p.get||p.set)throw new TypeError(\"ES3 does not support getters and setters.\");e!=Array.prototype&&e!=Object.prototype&&(e[r]=p.value)};$jscomp.getGlobal=function(e){return\"undefined\"!=typeof window&&window===e?e:\"undefined\"!=typeof global&&null!=global?global:e};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX=\"jscomp_symbol_\";\n$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(e){return $jscomp.SYMBOL_PREFIX+(e||\"\")+$jscomp.symbolCounter_++};\n$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var e=$jscomp.global.Symbol.iterator;e||(e=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol(\"iterator\"));\"function\"!=typeof Array.prototype[e]&&$jscomp.defineProperty(Array.prototype,e,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(e){var r=0;return $jscomp.iteratorPrototype(function(){return r<e.length?{done:!1,value:e[r++]}:{done:!0}})};\n$jscomp.iteratorPrototype=function(e){$jscomp.initSymbolIterator();e={next:e};e[$jscomp.global.Symbol.iterator]=function(){return this};return e};$jscomp.array=$jscomp.array||{};$jscomp.iteratorFromArray=function(e,r){$jscomp.initSymbolIterator();e instanceof String&&(e+=\"\");var p=0,m={next:function(){if(p<e.length){var u=p++;return{value:r(u,e[u]),done:!1}}m.next=function(){return{done:!0,value:void 0}};return m.next()}};m[Symbol.iterator]=function(){return m};return m};\n$jscomp.polyfill=function(e,r,p,m){if(r){p=$jscomp.global;e=e.split(\".\");for(m=0;m<e.length-1;m++){var u=e[m];u in p||(p[u]={});p=p[u]}e=e[e.length-1];m=p[e];r=r(m);r!=m&&null!=r&&$jscomp.defineProperty(p,e,{configurable:!0,writable:!0,value:r})}};$jscomp.polyfill(\"Array.prototype.keys\",function(e){return e?e:function(){return $jscomp.iteratorFromArray(this,function(e){return e})}},\"es6-impl\",\"es3\");var $jscomp$this=this;\n(function(e,r){\"function\"===typeof define&&define.amd?define([],r):\"object\"===typeof module&&module.exports?module.exports=r():e.anime=r()})(this,function(){function e(a){if(!h.col(a))try{return document.querySelectorAll(a)}catch(c){}}function r(a,c){for(var d=a.length,b=2<=arguments.length?arguments[1]:void 0,f=[],n=0;n<d;n++)if(n in a){var k=a[n];c.call(b,k,n,a)&&f.push(k)}return f}function p(a){return a.reduce(function(a,d){return a.concat(h.arr(d)?p(d):d)},[])}function m(a){if(h.arr(a))return a;\nh.str(a)&&(a=e(a)||a);return a instanceof NodeList||a instanceof HTMLCollection?[].slice.call(a):[a]}function u(a,c){return a.some(function(a){return a===c})}function C(a){var c={},d;for(d in a)c[d]=a[d];return c}function D(a,c){var d=C(a),b;for(b in a)d[b]=c.hasOwnProperty(b)?c[b]:a[b];return d}function z(a,c){var d=C(a),b;for(b in c)d[b]=h.und(a[b])?c[b]:a[b];return d}function T(a){a=a.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i,function(a,c,d,k){return c+c+d+d+k+k});var c=/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(a);\na=parseInt(c[1],16);var d=parseInt(c[2],16),c=parseInt(c[3],16);return\"rgba(\"+a+\",\"+d+\",\"+c+\",1)\"}function U(a){function c(a,c,b){0>b&&(b+=1);1<b&&--b;return b<1/6?a+6*(c-a)*b:.5>b?c:b<2/3?a+(c-a)*(2/3-b)*6:a}var d=/hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)/g.exec(a)||/hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*([\\d.]+)\\)/g.exec(a);a=parseInt(d[1])/360;var b=parseInt(d[2])/100,f=parseInt(d[3])/100,d=d[4]||1;if(0==b)f=b=a=f;else{var n=.5>f?f*(1+b):f+b-f*b,k=2*f-n,f=c(k,n,a+1/3),b=c(k,n,a);a=c(k,n,a-1/3)}return\"rgba(\"+\n255*f+\",\"+255*b+\",\"+255*a+\",\"+d+\")\"}function y(a){if(a=/([\\+\\-]?[0-9#\\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(a))return a[2]}function V(a){if(-1<a.indexOf(\"translate\")||\"perspective\"===a)return\"px\";if(-1<a.indexOf(\"rotate\")||-1<a.indexOf(\"skew\"))return\"deg\"}function I(a,c){return h.fnc(a)?a(c.target,c.id,c.total):a}function E(a,c){if(c in a.style)return getComputedStyle(a).getPropertyValue(c.replace(/([a-z])([A-Z])/g,\"$1-$2\").toLowerCase())||\"0\"}function J(a,c){if(h.dom(a)&&\nu(W,c))return\"transform\";if(h.dom(a)&&(a.getAttribute(c)||h.svg(a)&&a[c]))return\"attribute\";if(h.dom(a)&&\"transform\"!==c&&E(a,c))return\"css\";if(null!=a[c])return\"object\"}function X(a,c){var d=V(c),d=-1<c.indexOf(\"scale\")?1:0+d;a=a.style.transform;if(!a)return d;for(var b=[],f=[],n=[],k=/(\\w+)\\((.+?)\\)/g;b=k.exec(a);)f.push(b[1]),n.push(b[2]);a=r(n,function(a,b){return f[b]===c});return a.length?a[0]:d}function K(a,c){switch(J(a,c)){case \"transform\":return X(a,c);case \"css\":return E(a,c);case \"attribute\":return a.getAttribute(c)}return a[c]||\n0}function L(a,c){var d=/^(\\*=|\\+=|-=)/.exec(a);if(!d)return a;var b=y(a)||0;c=parseFloat(c);a=parseFloat(a.replace(d[0],\"\"));switch(d[0][0]){case \"+\":return c+a+b;case \"-\":return c-a+b;case \"*\":return c*a+b}}function F(a,c){return Math.sqrt(Math.pow(c.x-a.x,2)+Math.pow(c.y-a.y,2))}function M(a){a=a.points;for(var c=0,d,b=0;b<a.numberOfItems;b++){var f=a.getItem(b);0<b&&(c+=F(d,f));d=f}return c}function N(a){if(a.getTotalLength)return a.getTotalLength();switch(a.tagName.toLowerCase()){case \"circle\":return 2*\nMath.PI*a.getAttribute(\"r\");case \"rect\":return 2*a.getAttribute(\"width\")+2*a.getAttribute(\"height\");case \"line\":return F({x:a.getAttribute(\"x1\"),y:a.getAttribute(\"y1\")},{x:a.getAttribute(\"x2\"),y:a.getAttribute(\"y2\")});case \"polyline\":return M(a);case \"polygon\":var c=a.points;return M(a)+F(c.getItem(c.numberOfItems-1),c.getItem(0))}}function Y(a,c){function d(b){b=void 0===b?0:b;return a.el.getPointAtLength(1<=c+b?c+b:0)}var b=d(),f=d(-1),n=d(1);switch(a.property){case \"x\":return b.x;case \"y\":return b.y;\ncase \"angle\":return 180*Math.atan2(n.y-f.y,n.x-f.x)/Math.PI}}function O(a,c){var d=/-?\\d*\\.?\\d+/g,b;b=h.pth(a)?a.totalLength:a;if(h.col(b))if(h.rgb(b)){var f=/rgb\\((\\d+,\\s*[\\d]+,\\s*[\\d]+)\\)/g.exec(b);b=f?\"rgba(\"+f[1]+\",1)\":b}else b=h.hex(b)?T(b):h.hsl(b)?U(b):void 0;else f=(f=y(b))?b.substr(0,b.length-f.length):b,b=c&&!/\\s/g.test(b)?f+c:f;b+=\"\";return{original:b,numbers:b.match(d)?b.match(d).map(Number):[0],strings:h.str(a)||c?b.split(d):[]}}function P(a){a=a?p(h.arr(a)?a.map(m):m(a)):[];return r(a,\nfunction(a,d,b){return b.indexOf(a)===d})}function Z(a){var c=P(a);return c.map(function(a,b){return{target:a,id:b,total:c.length}})}function aa(a,c){var d=C(c);if(h.arr(a)){var b=a.length;2!==b||h.obj(a[0])?h.fnc(c.duration)||(d.duration=c.duration/b):a={value:a}}return m(a).map(function(a,b){b=b?0:c.delay;a=h.obj(a)&&!h.pth(a)?a:{value:a};h.und(a.delay)&&(a.delay=b);return a}).map(function(a){return z(a,d)})}function ba(a,c){var d={},b;for(b in a){var f=I(a[b],c);h.arr(f)&&(f=f.map(function(a){return I(a,\nc)}),1===f.length&&(f=f[0]));d[b]=f}d.duration=parseFloat(d.duration);d.delay=parseFloat(d.delay);return d}function ca(a){return h.arr(a)?A.apply(this,a):Q[a]}function da(a,c){var d;return a.tweens.map(function(b){b=ba(b,c);var f=b.value,e=K(c.target,a.name),k=d?d.to.original:e,k=h.arr(f)?f[0]:k,w=L(h.arr(f)?f[1]:f,k),e=y(w)||y(k)||y(e);b.from=O(k,e);b.to=O(w,e);b.start=d?d.end:a.offset;b.end=b.start+b.delay+b.duration;b.easing=ca(b.easing);b.elasticity=(1E3-Math.min(Math.max(b.elasticity,1),999))/\n1E3;b.isPath=h.pth(f);b.isColor=h.col(b.from.original);b.isColor&&(b.round=1);return d=b})}function ea(a,c){return r(p(a.map(function(a){return c.map(function(b){var c=J(a.target,b.name);if(c){var d=da(b,a);b={type:c,property:b.name,animatable:a,tweens:d,duration:d[d.length-1].end,delay:d[0].delay}}else b=void 0;return b})})),function(a){return!h.und(a)})}function R(a,c,d,b){var f=\"delay\"===a;return c.length?(f?Math.min:Math.max).apply(Math,c.map(function(b){return b[a]})):f?b.delay:d.offset+b.delay+\nb.duration}function fa(a){var c=D(ga,a),d=D(S,a),b=Z(a.targets),f=[],e=z(c,d),k;for(k in a)e.hasOwnProperty(k)||\"targets\"===k||f.push({name:k,offset:e.offset,tweens:aa(a[k],d)});a=ea(b,f);return z(c,{children:[],animatables:b,animations:a,duration:R(\"duration\",a,c,d),delay:R(\"delay\",a,c,d)})}function q(a){function c(){return window.Promise&&new Promise(function(a){return p=a})}function d(a){return g.reversed?g.duration-a:a}function b(a){for(var b=0,c={},d=g.animations,f=d.length;b<f;){var e=d[b],\nk=e.animatable,h=e.tweens,n=h.length-1,l=h[n];n&&(l=r(h,function(b){return a<b.end})[0]||l);for(var h=Math.min(Math.max(a-l.start-l.delay,0),l.duration)/l.duration,w=isNaN(h)?1:l.easing(h,l.elasticity),h=l.to.strings,p=l.round,n=[],m=void 0,m=l.to.numbers.length,t=0;t<m;t++){var x=void 0,x=l.to.numbers[t],q=l.from.numbers[t],x=l.isPath?Y(l.value,w*x):q+w*(x-q);p&&(l.isColor&&2<t||(x=Math.round(x*p)/p));n.push(x)}if(l=h.length)for(m=h[0],w=0;w<l;w++)p=h[w+1],t=n[w],isNaN(t)||(m=p?m+(t+p):m+(t+\" \"));\nelse m=n[0];ha[e.type](k.target,e.property,m,c,k.id);e.currentValue=m;b++}if(b=Object.keys(c).length)for(d=0;d<b;d++)H||(H=E(document.body,\"transform\")?\"transform\":\"-webkit-transform\"),g.animatables[d].target.style[H]=c[d].join(\" \");g.currentTime=a;g.progress=a/g.duration*100}function f(a){if(g[a])g[a](g)}function e(){g.remaining&&!0!==g.remaining&&g.remaining--}function k(a){var k=g.duration,n=g.offset,w=n+g.delay,r=g.currentTime,x=g.reversed,q=d(a);if(g.children.length){var u=g.children,v=u.length;\nif(q>=g.currentTime)for(var G=0;G<v;G++)u[G].seek(q);else for(;v--;)u[v].seek(q)}if(q>=w||!k)g.began||(g.began=!0,f(\"begin\")),f(\"run\");if(q>n&&q<k)b(q);else if(q<=n&&0!==r&&(b(0),x&&e()),q>=k&&r!==k||!k)b(k),x||e();f(\"update\");a>=k&&(g.remaining?(t=h,\"alternate\"===g.direction&&(g.reversed=!g.reversed)):(g.pause(),g.completed||(g.completed=!0,f(\"complete\"),\"Promise\"in window&&(p(),m=c()))),l=0)}a=void 0===a?{}:a;var h,t,l=0,p=null,m=c(),g=fa(a);g.reset=function(){var a=g.direction,c=g.loop;g.currentTime=\n0;g.progress=0;g.paused=!0;g.began=!1;g.completed=!1;g.reversed=\"reverse\"===a;g.remaining=\"alternate\"===a&&1===c?2:c;b(0);for(a=g.children.length;a--;)g.children[a].reset()};g.tick=function(a){h=a;t||(t=h);k((l+h-t)*q.speed)};g.seek=function(a){k(d(a))};g.pause=function(){var a=v.indexOf(g);-1<a&&v.splice(a,1);g.paused=!0};g.play=function(){g.paused&&(g.paused=!1,t=0,l=d(g.currentTime),v.push(g),B||ia())};g.reverse=function(){g.reversed=!g.reversed;t=0;l=d(g.currentTime)};g.restart=function(){g.pause();\ng.reset();g.play()};g.finished=m;g.reset();g.autoplay&&g.play();return g}var ga={update:void 0,begin:void 0,run:void 0,complete:void 0,loop:1,direction:\"normal\",autoplay:!0,offset:0},S={duration:1E3,delay:0,easing:\"easeOutElastic\",elasticity:500,round:0},W=\"translateX translateY translateZ rotate rotateX rotateY rotateZ scale scaleX scaleY scaleZ skewX skewY perspective\".split(\" \"),H,h={arr:function(a){return Array.isArray(a)},obj:function(a){return-1<Object.prototype.toString.call(a).indexOf(\"Object\")},\npth:function(a){return h.obj(a)&&a.hasOwnProperty(\"totalLength\")},svg:function(a){return a instanceof SVGElement},dom:function(a){return a.nodeType||h.svg(a)},str:function(a){return\"string\"===typeof a},fnc:function(a){return\"function\"===typeof a},und:function(a){return\"undefined\"===typeof a},hex:function(a){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)},rgb:function(a){return/^rgb/.test(a)},hsl:function(a){return/^hsl/.test(a)},col:function(a){return h.hex(a)||h.rgb(a)||h.hsl(a)}},A=function(){function a(a,\nd,b){return(((1-3*b+3*d)*a+(3*b-6*d))*a+3*d)*a}return function(c,d,b,f){if(0<=c&&1>=c&&0<=b&&1>=b){var e=new Float32Array(11);if(c!==d||b!==f)for(var k=0;11>k;++k)e[k]=a(.1*k,c,b);return function(k){if(c===d&&b===f)return k;if(0===k)return 0;if(1===k)return 1;for(var h=0,l=1;10!==l&&e[l]<=k;++l)h+=.1;--l;var l=h+(k-e[l])/(e[l+1]-e[l])*.1,n=3*(1-3*b+3*c)*l*l+2*(3*b-6*c)*l+3*c;if(.001<=n){for(h=0;4>h;++h){n=3*(1-3*b+3*c)*l*l+2*(3*b-6*c)*l+3*c;if(0===n)break;var m=a(l,c,b)-k,l=l-m/n}k=l}else if(0===\nn)k=l;else{var l=h,h=h+.1,g=0;do m=l+(h-l)/2,n=a(m,c,b)-k,0<n?h=m:l=m;while(1e-7<Math.abs(n)&&10>++g);k=m}return a(k,d,f)}}}}(),Q=function(){function a(a,b){return 0===a||1===a?a:-Math.pow(2,10*(a-1))*Math.sin(2*(a-1-b/(2*Math.PI)*Math.asin(1))*Math.PI/b)}var c=\"Quad Cubic Quart Quint Sine Expo Circ Back Elastic\".split(\" \"),d={In:[[.55,.085,.68,.53],[.55,.055,.675,.19],[.895,.03,.685,.22],[.755,.05,.855,.06],[.47,0,.745,.715],[.95,.05,.795,.035],[.6,.04,.98,.335],[.6,-.28,.735,.045],a],Out:[[.25,\n.46,.45,.94],[.215,.61,.355,1],[.165,.84,.44,1],[.23,1,.32,1],[.39,.575,.565,1],[.19,1,.22,1],[.075,.82,.165,1],[.175,.885,.32,1.275],function(b,c){return 1-a(1-b,c)}],InOut:[[.455,.03,.515,.955],[.645,.045,.355,1],[.77,0,.175,1],[.86,0,.07,1],[.445,.05,.55,.95],[1,0,0,1],[.785,.135,.15,.86],[.68,-.55,.265,1.55],function(b,c){return.5>b?a(2*b,c)/2:1-a(-2*b+2,c)/2}]},b={linear:A(.25,.25,.75,.75)},f={},e;for(e in d)f.type=e,d[f.type].forEach(function(a){return function(d,f){b[\"ease\"+a.type+c[f]]=h.fnc(d)?\nd:A.apply($jscomp$this,d)}}(f)),f={type:f.type};return b}(),ha={css:function(a,c,d){return a.style[c]=d},attribute:function(a,c,d){return a.setAttribute(c,d)},object:function(a,c,d){return a[c]=d},transform:function(a,c,d,b,f){b[f]||(b[f]=[]);b[f].push(c+\"(\"+d+\")\")}},v=[],B=0,ia=function(){function a(){B=requestAnimationFrame(c)}function c(c){var b=v.length;if(b){for(var d=0;d<b;)v[d]&&v[d].tick(c),d++;a()}else cancelAnimationFrame(B),B=0}return a}();q.version=\"2.2.0\";q.speed=1;q.running=v;q.remove=\nfunction(a){a=P(a);for(var c=v.length;c--;)for(var d=v[c],b=d.animations,f=b.length;f--;)u(a,b[f].animatable.target)&&(b.splice(f,1),b.length||d.pause())};q.getValue=K;q.path=function(a,c){var d=h.str(a)?e(a)[0]:a,b=c||100;return function(a){return{el:d,property:a,totalLength:N(d)*(b/100)}}};q.setDashoffset=function(a){var c=N(a);a.setAttribute(\"stroke-dasharray\",c);return c};q.bezier=A;q.easings=Q;q.timeline=function(a){var c=q(a);c.pause();c.duration=0;c.add=function(d){c.children.forEach(function(a){a.began=\n!0;a.completed=!0});m(d).forEach(function(b){var d=z(b,D(S,a||{}));d.targets=d.targets||a.targets;b=c.duration;var e=d.offset;d.autoplay=!1;d.direction=c.direction;d.offset=h.und(e)?b:L(e,b);c.began=!0;c.completed=!0;c.seek(d.offset);d=q(d);d.began=!0;d.completed=!0;d.duration>b&&(c.duration=d.duration);c.children.push(d)});c.seek(0);c.reset();c.autoplay&&c.restart();return c};return c};q.random=function(a,c){return Math.floor(Math.random()*(c-a+1))+a};return q});",
    "module.exports = function numtype(num, def) {\n\treturn typeof num === 'number'\n\t\t? num \n\t\t: (typeof def === 'number' ? def : 0)\n}",
    "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n",
    "'use strict';\n// For more information about browser field, check out the browser field at https://github.com/substack/browserify-handbook#browser-field.\n\nmodule.exports = {\n    // Create a <link> tag with optional data attributes\n    createLink: function(href, attributes) {\n        var head = document.head || document.getElementsByTagName('head')[0];\n        var link = document.createElement('link');\n\n        link.href = href;\n        link.rel = 'stylesheet';\n\n        for (var key in attributes) {\n            if ( ! attributes.hasOwnProperty(key)) {\n                continue;\n            }\n            var value = attributes[key];\n            link.setAttribute('data-' + key, value);\n        }\n\n        head.appendChild(link);\n    },\n    // Create a <style> tag with optional data attributes\n    createStyle: function(cssText, attributes) {\n        var head = document.head || document.getElementsByTagName('head')[0],\n            style = document.createElement('style');\n\n        style.type = 'text/css';\n\n        for (var key in attributes) {\n            if ( ! attributes.hasOwnProperty(key)) {\n                continue;\n            }\n            var value = attributes[key];\n            style.setAttribute('data-' + key, value);\n        }\n        \n        if (style.sheet) { // for jsdom and IE9+\n            style.innerHTML = cssText;\n            style.sheet.cssText = cssText;\n            head.appendChild(style);\n        } else if (style.styleSheet) { // for IE8 and below\n            head.appendChild(style);\n            style.styleSheet.cssText = cssText;\n        } else { // for Chrome, Firefox, and Safari\n            style.appendChild(document.createTextNode(cssText));\n            head.appendChild(style);\n        }\n    }\n};\n",
    "var Buffer = require('buffer').Buffer; // for use with browserify\n\nmodule.exports = function (a, b) {\n    if (!Buffer.isBuffer(a)) return undefined;\n    if (!Buffer.isBuffer(b)) return undefined;\n    if (typeof a.equals === 'function') return a.equals(b);\n    if (a.length !== b.length) return false;\n    \n    for (var i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    \n    return true;\n};\n",
    "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n",
    "\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return ('WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ');\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n",
    "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = Array.prototype.slice.call(arguments);\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if ('function' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n",
    "'use strict';\nvar isObj = require('is-obj');\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Sources cannot be null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction assignKey(to, from, key) {\n\tvar val = from[key];\n\n\tif (val === undefined || val === null) {\n\t\treturn;\n\t}\n\n\tif (hasOwnProperty.call(to, key)) {\n\t\tif (to[key] === undefined || to[key] === null) {\n\t\t\tthrow new TypeError('Cannot convert undefined or null to object (' + key + ')');\n\t\t}\n\t}\n\n\tif (!hasOwnProperty.call(to, key) || !isObj(val)) {\n\t\tto[key] = val;\n\t} else {\n\t\tto[key] = assign(Object(to[key]), from[key]);\n\t}\n}\n\nfunction assign(to, from) {\n\tif (to === from) {\n\t\treturn to;\n\t}\n\n\tfrom = Object(from);\n\n\tfor (var key in from) {\n\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\tassignKey(to, from, key);\n\t\t}\n\t}\n\n\tif (Object.getOwnPropertySymbols) {\n\t\tvar symbols = Object.getOwnPropertySymbols(from);\n\n\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\tassignKey(to, from, symbols[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n}\n\nmodule.exports = function deepAssign(target) {\n\ttarget = toObject(target);\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tassign(target, arguments[s]);\n\t}\n\n\treturn target;\n};\n",
    "/*! (C) WebReflection Mit Style License */\n(function(t,n,r,i){\"use strict\";function st(e,t){for(var n=0,r=e.length;n<r;n++)gt(e[n],t)}function ot(e){for(var t=0,n=e.length,r;t<n;t++)r=e[t],it(r,w[at(r)])}function ut(e){return function(t){F(t)&&(gt(t,e),st(t.querySelectorAll(E),e))}}function at(e){var t=R.call(e,\"is\"),n=e.nodeName.toUpperCase(),r=x.call(b,t?m+t.toUpperCase():v+n);return t&&-1<r&&!ft(n,t)?-1:r}function ft(e,t){return-1<E.indexOf(e+'[is=\"'+t+'\"]')}function lt(e){var t=e.currentTarget,n=e.attrChange,r=e.attrName,i=e.target;Y&&(!i||i===t)&&t.attributeChangedCallback&&r!==\"style\"&&e.prevValue!==e.newValue&&t.attributeChangedCallback(r,n===e[f]?null:e.prevValue,n===e[c]?null:e.newValue)}function ct(e){var t=ut(e);return function(e){$.push(t,e.target)}}function ht(e){G&&(G=!1,e.currentTarget.removeEventListener(p,ht)),st((e.target||n).querySelectorAll(E),e.detail===u?u:o),j&&vt()}function pt(e,t){var n=this;U.call(n,e,t),Z.call(n,{target:n})}function dt(e,t){P(e,t),nt?nt.observe(e,X):(Q&&(e.setAttribute=pt,e[s]=tt(e),e.addEventListener(d,Z)),e.addEventListener(h,lt)),e.createdCallback&&Y&&(e.created=!0,e.createdCallback(),e.created=!1)}function vt(){for(var e,t=0,n=I.length;t<n;t++)e=I[t],S.contains(e)||(n--,I.splice(t--,1),gt(e,u))}function mt(e){throw new Error(\"A \"+e+\" type is already registered\")}function gt(e,t){var n,r=at(e);-1<r&&(rt(e,w[r]),r=0,t===o&&!e[o]?(e[u]=!1,e[o]=!0,r=1,j&&x.call(I,e)<0&&I.push(e)):t===u&&!e[u]&&(e[o]=!1,e[u]=!0,r=1),r&&(n=e[t+\"Callback\"])&&n.call(e))}if(i in n)return;var s=\"__\"+i+(Math.random()*1e5>>0),o=\"attached\",u=\"detached\",a=\"extends\",f=\"ADDITION\",l=\"MODIFICATION\",c=\"REMOVAL\",h=\"DOMAttrModified\",p=\"DOMContentLoaded\",d=\"DOMSubtreeModified\",v=\"<\",m=\"=\",g=/^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,y=[\"ANNOTATION-XML\",\"COLOR-PROFILE\",\"FONT-FACE\",\"FONT-FACE-SRC\",\"FONT-FACE-URI\",\"FONT-FACE-FORMAT\",\"FONT-FACE-NAME\",\"MISSING-GLYPH\"],b=[],w=[],E=\"\",S=n.documentElement,x=b.indexOf||function(e){for(var t=this.length;t--&&this[t]!==e;);return t},T=r.prototype,N=T.hasOwnProperty,C=T.isPrototypeOf,k=r.defineProperty,L=r.getOwnPropertyDescriptor,A=r.getOwnPropertyNames,O=r.getPrototypeOf,M=r.setPrototypeOf,_=!!r.__proto__,D=r.create||function yt(e){return e?(yt.prototype=e,new yt):this},P=M||(_?function(e,t){return e.__proto__=t,e}:A&&L?function(){function e(e,t){for(var n,r=A(t),i=0,s=r.length;i<s;i++)n=r[i],N.call(e,n)||k(e,n,L(t,n))}return function(t,n){do e(t,n);while((n=O(n))&&!C.call(n,t));return t}}():function(e,t){for(var n in t)e[n]=t[n];return e}),H=t.MutationObserver||t.WebKitMutationObserver,B=(t.HTMLElement||t.Element||t.Node).prototype,j=!C.call(B,S),F=j?function(e){return e.nodeType===1}:function(e){return C.call(B,e)},I=j&&[],q=B.cloneNode,R=B.getAttribute,U=B.setAttribute,z=B.removeAttribute,W=n.createElement,X=H&&{attributes:!0,characterData:!0,attributeOldValue:!0},V=H||function(e){Q=!1,S.removeEventListener(h,V)},$,J=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.msRequestAnimationFrame||function(e){setTimeout(e,10)},K=!1,Q=!0,G=!0,Y=!0,Z,et,tt,nt,rt,it;M||_?(rt=function(e,t){C.call(t,e)||dt(e,t)},it=dt):(rt=function(e,t){e[s]||(e[s]=r(!0),dt(e,t))},it=rt),j?(Q=!1,function(){var t=L(B,\"addEventListener\"),n=t.value,r=function(e){var t=new CustomEvent(h,{bubbles:!0});t.attrName=e,t.prevValue=R.call(this,e),t.newValue=null,t[c]=t.attrChange=2,z.call(this,e),this.dispatchEvent(t)},i=function(t,n){var r=this.hasAttribute(t),i=r&&R.call(this,t);e=new CustomEvent(h,{bubbles:!0}),U.call(this,t,n),e.attrName=t,e.prevValue=r?i:null,e.newValue=n,r?e[l]=e.attrChange=1:e[f]=e.attrChange=0,this.dispatchEvent(e)},o=function(e){var t=e.currentTarget,n=t[s],r=e.propertyName,i;n.hasOwnProperty(r)&&(n=n[r],i=new CustomEvent(h,{bubbles:!0}),i.attrName=n.name,i.prevValue=n.value||null,i.newValue=n.value=t[r]||null,i.prevValue==null?i[f]=i.attrChange=0:i[l]=i.attrChange=1,t.dispatchEvent(i))};t.value=function(e,t,u){e===h&&this.attributeChangedCallback&&this.setAttribute!==i&&(this[s]={className:{name:\"class\",value:this.className}},this.setAttribute=i,this.removeAttribute=r,n.call(this,\"propertychange\",o)),n.call(this,e,t,u)},k(B,\"addEventListener\",t)}()):H||(S.addEventListener(h,V),S.setAttribute(s,1),S.removeAttribute(s),Q&&(Z=function(e){var t=this,n,r,i;if(t===e.target){n=t[s],t[s]=r=tt(t);for(i in r){if(!(i in n))return et(0,t,i,n[i],r[i],f);if(r[i]!==n[i])return et(1,t,i,n[i],r[i],l)}for(i in n)if(!(i in r))return et(2,t,i,n[i],r[i],c)}},et=function(e,t,n,r,i,s){var o={attrChange:e,currentTarget:t,attrName:n,prevValue:r,newValue:i};o[s]=e,lt(o)},tt=function(e){for(var t,n,r={},i=e.attributes,s=0,o=i.length;s<o;s++)t=i[s],n=t.name,n!==\"setAttribute\"&&(r[n]=t.value);return r})),n[i]=function(t,r){c=t.toUpperCase(),K||(K=!0,H?(nt=function(e,t){function n(e,t){for(var n=0,r=e.length;n<r;t(e[n++]));}return new H(function(r){for(var i,s,o,u=0,a=r.length;u<a;u++)i=r[u],i.type===\"childList\"?(n(i.addedNodes,e),n(i.removedNodes,t)):(s=i.target,Y&&s.attributeChangedCallback&&i.attributeName!==\"style\"&&(o=R.call(s,i.attributeName),o!==i.oldValue&&s.attributeChangedCallback(i.attributeName,i.oldValue,o)))})}(ut(o),ut(u)),nt.observe(n,{childList:!0,subtree:!0})):($=[],J(function d(){while($.length)$.shift().call(null,$.shift());J(d)}),n.addEventListener(\"DOMNodeInserted\",ct(o)),n.addEventListener(\"DOMNodeRemoved\",ct(u))),n.addEventListener(p,ht),n.addEventListener(\"readystatechange\",ht),n.createElement=function(e,t){var r=W.apply(n,arguments),i=\"\"+e,s=x.call(b,(t?m:v)+(t||i).toUpperCase()),o=-1<s;return t&&(r.setAttribute(\"is\",t=t.toLowerCase()),o&&(o=ft(i.toUpperCase(),t))),Y=!n.createElement.innerHTMLHelper,o&&it(r,w[s]),r},B.cloneNode=function(e){var t=q.call(this,!!e),n=at(t);return-1<n&&it(t,w[n]),e&&ot(t.querySelectorAll(E)),t}),-2<x.call(b,m+c)+x.call(b,v+c)&&mt(t);if(!g.test(c)||-1<x.call(y,c))throw new Error(\"The type \"+t+\" is invalid\");var i=function(){return f?n.createElement(l,c):n.createElement(l)},s=r||T,f=N.call(s,a),l=f?r[a].toUpperCase():c,c,h;return f&&-1<x.call(b,v+l)&&mt(l),h=b.push((f?m:v)+c)-1,E=E.concat(E.length?\",\":\"\",f?l+'[is=\"'+t.toLowerCase()+'\"]':l),i.prototype=w[h]=N.call(s,\"prototype\")?s.prototype:D(B),st(n.querySelectorAll(E),o),i}})(window,document,Object,\"registerElement\");",
    "module.exports = function(dtype) {\n  switch (dtype) {\n    case 'int8':\n      return Int8Array\n    case 'int16':\n      return Int16Array\n    case 'int32':\n      return Int32Array\n    case 'uint8':\n      return Uint8Array\n    case 'uint16':\n      return Uint16Array\n    case 'uint32':\n      return Uint32Array\n    case 'float32':\n      return Float32Array\n    case 'float64':\n      return Float64Array\n    case 'array':\n      return Array\n    case 'uint8_clamped':\n      return Uint8ClampedArray\n  }\n}\n",
    "/*eslint new-cap:0*/\nvar dtype = require('dtype')\n\nmodule.exports = flattenVertexData\n\nfunction flattenVertexData (data, output, offset) {\n  if (!data) throw new TypeError('must specify data as first parameter')\n  offset = +(offset || 0) | 0\n\n  if (Array.isArray(data) && (data[0] && typeof data[0][0] === 'number')) {\n    var dim = data[0].length\n    var length = data.length * dim\n    var i, j, k, l\n\n    // no output specified, create a new typed array\n    if (!output || typeof output === 'string') {\n      output = new (dtype(output || 'float32'))(length + offset)\n    }\n\n    var dstLength = output.length - offset\n    if (length !== dstLength) {\n      throw new Error('source length ' + length + ' (' + dim + 'x' + data.length + ')' +\n        ' does not match destination length ' + dstLength)\n    }\n\n    for (i = 0, k = offset; i < data.length; i++) {\n      for (j = 0; j < dim; j++) {\n        output[k++] = data[i][j] === null ? NaN : data[i][j]\n      }\n    }\n  } else {\n    if (!output || typeof output === 'string') {\n      // no output, create a new one\n      var Ctor = dtype(output || 'float32')\n\n      // handle arrays separately due to possible nulls\n      if (Array.isArray(data) || output === 'array') {\n        output = new Ctor(data.length + offset)\n        for (i = 0, k = offset, l = output.length; k < l; k++, i++) {\n          output[k] = data[i] === null ? NaN : data[i]\n        }\n      } else {\n        if (offset === 0) {\n          output = new Ctor(data)\n        } else {\n          output = new Ctor(data.length + offset)\n\n          output.set(data, offset)\n        }\n      }\n    } else {\n      // store output in existing array\n      output.set(data, offset)\n    }\n  }\n\n  return output\n}\n",
    "var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n",
    "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n",
    "if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n",
    "/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n",
    "module.exports = isFunction\n\nvar toString = Object.prototype.toString\n\nfunction isFunction (fn) {\n  if (!fn) {\n    return false\n  }\n  var string = toString.call(fn)\n  return string === '[object Function]' ||\n    (typeof fn === 'function' && string !== '[object RegExp]') ||\n    (typeof window !== 'undefined' &&\n     // IE8 and below\n     (fn === window.setTimeout ||\n      fn === window.alert ||\n      fn === window.confirm ||\n      fn === window.prompt))\n};\n",
    "'use strict';\nmodule.exports = function (x) {\n\tvar type = typeof x;\n\treturn x !== null && (type === 'object' || type === 'function');\n};\n",
    "var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n",
    "var wordWrap = require('word-wrapper')\nvar xtend = require('xtend')\nvar number = require('as-number')\n\nvar X_HEIGHTS = ['x', 'e', 'a', 'o', 'n', 's', 'r', 'c', 'u', 'm', 'v', 'w', 'z']\nvar M_WIDTHS = ['m', 'w']\nvar CAP_HEIGHTS = ['H', 'I', 'N', 'E', 'F', 'K', 'L', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n\nvar TAB_ID = '\\t'.charCodeAt(0)\nvar SPACE_ID = ' '.charCodeAt(0)\nvar ALIGN_LEFT = 0, \n    ALIGN_CENTER = 1, \n    ALIGN_RIGHT = 2\n\nmodule.exports = function createLayout(opt) {\n  return new TextLayout(opt)\n}\n\nfunction TextLayout(opt) {\n  this.glyphs = []\n  this._measure = this.computeMetrics.bind(this)\n  this.update(opt)\n}\n\nTextLayout.prototype.update = function(opt) {\n  opt = xtend({\n    measure: this._measure\n  }, opt)\n  this._opt = opt\n  this._opt.tabSize = number(this._opt.tabSize, 4)\n\n  if (!opt.font)\n    throw new Error('must provide a valid bitmap font')\n\n  var glyphs = this.glyphs\n  var text = opt.text||'' \n  var font = opt.font\n  this._setupSpaceGlyphs(font)\n  \n  var lines = wordWrap.lines(text, opt)\n  var minWidth = opt.width || 0\n\n  //clear glyphs\n  glyphs.length = 0\n\n  //get max line width\n  var maxLineWidth = lines.reduce(function(prev, line) {\n    return Math.max(prev, line.width, minWidth)\n  }, 0)\n\n  //the pen position\n  var x = 0\n  var y = 0\n  var lineHeight = number(opt.lineHeight, font.common.lineHeight)\n  var baseline = font.common.base\n  var descender = lineHeight-baseline\n  var letterSpacing = opt.letterSpacing || 0\n  var height = lineHeight * lines.length - descender\n  var align = getAlignType(this._opt.align)\n\n  //draw text along baseline\n  y -= height\n  \n  //the metrics for this text layout\n  this._width = maxLineWidth\n  this._height = height\n  this._descender = lineHeight - baseline\n  this._baseline = baseline\n  this._xHeight = getXHeight(font)\n  this._capHeight = getCapHeight(font)\n  this._lineHeight = lineHeight\n  this._ascender = lineHeight - descender - this._xHeight\n    \n  //layout each glyph\n  var self = this\n  lines.forEach(function(line, lineIndex) {\n    var start = line.start\n    var end = line.end\n    var lineWidth = line.width\n    var lastGlyph\n    \n    //for each glyph in that line...\n    for (var i=start; i<end; i++) {\n      var id = text.charCodeAt(i)\n      var glyph = self.getGlyph(font, id)\n      if (glyph) {\n        if (lastGlyph) \n          x += getKerning(font, lastGlyph.id, glyph.id)\n\n        var tx = x\n        if (align === ALIGN_CENTER) \n          tx += (maxLineWidth-lineWidth)/2\n        else if (align === ALIGN_RIGHT)\n          tx += (maxLineWidth-lineWidth)\n\n        glyphs.push({\n          position: [tx, y],\n          data: glyph,\n          index: i,\n          line: lineIndex\n        })  \n\n        //move pen forward\n        x += glyph.xadvance + letterSpacing\n        lastGlyph = glyph\n      }\n    }\n\n    //next line down\n    y += lineHeight\n    x = 0\n  })\n  this._linesTotal = lines.length;\n}\n\nTextLayout.prototype._setupSpaceGlyphs = function(font) {\n  //These are fallbacks, when the font doesn't include\n  //' ' or '\\t' glyphs\n  this._fallbackSpaceGlyph = null\n  this._fallbackTabGlyph = null\n\n  if (!font.chars || font.chars.length === 0)\n    return\n\n  //try to get space glyph\n  //then fall back to the 'm' or 'w' glyphs\n  //then fall back to the first glyph available\n  var space = getGlyphById(font, SPACE_ID) \n          || getMGlyph(font) \n          || font.chars[0]\n\n  //and create a fallback for tab\n  var tabWidth = this._opt.tabSize * space.xadvance\n  this._fallbackSpaceGlyph = space\n  this._fallbackTabGlyph = xtend(space, {\n    x: 0, y: 0, xadvance: tabWidth, id: TAB_ID, \n    xoffset: 0, yoffset: 0, width: 0, height: 0\n  })\n}\n\nTextLayout.prototype.getGlyph = function(font, id) {\n  var glyph = getGlyphById(font, id)\n  if (glyph)\n    return glyph\n  else if (id === TAB_ID) \n    return this._fallbackTabGlyph\n  else if (id === SPACE_ID) \n    return this._fallbackSpaceGlyph\n  return null\n}\n\nTextLayout.prototype.computeMetrics = function(text, start, end, width) {\n  var letterSpacing = this._opt.letterSpacing || 0\n  var font = this._opt.font\n  var curPen = 0\n  var curWidth = 0\n  var count = 0\n  var glyph\n  var lastGlyph\n\n  if (!font.chars || font.chars.length === 0) {\n    return {\n      start: start,\n      end: start,\n      width: 0\n    }\n  }\n\n  end = Math.min(text.length, end)\n  for (var i=start; i < end; i++) {\n    var id = text.charCodeAt(i)\n    var glyph = this.getGlyph(font, id)\n\n    if (glyph) {\n      //move pen forward\n      var xoff = glyph.xoffset\n      var kern = lastGlyph ? getKerning(font, lastGlyph.id, glyph.id) : 0\n      curPen += kern\n\n      var nextPen = curPen + glyph.xadvance + letterSpacing\n      var nextWidth = curPen + glyph.width\n\n      //we've hit our limit; we can't move onto the next glyph\n      if (nextWidth >= width || nextPen >= width)\n        break\n\n      //otherwise continue along our line\n      curPen = nextPen\n      curWidth = nextWidth\n      lastGlyph = glyph\n    }\n    count++\n  }\n  \n  //make sure rightmost edge lines up with rendered glyphs\n  if (lastGlyph)\n    curWidth += lastGlyph.xoffset\n\n  return {\n    start: start,\n    end: start + count,\n    width: curWidth\n  }\n}\n\n//getters for the private vars\n;['width', 'height', \n  'descender', 'ascender',\n  'xHeight', 'baseline',\n  'capHeight',\n  'lineHeight' ].forEach(addGetter)\n\nfunction addGetter(name) {\n  Object.defineProperty(TextLayout.prototype, name, {\n    get: wrapper(name),\n    configurable: true\n  })\n}\n\n//create lookups for private vars\nfunction wrapper(name) {\n  return (new Function([\n    'return function '+name+'() {',\n    '  return this._'+name,\n    '}'\n  ].join('\\n')))()\n}\n\nfunction getGlyphById(font, id) {\n  if (!font.chars || font.chars.length === 0)\n    return null\n\n  var glyphIdx = findChar(font.chars, id)\n  if (glyphIdx >= 0)\n    return font.chars[glyphIdx]\n  return null\n}\n\nfunction getXHeight(font) {\n  for (var i=0; i<X_HEIGHTS.length; i++) {\n    var id = X_HEIGHTS[i].charCodeAt(0)\n    var idx = findChar(font.chars, id)\n    if (idx >= 0) \n      return font.chars[idx].height\n  }\n  return 0\n}\n\nfunction getMGlyph(font) {\n  for (var i=0; i<M_WIDTHS.length; i++) {\n    var id = M_WIDTHS[i].charCodeAt(0)\n    var idx = findChar(font.chars, id)\n    if (idx >= 0) \n      return font.chars[idx]\n  }\n  return 0\n}\n\nfunction getCapHeight(font) {\n  for (var i=0; i<CAP_HEIGHTS.length; i++) {\n    var id = CAP_HEIGHTS[i].charCodeAt(0)\n    var idx = findChar(font.chars, id)\n    if (idx >= 0) \n      return font.chars[idx].height\n  }\n  return 0\n}\n\nfunction getKerning(font, left, right) {\n  if (!font.kernings || font.kernings.length === 0)\n    return 0\n\n  var table = font.kernings\n  for (var i=0; i<table.length; i++) {\n    var kern = table[i]\n    if (kern.first === left && kern.second === right)\n      return kern.amount\n  }\n  return 0\n}\n\nfunction getAlignType(align) {\n  if (align === 'center')\n    return ALIGN_CENTER\n  else if (align === 'right')\n    return ALIGN_RIGHT\n  return ALIGN_LEFT\n}\n\nfunction findChar (array, value, start) {\n  start = start || 0\n  for (var i = start; i < array.length; i++) {\n    if (array[i].id === value) {\n      return i\n    }\n  }\n  return -1\n}",
    "var xhr = require('xhr')\nvar noop = function(){}\nvar parseASCII = require('parse-bmfont-ascii')\nvar parseXML = require('parse-bmfont-xml')\nvar readBinary = require('parse-bmfont-binary')\nvar isBinaryFormat = require('./lib/is-binary')\nvar xtend = require('xtend')\n\nvar xml2 = (function hasXML2() {\n  return self.XMLHttpRequest && \"withCredentials\" in new XMLHttpRequest\n})()\n\nmodule.exports = function(opt, cb) {\n  cb = typeof cb === 'function' ? cb : noop\n\n  if (typeof opt === 'string')\n    opt = { uri: opt }\n  else if (!opt)\n    opt = {}\n\n  var expectBinary = opt.binary\n  if (expectBinary)\n    opt = getBinaryOpts(opt)\n\n  xhr(opt, function(err, res, body) {\n    if (err)\n      return cb(err)\n    if (!/^2/.test(res.statusCode))\n      return cb(new Error('http status code: '+res.statusCode))\n    if (!body)\n      return cb(new Error('no body result'))\n\n    var binary = false \n\n    //if the response type is an array buffer,\n    //we need to convert it into a regular Buffer object\n    if (isArrayBuffer(body)) {\n      var array = new Uint8Array(body)\n      body = Buffer.from(array, 'binary')\n    }\n\n    //now check the string/Buffer response\n    //and see if it has a binary BMF header\n    if (isBinaryFormat(body)) {\n      binary = true\n      //if we have a string, turn it into a Buffer\n      if (typeof body === 'string') \n        body = Buffer.from(body, 'binary')\n    } \n\n    //we are not parsing a binary format, just ASCII/XML/etc\n    if (!binary) {\n      //might still be a buffer if responseType is 'arraybuffer'\n      if (Buffer.isBuffer(body))\n        body = body.toString(opt.encoding)\n      body = body.trim()\n    }\n\n    var result\n    try {\n      var type = res.headers['content-type']\n      if (binary)\n        result = readBinary(body)\n      else if (/json/.test(type) || body.charAt(0) === '{')\n        result = JSON.parse(body)\n      else if (/xml/.test(type)  || body.charAt(0) === '<')\n        result = parseXML(body)\n      else\n        result = parseASCII(body)\n    } catch (e) {\n      cb(new Error('error parsing font '+e.message))\n      cb = noop\n    }\n    cb(null, result)\n  })\n}\n\nfunction isArrayBuffer(arr) {\n  var str = Object.prototype.toString\n  return str.call(arr) === '[object ArrayBuffer]'\n}\n\nfunction getBinaryOpts(opt) {\n  //IE10+ and other modern browsers support array buffers\n  if (xml2)\n    return xtend(opt, { responseType: 'arraybuffer' })\n  \n  if (typeof self.XMLHttpRequest === 'undefined')\n    throw new Error('your browser does not support XHR loading')\n\n  //IE9 and XML1 browsers could still use an override\n  var req = new self.XMLHttpRequest()\n  req.overrideMimeType('text/plain; charset=x-user-defined')\n  return xtend({\n    xhr: req\n  }, opt)\n}\n",
    "var equal = require('buffer-equal')\nvar HEADER = Buffer.from([66, 77, 70, 3])\n\nmodule.exports = function(buf) {\n  if (typeof buf === 'string')\n    return buf.substring(0, 3) === 'BMF'\n  return buf.length > 4 && equal(buf.slice(0, 4), HEADER)\n}",
    "/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n",
    "module.exports = function parseBMFontAscii(data) {\n  if (!data)\n    throw new Error('no data provided')\n  data = data.toString().trim()\n\n  var output = {\n    pages: [],\n    chars: [],\n    kernings: []\n  }\n\n  var lines = data.split(/\\r\\n?|\\n/g)\n\n  if (lines.length === 0)\n    throw new Error('no data in BMFont file')\n\n  for (var i = 0; i < lines.length; i++) {\n    var lineData = splitLine(lines[i], i)\n    if (!lineData) //skip empty lines\n      continue\n\n    if (lineData.key === 'page') {\n      if (typeof lineData.data.id !== 'number')\n        throw new Error('malformed file at line ' + i + ' -- needs page id=N')\n      if (typeof lineData.data.file !== 'string')\n        throw new Error('malformed file at line ' + i + ' -- needs page file=\"path\"')\n      output.pages[lineData.data.id] = lineData.data.file\n    } else if (lineData.key === 'chars' || lineData.key === 'kernings') {\n      //... do nothing for these two ...\n    } else if (lineData.key === 'char') {\n      output.chars.push(lineData.data)\n    } else if (lineData.key === 'kerning') {\n      output.kernings.push(lineData.data)\n    } else {\n      output[lineData.key] = lineData.data\n    }\n  }\n\n  return output\n}\n\nfunction splitLine(line, idx) {\n  line = line.replace(/\\t+/g, ' ').trim()\n  if (!line)\n    return null\n\n  var space = line.indexOf(' ')\n  if (space === -1) \n    throw new Error(\"no named row at line \" + idx)\n\n  var key = line.substring(0, space)\n\n  line = line.substring(space + 1)\n  //clear \"letter\" field as it is non-standard and\n  //requires additional complexity to parse \" / = symbols\n  line = line.replace(/letter=[\\'\\\"]\\S+[\\'\\\"]/gi, '')  \n  line = line.split(\"=\")\n  line = line.map(function(str) {\n    return str.trim().match((/(\".*?\"|[^\"\\s]+)+(?=\\s*|\\s*$)/g))\n  })\n\n  var data = []\n  for (var i = 0; i < line.length; i++) {\n    var dt = line[i]\n    if (i === 0) {\n      data.push({\n        key: dt[0],\n        data: \"\"\n      })\n    } else if (i === line.length - 1) {\n      data[data.length - 1].data = parseData(dt[0])\n    } else {\n      data[data.length - 1].data = parseData(dt[0])\n      data.push({\n        key: dt[1],\n        data: \"\"\n      })\n    }\n  }\n\n  var out = {\n    key: key,\n    data: {}\n  }\n\n  data.forEach(function(v) {\n    out.data[v.key] = v.data;\n  })\n\n  return out\n}\n\nfunction parseData(data) {\n  if (!data || data.length === 0)\n    return \"\"\n\n  if (data.indexOf('\"') === 0 || data.indexOf(\"'\") === 0)\n    return data.substring(1, data.length - 1)\n  if (data.indexOf(',') !== -1)\n    return parseIntList(data)\n  return parseInt(data, 10)\n}\n\nfunction parseIntList(data) {\n  return data.split(',').map(function(val) {\n    return parseInt(val, 10)\n  })\n}",
    "var HEADER = [66, 77, 70]\n\nmodule.exports = function readBMFontBinary(buf) {\n  if (buf.length < 6)\n    throw new Error('invalid buffer length for BMFont')\n\n  var header = HEADER.every(function(byte, i) {\n    return buf.readUInt8(i) === byte\n  })\n\n  if (!header)\n    throw new Error('BMFont missing BMF byte header')\n\n  var i = 3\n  var vers = buf.readUInt8(i++)\n  if (vers > 3)\n    throw new Error('Only supports BMFont Binary v3 (BMFont App v1.10)')\n  \n  var target = { kernings: [], chars: [] }\n  for (var b=0; b<5; b++)\n    i += readBlock(target, buf, i)\n  return target\n}\n\nfunction readBlock(target, buf, i) {\n  if (i > buf.length-1)\n    return 0\n\n  var blockID = buf.readUInt8(i++)\n  var blockSize = buf.readInt32LE(i)\n  i += 4\n\n  switch(blockID) {\n    case 1: \n      target.info = readInfo(buf, i)\n      break\n    case 2:\n      target.common = readCommon(buf, i)\n      break\n    case 3:\n      target.pages = readPages(buf, i, blockSize)\n      break\n    case 4:\n      target.chars = readChars(buf, i, blockSize)\n      break\n    case 5:\n      target.kernings = readKernings(buf, i, blockSize)\n      break\n  }\n  return 5 + blockSize\n}\n\nfunction readInfo(buf, i) {\n  var info = {}\n  info.size = buf.readInt16LE(i)\n\n  var bitField = buf.readUInt8(i+2)\n  info.smooth = (bitField >> 7) & 1\n  info.unicode = (bitField >> 6) & 1\n  info.italic = (bitField >> 5) & 1\n  info.bold = (bitField >> 4) & 1\n  \n  //fixedHeight is only mentioned in binary spec \n  if ((bitField >> 3) & 1)\n    info.fixedHeight = 1\n  \n  info.charset = buf.readUInt8(i+3) || ''\n  info.stretchH = buf.readUInt16LE(i+4)\n  info.aa = buf.readUInt8(i+6)\n  info.padding = [\n    buf.readInt8(i+7),\n    buf.readInt8(i+8),\n    buf.readInt8(i+9),\n    buf.readInt8(i+10)\n  ]\n  info.spacing = [\n    buf.readInt8(i+11),\n    buf.readInt8(i+12)\n  ]\n  info.outline = buf.readUInt8(i+13)\n  info.face = readStringNT(buf, i+14)\n  return info\n}\n\nfunction readCommon(buf, i) {\n  var common = {}\n  common.lineHeight = buf.readUInt16LE(i)\n  common.base = buf.readUInt16LE(i+2)\n  common.scaleW = buf.readUInt16LE(i+4)\n  common.scaleH = buf.readUInt16LE(i+6)\n  common.pages = buf.readUInt16LE(i+8)\n  var bitField = buf.readUInt8(i+10)\n  common.packed = 0\n  common.alphaChnl = buf.readUInt8(i+11)\n  common.redChnl = buf.readUInt8(i+12)\n  common.greenChnl = buf.readUInt8(i+13)\n  common.blueChnl = buf.readUInt8(i+14)\n  return common\n}\n\nfunction readPages(buf, i, size) {\n  var pages = []\n  var text = readNameNT(buf, i)\n  var len = text.length+1\n  var count = size / len\n  for (var c=0; c<count; c++) {\n    pages[c] = buf.slice(i, i+text.length).toString('utf8')\n    i += len\n  }\n  return pages\n}\n\nfunction readChars(buf, i, blockSize) {\n  var chars = []\n\n  var count = blockSize / 20\n  for (var c=0; c<count; c++) {\n    var char = {}\n    var off = c*20\n    char.id = buf.readUInt32LE(i + 0 + off)\n    char.x = buf.readUInt16LE(i + 4 + off)\n    char.y = buf.readUInt16LE(i + 6 + off)\n    char.width = buf.readUInt16LE(i + 8 + off)\n    char.height = buf.readUInt16LE(i + 10 + off)\n    char.xoffset = buf.readInt16LE(i + 12 + off)\n    char.yoffset = buf.readInt16LE(i + 14 + off)\n    char.xadvance = buf.readInt16LE(i + 16 + off)\n    char.page = buf.readUInt8(i + 18 + off)\n    char.chnl = buf.readUInt8(i + 19 + off)\n    chars[c] = char\n  }\n  return chars\n}\n\nfunction readKernings(buf, i, blockSize) {\n  var kernings = []\n  var count = blockSize / 10\n  for (var c=0; c<count; c++) {\n    var kern = {}\n    var off = c*10\n    kern.first = buf.readUInt32LE(i + 0 + off)\n    kern.second = buf.readUInt32LE(i + 4 + off)\n    kern.amount = buf.readInt16LE(i + 8 + off)\n    kernings[c] = kern\n  }\n  return kernings\n}\n\nfunction readNameNT(buf, offset) {\n  var pos=offset\n  for (; pos<buf.length; pos++) {\n    if (buf[pos] === 0x00) \n      break\n  }\n  return buf.slice(offset, pos)\n}\n\nfunction readStringNT(buf, offset) {\n  return readNameNT(buf, offset).toString('utf8')\n}",
    "var parseAttributes = require('./parse-attribs')\nvar parseFromString = require('xml-parse-from-string')\n\n//In some cases element.attribute.nodeName can return\n//all lowercase values.. so we need to map them to the correct \n//case\nvar NAME_MAP = {\n  scaleh: 'scaleH',\n  scalew: 'scaleW',\n  stretchh: 'stretchH',\n  lineheight: 'lineHeight',\n  alphachnl: 'alphaChnl',\n  redchnl: 'redChnl',\n  greenchnl: 'greenChnl',\n  bluechnl: 'blueChnl'\n}\n\nmodule.exports = function parse(data) {\n  data = data.toString()\n  \n  var xmlRoot = parseFromString(data)\n  var output = {\n    pages: [],\n    chars: [],\n    kernings: []\n  }\n\n  //get config settings\n  ;['info', 'common'].forEach(function(key) {\n    var element = xmlRoot.getElementsByTagName(key)[0]\n    if (element)\n      output[key] = parseAttributes(getAttribs(element))\n  })\n\n  //get page info\n  var pageRoot = xmlRoot.getElementsByTagName('pages')[0]\n  if (!pageRoot)\n    throw new Error('malformed file -- no <pages> element')\n  var pages = pageRoot.getElementsByTagName('page')\n  for (var i=0; i<pages.length; i++) {\n    var p = pages[i]\n    var id = parseInt(p.getAttribute('id'), 10)\n    var file = p.getAttribute('file')\n    if (isNaN(id))\n      throw new Error('malformed file -- page \"id\" attribute is NaN')\n    if (!file)\n      throw new Error('malformed file -- needs page \"file\" attribute')\n    output.pages[parseInt(id, 10)] = file\n  }\n\n  //get kernings / chars\n  ;['chars', 'kernings'].forEach(function(key) {\n    var element = xmlRoot.getElementsByTagName(key)[0]\n    if (!element)\n      return\n    var childTag = key.substring(0, key.length-1)\n    var children = element.getElementsByTagName(childTag)\n    for (var i=0; i<children.length; i++) {      \n      var child = children[i]\n      output[key].push(parseAttributes(getAttribs(child)))\n    }\n  })\n  return output\n}\n\nfunction getAttribs(element) {\n  var attribs = getAttribList(element)\n  return attribs.reduce(function(dict, attrib) {\n    var key = mapName(attrib.nodeName)\n    dict[key] = attrib.nodeValue\n    return dict\n  }, {})\n}\n\nfunction getAttribList(element) {\n  //IE8+ and modern browsers\n  var attribs = []\n  for (var i=0; i<element.attributes.length; i++)\n    attribs.push(element.attributes[i])\n  return attribs\n}\n\nfunction mapName(nodeName) {\n  return NAME_MAP[nodeName.toLowerCase()] || nodeName\n}",
    "//Some versions of GlyphDesigner have a typo\n//that causes some bugs with parsing. \n//Need to confirm with recent version of the software\n//to see whether this is still an issue or not.\nvar GLYPH_DESIGNER_ERROR = 'chasrset'\n\nmodule.exports = function parseAttributes(obj) {\n  if (GLYPH_DESIGNER_ERROR in obj) {\n    obj['charset'] = obj[GLYPH_DESIGNER_ERROR]\n    delete obj[GLYPH_DESIGNER_ERROR]\n  }\n\n  for (var k in obj) {\n    if (k === 'face' || k === 'charset') \n      continue\n    else if (k === 'padding' || k === 'spacing')\n      obj[k] = parseIntList(obj[k])\n    else\n      obj[k] = parseInt(obj[k], 10) \n  }\n  return obj\n}\n\nfunction parseIntList(data) {\n  return data.split(',').map(function(val) {\n    return parseInt(val, 10)\n  })\n}",
    "var trim = function(string) {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  var headersArr = trim(headers).split('\\n')\n\n  for (var i = 0; i < headersArr.length; i++) {\n    var row = headersArr[i]\n    var index = row.indexOf(':')\n    , key = trim(row.slice(0, index)).toLowerCase()\n    , value = trim(row.slice(index + 1))\n\n    if (typeof(result[key]) === 'undefined') {\n      result[key] = value\n    } else if (isArray(result[key])) {\n      result[key].push(value)\n    } else {\n      result[key] = [ result[key], value ]\n    }\n  }\n\n  return result\n}\n",
    "// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",
    "var dtype = require('dtype')\nvar anArray = require('an-array')\nvar isBuffer = require('is-buffer')\n\nvar CW = [0, 2, 3]\nvar CCW = [2, 1, 3]\n\nmodule.exports = function createQuadElements(array, opt) {\n    //if user didn't specify an output array\n    if (!array || !(anArray(array) || isBuffer(array))) {\n        opt = array || {}\n        array = null\n    }\n\n    if (typeof opt === 'number') //backwards-compatible\n        opt = { count: opt }\n    else\n        opt = opt || {}\n\n    var type = typeof opt.type === 'string' ? opt.type : 'uint16'\n    var count = typeof opt.count === 'number' ? opt.count : 1\n    var start = (opt.start || 0) \n\n    var dir = opt.clockwise !== false ? CW : CCW,\n        a = dir[0], \n        b = dir[1],\n        c = dir[2]\n\n    var numIndices = count * 6\n\n    var indices = array || new (dtype(type))(numIndices)\n    for (var i = 0, j = 0; i < numIndices; i += 6, j += 4) {\n        var x = i + start\n        indices[x + 0] = j + 0\n        indices[x + 1] = j + 1\n        indices[x + 2] = j + 2\n        indices[x + 3] = j + a\n        indices[x + 4] = j + b\n        indices[x + 5] = j + c\n    }\n    return indices\n}",
    "var createLayout = require('layout-bmfont-text')\nvar inherits = require('inherits')\nvar createIndices = require('quad-indices')\nvar buffer = require('three-buffer-vertex-data')\nvar assign = require('object-assign')\n\nvar vertices = require('./lib/vertices')\nvar utils = require('./lib/utils')\n\nvar Base = THREE.BufferGeometry\n\nmodule.exports = function createTextGeometry (opt) {\n  return new TextGeometry(opt)\n}\n\nfunction TextGeometry (opt) {\n  Base.call(this)\n\n  if (typeof opt === 'string') {\n    opt = { text: opt }\n  }\n\n  // use these as default values for any subsequent\n  // calls to update()\n  this._opt = assign({}, opt)\n\n  // also do an initial setup...\n  if (opt) this.update(opt)\n}\n\ninherits(TextGeometry, Base)\n\nTextGeometry.prototype.update = function (opt) {\n  if (typeof opt === 'string') {\n    opt = { text: opt }\n  }\n\n  // use constructor defaults\n  opt = assign({}, this._opt, opt)\n\n  if (!opt.font) {\n    throw new TypeError('must specify a { font } in options')\n  }\n\n  this.layout = createLayout(opt)\n\n  // get vec2 texcoords\n  var flipY = opt.flipY !== false\n\n  // the desired BMFont data\n  var font = opt.font\n\n  // determine texture size from font file\n  var texWidth = font.common.scaleW\n  var texHeight = font.common.scaleH\n\n  // get visible glyphs\n  var glyphs = this.layout.glyphs.filter(function (glyph) {\n    var bitmap = glyph.data\n    return bitmap.width * bitmap.height > 0\n  })\n\n  // provide visible glyphs for convenience\n  this.visibleGlyphs = glyphs\n\n  // get common vertex data\n  var positions = vertices.positions(glyphs)\n  var uvs = vertices.uvs(glyphs, texWidth, texHeight, flipY)\n  var indices = createIndices({\n    clockwise: true,\n    type: 'uint16',\n    count: glyphs.length\n  })\n\n  // update vertex data\n  buffer.index(this, indices, 1, 'uint16')\n  buffer.attr(this, 'position', positions, 2)\n  buffer.attr(this, 'uv', uvs, 2)\n\n  // update multipage data\n  if (!opt.multipage && 'page' in this.attributes) {\n    // disable multipage rendering\n    this.removeAttribute('page')\n  } else if (opt.multipage) {\n    var pages = vertices.pages(glyphs)\n    // enable multipage rendering\n    buffer.attr(this, 'page', pages, 1)\n  }\n}\n\nTextGeometry.prototype.computeBoundingSphere = function () {\n  if (this.boundingSphere === null) {\n    this.boundingSphere = new THREE.Sphere()\n  }\n\n  var positions = this.attributes.position.array\n  var itemSize = this.attributes.position.itemSize\n  if (!positions || !itemSize || positions.length < 2) {\n    this.boundingSphere.radius = 0\n    this.boundingSphere.center.set(0, 0, 0)\n    return\n  }\n  utils.computeSphere(positions, this.boundingSphere)\n  if (isNaN(this.boundingSphere.radius)) {\n    console.error('THREE.BufferGeometry.computeBoundingSphere(): ' +\n      'Computed radius is NaN. The ' +\n      '\"position\" attribute is likely to have NaN values.')\n  }\n}\n\nTextGeometry.prototype.computeBoundingBox = function () {\n  if (this.boundingBox === null) {\n    this.boundingBox = new THREE.Box3()\n  }\n\n  var bbox = this.boundingBox\n  var positions = this.attributes.position.array\n  var itemSize = this.attributes.position.itemSize\n  if (!positions || !itemSize || positions.length < 2) {\n    bbox.makeEmpty()\n    return\n  }\n  utils.computeBox(positions, bbox)\n}\n",
    "var itemSize = 2\nvar box = { min: [0, 0], max: [0, 0] }\n\nfunction bounds (positions) {\n  var count = positions.length / itemSize\n  box.min[0] = positions[0]\n  box.min[1] = positions[1]\n  box.max[0] = positions[0]\n  box.max[1] = positions[1]\n\n  for (var i = 0; i < count; i++) {\n    var x = positions[i * itemSize + 0]\n    var y = positions[i * itemSize + 1]\n    box.min[0] = Math.min(x, box.min[0])\n    box.min[1] = Math.min(y, box.min[1])\n    box.max[0] = Math.max(x, box.max[0])\n    box.max[1] = Math.max(y, box.max[1])\n  }\n}\n\nmodule.exports.computeBox = function (positions, output) {\n  bounds(positions)\n  output.min.set(box.min[0], box.min[1], 0)\n  output.max.set(box.max[0], box.max[1], 0)\n}\n\nmodule.exports.computeSphere = function (positions, output) {\n  bounds(positions)\n  var minX = box.min[0]\n  var minY = box.min[1]\n  var maxX = box.max[0]\n  var maxY = box.max[1]\n  var width = maxX - minX\n  var height = maxY - minY\n  var length = Math.sqrt(width * width + height * height)\n  output.center.set(minX + width / 2, minY + height / 2, 0)\n  output.radius = length / 2\n}\n",
    "module.exports.pages = function pages (glyphs) {\n  var pages = new Float32Array(glyphs.length * 4 * 1)\n  var i = 0\n  glyphs.forEach(function (glyph) {\n    var id = glyph.data.page || 0\n    pages[i++] = id\n    pages[i++] = id\n    pages[i++] = id\n    pages[i++] = id\n  })\n  return pages\n}\n\nmodule.exports.uvs = function uvs (glyphs, texWidth, texHeight, flipY) {\n  var uvs = new Float32Array(glyphs.length * 4 * 2)\n  var i = 0\n  glyphs.forEach(function (glyph) {\n    var bitmap = glyph.data\n    var bw = (bitmap.x + bitmap.width)\n    var bh = (bitmap.y + bitmap.height)\n\n    // top left position\n    var u0 = bitmap.x / texWidth\n    var v1 = bitmap.y / texHeight\n    var u1 = bw / texWidth\n    var v0 = bh / texHeight\n\n    if (flipY) {\n      v1 = (texHeight - bitmap.y) / texHeight\n      v0 = (texHeight - bh) / texHeight\n    }\n\n    // BL\n    uvs[i++] = u0\n    uvs[i++] = v1\n    // TL\n    uvs[i++] = u0\n    uvs[i++] = v0\n    // TR\n    uvs[i++] = u1\n    uvs[i++] = v0\n    // BR\n    uvs[i++] = u1\n    uvs[i++] = v1\n  })\n  return uvs\n}\n\nmodule.exports.positions = function positions (glyphs) {\n  var positions = new Float32Array(glyphs.length * 4 * 2)\n  var i = 0\n  glyphs.forEach(function (glyph) {\n    var bitmap = glyph.data\n\n    // bottom left position\n    var x = glyph.position[0] + bitmap.xoffset\n    var y = glyph.position[1] + bitmap.yoffset\n\n    // quad size\n    var w = bitmap.width\n    var h = bitmap.height\n\n    // BL\n    positions[i++] = x\n    positions[i++] = y\n    // TL\n    positions[i++] = x\n    positions[i++] = y + h\n    // TR\n    positions[i++] = x + w\n    positions[i++] = y + h\n    // BR\n    positions[i++] = x + w\n    positions[i++] = y\n  })\n  return positions\n}\n",
    "var flatten = require('flatten-vertex-data')\nvar warned = false;\n\nmodule.exports.attr = setAttribute\nmodule.exports.index = setIndex\n\nfunction setIndex (geometry, data, itemSize, dtype) {\n  if (typeof itemSize !== 'number') itemSize = 1\n  if (typeof dtype !== 'string') dtype = 'uint16'\n\n  var isR69 = !geometry.index && typeof geometry.setIndex !== 'function'\n  var attrib = isR69 ? geometry.getAttribute('index') : geometry.index\n  var newAttrib = updateAttribute(attrib, data, itemSize, dtype)\n  if (newAttrib) {\n    if (isR69) geometry.addAttribute('index', newAttrib)\n    else geometry.index = newAttrib\n  }\n}\n\nfunction setAttribute (geometry, key, data, itemSize, dtype) {\n  if (typeof itemSize !== 'number') itemSize = 3\n  if (typeof dtype !== 'string') dtype = 'float32'\n  if (Array.isArray(data) &&\n    Array.isArray(data[0]) &&\n    data[0].length !== itemSize) {\n    throw new Error('Nested vertex array has unexpected size; expected ' +\n      itemSize + ' but found ' + data[0].length)\n  }\n\n  var attrib = geometry.getAttribute(key)\n  var newAttrib = updateAttribute(attrib, data, itemSize, dtype)\n  if (newAttrib) {\n    geometry.addAttribute(key, newAttrib)\n  }\n}\n\nfunction updateAttribute (attrib, data, itemSize, dtype) {\n  data = data || []\n  if (!attrib || rebuildAttribute(attrib, data, itemSize)) {\n    // create a new array with desired type\n    data = flatten(data, dtype)\n\n    var needsNewBuffer = attrib && typeof attrib.setArray !== 'function'\n    if (!attrib || needsNewBuffer) {\n      // We are on an old version of ThreeJS which can't\n      // support growing / shrinking buffers, so we need\n      // to build a new buffer\n      if (needsNewBuffer && !warned) {\n        warned = true\n        console.warn([\n          'A WebGL buffer is being updated with a new size or itemSize, ',\n          'however this version of ThreeJS only supports fixed-size buffers.',\n          '\\nThe old buffer may still be kept in memory.\\n',\n          'To avoid memory leaks, it is recommended that you dispose ',\n          'your geometries and create new ones, or update to ThreeJS r82 or newer.\\n',\n          'See here for discussion:\\n',\n          'https://github.com/mrdoob/three.js/pull/9631'\n        ].join(''))\n      }\n\n      // Build a new attribute\n      attrib = new THREE.BufferAttribute(data, itemSize);\n    }\n\n    attrib.itemSize = itemSize\n    attrib.needsUpdate = true\n\n    // New versions of ThreeJS suggest using setArray\n    // to change the data. It will use bufferData internally,\n    // so you can change the array size without any issues\n    if (typeof attrib.setArray === 'function') {\n      attrib.setArray(data)\n    }\n\n    return attrib\n  } else {\n    // copy data into the existing array\n    flatten(data, attrib.array)\n    attrib.needsUpdate = true\n    return null\n  }\n}\n\n// Test whether the attribute needs to be re-created,\n// returns false if we can re-use it as-is.\nfunction rebuildAttribute (attrib, data, itemSize) {\n  if (attrib.itemSize !== itemSize) return true\n  if (!attrib.array) return true\n  var attribLength = attrib.array.length\n  if (Array.isArray(data) && Array.isArray(data[0])) {\n    // [ [ x, y, z ] ]\n    return attribLength !== data.length * itemSize\n  } else {\n    // [ x, y, z ]\n    return attribLength !== data.length\n  }\n  return false\n}\n",
    "var newline = /\\n/\nvar newlineChar = '\\n'\nvar whitespace = /\\s/\n\nmodule.exports = function(text, opt) {\n    var lines = module.exports.lines(text, opt)\n    return lines.map(function(line) {\n        return text.substring(line.start, line.end)\n    }).join('\\n')\n}\n\nmodule.exports.lines = function wordwrap(text, opt) {\n    opt = opt||{}\n\n    //zero width results in nothing visible\n    if (opt.width === 0 && opt.mode !== 'nowrap') \n        return []\n\n    text = text||''\n    var width = typeof opt.width === 'number' ? opt.width : Number.MAX_VALUE\n    var start = Math.max(0, opt.start||0)\n    var end = typeof opt.end === 'number' ? opt.end : text.length\n    var mode = opt.mode\n\n    var measure = opt.measure || monospace\n    if (mode === 'pre')\n        return pre(measure, text, start, end, width)\n    else\n        return greedy(measure, text, start, end, width, mode)\n}\n\nfunction idxOf(text, chr, start, end) {\n    var idx = text.indexOf(chr, start)\n    if (idx === -1 || idx > end)\n        return end\n    return idx\n}\n\nfunction isWhitespace(chr) {\n    return whitespace.test(chr)\n}\n\nfunction pre(measure, text, start, end, width) {\n    var lines = []\n    var lineStart = start\n    for (var i=start; i<end && i<text.length; i++) {\n        var chr = text.charAt(i)\n        var isNewline = newline.test(chr)\n\n        //If we've reached a newline, then step down a line\n        //Or if we've reached the EOF\n        if (isNewline || i===end-1) {\n            var lineEnd = isNewline ? i : i+1\n            var measured = measure(text, lineStart, lineEnd, width)\n            lines.push(measured)\n            \n            lineStart = i+1\n        }\n    }\n    return lines\n}\n\nfunction greedy(measure, text, start, end, width, mode) {\n    //A greedy word wrapper based on LibGDX algorithm\n    //https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/BitmapFontCache.java\n    var lines = []\n\n    var testWidth = width\n    //if 'nowrap' is specified, we only wrap on newline chars\n    if (mode === 'nowrap')\n        testWidth = Number.MAX_VALUE\n\n    while (start < end && start < text.length) {\n        //get next newline position\n        var newLine = idxOf(text, newlineChar, start, end)\n\n        //eat whitespace at start of line\n        while (start < newLine) {\n            if (!isWhitespace( text.charAt(start) ))\n                break\n            start++\n        }\n\n        //determine visible # of glyphs for the available width\n        var measured = measure(text, start, newLine, testWidth)\n\n        var lineEnd = start + (measured.end-measured.start)\n        var nextStart = lineEnd + newlineChar.length\n\n        //if we had to cut the line before the next newline...\n        if (lineEnd < newLine) {\n            //find char to break on\n            while (lineEnd > start) {\n                if (isWhitespace(text.charAt(lineEnd)))\n                    break\n                lineEnd--\n            }\n            if (lineEnd === start) {\n                if (nextStart > start + newlineChar.length) nextStart--\n                lineEnd = nextStart // If no characters to break, show all.\n            } else {\n                nextStart = lineEnd\n                //eat whitespace at end of line\n                while (lineEnd > start) {\n                    if (!isWhitespace(text.charAt(lineEnd - newlineChar.length)))\n                        break\n                    lineEnd--\n                }\n            }\n        }\n        if (lineEnd >= start) {\n            var result = measure(text, start, lineEnd, testWidth)\n            lines.push(result)\n        }\n        start = nextStart\n    }\n    return lines\n}\n\n//determines the visible number of glyphs within a given width\nfunction monospace(text, start, end, width) {\n    var glyphs = Math.min(width, end-start)\n    return {\n        start: start,\n        end: start+glyphs\n    }\n}",
    "\"use strict\";\nvar window = require(\"global/window\")\nvar isFunction = require(\"is-function\")\nvar parseHeaders = require(\"parse-headers\")\nvar xtend = require(\"xtend\")\n\nmodule.exports = createXHR\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = createXHR;\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i++) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    // xhr.responseXML will throw Exception \"InvalidStateError\" or \"DOMException\"\n    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.\n    try {\n        if (xhr.responseType === \"document\") {\n            return xhr.responseXML\n        }\n        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n        if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n            return xhr.responseXML\n        }\n    } catch (e) {}\n\n    return null\n}\n\nfunction noop() {}\n",
    "module.exports = (function xmlparser() {\n  //common browsers\n  if (typeof self.DOMParser !== 'undefined') {\n    return function(str) {\n      var parser = new self.DOMParser()\n      return parser.parseFromString(str, 'application/xml')\n    }\n  } \n\n  //IE8 fallback\n  if (typeof self.ActiveXObject !== 'undefined'\n      && new self.ActiveXObject('Microsoft.XMLDOM')) {\n    return function(str) {\n      var xmlDoc = new self.ActiveXObject(\"Microsoft.XMLDOM\")\n      xmlDoc.async = \"false\"\n      xmlDoc.loadXML(str)\n      return xmlDoc\n    }\n  }\n\n  //last resort fallback\n  return function(str) {\n    var div = document.createElement('div')\n    div.innerHTML = str\n    return div\n  }\n})()\n",
    "module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n",
    "module.exports={\n  \"name\": \"aframe\",\n  \"version\": \"0.8.2\",\n  \"description\": \"A web framework for building virtual reality experiences.\",\n  \"homepage\": \"https://aframe.io/\",\n  \"main\": \"dist/aframe-master.js\",\n  \"scripts\": {\n    \"browserify\": \"browserify src/index.js -s 'AFRAME' -p browserify-derequire\",\n    \"build\": \"shx mkdir -p build/ && npm run browserify -- --debug -t [envify --INSPECTOR_VERSION dev] -o build/aframe.js\",\n    \"codecov\": \"codecov\",\n    \"dev\": \"npm run build && cross-env INSPECTOR_VERSION=dev node ./scripts/budo -t envify\",\n    \"dist\": \"node scripts/updateVersionLog.js && npm run dist:min && npm run dist:max\",\n    \"dist:max\": \"npm run browserify -s -- --debug | exorcist dist/aframe-master.js.map > dist/aframe-master.js\",\n    \"dist:min\": \"npm run browserify -s -- --debug -p [minifyify --map aframe-master.min.js.map --output dist/aframe-master.min.js.map] -o dist/aframe-master.min.js\",\n    \"docs\": \"markserv --dir docs --port 9001\",\n    \"preghpages\": \"node ./scripts/preghpages.js\",\n    \"ghpages\": \"ghpages -p gh-pages/\",\n    \"lint\": \"semistandard -v | snazzy\",\n    \"lint:fix\": \"semistandard --fix\",\n    \"prepush\": \"node scripts/testOnlyCheck.js\",\n    \"prerelease\": \"node scripts/release.js 0.7.1 0.8.0\",\n    \"start\": \"npm run dev\",\n    \"test\": \"karma start ./tests/karma.conf.js\",\n    \"test:docs\": \"node scripts/docsLint.js\",\n    \"test:firefox\": \"npm test -- --browsers Firefox\",\n    \"test:chrome\": \"npm test -- --browsers Chrome\",\n    \"test:nobrowser\": \"NO_BROWSER=true npm test\",\n    \"test:node\": \"mocha --ui tdd tests/node\"\n  },\n  \"repository\": \"aframevr/aframe\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist/*\",\n    \"docs/**/*\",\n    \"src/**/*\",\n    \"vendor/**/*\"\n  ],\n  \"dependencies\": {\n    \"animejs\": \"^2.2.0\",\n    \"browserify-css\": \"^0.8.4\",\n    \"debug\": \"ngokevin/debug#noTimestamp\",\n    \"deep-assign\": \"^2.0.0\",\n    \"document-register-element\": \"dmarcos/document-register-element#8ccc532b7f3744be954574caf3072a5fd260ca90\",\n    \"envify\": \"^3.4.1\",\n    \"load-bmfont\": \"^1.2.3\",\n    \"object-assign\": \"^4.0.1\",\n    \"present\": \"0.0.6\",\n    \"style-attr\": \"^1.0.2\",\n    \"three-bmfont-text\": \"^2.1.0\"\n  },\n  \"devDependencies\": {\n    \"browserify\": \"^13.1.0\",\n    \"browserify-derequire\": \"^0.9.4\",\n    \"browserify-istanbul\": \"^2.0.0\",\n    \"budo\": \"^9.2.0\",\n    \"chai\": \"^3.5.0\",\n    \"chai-shallow-deep-equal\": \"^1.4.0\",\n    \"chalk\": \"^1.1.3\",\n    \"codecov\": \"^1.0.1\",\n    \"cross-env\": \"^5.0.1\",\n    \"exorcist\": \"^0.4.0\",\n    \"ghpages\": \"0.0.8\",\n    \"git-rev\": \"^0.2.1\",\n    \"glob\": \"^7.1.1\",\n    \"husky\": \"^0.11.7\",\n    \"istanbul\": \"^0.4.5\",\n    \"jsdom\": \"^9.11.0\",\n    \"karma\": \"1.4.1\",\n    \"karma-browserify\": \"^5.1.0\",\n    \"karma-chai-shallow-deep-equal\": \"0.0.4\",\n    \"karma-chrome-launcher\": \"^2.0.0\",\n    \"karma-coverage\": \"^1.1.1\",\n    \"karma-env-preprocessor\": \"^0.1.1\",\n    \"karma-firefox-launcher\": \"^1.0.0\",\n    \"karma-mocha\": \"^1.1.1\",\n    \"karma-mocha-reporter\": \"^2.1.0\",\n    \"karma-sinon-chai\": \"1.2.4\",\n    \"lolex\": \"^1.5.1\",\n    \"markserv\": \"github:sukima/markserv#feature/fix-broken-websoketio-link\",\n    \"minifyify\": \"^7.3.3\",\n    \"mocha\": \"^3.0.2\",\n    \"replace-in-file\": \"^2.5.3\",\n    \"semistandard\": \"^9.0.0\",\n    \"shelljs\": \"^0.7.7\",\n    \"shx\": \"^0.2.2\",\n    \"sinon\": \"^1.17.5\",\n    \"sinon-chai\": \"2.8.0\",\n    \"snazzy\": \"^5.0.0\",\n    \"too-wordy\": \"ngokevin/too-wordy\",\n    \"uglifyjs\": \"^2.4.10\",\n    \"write-good\": \"^0.9.1\"\n  },\n  \"link\": true,\n  \"browserify\": {\n    \"transform\": [\n      \"browserify-css\",\n      \"envify\"\n    ]\n  },\n  \"semistandard\": {\n    \"ignore\": [\n      \"build/**\",\n      \"dist/**\",\n      \"examples/**/shaders/*.js\",\n      \"**/vendor/**\"\n    ]\n  },\n  \"keywords\": [\n    \"3d\",\n    \"aframe\",\n    \"cardboard\",\n    \"components\",\n    \"oculus\",\n    \"three\",\n    \"three.js\",\n    \"rift\",\n    \"vive\",\n    \"vr\",\n    \"web-components\",\n    \"webvr\"\n  ],\n  \"browserify-css\": {\n    \"minify\": true\n  },\n  \"engines\": {\n    \"node\": \">= 4.6.0\",\n    \"npm\": \"^2.15.9\"\n  }\n}\n",
    "var anime = require(\"animejs\");\nvar components = require(\"../core/component\").components;\nvar registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils\");\n\nvar colorHelperFrom = new THREE.Color();\nvar colorHelperTo = new THREE.Color();\n\nvar getComponentProperty = utils.entity.getComponentProperty;\nvar setComponentProperty = utils.entity.setComponentProperty;\nvar splitCache = {};\n\nvar TYPE_COLOR = \"color\";\nvar PROP_POSITION = \"position\";\nvar PROP_ROTATION = \"rotation\";\nvar PROP_SCALE = \"scale\";\nvar STRING_COMPONENTS = \"components\";\nvar STRING_OBJECT3D = \"object3D\";\n\n/**\n * Animation component for A-Frame using anime.js.\n *\n * The component manually controls the tick by setting `autoplay: false` on anime.js and\n * manually * calling `animation.tick()` in the tick handler. To pause or resume, we toggle a\n * boolean * flag * `isAnimationPlaying`.\n *\n * anime.js animation config for tweenining Javascript objects and values works as:\n *\n *  config = {\n *    targets: {foo: 0.0, bar: '#000'},\n *    foo: 1.0,\n *    bar: '#FFF'\n *  }\n *\n * The above will tween each property in `targets`. The `to` values are set in the root of\n * the config.\n *\n * @member {object} animation - anime.js instance.\n * @member {boolean} animationIsPlaying - Control if animation is playing.\n */\nmodule.exports.Component = registerComponent(\"animation\", {\n  schema: {\n    autoplay: { default: true },\n    delay: { default: 0 },\n    dir: { default: \"\" },\n    dur: { default: 1000 },\n    easing: { default: \"easeInQuad\" },\n    elasticity: { default: 400 },\n    enabled: { default: true },\n    from: { default: \"\" },\n    loop: {\n      default: 0,\n      parse: function (value) {\n        // Boolean or integer.\n        if (value === true || value === \"true\") {\n          return true;\n        }\n        if (value === false || value === \"false\") {\n          return false;\n        }\n        return parseInt(value, 10);\n      },\n    },\n    property: { default: \"\" },\n    startEvents: { type: \"array\" },\n    pauseEvents: { type: \"array\" },\n    resumeEvents: { type: \"array\" },\n    round: { default: false },\n    to: { default: \"\" },\n    type: { default: \"\" },\n    isRawProperty: { default: false },\n  },\n\n  multiple: true,\n\n  init: function () {\n    var self = this;\n\n    this.eventDetail = { name: this.attrName };\n    this.time = 0;\n\n    this.animation = null;\n    this.animationIsPlaying = false;\n    this.onStartEvent = this.onStartEvent.bind(this);\n    this.beginAnimation = this.beginAnimation.bind(this);\n    this.pauseAnimation = this.pauseAnimation.bind(this);\n    this.resumeAnimation = this.resumeAnimation.bind(this);\n\n    this.fromColor = {};\n    this.toColor = {};\n    this.targets = {};\n    this.targetsArray = [];\n\n    this.updateConfigForDefault = this.updateConfigForDefault.bind(this);\n    this.updateConfigForRawColor = this.updateConfigForRawColor.bind(this);\n\n    this.config = {\n      complete: function () {\n        self.animationIsPlaying = false;\n      },\n    };\n  },\n\n  update: function (oldData) {\n    var config = this.config;\n    var data = this.data;\n\n    this.animationIsPlaying = false;\n\n    if (oldData.enabled && !this.data.enabled) {\n      return;\n    }\n\n    if (!data.property) {\n      return;\n    }\n\n    // Base config.\n    config.autoplay = false;\n    config.direction = data.dir;\n    config.duration = data.dur;\n    config.easing = data.easing;\n    config.elasticity = data.elasticity;\n    config.loop = data.loop;\n    config.round = data.round;\n\n    // Start new animation.\n    this.createAndStartAnimation();\n  },\n\n  tick: function (t, dt) {\n    if (!this.animationIsPlaying) {\n      return;\n    }\n    this.time += dt;\n    this.animation.tick(this.time);\n  },\n\n  remove: function () {\n    this.pauseAnimation();\n    this.removeEventListeners();\n  },\n\n  pause: function () {\n    this.paused = true;\n    this.pausedWasPlaying = this.animationIsPlaying;\n    this.pauseAnimation();\n    this.removeEventListeners();\n  },\n\n  /**\n   * `play` handler only for resuming scene.\n   */\n  play: function () {\n    if (!this.paused) {\n      return;\n    }\n    this.paused = false;\n    this.addEventListeners();\n    if (this.pausedWasPlaying) {\n      this.resumeAnimation();\n      this.pausedWasPlaying = false;\n    }\n  },\n\n  /**\n   * Start animation from scratch.\n   */\n  createAndStartAnimation: function () {\n    var data = this.data;\n\n    this.updateConfig();\n    this.animationIsPlaying = false;\n    this.animation = anime(this.config);\n\n    this.removeEventListeners();\n    this.addEventListeners();\n\n    // Wait for start events for animation.\n    if (!data.autoplay || (data.startEvents && data.startEvents.length)) {\n      return;\n    }\n\n    // Delay animation.\n    if (data.delay) {\n      setTimeout(this.beginAnimation, data.delay);\n      return;\n    }\n\n    // Play animation.\n    this.beginAnimation();\n  },\n\n  /**\n   * This is before animation start (including from startEvents).\n   * Set to initial state (config.from, time = 0, seekTime = 0).\n   */\n  beginAnimation: function () {\n    this.updateConfig();\n    this.time = 0;\n    this.animationIsPlaying = true;\n    this.stopRelatedAnimations();\n  },\n\n  pauseAnimation: function () {\n    this.animationIsPlaying = false;\n  },\n\n  resumeAnimation: function () {\n    this.animationIsPlaying = true;\n  },\n\n  /**\n   * startEvents callback.\n   */\n  onStartEvent: function () {\n    if (!this.data.enabled) {\n      return;\n    }\n\n    this.updateConfig();\n    if (this.animation) {\n      this.animation.pause();\n    }\n    this.animation = anime(this.config);\n\n    // Include the delay before each start event.\n    if (this.data.delay) {\n      setTimeout(this.beginAnimation, this.data.delay);\n      return;\n    }\n    this.beginAnimation();\n  },\n\n  /**\n   * rawProperty: true and type: color;\n   */\n  updateConfigForRawColor: function () {\n    var config = this.config;\n    var data = this.data;\n    var el = this.el;\n    var from;\n    var key;\n    var to;\n\n    if (this.waitComponentInitRawProperty(this.updateConfigForRawColor)) {\n      return;\n    }\n\n    from = data.from === \"\" ? getRawProperty(el, data.property) : data.from;\n    to = data.to;\n\n    // Use r/g/b vector for color type.\n    this.setColorConfig(from, to);\n    from = this.fromColor;\n    to = this.toColor;\n\n    this.targetsArray.length = 0;\n    this.targetsArray.push(from);\n    config.targets = this.targetsArray;\n    for (key in to) {\n      config[key] = to[key];\n    }\n\n    config.update = (function () {\n      var lastValue = {};\n      return function (anim) {\n        var value;\n        value = anim.animatables[0].target;\n        // For animation timeline.\n        if (\n          value.r === lastValue.r &&\n          value.g === lastValue.g &&\n          value.b === lastValue.b\n        ) {\n          return;\n        }\n\n        setRawProperty(el, data.property, value, data.type);\n      };\n    })();\n  },\n\n  /**\n   * Stuff property into generic `property` key.\n   */\n  updateConfigForDefault: function () {\n    var config = this.config;\n    var data = this.data;\n    var el = this.el;\n    var from;\n    var isBoolean;\n    var isNumber;\n    var to;\n\n    if (this.waitComponentInitRawProperty(this.updateConfigForDefault)) {\n      return;\n    }\n\n    if (data.from === \"\") {\n      // Infer from.\n      from = isRawProperty(data)\n        ? getRawProperty(el, data.property)\n        : getComponentProperty(el, data.property);\n    } else {\n      // Explicit from.\n      from = data.from;\n    }\n\n    to = data.to;\n\n    isNumber = !isNaN(from || to);\n    if (isNumber) {\n      from = parseFloat(from);\n      to = parseFloat(to);\n    } else {\n      from = from ? from.toString() : from;\n      to = to ? to.toString() : to;\n    }\n\n    // Convert booleans to integer to allow boolean flipping.\n    isBoolean =\n      data.to === \"true\" ||\n      data.to === \"false\" ||\n      data.to === true ||\n      data.to === false;\n    if (isBoolean) {\n      from = data.from === \"true\" || data.from === true ? 1 : 0;\n      to = data.to === \"true\" || data.to === true ? 1 : 0;\n    }\n\n    this.targets.aframeProperty = from;\n    config.targets = this.targets;\n    config.aframeProperty = to;\n    config.update = (function () {\n      var lastValue;\n\n      return function (anim) {\n        var value;\n        value = anim.animatables[0].target.aframeProperty;\n\n        // Need to do a last value check for animation timeline since all the tweening\n        // begins simultaenously even if the value has not changed. Also better for perf\n        // anyways.\n        if (value === lastValue) {\n          return;\n        }\n        lastValue = value;\n\n        if (isBoolean) {\n          value = value >= 1;\n        }\n\n        if (isRawProperty(data)) {\n          setRawProperty(el, data.property, value, data.type);\n        } else {\n          setComponentProperty(el, data.property, value);\n        }\n      };\n    })();\n  },\n\n  /**\n   * Extend x/y/z/w onto the config.\n   * Update vector by modifying object3D.\n   */\n  updateConfigForVector: function () {\n    var config = this.config;\n    var data = this.data;\n    var el = this.el;\n    var key;\n    var from;\n    var to;\n\n    // Parse coordinates.\n    from =\n      data.from !== \"\"\n        ? utils.coordinates.parse(data.from) // If data.from defined, use that.\n        : getComponentProperty(el, data.property); // If data.from not defined, get on the fly.\n    to = utils.coordinates.parse(data.to);\n\n    if (data.property === PROP_ROTATION) {\n      toRadians(from);\n      toRadians(to);\n    }\n\n    // Set to and from.\n    this.targetsArray.length = 0;\n    this.targetsArray.push(from);\n    config.targets = this.targetsArray;\n    for (key in to) {\n      config[key] = to[key];\n    }\n\n    // If animating object3D transformation, run more optimized updater.\n    if (\n      data.property === PROP_POSITION ||\n      data.property === PROP_ROTATION ||\n      data.property === PROP_SCALE\n    ) {\n      config.update = (function () {\n        var lastValue = {};\n        return function (anim) {\n          var value = anim.animatables[0].target;\n\n          if (data.property === PROP_SCALE) {\n            value.x = Math.max(0.0001, value.x);\n            value.y = Math.max(0.0001, value.y);\n            value.z = Math.max(0.0001, value.z);\n          }\n\n          // For animation timeline.\n          if (\n            value.x === lastValue.x &&\n            value.y === lastValue.y &&\n            value.z === lastValue.z\n          ) {\n            return;\n          }\n\n          lastValue.x = value.x;\n          lastValue.y = value.y;\n          lastValue.z = value.z;\n\n          el.object3D[data.property].set(value.x, value.y, value.z);\n        };\n      })();\n      return;\n    }\n\n    // Animating some vector.\n    config.update = (function () {\n      var lastValue = {};\n      return function (anim) {\n        var value = anim.animations[0].target;\n\n        // Animate rotation through radians.\n        // For animation timeline.\n        if (\n          value.x === lastValue.x &&\n          value.y === lastValue.y &&\n          value.z === lastValue.z\n        ) {\n          return;\n        }\n        lastValue.x = value.x;\n        lastValue.y = value.y;\n        lastValue.z = value.z;\n        setComponentProperty(el, data.property, value);\n      };\n    })();\n  },\n\n  /**\n   * Update the config before each run.\n   */\n  updateConfig: function () {\n    var propType;\n\n    // Route config type.\n    propType = getPropertyType(this.el, this.data.property);\n    if (isRawProperty(this.data) && this.data.type === TYPE_COLOR) {\n      this.updateConfigForRawColor();\n    } else if (\n      propType === \"vec2\" ||\n      propType === \"vec3\" ||\n      propType === \"vec4\"\n    ) {\n      this.updateConfigForVector();\n    } else {\n      this.updateConfigForDefault();\n    }\n  },\n\n  /**\n   * Wait for component to initialize.\n   */\n  waitComponentInitRawProperty: function (cb) {\n    var componentName;\n    var data = this.data;\n    var el = this.el;\n    var self = this;\n\n    if (data.from !== \"\") {\n      return false;\n    }\n\n    if (!data.property.startsWith(STRING_COMPONENTS)) {\n      return false;\n    }\n\n    componentName = splitDot(data.property)[1];\n    if (el.components[componentName]) {\n      return false;\n    }\n\n    el.addEventListener(\"componentinitialized\", function wait(evt) {\n      if (evt.detail.name !== componentName) {\n        return;\n      }\n      cb();\n      // Since the config was created async, create the animation now since we missed it\n      // earlier.\n      self.animation = anime(self.config);\n      el.removeEventListener(\"componentinitialized\", wait);\n    });\n    return true;\n  },\n\n  /**\n   * Make sure two animations on the same property don't fight each other.\n   * e.g., animation__mouseenter=\"property: material.opacity\"\n   *       animation__mouseleave=\"property: material.opacity\"\n   */\n  stopRelatedAnimations: function () {\n    var component;\n    var componentName;\n    for (componentName in this.el.components) {\n      component = this.el.components[componentName];\n      if (componentName === this.attrName) {\n        continue;\n      }\n      if (component.name !== \"animation\") {\n        continue;\n      }\n      if (!component.animationIsPlaying) {\n        continue;\n      }\n      if (component.data.property !== this.data.property) {\n        continue;\n      }\n      component.animationIsPlaying = false;\n    }\n  },\n\n  addEventListeners: function () {\n    var data = this.data;\n    var el = this.el;\n    addEventListeners(el, data.startEvents, this.onStartEvent);\n    addEventListeners(el, data.pauseEvents, this.pauseAnimation);\n    addEventListeners(el, data.resumeEvents, this.resumeAnimation);\n  },\n\n  removeEventListeners: function () {\n    var data = this.data;\n    var el = this.el;\n    removeEventListeners(el, data.startEvents, this.onStartEvent);\n    removeEventListeners(el, data.pauseEvents, this.pauseAnimation);\n    removeEventListeners(el, data.resumeEvents, this.resumeAnimation);\n  },\n\n  setColorConfig: function (from, to) {\n    colorHelperFrom.set(from);\n    colorHelperTo.set(to);\n    from = this.fromColor;\n    to = this.toColor;\n    from.r = colorHelperFrom.r;\n    from.g = colorHelperFrom.g;\n    from.b = colorHelperFrom.b;\n    to.r = colorHelperTo.r;\n    to.g = colorHelperTo.g;\n    to.b = colorHelperTo.b;\n  },\n});\n\n/**\n * Given property name, check schema to see what type we are animating.\n * We just care whether the property is a vector.\n */\nfunction getPropertyType(el, property) {\n  var component;\n  var componentName;\n  var split;\n  var propertyName;\n\n  split = property.split(\".\");\n  componentName = split[0];\n  propertyName = split[1];\n  component = el.components[componentName] || components[componentName];\n\n  // Primitives.\n  if (!component) {\n    return null;\n  }\n\n  // Dynamic schema. We only care about vectors anyways.\n  if (propertyName && !component.schema[propertyName]) {\n    return null;\n  }\n\n  // Multi-prop.\n  if (propertyName) {\n    return component.schema[propertyName].type;\n  }\n\n  // Single-prop.\n  return component.schema.type;\n}\n\n/**\n * Convert object to radians.\n */\nfunction toRadians(obj) {\n  obj.x = THREE.Math.degToRad(obj.x);\n  obj.y = THREE.Math.degToRad(obj.y);\n  obj.z = THREE.Math.degToRad(obj.z);\n}\n\nfunction addEventListeners(el, eventNames, handler) {\n  var i;\n  for (i = 0; i < eventNames.length; i++) {\n    el.addEventListener(eventNames[i], handler);\n  }\n}\n\nfunction removeEventListeners(el, eventNames, handler) {\n  var i;\n  for (i = 0; i < eventNames.length; i++) {\n    el.removeEventListener(eventNames[i], handler);\n  }\n}\n\nfunction getRawProperty(el, path) {\n  var i;\n  var split;\n  var value;\n  split = splitDot(path);\n  value = el;\n  for (i = 0; i < split.length; i++) {\n    value = value[split[i]];\n  }\n  return value;\n}\n\nfunction setRawProperty(el, path, value, type) {\n  var i;\n  var split;\n  var propertyName;\n  var targetValue;\n\n  if (path.startsWith(\"object3D.rotation\")) {\n    value = THREE.Math.degToRad(value);\n  }\n\n  // Walk.\n  split = splitDot(path);\n  targetValue = el;\n  for (i = 0; i < split.length - 1; i++) {\n    targetValue = targetValue[split[i]];\n  }\n  propertyName = split[split.length - 1];\n\n  // Raw color.\n  if (type === TYPE_COLOR) {\n    if (\"r\" in targetValue[propertyName]) {\n      targetValue[propertyName].r = value.r;\n      targetValue[propertyName].g = value.g;\n      targetValue[propertyName].b = value.b;\n    } else {\n      targetValue[propertyName].x = value.r;\n      targetValue[propertyName].y = value.g;\n      targetValue[propertyName].z = value.b;\n    }\n    return;\n  }\n\n  targetValue[propertyName] = value;\n}\n\nfunction splitDot(path) {\n  if (path in splitCache) {\n    return splitCache[path];\n  }\n  splitCache[path] = path.split(\".\");\n  return splitCache[path];\n}\n\nfunction isRawProperty(data) {\n  return (\n    data.isRawProperty ||\n    data.property.startsWith(STRING_COMPONENTS) ||\n    data.property.startsWith(STRING_OBJECT3D)\n  );\n}\n",
    "var registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\n\n/**\n * Camera component.\n * Pairs along with camera system to handle tracking the active camera.\n */\nmodule.exports.Component = registerComponent(\"camera\", {\n  schema: {\n    active: { default: true },\n    far: { default: 10000 },\n    fov: { default: 80, min: 0 },\n    near: { default: 0.005, min: 0 },\n    spectator: { default: false },\n    zoom: { default: 1, min: 0 },\n    viewportPosition: { default: 0 },\n    viewport: { default: 4 },\n    fullscreen: { default: true },\n  },\n\n  /**\n   * Initialize three.js camera and add it to the entity.\n   * Add reference from scene to this entity as the camera.\n   */\n  init: function () {\n    var camera;\n    var el = this.el;\n\n    // Create camera.\n    camera = this.camera = new THREE.PerspectiveCamera();\n    el.setObject3D(\"camera\", camera);\n  },\n\n  /**\n   * Update three.js camera.\n   */\n  update: function (oldData) {\n    var data = this.data;\n    var camera = this.camera;\n\n    // Update properties.\n    camera.aspect = data.aspect || window.innerWidth / window.innerHeight;\n    camera.far = data.far;\n    camera.fov = data.fov;\n    camera.near = data.near;\n    camera.zoom = data.zoom;\n    camera.updateProjectionMatrix();\n\n    this.updateActiveCamera(oldData);\n    this.updateSpectatorCamera(oldData);\n  },\n\n  updateActiveCamera: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n    var system = this.system;\n    // Active property did not change.\n    if ((oldData && oldData.active === data.active) || data.spectator) {\n      return;\n    }\n\n    // If `active` property changes, or first update, handle active camera with system.\n    if (data.active && system.activeCameraEl !== el) {\n      // Camera enabled. Set camera to this camera.\n      system.setActiveCamera(el);\n    } else if (!data.active && system.activeCameraEl === el) {\n      // Camera disabled. Set camera to another camera.\n      system.disableActiveCamera();\n    }\n  },\n\n  updateSpectatorCamera: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n    var system = this.system;\n    // spectator property did not change.\n    if (oldData && oldData.spectator === data.spectator) {\n      return;\n    }\n\n    // If `spectator` property changes, or first update, handle spectator camera with system.\n    if (data.spectator && system.spectatorCameraEl !== el) {\n      // Camera enabled. Set camera to this camera.\n      system.setSpectatorCamera(el);\n    } else if (!data.spectator && system.spectatorCameraEl === el) {\n      // Camera disabled. Set camera to another camera.\n      system.disableSpectatorCamera();\n    }\n  },\n\n  /**\n   * Remove camera on remove (callback).\n   */\n  remove: function () {\n    this.el.removeObject3D(\"camera\");\n  },\n});\n",
    "var registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\n\nmodule.exports.Component = registerComponent(\"collada-model\", {\n  schema: { type: \"asset\" },\n\n  init: function () {\n    this.model = null;\n    this.loader = new THREE.ColladaLoader();\n  },\n\n  update: function () {\n    var self = this;\n    var el = this.el;\n    var src = this.data;\n\n    if (!src) {\n      return;\n    }\n\n    this.remove();\n\n    this.loader.load(src, function (colladaModel) {\n      self.model = colladaModel.scene;\n      el.setObject3D(\"mesh\", self.model);\n      el.emit(\"model-loaded\", { format: \"collada\", model: self.model });\n    });\n  },\n\n  remove: function () {\n    if (!this.model) {\n      return;\n    }\n    this.el.removeObject3D(\"mesh\");\n  },\n});\n",
    "/* global THREE */\nvar registerComponent = require(\"../core/component\").registerComponent;\nvar utils = require(\"../utils/\");\n\nvar bind = utils.bind;\n\nvar EVENTS = {\n  CLICK: \"click\",\n  FUSING: \"fusing\",\n  MOUSEENTER: \"mouseenter\",\n  MOUSEDOWN: \"mousedown\",\n  MOUSELEAVE: \"mouseleave\",\n  MOUSEUP: \"mouseup\",\n};\n\nvar STATES = {\n  FUSING: \"cursor-fusing\",\n  HOVERING: \"cursor-hovering\",\n  HOVERED: \"cursor-hovered\",\n};\n\nvar CANVAS_EVENTS = {\n  DOWN: [\"mousedown\", \"touchstart\"],\n  UP: [\"mouseup\", \"touchend\"],\n};\n\n/**\n * Cursor component. Applies the raycaster component specifically for starting the raycaster\n * from the camera and pointing from camera's facing direction, and then only returning the\n * closest intersection. Cursor can be fine-tuned by setting raycaster properties.\n *\n * @member {object} fuseTimeout - Timeout to trigger fuse-click.\n * @member {Element} cursorDownEl - Entity that was last mousedowned during current click.\n * @member {object} intersection - Attributes of the current intersection event, including\n *         3D- and 2D-space coordinates. See: http://threejs.org/docs/api/core/Raycaster.html\n * @member {Element} intersectedEl - Currently-intersected entity. Used to keep track to\n *         emit events when unintersecting.\n */\nmodule.exports.Component = registerComponent(\"cursor\", {\n  dependencies: [\"raycaster\"],\n\n  schema: {\n    downEvents: { default: [] },\n    fuse: { default: utils.device.isMobile() },\n    fuseTimeout: { default: 1500, min: 0 },\n    upEvents: { default: [] },\n    enabled: { default: true },\n    rayOrigin: { default: \"entity\", oneOf: [\"mouse\", \"entity\"] },\n  },\n\n  init: function () {\n    var self = this;\n\n    this.fuseTimeout = undefined;\n    this.cursorDownEl = null;\n    this.intersectedEl = null;\n    this.canvasBounds = document.body.getBoundingClientRect();\n\n    // Debounce.\n    this.updateCanvasBounds = utils.debounce(function updateCanvasBounds() {\n      self.canvasBounds = self.el.sceneEl.canvas.getBoundingClientRect();\n    }, 500);\n\n    this.eventDetail = {};\n    this.intersectedEventDetail = { cursorEl: this.el };\n\n    // Bind methods.\n    this.onCursorDown = bind(this.onCursorDown, this);\n    this.onCursorUp = bind(this.onCursorUp, this);\n    this.onIntersection = bind(this.onIntersection, this);\n    this.onIntersectionCleared = bind(this.onIntersectionCleared, this);\n    this.onMouseMove = bind(this.onMouseMove, this);\n  },\n\n  update: function (oldData) {\n    if (this.data.enabled && !oldData.enabled) {\n      this.addEventListeners();\n    }\n\n    if (!this.data.enabled && oldData.enabled) {\n      this.removeEventListeners();\n    }\n\n    if (this.data.rayOrigin === oldData.rayOrigin) {\n      return;\n    }\n    this.updateMouseEventListeners();\n  },\n\n  play: function () {\n    if (this.data.enabled) {\n      this.addEventListeners();\n    }\n  },\n\n  pause: function () {\n    if (this.data.enabled) {\n      this.removeEventListeners();\n    }\n  },\n\n  remove: function () {\n    var el = this.el;\n    el.removeState(STATES.HOVERING);\n    el.removeState(STATES.FUSING);\n    clearTimeout(this.fuseTimeout);\n    if (this.intersectedEl) {\n      this.intersectedEl.removeState(STATES.HOVERED);\n    }\n    this.removeEventListeners();\n  },\n\n  addEventListeners: function () {\n    var canvas;\n    var data = this.data;\n    var el = this.el;\n    var self = this;\n\n    function addCanvasListeners() {\n      canvas = el.sceneEl.canvas;\n      if (data.downEvents.length || data.upEvents.length) {\n        return;\n      }\n      CANVAS_EVENTS.DOWN.forEach(function (downEvent) {\n        canvas.addEventListener(downEvent, self.onCursorDown);\n      });\n      CANVAS_EVENTS.UP.forEach(function (upEvent) {\n        canvas.addEventListener(upEvent, self.onCursorUp);\n      });\n    }\n\n    canvas = el.sceneEl.canvas;\n    if (canvas) {\n      addCanvasListeners();\n    } else {\n      el.sceneEl.addEventListener(\"render-target-loaded\", addCanvasListeners);\n    }\n\n    data.downEvents.forEach(function (downEvent) {\n      el.addEventListener(downEvent, self.onCursorDown);\n    });\n    data.upEvents.forEach(function (upEvent) {\n      el.addEventListener(upEvent, self.onCursorUp);\n    });\n    el.addEventListener(\"raycaster-intersection\", this.onIntersection);\n    el.addEventListener(\n      \"raycaster-intersection-cleared\",\n      this.onIntersectionCleared\n    );\n\n    el.sceneEl.addEventListener(\"rendererresize\", this.updateCanvasBounds);\n    window.addEventListener(\"resize\", this.updateCanvasBounds);\n    window.addEventListener(\"scroll\", this.updateCanvasBounds);\n  },\n\n  removeEventListeners: function () {\n    var canvas;\n    var data = this.data;\n    var el = this.el;\n    var self = this;\n\n    canvas = el.sceneEl.canvas;\n    if (canvas && !data.downEvents.length && !data.upEvents.length) {\n      CANVAS_EVENTS.DOWN.forEach(function (downEvent) {\n        canvas.removeEventListener(downEvent, self.onCursorDown);\n      });\n      CANVAS_EVENTS.UP.forEach(function (upEvent) {\n        canvas.removeEventListener(upEvent, self.onCursorUp);\n      });\n    }\n\n    data.downEvents.forEach(function (downEvent) {\n      el.removeEventListener(downEvent, self.onCursorDown);\n    });\n    data.upEvents.forEach(function (upEvent) {\n      el.removeEventListener(upEvent, self.onCursorUp);\n    });\n    el.removeEventListener(\"raycaster-intersection\", this.onIntersection);\n    el.removeEventListener(\n      \"raycaster-intersection-cleared\",\n      this.onIntersectionCleared\n    );\n    canvas.removeEventListener(\"mousemove\", this.onMouseMove);\n    canvas.removeEventListener(\"touchstart\", this.onMouseMove);\n    canvas.removeEventListener(\"touchmove\", this.onMouseMove);\n\n    el.sceneEl.removeEventListener(\"rendererresize\", this.updateCanvasBounds);\n    window.removeEventListener(\"resize\", this.updateCanvasBounds);\n    window.removeEventListener(\"scroll\", this.updateCanvasBounds);\n  },\n\n  updateMouseEventListeners: function () {\n    var canvas;\n    var el = this.el;\n\n    canvas = el.sceneEl.canvas;\n    canvas.removeEventListener(\"mousemove\", this.onMouseMove);\n    canvas.removeEventListener(\"touchmove\", this.onMouseMove);\n    el.setAttribute(\"raycaster\", \"useWorldCoordinates\", false);\n    if (this.data.rayOrigin !== \"mouse\") {\n      return;\n    }\n    canvas.addEventListener(\"mousemove\", this.onMouseMove, false);\n    canvas.addEventListener(\"touchmove\", this.onMouseMove, false);\n    el.setAttribute(\"raycaster\", \"useWorldCoordinates\", true);\n    this.updateCanvasBounds();\n  },\n\n  onMouseMove: (function () {\n    var direction = new THREE.Vector3();\n    var mouse = new THREE.Vector2();\n    var origin = new THREE.Vector3();\n    var rayCasterConfig = { origin: origin, direction: direction };\n\n    return function (evt) {\n      var bounds = this.canvasBounds;\n      var camera = this.el.sceneEl.camera;\n      var left;\n      var point;\n      var top;\n\n      camera.parent.updateMatrixWorld();\n\n      // Calculate mouse position based on the canvas element\n      if (evt.type === \"touchmove\" || evt.type === \"touchstart\") {\n        // Track the first touch for simplicity.\n        point = evt.touches.item(0);\n      } else {\n        point = evt;\n      }\n\n      left = point.clientX - bounds.left;\n      top = point.clientY - bounds.top;\n      mouse.x = (left / bounds.width) * 2 - 1;\n      mouse.y = -(top / bounds.height) * 2 + 1;\n\n      origin.setFromMatrixPosition(camera.matrixWorld);\n      direction\n        .set(mouse.x, mouse.y, 0.5)\n        .unproject(camera)\n        .sub(origin)\n        .normalize();\n      this.el.setAttribute(\"raycaster\", rayCasterConfig);\n      if (evt.type === \"touchmove\") {\n        evt.preventDefault();\n      }\n    };\n  })(),\n\n  /**\n   * Trigger mousedown and keep track of the mousedowned entity.\n   */\n  onCursorDown: function (evt) {\n    // Raycast again for touch.\n    if (this.data.rayOrigin === \"mouse\" && evt.type === \"touchstart\") {\n      this.onMouseMove(evt);\n      this.el.components.raycaster.checkIntersections();\n      evt.preventDefault();\n    }\n\n    this.twoWayEmit(EVENTS.MOUSEDOWN);\n    this.cursorDownEl = this.intersectedEl;\n  },\n\n  /**\n   * Trigger mouseup if:\n   * - Not fusing (mobile has no mouse).\n   * - Currently intersecting an entity.\n   * - Currently-intersected entity is the same as the one when mousedown was triggered,\n   *   in case user mousedowned one entity, dragged to another, and mouseupped.\n   */\n  onCursorUp: function (evt) {\n    this.twoWayEmit(EVENTS.MOUSEUP);\n\n    // If intersected entity has changed since the cursorDown, still emit mouseUp on the\n    // previously cursorUp entity.\n    if (this.cursorDownEl && this.cursorDownEl !== this.intersectedEl) {\n      this.intersectedEventDetail.intersection = null;\n      this.cursorDownEl.emit(EVENTS.MOUSEUP, this.intersectedEventDetail);\n    }\n\n    if (\n      !this.data.fuse &&\n      this.intersectedEl &&\n      this.cursorDownEl === this.intersectedEl\n    ) {\n      this.twoWayEmit(EVENTS.CLICK);\n    }\n\n    this.cursorDownEl = null;\n    if (evt.type === \"touchend\") {\n      evt.preventDefault();\n    }\n  },\n\n  /**\n   * Handle intersection.\n   */\n  onIntersection: function (evt) {\n    var currentIntersection;\n    var cursorEl = this.el;\n    var index;\n    var intersectedEl;\n    var intersection;\n\n    // Select closest object, excluding the cursor.\n    index = evt.detail.els[0] === cursorEl ? 1 : 0;\n    intersection = evt.detail.intersections[index];\n    intersectedEl = evt.detail.els[index];\n\n    // If cursor is the only intersected object, ignore the event.\n    if (!intersectedEl) {\n      return;\n    }\n\n    // Already intersecting this entity.\n    if (this.intersectedEl === intersectedEl) {\n      return;\n    }\n\n    // Ignore events further away than active intersection.\n    if (this.intersectedEl) {\n      currentIntersection = this.el.components.raycaster.getIntersection(\n        this.intersectedEl\n      );\n      if (\n        currentIntersection &&\n        currentIntersection.distance <= intersection.distance\n      ) {\n        return;\n      }\n    }\n\n    // Unset current intersection.\n    this.clearCurrentIntersection(true);\n\n    this.setIntersection(intersectedEl, intersection);\n  },\n\n  /**\n   * Handle intersection cleared.\n   */\n  onIntersectionCleared: function (evt) {\n    var clearedEls = evt.detail.clearedEls;\n    // Check if the current intersection has ended\n    if (clearedEls.indexOf(this.intersectedEl) === -1) {\n      return;\n    }\n    this.clearCurrentIntersection();\n  },\n\n  setIntersection: function (intersectedEl, intersection) {\n    var cursorEl = this.el;\n    var data = this.data;\n    var self = this;\n\n    // Already intersecting.\n    if (this.intersectedEl === intersectedEl) {\n      return;\n    }\n\n    // Set new intersection.\n    this.intersectedEl = intersectedEl;\n\n    // Hovering.\n    cursorEl.addState(STATES.HOVERING);\n    intersectedEl.addState(STATES.HOVERED);\n    this.twoWayEmit(EVENTS.MOUSEENTER);\n\n    // Begin fuse if necessary.\n    if (data.fuseTimeout === 0 || !data.fuse) {\n      return;\n    }\n    cursorEl.addState(STATES.FUSING);\n    this.twoWayEmit(EVENTS.FUSING);\n    this.fuseTimeout = setTimeout(function fuse() {\n      cursorEl.removeState(STATES.FUSING);\n      self.twoWayEmit(EVENTS.CLICK);\n    }, data.fuseTimeout);\n  },\n\n  clearCurrentIntersection: function (ignoreRemaining) {\n    var index;\n    var intersection;\n    var intersections;\n    var cursorEl = this.el;\n\n    // Nothing to be cleared.\n    if (!this.intersectedEl) {\n      return;\n    }\n\n    // No longer hovering (or fusing).\n    this.intersectedEl.removeState(STATES.HOVERED);\n    cursorEl.removeState(STATES.HOVERING);\n    cursorEl.removeState(STATES.FUSING);\n    this.twoWayEmit(EVENTS.MOUSELEAVE);\n\n    // Unset intersected entity (after emitting the event).\n    this.intersectedEl = null;\n\n    // Clear fuseTimeout.\n    clearTimeout(this.fuseTimeout);\n\n    // Set intersection to another raycasted element if any.\n    if (ignoreRemaining === true) {\n      return;\n    }\n    intersections = this.el.components.raycaster.intersections;\n    if (intersections.length === 0) {\n      return;\n    }\n    // Exclude the cursor.\n    index = intersections[0].object.el === cursorEl ? 1 : 0;\n    intersection = intersections[index];\n    if (!intersection) {\n      return;\n    }\n    this.setIntersection(intersection.object.el, intersection);\n  },\n\n  /**\n   * Helper to emit on both the cursor and the intersected entity (if exists).\n   */\n  twoWayEmit: function (evtName) {\n    var el = this.el;\n    var intersectedEl = this.intersectedEl;\n    var intersection;\n\n    intersection = this.el.components.raycaster.getIntersection(intersectedEl);\n    this.eventDetail.intersectedEl = intersectedEl;\n    this.eventDetail.intersection = intersection;\n    el.emit(evtName, this.eventDetail);\n\n    if (!intersectedEl) {\n      return;\n    }\n\n    this.intersectedEventDetail.intersection = intersection;\n    intersectedEl.emit(evtName, this.intersectedEventDetail);\n  },\n});\n",
    "var geometries = require(\"../core/geometry\").geometries;\nvar geometryNames = require(\"../core/geometry\").geometryNames;\nvar registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\n\nvar dummyGeometry = new THREE.Geometry();\n\n/**\n * Geometry component. Combined with material component to make a mesh in 3D object.\n * Extended with registered geometries.\n */\nmodule.exports.Component = registerComponent(\"geometry\", {\n  schema: {\n    buffer: { default: true },\n    primitive: { default: \"box\", oneOf: geometryNames, schemaChange: true },\n    skipCache: { default: false },\n  },\n\n  init: function () {\n    this.geometry = null;\n  },\n\n  /**\n   * Talk to geometry system to get or create geometry.\n   */\n  update: function (previousData) {\n    var data = this.data;\n    var el = this.el;\n    var mesh;\n    var system = this.system;\n\n    // Dispose old geometry if we created one.\n    if (this.geometry) {\n      system.unuseGeometry(previousData);\n      this.geometry = null;\n    }\n\n    // Create new geometry.\n    this.geometry = system.getOrCreateGeometry(data);\n\n    // Set on mesh. If mesh does not exist, create it.\n    mesh = el.getObject3D(\"mesh\");\n    if (mesh) {\n      mesh.geometry = this.geometry;\n    } else {\n      mesh = new THREE.Mesh();\n      mesh.geometry = this.geometry;\n      el.setObject3D(\"mesh\", mesh);\n    }\n  },\n\n  /**\n   * Tell geometry system that entity is no longer using the geometry.\n   * Unset the geometry on the mesh\n   */\n  remove: function () {\n    this.system.unuseGeometry(this.data);\n    this.el.getObject3D(\"mesh\").geometry = dummyGeometry;\n    this.geometry = null;\n  },\n\n  /**\n   * Update geometry component schema based on geometry type.\n   */\n  updateSchema: function (data) {\n    var currentGeometryType = this.oldData && this.oldData.primitive;\n    var newGeometryType = data.primitive;\n    var schema =\n      geometries[newGeometryType] && geometries[newGeometryType].schema;\n\n    // Geometry has no schema.\n    if (!schema) {\n      throw new Error(\"Unknown geometry schema `\" + newGeometryType + \"`\");\n    }\n    // Nothing has changed.\n    if (currentGeometryType && currentGeometryType === newGeometryType) {\n      return;\n    }\n\n    this.extendSchema(schema);\n  },\n});\n",
    "var registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils/\");\nvar warn = utils.debug(\"components:gltf-model:warn\");\n\n/**\n * glTF model loader.\n */\nmodule.exports.Component = registerComponent(\"gltf-model\", {\n  schema: { type: \"model\" },\n\n  init: function () {\n    var dracoLoader = this.system.getDRACOLoader();\n    this.model = null;\n    this.loader = new THREE.GLTFLoader();\n    if (dracoLoader) {\n      this.loader.setDRACOLoader(dracoLoader);\n    }\n  },\n\n  update: function () {\n    var self = this;\n    var el = this.el;\n    var src = this.data;\n\n    if (!src) {\n      return;\n    }\n\n    this.remove();\n\n    this.loader.load(\n      src,\n      function gltfLoaded(gltfModel) {\n        self.model = gltfModel.scene || gltfModel.scenes[0];\n        self.model.animations = gltfModel.animations;\n        el.setObject3D(\"mesh\", self.model);\n        el.emit(\"model-loaded\", { format: \"gltf\", model: self.model });\n      },\n      undefined /* onProgress */,\n      function gltfFailed(error) {\n        var message =\n          error && error.message ? error.message : \"Failed to load glTF model\";\n        warn(message);\n        el.emit(\"model-error\", { format: \"gltf\", src: src });\n      }\n    );\n  },\n\n  remove: function () {\n    if (!this.model) {\n      return;\n    }\n    this.el.removeObject3D(\"mesh\");\n  },\n});\n",
    "require(\"./animation\");\nrequire(\"./camera\");\nrequire(\"./orthographic-camera\");\nrequire(\"./collada-model\");\nrequire(\"./cursor\");\nrequire(\"./geometry\");\nrequire(\"./gltf-model\");\nrequire(\"./light\");\nrequire(\"./line\");\nrequire(\"./link\");\nrequire(\"./look-controls\");\nrequire(\"./material\");\nrequire(\"./obj-model\");\nrequire(\"./position\");\nrequire(\"./raycaster\");\nrequire(\"./rotation\");\nrequire(\"./scale\");\nrequire(\"./shadow\");\nrequire(\"./sound\");\nrequire(\"./text\");\nrequire(\"./visible\");\nrequire(\"./wasd-controls\");\n\nrequire(\"./scene/background\");\nrequire(\"./scene/debug\");\nrequire(\"./scene/effects\");\nrequire(\"./scene/embedded\");\nrequire(\"./scene/inspector\");\nrequire(\"./scene/fog\");\nrequire(\"./scene/overlay\");\nrequire(\"./scene/pool\");\nrequire(\"./scene/renderer\");\nrequire(\"./scene/screenshot\");\nrequire(\"./scene/stats\");\n",
    "var bind = require(\"../utils/bind\");\nvar diff = require(\"../utils\").diff;\nvar debug = require(\"../utils/debug\");\nvar registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\n\nvar degToRad = THREE.Math.degToRad;\nvar warn = debug(\"components:light:warn\");\n\n/**\n * Light component.\n */\nmodule.exports.Component = registerComponent(\"light\", {\n  schema: {\n    angle: { default: 60, if: { type: [\"spot\"] } },\n    color: { type: \"color\" },\n    groundColor: { type: \"color\", if: { type: [\"hemisphere\"] } },\n    decay: { default: 1, if: { type: [\"point\", \"spot\"] } },\n    distance: { default: 0.0, min: 0, if: { type: [\"point\", \"spot\"] } },\n    intensity: {\n      default: 1.0,\n      min: 0,\n      if: { type: [\"ambient\", \"directional\", \"hemisphere\", \"point\", \"spot\"] },\n    },\n    penumbra: { default: 0, min: 0, max: 1, if: { type: [\"spot\"] } },\n    type: {\n      default: \"directional\",\n      oneOf: [\"ambient\", \"directional\", \"hemisphere\", \"point\", \"spot\"],\n      schemaChange: true,\n    },\n    target: { type: \"selector\", if: { type: [\"spot\", \"directional\"] } },\n\n    // Shadows.\n    castShadow: {\n      default: false,\n      if: { type: [\"point\", \"spot\", \"directional\"] },\n    },\n    shadowBias: { default: 0, if: { castShadow: true } },\n    shadowCameraFar: { default: 500, if: { castShadow: true } },\n    shadowCameraFov: { default: 90, if: { castShadow: true } },\n    shadowCameraNear: { default: 0.5, if: { castShadow: true } },\n    shadowCameraTop: { default: 5, if: { castShadow: true } },\n    shadowCameraRight: { default: 5, if: { castShadow: true } },\n    shadowCameraBottom: { default: -5, if: { castShadow: true } },\n    shadowCameraLeft: { default: -5, if: { castShadow: true } },\n    shadowCameraVisible: { default: false, if: { castShadow: true } },\n    shadowMapHeight: { default: 512, if: { castShadow: true } },\n    shadowMapWidth: { default: 512, if: { castShadow: true } },\n    shadowRadius: { default: 1, if: { castShadow: true } },\n  },\n\n  /**\n   * Notifies scene a light has been added to remove default lighting.\n   */\n  init: function () {\n    var el = this.el;\n    this.light = null;\n    this.defaultTarget = null;\n    this.system.registerLight(el);\n  },\n\n  /**\n   * (Re)create or update light.\n   */\n  update: function (oldData) {\n    var data = this.data;\n    var diffData = diff(data, oldData);\n    var light = this.light;\n    var self = this;\n\n    // Existing light.\n    if (light && !(\"type\" in diffData)) {\n      var shadowsLoaded = false;\n      // Light type has not changed. Update light.\n      Object.keys(diffData).forEach(function (key) {\n        var value = data[key];\n\n        switch (key) {\n          case \"color\": {\n            light.color.set(value);\n            break;\n          }\n\n          case \"groundColor\": {\n            light.groundColor.set(value);\n            break;\n          }\n\n          case \"angle\": {\n            light.angle = degToRad(value);\n            break;\n          }\n\n          case \"target\": {\n            // Reset target if selector is null.\n            if (value === null) {\n              if (data.type === \"spot\" || data.type === \"directional\") {\n                light.target = self.defaultTarget;\n              }\n            } else {\n              // Target specified, set target to entity's `object3D` when it is loaded.\n              if (value.hasLoaded) {\n                self.onSetTarget(value, light);\n              } else {\n                value.addEventListener(\n                  \"loaded\",\n                  bind(self.onSetTarget, self, value, light)\n                );\n              }\n            }\n            break;\n          }\n\n          case \"castShadow\":\n          case \"shadowBias\":\n          case \"shadowCameraFar\":\n          case \"shadowCameraFov\":\n          case \"shadowCameraNear\":\n          case \"shadowCameraTop\":\n          case \"shadowCameraRight\":\n          case \"shadowCameraBottom\":\n          case \"shadowCameraLeft\":\n          case \"shadowCameraVisible\":\n          case \"shadowMapHeight\":\n          case \"shadowMapWidth\":\n          case \"shadowRadius\":\n            if (!shadowsLoaded) {\n              self.updateShadow();\n              shadowsLoaded = true;\n            }\n            break;\n\n          default: {\n            light[key] = value;\n          }\n        }\n      });\n      return;\n    }\n\n    // No light yet or light type has changed. Create and add light.\n    this.setLight(this.data);\n    this.updateShadow();\n  },\n\n  setLight: function (data) {\n    var el = this.el;\n    var newLight = this.getLight(data);\n    if (newLight) {\n      if (this.light) {\n        el.removeObject3D(\"light\");\n      }\n\n      this.light = newLight;\n      this.light.el = el;\n      el.setObject3D(\"light\", this.light);\n\n      // HACK solution for issue #1624\n      if (\n        data.type === \"spot\" ||\n        data.type === \"directional\" ||\n        data.type === \"hemisphere\"\n      ) {\n        el.getObject3D(\"light\").translateY(-1);\n      }\n\n      // set and position default lighttarget as a child to enable spotlight orientation\n      if (data.type === \"spot\") {\n        el.setObject3D(\"light-target\", this.defaultTarget);\n        el.getObject3D(\"light-target\").position.set(0, 0, -1);\n      }\n    }\n  },\n\n  /**\n   * Updates shadow-related properties on the current light.\n   */\n  updateShadow: function () {\n    var el = this.el;\n    var data = this.data;\n    var light = this.light;\n\n    light.castShadow = data.castShadow;\n\n    // Shadow camera helper.\n    var cameraHelper = el.getObject3D(\"cameraHelper\");\n    if (data.shadowCameraVisible && !cameraHelper) {\n      el.setObject3D(\n        \"cameraHelper\",\n        new THREE.CameraHelper(light.shadow.camera)\n      );\n    } else if (!data.shadowCameraVisible && cameraHelper) {\n      el.removeObject3D(\"cameraHelper\");\n    }\n\n    if (!data.castShadow) {\n      return light;\n    }\n\n    // Shadow appearance.\n    light.shadow.bias = data.shadowBias;\n    light.shadow.radius = data.shadowRadius;\n    light.shadow.mapSize.height = data.shadowMapHeight;\n    light.shadow.mapSize.width = data.shadowMapWidth;\n\n    // Shadow camera.\n    light.shadow.camera.near = data.shadowCameraNear;\n    light.shadow.camera.far = data.shadowCameraFar;\n    if (light.shadow.camera instanceof THREE.OrthographicCamera) {\n      light.shadow.camera.top = data.shadowCameraTop;\n      light.shadow.camera.right = data.shadowCameraRight;\n      light.shadow.camera.bottom = data.shadowCameraBottom;\n      light.shadow.camera.left = data.shadowCameraLeft;\n    } else {\n      light.shadow.camera.fov = data.shadowCameraFov;\n    }\n    light.shadow.camera.updateProjectionMatrix();\n\n    if (cameraHelper) {\n      cameraHelper.update();\n    }\n  },\n\n  /**\n   * Creates a new three.js light object given data object defining the light.\n   *\n   * @param {object} data\n   */\n  getLight: function (data) {\n    var angle = data.angle;\n    var color = new THREE.Color(data.color).getHex();\n    var decay = data.decay;\n    var distance = data.distance;\n    var groundColor = new THREE.Color(data.groundColor).getHex();\n    var intensity = data.intensity;\n    var type = data.type;\n    var target = data.target;\n    var light = null;\n\n    switch (type.toLowerCase()) {\n      case \"ambient\": {\n        return new THREE.AmbientLight(color, intensity);\n      }\n\n      case \"directional\": {\n        light = new THREE.DirectionalLight(color, intensity);\n        this.defaultTarget = light.target;\n        if (target) {\n          if (target.hasLoaded) {\n            this.onSetTarget(target, light);\n          } else {\n            target.addEventListener(\n              \"loaded\",\n              bind(this.onSetTarget, this, target, light)\n            );\n          }\n        }\n        return light;\n      }\n\n      case \"hemisphere\": {\n        return new THREE.HemisphereLight(color, groundColor, intensity);\n      }\n\n      case \"point\": {\n        return new THREE.PointLight(color, intensity, distance, decay);\n      }\n\n      case \"spot\": {\n        light = new THREE.SpotLight(\n          color,\n          intensity,\n          distance,\n          degToRad(angle),\n          data.penumbra,\n          decay\n        );\n        this.defaultTarget = light.target;\n        if (target) {\n          if (target.hasLoaded) {\n            this.onSetTarget(target, light);\n          } else {\n            target.addEventListener(\n              \"loaded\",\n              bind(this.onSetTarget, this, target, light)\n            );\n          }\n        }\n        return light;\n      }\n\n      default: {\n        warn(\n          \"%s is not a valid light type. \" +\n            \"Choose from ambient, directional, hemisphere, point, spot.\",\n          type\n        );\n      }\n    }\n  },\n\n  onSetTarget: function (targetEl, light) {\n    light.target = targetEl.object3D;\n  },\n\n  /**\n   * Remove light on remove (callback).\n   */\n  remove: function () {\n    var el = this.el;\n    el.removeObject3D(\"light\");\n    if (el.getObject3D(\"cameraHelper\")) {\n      el.removeObject3D(\"cameraHelper\");\n    }\n  },\n});\n",
    "/* global THREE */\nvar registerComponent = require(\"../core/component\").registerComponent;\n\nmodule.exports.Component = registerComponent(\"line\", {\n  schema: {\n    start: { type: \"vec3\", default: { x: 0, y: 0, z: 0 } },\n    end: { type: \"vec3\", default: { x: 0, y: 0, z: 0 } },\n    color: { type: \"color\", default: \"#74BEC1\" },\n    opacity: { type: \"number\", default: 1 },\n    visible: { default: true },\n  },\n\n  multiple: true,\n\n  init: function () {\n    var data = this.data;\n    var geometry;\n    var material;\n    material = this.material = new THREE.LineBasicMaterial({\n      color: data.color,\n      opacity: data.opacity,\n      transparent: data.opacity < 1,\n      visible: data.visible,\n    });\n    geometry = this.geometry = new THREE.BufferGeometry();\n    geometry.addAttribute(\n      \"position\",\n      new THREE.BufferAttribute(new Float32Array(2 * 3), 3)\n    );\n\n    this.line = new THREE.Line(geometry, material);\n    this.el.setObject3D(this.attrName, this.line);\n  },\n\n  update: function (oldData) {\n    var data = this.data;\n    var geometry = this.geometry;\n    var geoNeedsUpdate = false;\n    var material = this.material;\n    var positionArray = geometry.attributes.position.array;\n\n    // Update geometry.\n    if (!isEqualVec3(data.start, oldData.start)) {\n      positionArray[0] = data.start.x;\n      positionArray[1] = data.start.y;\n      positionArray[2] = data.start.z;\n      geoNeedsUpdate = true;\n    }\n\n    if (!isEqualVec3(data.end, oldData.end)) {\n      positionArray[3] = data.end.x;\n      positionArray[4] = data.end.y;\n      positionArray[5] = data.end.z;\n      geoNeedsUpdate = true;\n    }\n\n    if (geoNeedsUpdate) {\n      geometry.attributes.position.needsUpdate = true;\n      geometry.computeBoundingSphere();\n    }\n\n    material.color.setStyle(data.color);\n    material.opacity = data.opacity;\n    material.transparent = data.opacity < 1;\n    material.visible = data.visible;\n  },\n\n  remove: function () {\n    this.el.removeObject3D(\"line\", this.line);\n  },\n});\n\nfunction isEqualVec3(a, b) {\n  if (!a || !b) {\n    return false;\n  }\n  return a.x === b.x && a.y === b.y && a.z === b.z;\n}\n",
    "var registerComponent = require(\"../core/component\").registerComponent;\nvar registerShader = require(\"../core/shader\").registerShader;\nvar THREE = require(\"../lib/three\");\n\n/**\n * Link component. Connect experiences and traverse between them in VR\n *\n * @member {object} hiddenEls - Store the hidden elements during peek mode.\n */\nmodule.exports.Component = registerComponent(\"link\", {\n  schema: {\n    backgroundColor: { default: \"red\", type: \"color\" },\n    borderColor: { default: \"white\", type: \"color\" },\n    highlighted: { default: false },\n    highlightedColor: { default: \"#24CAFF\", type: \"color\" },\n    href: { default: \"\" },\n    image: { type: \"asset\" },\n    on: { default: \"click\" },\n    peekMode: { default: false },\n    title: { default: \"\" },\n    titleColor: { default: \"white\", type: \"color\" },\n    visualAspectEnabled: { default: false },\n  },\n\n  init: function () {\n    this.navigate = this.navigate.bind(this);\n    this.previousQuaternion = undefined;\n    this.quaternionClone = new THREE.Quaternion();\n    // Store hidden elements during peek mode so we can show them again later.\n    this.hiddenEls = [];\n  },\n\n  update: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n    var backgroundColor;\n    var strokeColor;\n\n    if (!data.visualAspectEnabled) {\n      return;\n    }\n\n    this.initVisualAspect();\n\n    backgroundColor = data.highlighted\n      ? data.highlightedColor\n      : data.backgroundColor;\n    strokeColor = data.highlighted ? data.highlightedColor : data.borderColor;\n    el.setAttribute(\"material\", \"backgroundColor\", backgroundColor);\n    el.setAttribute(\"material\", \"strokeColor\", strokeColor);\n\n    if (data.on !== oldData.on) {\n      this.updateEventListener();\n    }\n\n    if (oldData.peekMode !== undefined && data.peekMode !== oldData.peekMode) {\n      this.updatePeekMode();\n    }\n\n    if (!data.image || oldData.image === data.image) {\n      return;\n    }\n\n    el.setAttribute(\n      \"material\",\n      \"pano\",\n      typeof data.image === \"string\" ? data.image : data.image.src\n    );\n  },\n\n  /*\n   * Toggle all elements and full 360 preview of the linked page.\n   */\n  updatePeekMode: function () {\n    var el = this.el;\n    var sphereEl = this.sphereEl;\n    if (this.data.peekMode) {\n      this.hideAll();\n      el.getObject3D(\"mesh\").visible = false;\n      sphereEl.setAttribute(\"visible\", true);\n    } else {\n      this.showAll();\n      el.getObject3D(\"mesh\").visible = true;\n      sphereEl.setAttribute(\"visible\", false);\n    }\n  },\n\n  play: function () {\n    this.updateEventListener();\n  },\n\n  pause: function () {\n    this.removeEventListener();\n  },\n\n  updateEventListener: function () {\n    var el = this.el;\n    if (!el.isPlaying) {\n      return;\n    }\n    this.removeEventListener();\n    el.addEventListener(this.data.on, this.navigate);\n  },\n\n  removeEventListener: function () {\n    var on = this.data.on;\n    if (!on) {\n      return;\n    }\n    this.el.removeEventListener(on, this.navigate);\n  },\n\n  initVisualAspect: function () {\n    var el = this.el;\n    var semiSphereEl;\n    var sphereEl;\n    var textEl;\n\n    if (!this.data.visualAspectEnabled || this.visualAspectInitialized) {\n      return;\n    }\n\n    textEl = this.textEl = this.textEl || document.createElement(\"a-entity\");\n    sphereEl = this.sphereEl =\n      this.sphereEl || document.createElement(\"a-entity\");\n    semiSphereEl = this.semiSphereEl =\n      this.semiSphereEl || document.createElement(\"a-entity\");\n\n    // Set portal.\n    el.setAttribute(\"geometry\", {\n      primitive: \"circle\",\n      radius: 1.0,\n      segments: 64,\n    });\n    el.setAttribute(\"material\", {\n      shader: \"portal\",\n      pano: this.data.image,\n      side: \"double\",\n    });\n\n    // Set text that displays the link title and URL.\n    textEl.setAttribute(\"text\", {\n      color: this.data.titleColor,\n      align: \"center\",\n      font: \"kelsonsans\",\n      value: this.data.title || this.data.href,\n      width: 4,\n    });\n    textEl.setAttribute(\"position\", \"0 1.5 0\");\n    el.appendChild(textEl);\n\n    // Set sphere rendered when camera is close to portal to allow user to peek inside.\n    semiSphereEl.setAttribute(\"geometry\", {\n      primitive: \"sphere\",\n      radius: 1.0,\n      phiStart: 0,\n      segmentsWidth: 64,\n      segmentsHeight: 64,\n      phiLength: 180,\n      thetaStart: 0,\n      thetaLength: 360,\n    });\n    semiSphereEl.setAttribute(\"material\", {\n      shader: \"portal\",\n      borderEnabled: 0.0,\n      pano: this.data.image,\n      side: \"back\",\n    });\n    semiSphereEl.setAttribute(\"rotation\", \"0 180 0\");\n    semiSphereEl.setAttribute(\"position\", \"0 0 0\");\n    semiSphereEl.setAttribute(\"visible\", false);\n    el.appendChild(semiSphereEl);\n\n    // Set sphere rendered when camera is close to portal to allow user to peek inside.\n    sphereEl.setAttribute(\"geometry\", {\n      primitive: \"sphere\",\n      radius: 10,\n      segmentsWidth: 64,\n      segmentsHeight: 64,\n    });\n    sphereEl.setAttribute(\"material\", {\n      shader: \"portal\",\n      borderEnabled: 0.0,\n      pano: this.data.image,\n      side: \"back\",\n    });\n    sphereEl.setAttribute(\"visible\", false);\n    el.appendChild(sphereEl);\n\n    this.visualAspectInitialized = true;\n  },\n\n  navigate: function () {\n    window.location = this.data.href;\n  },\n\n  /**\n   * 1. Swap plane that represents portal with sphere with a hole when the camera is close\n   * so user can peek inside portal. Sphere is rendered on oposite side of portal\n   * from where user enters.\n   * 2. Place the url/title above or inside portal depending on distance to camera.\n   * 3. Face portal to camera when far away from user.\n   */\n  tick: (function () {\n    var cameraWorldPosition = new THREE.Vector3();\n    var elWorldPosition = new THREE.Vector3();\n    var quaternion = new THREE.Quaternion();\n    var scale = new THREE.Vector3();\n\n    return function () {\n      var el = this.el;\n      var object3D = el.object3D;\n      var camera = el.sceneEl.camera;\n      var cameraPortalOrientation;\n      var distance;\n      var textEl = this.textEl;\n\n      if (!this.data.visualAspectEnabled) {\n        return;\n      }\n\n      // Update matrices\n      object3D.updateMatrixWorld();\n      camera.parent.updateMatrixWorld();\n      camera.updateMatrixWorld();\n\n      object3D.matrix.decompose(elWorldPosition, quaternion, scale);\n      elWorldPosition.setFromMatrixPosition(object3D.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      distance = elWorldPosition.distanceTo(cameraWorldPosition);\n\n      if (distance > 20) {\n        // Store original orientation to be restored when the portal stops facing the camera.\n        if (!this.previousQuaternion) {\n          this.quaternionClone.copy(quaternion);\n          this.previousQuaternion = this.quaternionClone;\n        }\n        // If the portal is far away from the user, face portal to camera.\n        object3D.lookAt(cameraWorldPosition);\n      } else {\n        // When portal is close to the user/camera.\n        cameraPortalOrientation = this.calculateCameraPortalOrientation();\n        // If user gets very close to portal, replace with holed sphere they can peek in.\n        if (distance < 0.5) {\n          // Configure text size and sphere orientation depending side user approaches portal.\n          if (this.semiSphereEl.getAttribute(\"visible\") === true) {\n            return;\n          }\n          textEl.setAttribute(\"text\", \"width\", 1.5);\n          if (cameraPortalOrientation <= 0.0) {\n            textEl.setAttribute(\"position\", \"0 0 0.75\");\n            textEl.setAttribute(\"rotation\", \"0 180 0\");\n            this.semiSphereEl.setAttribute(\"rotation\", \"0 0 0\");\n          } else {\n            textEl.setAttribute(\"position\", \"0 0 -0.75\");\n            textEl.setAttribute(\"rotation\", \"0 0 0\");\n            this.semiSphereEl.setAttribute(\"rotation\", \"0 180 0\");\n          }\n          el.getObject3D(\"mesh\").visible = false;\n          this.semiSphereEl.setAttribute(\"visible\", true);\n          this.peekCameraPortalOrientation = cameraPortalOrientation;\n        } else {\n          // Calculate wich side the camera is approaching the camera (back / front).\n          // Adjust text orientation based on camera position.\n          if (cameraPortalOrientation <= 0.0) {\n            textEl.setAttribute(\"rotation\", \"0 180 0\");\n          } else {\n            textEl.setAttribute(\"rotation\", \"0 0 0\");\n          }\n          textEl.setAttribute(\"text\", \"width\", 5);\n          textEl.setAttribute(\"position\", \"0 1.5 0\");\n          el.getObject3D(\"mesh\").visible = true;\n          this.semiSphereEl.setAttribute(\"visible\", false);\n          this.peekCameraPortalOrientation = undefined;\n        }\n        if (this.previousQuaternion) {\n          object3D.quaternion.copy(this.previousQuaternion);\n          this.previousQuaternion = undefined;\n        }\n      }\n    };\n  })(),\n\n  hideAll: function () {\n    var el = this.el;\n    var hiddenEls = this.hiddenEls;\n    var self = this;\n    if (hiddenEls.length > 0) {\n      return;\n    }\n    el.sceneEl.object3D.traverse(function (object) {\n      if (object && object.el && object.el.hasAttribute(\"link-controls\")) {\n        return;\n      }\n      if (\n        !object.el ||\n        object === el.sceneEl.object3D ||\n        object.el === el ||\n        object.el === self.sphereEl ||\n        object.el === el.sceneEl.cameraEl ||\n        object.el.getAttribute(\"visible\") === false ||\n        object.el === self.textEl ||\n        object.el === self.semiSphereEl\n      ) {\n        return;\n      }\n      object.el.setAttribute(\"visible\", false);\n      hiddenEls.push(object.el);\n    });\n  },\n\n  showAll: function () {\n    this.hiddenEls.forEach(function (el) {\n      el.setAttribute(\"visible\", true);\n    });\n    this.hiddenEls = [];\n  },\n\n  /**\n   * Calculate whether the camera faces the front or back face of the portal.\n   * @returns {number} > 0 if camera faces front of portal, < 0 if it faces back of portal.\n   */\n  calculateCameraPortalOrientation: (function () {\n    var mat4 = new THREE.Matrix4();\n    var cameraPosition = new THREE.Vector3();\n    var portalNormal = new THREE.Vector3(0, 0, 1);\n    var portalPosition = new THREE.Vector3(0, 0, 0);\n\n    return function () {\n      var el = this.el;\n      var camera = el.sceneEl.camera;\n\n      // Reset tmp variables.\n      cameraPosition.set(0, 0, 0);\n      portalNormal.set(0, 0, 1);\n      portalPosition.set(0, 0, 0);\n\n      // Apply portal orientation to the normal.\n      el.object3D.matrixWorld.extractRotation(mat4);\n      portalNormal.applyMatrix4(mat4);\n\n      // Calculate portal world position.\n      el.object3D.updateMatrixWorld();\n      el.object3D.localToWorld(portalPosition);\n\n      // Calculate camera world position.\n      camera.parent.parent.updateMatrixWorld();\n      camera.parent.updateMatrixWorld();\n      camera.updateMatrixWorld();\n      camera.localToWorld(cameraPosition);\n\n      // Calculate vector from portal to camera.\n      // (portal) -------> (camera)\n      cameraPosition.sub(portalPosition).normalize();\n      portalNormal.normalize();\n\n      // Side where camera approaches portal is given by sign of dot product of portal normal\n      // and portal to camera vectors.\n      return Math.sign(portalNormal.dot(cameraPosition));\n    };\n  })(),\n\n  remove: function () {\n    this.removeEventListener();\n  },\n});\n\n/* eslint-disable */\nregisterShader(\"portal\", {\n  schema: {\n    borderEnabled: { default: 1.0, type: \"int\", is: \"uniform\" },\n    backgroundColor: { default: \"red\", type: \"color\", is: \"uniform\" },\n    pano: { type: \"map\", is: \"uniform\" },\n    strokeColor: { default: \"white\", type: \"color\", is: \"uniform\" },\n  },\n\n  vertexShader: [\n    \"vec3 portalPosition;\",\n    \"varying vec3 vWorldPosition;\",\n    \"varying float vDistanceToCenter;\",\n    \"varying float vDistance;\",\n    \"void main() {\",\n    \"vDistanceToCenter = clamp(length(position - vec3(0.0, 0.0, 0.0)), 0.0, 1.0);\",\n    \"portalPosition = (modelMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;\",\n    \"vDistance = length(portalPosition - cameraPosition);\",\n    \"vWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\",\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\",\n    \"}\",\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"#define RECIPROCAL_PI2 0.15915494\",\n    \"uniform sampler2D pano;\",\n    \"uniform vec3 strokeColor;\",\n    \"uniform vec3 backgroundColor;\",\n    \"uniform float borderEnabled;\",\n    \"varying float vDistanceToCenter;\",\n    \"varying float vDistance;\",\n    \"varying vec3 vWorldPosition;\",\n    \"void main() {\",\n    \"vec3 direction = normalize(vWorldPosition - cameraPosition);\",\n    \"vec2 sampleUV;\",\n    \"float borderThickness = clamp(exp(-vDistance / 50.0), 0.6, 0.95);\",\n    \"sampleUV.y = saturate(direction.y * 0.5  + 0.5);\",\n    \"sampleUV.x = atan(direction.z, -direction.x) * -RECIPROCAL_PI2 + 0.5;\",\n    \"if (vDistanceToCenter > borderThickness && borderEnabled == 1.0) {\",\n    \"gl_FragColor = vec4(strokeColor, 1.0);\",\n    \"} else {\",\n    \"gl_FragColor = mix(texture2D(pano, sampleUV), vec4(backgroundColor, 1.0), clamp(pow((vDistance / 15.0), 2.0), 0.0, 1.0));\",\n    \"}\",\n    \"}\",\n  ].join(\"\\n\"),\n});\n/* eslint-enable */\n",
    "var registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils/\");\nvar bind = utils.bind;\n\n// To avoid recalculation at every mouse movement tick\nvar PI_2 = Math.PI / 2;\n\nvar checkHasPositionalTracking = utils.device.checkHasPositionalTracking;\n\n/**\n * look-controls. Update entity pose, factoring mouse, touch, and WebVR API data.\n */\nmodule.exports.Component = registerComponent(\"look-controls\", {\n  dependencies: [\"position\", \"rotation\"],\n\n  schema: {\n    enabled: { default: true },\n    hmdEnabled: { default: true },\n    pointerLockEnabled: { default: false },\n    reverseMouseDrag: { default: false },\n    reverseTouchDrag: { default: false },\n    touchEnabled: { default: true },\n  },\n\n  init: function () {\n    this.previousHMDPosition = new THREE.Vector3();\n    this.hmdQuaternion = new THREE.Quaternion();\n    this.hmdEuler = new THREE.Euler();\n    this.position = new THREE.Vector3();\n    this.velocity = new THREE.Vector3();\n    // To save / restore camera pose\n    this.savedRotation = new THREE.Vector3();\n    this.savedPosition = new THREE.Vector3();\n    this.polyfillObject = new THREE.Object3D();\n    this.rotation = {};\n    this.deltaRotation = {};\n    this.savedPose = null;\n    this.pointerLocked = false;\n    this.setupMouseControls();\n    this.bindMethods();\n\n    this.savedPose = {\n      position: new THREE.Vector3(),\n      rotation: new THREE.Euler(),\n    };\n\n    // Call enter VR handler if the scene has entered VR before the event listeners attached.\n    if (this.el.sceneEl.is(\"vr-mode\")) {\n      this.onEnterVR();\n    }\n  },\n\n  update: function (oldData) {\n    var data = this.data;\n\n    // Disable grab cursor classes if no longer enabled.\n    if (data.enabled !== oldData.enabled) {\n      this.updateGrabCursor(data.enabled);\n    }\n\n    // Reset pitch and yaw if disabling HMD.\n    if (oldData && !data.hmdEnabled && !oldData.hmdEnabled) {\n      this.pitchObject.rotation.set(0, 0, 0);\n      this.yawObject.rotation.set(0, 0, 0);\n    }\n\n    if (oldData && !data.pointerLockEnabled !== oldData.pointerLockEnabled) {\n      this.removeEventListeners();\n      this.addEventListeners();\n      if (this.pointerLocked) {\n        document.exitPointerLock();\n      }\n    }\n  },\n\n  tick: function (t, delta) {\n    var data = this.data;\n    if (!data.enabled) {\n      return;\n    }\n    this.updateOrientation();\n    this.updatePosition(delta);\n  },\n\n  play: function () {\n    this.addEventListeners();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n  },\n\n  remove: function () {\n    this.removeEventListeners();\n  },\n\n  bindMethods: function () {\n    this.onMouseDown = bind(this.onMouseDown, this);\n    this.onMouseMove = bind(this.onMouseMove, this);\n    this.onMouseUp = bind(this.onMouseUp, this);\n    this.onTouchStart = bind(this.onTouchStart, this);\n    this.onTouchMove = bind(this.onTouchMove, this);\n    this.onTouchEnd = bind(this.onTouchEnd, this);\n    this.onPointerLockChange = bind(this.onPointerLockChange, this);\n    this.onPointerLockError = bind(this.onPointerLockError, this);\n  },\n\n  /**\n   * Set up states and Object3Ds needed to store rotation data.\n   */\n  setupMouseControls: function () {\n    this.mouseDown = false;\n    this.pitchObject = new THREE.Object3D();\n    this.yawObject = new THREE.Object3D();\n    this.yawObject.position.y = 10;\n    this.yawObject.add(this.pitchObject);\n  },\n\n  /**\n   * Add mouse and touch event listeners to canvas.\n   */\n  addEventListeners: function () {\n    var sceneEl = this.el.sceneEl;\n    var canvasEl = sceneEl.canvas;\n\n    // Wait for canvas to load.\n    if (!canvasEl) {\n      sceneEl.addEventListener(\n        \"render-target-loaded\",\n        bind(this.addEventListeners, this)\n      );\n      return;\n    }\n\n    // Mouse events.\n    canvasEl.addEventListener(\"mousedown\", this.onMouseDown, false);\n    window.addEventListener(\"mousemove\", this.onMouseMove, false);\n    window.addEventListener(\"mouseup\", this.onMouseUp, false);\n\n    // Touch events.\n    canvasEl.addEventListener(\"touchstart\", this.onTouchStart);\n    window.addEventListener(\"touchmove\", this.onTouchMove);\n    window.addEventListener(\"touchend\", this.onTouchEnd);\n\n    // Pointer Lock events.\n    if (this.data.pointerLockEnabled) {\n      document.addEventListener(\n        \"pointerlockchange\",\n        this.onPointerLockChange,\n        false\n      );\n      document.addEventListener(\n        \"mozpointerlockchange\",\n        this.onPointerLockChange,\n        false\n      );\n      document.addEventListener(\n        \"pointerlockerror\",\n        this.onPointerLockError,\n        false\n      );\n    }\n  },\n\n  /**\n   * Remove mouse and touch event listeners from canvas.\n   */\n  removeEventListeners: function () {\n    var sceneEl = this.el.sceneEl;\n    var canvasEl = sceneEl && sceneEl.canvas;\n\n    if (!canvasEl) {\n      return;\n    }\n\n    // Mouse events.\n    canvasEl.removeEventListener(\"mousedown\", this.onMouseDown);\n    window.removeEventListener(\"mousemove\", this.onMouseMove);\n    window.removeEventListener(\"mouseup\", this.onMouseUp);\n\n    // Touch events.\n    canvasEl.removeEventListener(\"touchstart\", this.onTouchStart);\n    window.removeEventListener(\"touchmove\", this.onTouchMove);\n    window.removeEventListener(\"touchend\", this.onTouchEnd);\n\n    // sceneEl events.\n    sceneEl.removeEventListener(\"enter-vr\", this.onEnterVR);\n    sceneEl.removeEventListener(\"exit-vr\", this.onExitVR);\n\n    // Pointer Lock events.\n    document.removeEventListener(\n      \"pointerlockchange\",\n      this.onPointerLockChange,\n      false\n    );\n    document.removeEventListener(\n      \"mozpointerlockchange\",\n      this.onPointerLockChange,\n      false\n    );\n    document.removeEventListener(\n      \"pointerlockerror\",\n      this.onPointerLockError,\n      false\n    );\n  },\n\n  /**\n   * Update orientation for mobile, mouse drag, and headset.\n   * Mouse-drag only enabled if HMD is not active.\n   */\n  updateOrientation: function () {\n    var el = this.el;\n    var hmdEuler = this.hmdEuler;\n    var hmdQuaternion = this.hmdQuaternion;\n    var pitchObject = this.pitchObject;\n    var yawObject = this.yawObject;\n    var sceneEl = this.el.sceneEl;\n\n    // In VR mode, THREE is in charge of updating the camera rotation.\n    if (sceneEl.is(\"vr-mode\") && sceneEl.checkHeadsetConnected()) {\n      hmdQuaternion = hmdQuaternion.copy(this.dolly.quaternion);\n      hmdEuler.setFromQuaternion(hmdQuaternion, \"YXZ\");\n      el.object3D.rotation.copy(hmdEuler);\n      return;\n    }\n\n    // Calculate polyfilled HMD quaternion.\n    hmdEuler.setFromQuaternion(this.polyfillObject.quaternion, \"YXZ\");\n    // On mobile, do camera rotation with touch events and sensors.\n    el.object3D.rotation.x = hmdEuler.x + pitchObject.rotation.x;\n    el.object3D.rotation.y = hmdEuler.y + yawObject.rotation.y;\n  },\n\n  updatePosition: function (delta) {\n    var el = this.el;\n    var velocity = this.velocity;\n\n    // Update velocity.\n    delta = delta / 1000;\n    this.updateVelocity(delta);\n\n    if (!velocity.z) {\n      return;\n    }\n\n    const movement = this.getMovementVector(delta);\n    el.object3D.position.y += movement.y;\n    el.object3D.position.x += movement.x;\n    el.object3D.position.z += movement.z;\n  },\n\n  updateVelocity: function (delta) {\n    var acceleration;\n    var velocity = this.velocity;\n\n    // If FPS too low, reset velocity.\n    if (delta > 0.2) {\n      velocity.z = 0;\n      return;\n    }\n\n    if (isNaN(velocity.z)) {\n      velocity.z = 0;\n    }\n\n    // Decay velocity.\n    if (velocity.z !== 0) {\n      velocity.z -= velocity.z * 20 * delta;\n    }\n    // Clamp velocity easing.\n    if (Math.abs(velocity.z) < 0.00001) {\n      velocity.z = 0;\n    }\n\n    // Update velocity using keys pressed.\n    acceleration = 65;\n    velocity.z -= this.zoom * acceleration * delta;\n  },\n\n  /**\n   * Translate mouse drag into rotation.\n   *\n   * Dragging up and down rotates the camera around the X-axis (yaw).\n   * Dragging left and right rotates the camera around the Y-axis (pitch).\n   */\n  onMouseMove: function (event) {\n    var direction;\n    var movementX;\n    var movementY;\n    var pitchObject = this.pitchObject;\n    var previousMouseCoordinates = this.previousMouseCoordinates;\n    var yawObject = this.yawObject;\n\n    if (!previousMouseCoordinates) {\n      this.previousMouseCoordinates = {\n        x: event.clientX,\n        y: event.clientY,\n      };\n      return;\n    }\n\n    // Not dragging or not enabled.\n    if (!this.data.enabled || (!this.mouseDown && !this.pointerLocked)) {\n      return;\n    }\n\n    // Calculate delta.\n    if (this.pointerLocked) {\n      movementX = event.movementX || event.mozMovementX || 0;\n      movementY = event.movementY || event.mozMovementY || 0;\n    } else {\n      movementX = event.clientX - previousMouseCoordinates.x;\n      movementY = event.clientY - previousMouseCoordinates.y;\n    }\n    this.previousMouseCoordinates = {\n      x: event.clientX,\n      y: event.clientY,\n    };\n\n    // Calculate rotation.\n    direction = this.data.reverseMouseDrag ? 1 : -1;\n    yawObject.rotation.y += movementX * 0.002 * direction;\n    pitchObject.rotation.x += movementY * 0.002 * direction;\n    pitchObject.rotation.x = Math.max(\n      -PI_2,\n      Math.min(PI_2, pitchObject.rotation.x)\n    );\n  },\n\n  /**\n   * Register mouse down to detect mouse drag.\n   */\n  onMouseDown: function (evt) {\n    if (!this.data.enabled) {\n      return;\n    }\n    // Handle only primary button.\n    if (evt.button !== 0) {\n      return;\n    }\n\n    var sceneEl = this.el.sceneEl;\n    var canvasEl = sceneEl && sceneEl.canvas;\n\n    this.mouseDown = true;\n    this.previousMouseCoordinates = null;\n    this.showGrabbingCursor();\n\n    if (this.data.pointerLockEnabled && !this.pointerLocked) {\n      if (canvasEl.requestPointerLock) {\n        canvasEl.requestPointerLock();\n      } else if (canvasEl.mozRequestPointerLock) {\n        canvasEl.mozRequestPointerLock();\n      }\n    }\n  },\n\n  /**\n   * Shows grabbing cursor on scene\n   */\n  showGrabbingCursor: function () {\n    this.el.sceneEl.canvas.style.cursor = \"grabbing\";\n  },\n\n  /**\n   * Hides grabbing cursor on scene\n   */\n  hideGrabbingCursor: function () {\n    this.el.sceneEl.canvas.style.cursor = \"\";\n  },\n\n  /**\n   * Register mouse up to detect release of mouse drag.\n   */\n  onMouseUp: function () {\n    this.mouseDown = false;\n    this.hideGrabbingCursor();\n  },\n\n  touchDistance: function (touchA, touchB) {\n    return Math.sqrt(\n      (touchA.pageX - touchB.pageX) ** 2 + (touchA.pageY - touchB.pageY) ** 2\n    );\n  },\n\n  /**\n   * Register touch down to detect touch drag.\n   */\n  onTouchStart: function (evt) {\n    if (!this.data.touchEnabled) {\n      return;\n    }\n\n    if (evt.targetTouches.length === 2 && !this.gesturing) {\n      evt.preventDefault();\n\n      const touchA = evt.targetTouches[0];\n      const touchB = evt.targetTouches[1];\n\n      this.gesturing = true;\n      this.gestureStartDist = this.touchDistance(touchA, touchB);\n      this.gestureStartPoints = [\n        [touchA.pageX, touchA.pageY],\n        [touchB.pageX, touchB.pageY],\n      ];\n    } else if (evt.targetTouches.length === 1 && !this.gesturing) {\n      this.gestureStartPoints = [[evt.touches[0].pageX, evt.touches[0].pageY]];\n    }\n\n    this.gestureTouches = [];\n    for (const touch of evt.targetTouches) {\n      this.gestureTouches.push(touch);\n    }\n\n    this.touchStarted = true;\n  },\n\n  /**\n   * Translate touch move to Y-axis rotation.\n   */\n  onTouchMove: function (evt) {\n    let changed = false;\n    for (const touch of evt.changedTouches) {\n      if (touch.identifier === this.gestureTouches[0].identifier) {\n        changed = true;\n        this.gestureTouches[0] = touch;\n      }\n\n      if (\n        this.gestureTouches.length > 1 &&\n        touch.identifier === this.gestureTouches[1].identifier\n      ) {\n        changed = true;\n        this.gestureTouches[1] = touch;\n      }\n    }\n\n    if (!this.gesturing) {\n      var direction;\n      var canvas = this.el.sceneEl.canvas;\n      var deltaY, deltaX;\n      var yawObject = this.yawObject;\n      var pitchObject = this.pitchObject;\n\n      if (!this.touchStarted || !this.data.touchEnabled) {\n        return;\n      }\n\n      const touchStart = this.gestureStartPoints[0];\n      const touchEvent = this.gestureTouches.filter((x) => !x.ended)[0];\n\n      deltaY =\n        (2 * Math.PI * (evt.touches[0].pageX - touchStart[0])) /\n        canvas.clientWidth;\n      deltaX =\n        (2 * Math.PI * (evt.touches[0].pageY - touchStart[1])) /\n        canvas.clientHeight;\n\n      direction = this.data.reverseTouchDrag ? 1 : -1;\n      // Limit touch orientaion to to yaw (y axis).\n      yawObject.rotation.y -= deltaY * 0.5 * direction;\n      pitchObject.rotation.x -= deltaX * 0.5 * direction;\n      pitchObject.rotation.x = Math.max(\n        -PI_2,\n        Math.min(PI_2, pitchObject.rotation.x)\n      );\n      this.gestureStartPoints[0] = [touchEvent.pageX, touchEvent.pageY];\n    } else {\n      if (!changed) {\n        return;\n      }\n\n      const newDist = this.touchDistance(...this.gestureTouches);\n      this.zoom = -1 * (1 - newDist / this.gestureStartDist);\n    }\n  },\n\n  /**\n   * Register touch end to detect release of touch drag.\n   */\n  onTouchEnd: function (e) {\n    if (!this.gestureTouches) return;\n\n    for (const touch of e.changedTouches) {\n      if (\n        touch.identifier === this.gestureTouches[0].identifier ||\n        touch.identifier === this.gestureTouches[1].identifier\n      ) {\n        if (touch.identifier === this.gestureTouches[0].identifier) {\n          this.gestureTouches[0].ended = true;\n        } else {\n          this.gestureTouches[1].ended = true;\n        }\n\n        if (this.gesturing) {\n          e.preventDefault();\n        }\n\n        this.gesturing = false;\n        this.zoom = 0;\n        break;\n      }\n    }\n\n    if (!this.gestureTouches.filter((x) => !x.ended).length) {\n      this.touchStarted = false;\n    } else {\n      const touchEvent = this.gestureTouches.filter((x) => !x.ended)[0];\n      if (touchEvent) {\n        this.gestureStartPoints[0] = [touchEvent.pageX, touchEvent.pageY];\n      } else {\n        this.touchStarted = false;\n      }\n    }\n  },\n\n  /**\n   * Update Pointer Lock state.\n   */\n  onPointerLockChange: function () {\n    this.pointerLocked = !!(\n      document.pointerLockElement || document.mozPointerLockElement\n    );\n  },\n\n  /**\n   * Recover from Pointer Lock error.\n   */\n  onPointerLockError: function () {\n    this.pointerLocked = false;\n  },\n\n  /**\n   * Toggle the feature of showing/hiding the grab cursor.\n   */\n  updateGrabCursor: function (enabled) {\n    var sceneEl = this.el.sceneEl;\n\n    function enableGrabCursor() {\n      sceneEl.canvas.classList.add(\"a-grab-cursor\");\n    }\n    function disableGrabCursor() {\n      sceneEl.canvas.classList.remove(\"a-grab-cursor\");\n    }\n\n    if (!sceneEl.canvas) {\n      if (enabled) {\n        sceneEl.addEventListener(\"render-target-loaded\", enableGrabCursor);\n      } else {\n        sceneEl.addEventListener(\"render-target-loaded\", disableGrabCursor);\n      }\n      return;\n    }\n\n    if (enabled) {\n      enableGrabCursor();\n      return;\n    }\n    disableGrabCursor();\n  },\n\n  getMovementVector: (function () {\n    var directionVector = new THREE.Vector3(0, 0, 0);\n    var rotationEuler = new THREE.Euler(0, 0, 0, \"YXZ\");\n\n    return function (delta) {\n      var rotation = this.el.getAttribute(\"rotation\");\n      var velocity = this.velocity;\n\n      directionVector.copy(velocity);\n      directionVector.multiplyScalar(delta);\n\n      // Absolute.\n      if (!rotation) {\n        return directionVector;\n      }\n\n      // Transform direction relative to heading.\n      rotationEuler.set(\n        THREE.Math.degToRad(rotation.x),\n        THREE.Math.degToRad(rotation.y),\n        THREE.Math.degToRad(rotation.z)\n      );\n      directionVector.applyEuler(rotationEuler);\n      return directionVector;\n    };\n  })(),\n});\n",
    "/* global Promise */\nvar utils = require(\"../utils/\");\nvar component = require(\"../core/component\");\nvar THREE = require(\"../lib/three\");\nvar shader = require(\"../core/shader\");\n\nvar error = utils.debug(\"components:material:error\");\nvar registerComponent = component.registerComponent;\nvar shaders = shader.shaders;\nvar shaderNames = shader.shaderNames;\n\n/**\n * Material component.\n *\n * @member {object} shader - Determines how material is shaded. Defaults to `standard`,\n *         three.js's implementation of PBR. Another standard shading model is `flat` which\n *         uses MeshBasicMaterial.\n */\nmodule.exports.Component = registerComponent(\"material\", {\n  schema: {\n    alphaTest: { default: 0.0, min: 0.0, max: 1.0 },\n    depthTest: { default: true },\n    depthWrite: { default: true },\n    flatShading: { default: false },\n    npot: { default: false },\n    offset: { type: \"vec2\", default: { x: 0, y: 0 } },\n    opacity: { default: 1.0, min: 0.0, max: 1.0 },\n    repeat: { type: \"vec2\", default: { x: 1, y: 1 } },\n    shader: { default: \"standard\", oneOf: shaderNames, schemaChange: true },\n    side: { default: \"front\", oneOf: [\"front\", \"back\", \"double\"] },\n    transparent: { default: false },\n    vertexColors: {\n      type: \"string\",\n      default: \"none\",\n      oneOf: [\"face\", \"vertex\"],\n    },\n    visible: { default: true },\n    blending: {\n      default: \"normal\",\n      oneOf: [\"none\", \"normal\", \"additive\", \"subtractive\", \"multiply\"],\n    },\n  },\n\n  init: function () {\n    this.material = null;\n  },\n\n  /**\n   * Update or create material.\n   *\n   * @param {object|null} oldData\n   */\n  update: function (oldData) {\n    var data = this.data;\n    if (!this.shader || data.shader !== oldData.shader) {\n      this.updateShader(data.shader);\n    }\n    this.shader.update(this.data);\n    this.updateMaterial(oldData);\n  },\n\n  updateSchema: function (data) {\n    var currentShader;\n    var newShader;\n    var schema;\n    var shader;\n\n    newShader = data && data.shader;\n    currentShader = this.oldData && this.oldData.shader;\n    shader = newShader || currentShader;\n    schema = shaders[shader] && shaders[shader].schema;\n\n    if (!schema) {\n      error(\"Unknown shader schema \" + shader);\n    }\n    if (currentShader && newShader === currentShader) {\n      return;\n    }\n    this.extendSchema(schema);\n    this.updateBehavior();\n  },\n\n  updateBehavior: function () {\n    var key;\n    var sceneEl = this.el.sceneEl;\n    var schema = this.schema;\n    var self = this;\n    var tickProperties;\n\n    function tickTime(time, delta) {\n      var key;\n      for (key in tickProperties) {\n        tickProperties[key] = time;\n      }\n      self.shader.update(tickProperties);\n    }\n\n    this.tick = undefined;\n\n    tickProperties = {};\n    for (key in schema) {\n      if (schema[key].type === \"time\") {\n        this.tick = tickTime;\n        tickProperties[key] = true;\n      }\n    }\n\n    if (!sceneEl) {\n      return;\n    }\n    if (this.tick) {\n      sceneEl.addBehavior(this);\n    } else {\n      sceneEl.removeBehavior(this);\n    }\n  },\n\n  updateShader: function (shaderName) {\n    var data = this.data;\n    var Shader = shaders[shaderName] && shaders[shaderName].Shader;\n    var shaderInstance;\n\n    if (!Shader) {\n      throw new Error(\"Unknown shader \" + shaderName);\n    }\n\n    // Get material from A-Frame shader.\n    shaderInstance = this.shader = new Shader();\n    shaderInstance.el = this.el;\n    shaderInstance.init(data);\n    this.setMaterial(shaderInstance.material);\n    this.updateSchema(data);\n  },\n\n  /**\n   * Set and update base material properties.\n   * Set `needsUpdate` when needed.\n   */\n  updateMaterial: function (oldData) {\n    var data = this.data;\n    var material = this.material;\n    var oldDataHasKeys;\n\n    // Base material properties.\n    material.alphaTest = data.alphaTest;\n    material.depthTest = data.depthTest !== false;\n    material.depthWrite = data.depthWrite !== false;\n    material.opacity = data.opacity;\n    material.flatShading = data.flatShading;\n    material.side = parseSide(data.side);\n    material.transparent = data.transparent !== false || data.opacity < 1.0;\n    material.vertexColors = parseVertexColors(data.vertexColors);\n    material.visible = data.visible;\n    material.blending = parseBlending(data.blending);\n\n    // Check if material needs update.\n    for (oldDataHasKeys in oldData) {\n      break;\n    }\n    if (\n      oldDataHasKeys &&\n      (oldData.alphaTest !== data.alphaTest ||\n        oldData.side !== data.side ||\n        oldData.vertexColors !== data.vertexColors)\n    ) {\n      material.needsUpdate = true;\n    }\n  },\n\n  /**\n   * Remove material on remove (callback).\n   * Dispose of it from memory and unsubscribe from scene updates.\n   */\n  remove: function () {\n    var defaultMaterial = new THREE.MeshBasicMaterial();\n    var material = this.material;\n    var object3D = this.el.getObject3D(\"mesh\");\n    if (object3D) {\n      object3D.material = defaultMaterial;\n    }\n    disposeMaterial(material, this.system);\n  },\n\n  /**\n   * (Re)create new material. Has side-effects of setting `this.material` and updating\n   * material registration in scene.\n   *\n   * @param {object} data - Material component data.\n   * @param {object} type - Material type to create.\n   * @returns {object} Material.\n   */\n  setMaterial: function (material) {\n    var el = this.el;\n    var mesh;\n    var system = this.system;\n\n    if (this.material) {\n      disposeMaterial(this.material, system);\n    }\n\n    this.material = material;\n    system.registerMaterial(material);\n\n    // Set on mesh. If mesh does not exist, wait for it.\n    mesh = el.getObject3D(\"mesh\");\n    if (mesh) {\n      mesh.material = material;\n    } else {\n      el.addEventListener(\"object3dset\", function waitForMesh(evt) {\n        if (evt.detail.type !== \"mesh\" || evt.target !== el) {\n          return;\n        }\n        el.getObject3D(\"mesh\").material = material;\n        el.removeEventListener(\"object3dset\", waitForMesh);\n      });\n    }\n  },\n});\n\n/**\n * Return a three.js constant determining which material face sides to render\n * based on the side parameter (passed as a component property).\n *\n * @param {string} [side=front] - `front`, `back`, or `double`.\n * @returns {number} THREE.FrontSide, THREE.BackSide, or THREE.DoubleSide.\n */\nfunction parseSide(side) {\n  switch (side) {\n    case \"back\": {\n      return THREE.BackSide;\n    }\n    case \"double\": {\n      return THREE.DoubleSide;\n    }\n    default: {\n      // Including case `front`.\n      return THREE.FrontSide;\n    }\n  }\n}\n\n/**\n * Return a three.js constant determining vertex coloring.\n */\nfunction parseVertexColors(coloring) {\n  switch (coloring) {\n    case \"face\": {\n      return THREE.FaceColors;\n    }\n    case \"vertex\": {\n      return THREE.VertexColors;\n    }\n    default: {\n      return THREE.NoColors;\n    }\n  }\n}\n\n/**\n * Return a three.js constant determining blending\n *\n * @param {string} [blending=normal]\n * - `none`, additive`, `subtractive`,`multiply` or `normal`.\n * @returns {number}\n */\nfunction parseBlending(blending) {\n  switch (blending) {\n    case \"none\": {\n      return THREE.NoBlending;\n    }\n    case \"additive\": {\n      return THREE.AdditiveBlending;\n    }\n    case \"subtractive\": {\n      return THREE.SubtractiveBlending;\n    }\n    case \"multiply\": {\n      return THREE.MultiplyBlending;\n    }\n    default: {\n      return THREE.NormalBlending;\n    }\n  }\n}\n\n/**\n * Dispose of material from memory and unsubscribe material from scene updates like fog.\n */\nfunction disposeMaterial(material, system) {\n  material.dispose();\n  system.unregisterMaterial(material);\n}\n",
    "var debug = require(\"../utils/debug\");\nvar registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\n\nvar warn = debug(\"components:obj-model:warn\");\n\nmodule.exports.Component = registerComponent(\"obj-model\", {\n  schema: {\n    mtl: { type: \"model\" },\n    obj: { type: \"model\" },\n    renderOrder: { default: 0 },\n  },\n\n  init: function () {\n    this.model = null;\n    this.objLoader = new THREE.OBJLoader();\n    this.mtlLoader = new THREE.MTLLoader(this.objLoader.manager);\n    // Allow cross-origin images to be loaded.\n    this.mtlLoader.crossOrigin = \"\";\n  },\n\n  update: function () {\n    var data = this.data;\n    if (!data.obj) {\n      return;\n    }\n    this.resetMesh();\n    this.loadObj(data.obj, data.mtl);\n  },\n\n  remove: function () {\n    if (!this.model) {\n      return;\n    }\n    this.resetMesh();\n  },\n\n  resetMesh: function () {\n    this.el.removeObject3D(\"mesh\");\n  },\n\n  loadObj: function (objUrl, mtlUrl) {\n    var self = this;\n    var el = this.el;\n    var mtlLoader = this.mtlLoader;\n    var objLoader = this.objLoader;\n\n    if (mtlUrl) {\n      // .OBJ with an .MTL.\n      if (el.hasAttribute(\"material\")) {\n        warn(\n          \"Material component properties are ignored when a .MTL is provided\"\n        );\n      }\n      mtlLoader.setTexturePath(mtlUrl.substr(0, mtlUrl.lastIndexOf(\"/\") + 1));\n      mtlLoader.load(mtlUrl, function (materials) {\n        materials.preload();\n        objLoader.setMaterials(materials);\n        objLoader.load(objUrl, function (objModel) {\n          self.model = objModel;\n          objModel.renderOrder = self.data.renderOrder;\n          el.setObject3D(\"mesh\", objModel);\n          el.emit(\"model-loaded\", { format: \"obj\", model: objModel });\n        });\n      });\n      return;\n    }\n\n    // .OBJ only.\n    objLoader.load(objUrl, function loadObjOnly(objModel) {\n      // Apply material.\n      var material = el.components.material;\n      if (material) {\n        objModel.traverse(function (child) {\n          if (child instanceof THREE.Mesh) {\n            child.material = material.material;\n          }\n        });\n      }\n\n      objModel.renderOrder = self.data.renderOrder;\n      self.model = objModel;\n      el.setObject3D(\"mesh\", objModel);\n      el.emit(\"model-loaded\", { format: \"obj\", model: objModel });\n    });\n  },\n});\n",
    "var registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\n\n/**\n * Camera component.\n * Pairs along with camera system to handle tracking the active camera.\n */\nmodule.exports.Component = registerComponent(\"orthographic-camera\", {\n  schema: {\n    active: { default: false },\n    far: { default: 10000 },\n    fov: { default: 80, min: 0 },\n    near: { default: 0.005, min: 0 },\n    viewportPosition: { default: 0 },\n    viewport: { default: 4 },\n    fullscreen: { default: false },\n    frustum: { default: 1.8 },\n    aspect: { default: null },\n  },\n\n  /**\n   * Initialize three.js camera and add it to the entity.\n   * Add reference from scene to this entity as the camera.\n   */\n  init: function () {\n    var camera;\n    var el = this.el;\n\n    // Create camera.\n    const aspect = this.data.aspect || window.innerWidth / window.innerHeight;\n    const frustum = this.data.frustum;\n    camera = this.camera = new THREE.OrthographicCamera(\n      -frustum,\n      frustum,\n      frustum / aspect,\n      -frustum / aspect,\n      this.data.near,\n      this.data.far\n    );\n    el.setObject3D(\"camera\", camera);\n\n    const captureThis = this;\n    window.addEventListener(\"resize\", function () {\n      captureThis.update(captureThis.data);\n    });\n  },\n\n  /**\n   * Update three.js camera.\n   */\n  update: function (oldData) {\n    var data = this.data;\n    var camera = this.camera;\n    const frustum = data.frustum;\n    const aspect = data.aspect;\n\n    // Update properties.\n    camera.fov = data.fov;\n    camera.left = -frustum;\n    camera.right = frustum;\n    camera.top = frustum / aspect;\n    camera.bottom = -frustum / aspect;\n    camera.near = data.near;\n    camera.far = data.far;\n    camera.updateProjectionMatrix();\n\n    this.updateActiveCamera(oldData);\n  },\n\n  updateActiveCamera: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n    var system = el.sceneEl.systems.camera;\n    // spectator property did not change.\n    if (oldData && oldData.active === data.active) {\n      return;\n    }\n\n    // If `spectator` property changes, or first update, handle spectator camera with system.\n    if (data.active) {\n      // Camera enabled. Set camera to this camera.\n      system.addAdditiveCamera(el);\n    } else if (!data.active) {\n      // Camera disabled. Set camera to another camera.\n      system.removeAdditiveCamera(el);\n    }\n  },\n\n  /**\n   * Remove camera on remove (callback).\n   */\n  remove: function () {\n    this.el.removeObject3D(\"camera\");\n  },\n});\n",
    "var registerComponent = require(\"../core/component\").registerComponent;\n\nmodule.exports.Component = registerComponent(\"position\", {\n  schema: { type: \"vec3\" },\n\n  update: function () {\n    var object3D = this.el.object3D;\n    var data = this.data;\n    this.needsUpdateMatrix = true;\n    object3D.position.set(data.x, data.y, data.z);\n\n    setTimeout(() => {\n      object3D.updateMatrix(true);\n    }, 100);\n  },\n\n  remove: function () {\n    // Pretty much for mixins.\n    this.el.object3D.position.set(0, 0, 0);\n  },\n});\n",
    "/* global MutationObserver */\n\nvar registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils/\");\n\nvar warn = utils.debug(\"components:raycaster:warn\");\n\n// Defines selectors that should be 'safe' for the MutationObserver used to\n// refresh the whitelist. Matches classnames, IDs, and presence of attributes.\n// Selectors for the value of an attribute, like [position=0 2 0], cannot be\n// reliably detected and are therefore disallowed.\nvar OBSERVER_SELECTOR_RE = /^[\\w\\s-.,[\\]#]*$/;\n\n// Configuration for the MutationObserver used to refresh the whitelist.\n// Listens for addition/removal of elements and attributes within the scene.\nvar OBSERVER_CONFIG = {\n  childList: true,\n  attributes: true,\n  subtree: true,\n};\n\nvar EVENTS = {\n  INTERSECT: \"raycaster-intersected\",\n  INTERSECTION: \"raycaster-intersection\",\n  INTERSECT_CLEAR: \"raycaster-intersected-cleared\",\n  INTERSECTION_CLEAR: \"raycaster-intersection-cleared\",\n};\n\n/**\n * Raycaster component.\n *\n * Pass options to three.js Raycaster including which objects to test.\n * Poll for intersections.\n * Emit event on origin entity and on target entity on intersect.\n *\n * @member {array} intersectedEls - List of currently intersected entities.\n * @member {array} objects - Cached list of meshes to intersect.\n * @member {number} prevCheckTime - Previous time intersection was checked. To help interval.\n * @member {object} raycaster - three.js Raycaster.\n */\nmodule.exports.Component = registerComponent(\"raycaster\", {\n  schema: {\n    autoRefresh: { default: true },\n    direction: { type: \"vec3\", default: { x: 0, y: 0, z: -1 } },\n    enabled: { default: true },\n    far: { default: 1000 },\n    interval: { default: 0 },\n    near: { default: 0 },\n    objects: { default: \"\" },\n    origin: { type: \"vec3\" },\n    recursive: { default: true },\n    showLine: { default: false },\n    useWorldCoordinates: { default: false },\n  },\n\n  multiple: true,\n\n  init: function () {\n    this.clearedIntersectedEls = [];\n    this.unitLineEndVec3 = new THREE.Vector3();\n    this.intersectedEls = [];\n    this.intersections = [];\n    this.newIntersectedEls = [];\n    this.newIntersections = [];\n    this.objects = [];\n    this.prevCheckTime = undefined;\n    this.prevIntersectedEls = [];\n    this.rawIntersections = [];\n    this.raycaster = new THREE.Raycaster();\n    this.updateOriginDirection();\n    this.setDirty = this.setDirty.bind(this);\n    this.updateLine = this.updateLine.bind(this);\n    this.observer = new MutationObserver(this.setDirty);\n    this.dirty = true;\n    this.lineEndVec3 = new THREE.Vector3();\n    this.otherLineEndVec3 = new THREE.Vector3();\n    this.lineData = { end: this.lineEndVec3 };\n\n    this.getIntersection = this.getIntersection.bind(this);\n    this.intersectedDetail = {\n      el: this.el,\n      getIntersection: this.getIntersection,\n    };\n    this.intersectedClearedDetail = { el: this.el };\n    this.intersectionClearedDetail = { clearedEls: this.clearedIntersectedEls };\n    this.intersectionDetail = {};\n  },\n\n  /**\n   * Create or update raycaster object.\n   */\n  update: function (oldData) {\n    var data = this.data;\n    var el = this.el;\n    var raycaster = this.raycaster;\n\n    // Set raycaster properties.\n    raycaster.far = data.far;\n    raycaster.near = data.near;\n\n    // Draw line.\n    if (\n      data.showLine &&\n      (data.far !== oldData.far ||\n        data.origin !== oldData.origin ||\n        data.direction !== oldData.direction ||\n        !oldData.showLine)\n    ) {\n      // Calculate unit vector for line direction. Can be multiplied via scalar to performantly\n      // adjust line length.\n      this.unitLineEndVec3.copy(data.origin).add(data.direction).normalize();\n      this.drawLine();\n    }\n\n    if (!data.showLine && oldData.showLine) {\n      el.removeAttribute(\"line\");\n    }\n\n    if (\n      data.objects !== oldData.objects &&\n      !OBSERVER_SELECTOR_RE.test(data.objects)\n    ) {\n      warn(\n        '[raycaster] Selector \"' +\n          data.objects +\n          '\" may not update automatically with DOM changes.'\n      );\n    }\n\n    if (!data.objects) {\n      warn(\n        \"[raycaster] For performance, please define raycaster.objects when using \" +\n          \"raycaster or cursor components to whitelist which entities to intersect with. \" +\n          'e.g., raycaster=\"objects: [data-raycastable]\".'\n      );\n    }\n\n    if (data.autoRefresh !== oldData.autoRefresh && el.isPlaying) {\n      data.autoRefresh ? this.addEventListeners() : this.removeEventListeners();\n    }\n\n    if (this.data.enabled && !oldData.enabled) {\n      this.addEventListeners();\n    }\n\n    if (!this.data.enabled && oldData.enabled) {\n      this.clearAllIntersections();\n      this.removeEventListeners();\n    }\n\n    this.setDirty();\n  },\n\n  play: function () {\n    this.addEventListeners();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n  },\n\n  remove: function () {\n    if (this.data.showLine) {\n      this.el.removeAttribute(\"line\");\n    }\n    this.clearAllIntersections();\n  },\n\n  addEventListeners: function () {\n    if (!this.data.autoRefresh) {\n      return;\n    }\n    this.observer.observe(this.el.sceneEl, OBSERVER_CONFIG);\n    this.el.sceneEl.addEventListener(\"object3dset\", this.setDirty);\n    this.el.sceneEl.addEventListener(\"object3dremove\", this.setDirty);\n  },\n\n  removeEventListeners: function () {\n    this.observer.disconnect();\n    this.el.sceneEl.removeEventListener(\"object3dset\", this.setDirty);\n    this.el.sceneEl.removeEventListener(\"object3dremove\", this.setDirty);\n  },\n\n  /**\n   * Mark the object list as dirty, to be refreshed before next raycast.\n   */\n  setDirty: function () {\n    this.dirty = true;\n  },\n\n  /**\n   * Update list of objects to test for intersection.\n   */\n  refreshObjects: function () {\n    var data = this.data;\n    var els;\n\n    // If objects not defined, intersect with everything.\n    els = data.objects\n      ? this.el.sceneEl.querySelectorAll(data.objects)\n      : this.el.sceneEl.children;\n    this.objects = this.flattenObject3DMaps(els);\n    this.dirty = false;\n  },\n\n  /**\n   * Check for intersections and cleared intersections on an interval.\n   */\n  tick: function (time) {\n    var data = this.data;\n    var prevCheckTime = this.prevCheckTime;\n\n    if (!data.enabled) {\n      return;\n    }\n\n    // Only check for intersection if interval time has passed.\n    if (prevCheckTime && time - prevCheckTime < data.interval) {\n      return;\n    }\n\n    // Update check time.\n    this.prevCheckTime = time;\n    this.checkIntersections();\n  },\n\n  /**\n   * Raycast for intersections and emit events for current and cleared inersections.\n   */\n  checkIntersections: function () {\n    var clearedIntersectedEls = this.clearedIntersectedEls;\n    var el = this.el;\n    var data = this.data;\n    var i;\n    var intersectedEls = this.intersectedEls;\n    var intersection;\n    var intersections = this.intersections;\n    var newIntersectedEls = this.newIntersectedEls;\n    var newIntersections = this.newIntersections;\n    var prevIntersectedEls = this.prevIntersectedEls;\n    var rawIntersections = this.rawIntersections;\n\n    // Refresh the object whitelist if needed.\n    if (this.dirty) {\n      this.refreshObjects();\n    }\n\n    // Store old previously intersected entities.\n    copyArray(this.prevIntersectedEls, this.intersectedEls);\n\n    // Raycast.\n    this.updateOriginDirection();\n    rawIntersections.length = 0;\n    this.raycaster.intersectObjects(\n      this.objects,\n      data.recursive,\n      rawIntersections\n    );\n\n    // Only keep intersections against objects that have a reference to an entity.\n    intersections.length = 0;\n    intersectedEls.length = 0;\n    for (i = 0; i < rawIntersections.length; i++) {\n      intersection = rawIntersections[i];\n      // Don't intersect with own line.\n      if (data.showLine && intersection.object === el.getObject3D(\"line\")) {\n        continue;\n      }\n      if (intersection.object.el) {\n        intersections.push(intersection);\n        intersectedEls.push(intersection.object.el);\n      }\n    }\n\n    // Get newly intersected entities.\n    newIntersections.length = 0;\n    newIntersectedEls.length = 0;\n    for (i = 0; i < intersections.length; i++) {\n      if (prevIntersectedEls.indexOf(intersections[i].object.el) === -1) {\n        newIntersections.push(intersections[i]);\n        newIntersectedEls.push(intersections[i].object.el);\n      }\n    }\n\n    // Emit intersection cleared on both entities per formerly intersected entity.\n    clearedIntersectedEls.length = 0;\n    for (i = 0; i < prevIntersectedEls.length; i++) {\n      if (intersectedEls.indexOf(prevIntersectedEls[i]) !== -1) {\n        continue;\n      }\n      prevIntersectedEls[i].emit(\n        EVENTS.INTERSECT_CLEAR,\n        this.intersectedClearedDetail\n      );\n      clearedIntersectedEls.push(prevIntersectedEls[i]);\n    }\n    if (clearedIntersectedEls.length) {\n      el.emit(EVENTS.INTERSECTION_CLEAR, this.intersectionClearedDetail);\n    }\n\n    // Emit intersected on intersected entity per intersected entity.\n    for (i = 0; i < newIntersectedEls.length; i++) {\n      newIntersectedEls[i].emit(EVENTS.INTERSECT, this.intersectedDetail);\n    }\n\n    // Emit all intersections at once on raycasting entity.\n    if (newIntersections.length) {\n      this.intersectionDetail.els = newIntersectedEls;\n      this.intersectionDetail.intersections = newIntersections;\n      el.emit(EVENTS.INTERSECTION, this.intersectionDetail);\n    }\n\n    // Update line length.\n    setTimeout(this.updateLine);\n  },\n\n  updateLine: function () {\n    var el = this.el;\n    var intersections = this.intersections;\n    var lineLength;\n\n    if (this.data.showLine) {\n      if (intersections.length) {\n        if (intersections[0].object.el === el && intersections[1]) {\n          lineLength = intersections[1].distance;\n        } else {\n          lineLength = intersections[0].distance;\n        }\n      }\n      this.drawLine(lineLength);\n    }\n  },\n\n  /**\n   * Return the most recent intersection details for a given entity, if any.\n   * @param {AEntity} el\n   * @return {Object}\n   */\n  getIntersection: function (el) {\n    var i;\n    var intersection;\n    for (i = 0; i < this.intersections.length; i++) {\n      intersection = this.intersections[i];\n      if (intersection.object.el === el) {\n        return intersection;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Update origin and direction of raycaster using entity transforms and supplied origin or\n   * direction offsets.\n   */\n  updateOriginDirection: (function () {\n    var direction = new THREE.Vector3();\n    var originVec3 = new THREE.Vector3();\n\n    // Closure to make quaternion/vector3 objects private.\n    return function updateOriginDirection() {\n      var el = this.el;\n      var data = this.data;\n\n      if (data.useWorldCoordinates) {\n        this.raycaster.set(data.origin, data.direction);\n        return;\n      }\n\n      // Grab the position and rotation. (As a side effect, this updates el.object3D.matrixWorld.)\n      el.object3D.getWorldPosition(originVec3);\n\n      // If non-zero origin, translate the origin into world space.\n      if (data.origin.x !== 0 || data.origin.y !== 0 || data.origin.z !== 0) {\n        originVec3 = el.object3D.localToWorld(originVec3.copy(data.origin));\n      }\n\n      // three.js raycaster direction is relative to 0, 0, 0 NOT the origin / offset we\n      // provide. Apply the offset to the direction, then rotation from the object,\n      // and normalize.\n      direction\n        .copy(data.direction)\n        .transformDirection(el.object3D.matrixWorld)\n        .normalize();\n\n      // Apply offset and direction, in world coordinates.\n      this.raycaster.set(originVec3, direction);\n    };\n  })(),\n\n  /**\n   * Create or update line to give raycaster visual representation.\n   * Customize the line through through line component.\n   * We draw the line in the raycaster component to customize the line to the\n   * raycaster's origin, direction, and far.\n   *\n   * Unlike the raycaster, we create the line as a child of the object. The line will\n   * be affected by the transforms of the objects, so we don't have to calculate transforms\n   * like we do with the raycaster.\n   *\n   * @param {number} length - Length of line. Pass in to shorten the line to the intersection\n   *   point. If not provided, length will default to the max length, `raycaster.far`.\n   */\n  drawLine: function (length) {\n    var data = this.data;\n    var el = this.el;\n    var endVec3;\n\n    // Switch each time vector so line update triggered and to avoid unnecessary vector clone.\n    endVec3 =\n      this.lineData.end === this.lineEndVec3\n        ? this.otherLineEndVec3\n        : this.lineEndVec3;\n\n    // Treat Infinity as 1000m for the line.\n    if (length === undefined) {\n      length = data.far === Infinity ? 1000 : data.far;\n    }\n\n    // Update the length of the line if given. `unitLineEndVec3` is the direction\n    // given by data.direction, then we apply a scalar to give it a length.\n    this.lineData.start = data.origin;\n    this.lineData.end = endVec3\n      .copy(this.unitLineEndVec3)\n      .multiplyScalar(length);\n    el.setAttribute(\"line\", this.lineData);\n  },\n\n  /**\n   * Return A-Frame attachments of each element's object3D group (e.g., mesh).\n   * Children are flattened by one level, removing the THREE.Group wrapper,\n   * so that non-recursive raycasting remains useful.\n   *\n   * Only push children defined as component attachemnts (e.g., setObject3D),\n   * not actual children in the scene graph hierarchy.\n   *\n   * @param  {Array<Element>} els\n   * @return {Array<THREE.Object3D>}\n   */\n  flattenObject3DMaps: function (els) {\n    var key;\n    var i;\n    var objects = this.objects;\n\n    // Push meshes and other attachments onto list of objects to intersect.\n    objects.length = 0;\n    for (i = 0; i < els.length; i++) {\n      if (els[i].object3D) {\n        for (key in els[i].object3DMap) {\n          objects.push(els[i].getObject3D(key));\n        }\n      }\n    }\n\n    return objects;\n  },\n\n  clearAllIntersections: function () {\n    var i;\n    for (i = 0; i < this.intersectedEls.length; i++) {\n      this.intersectedEls[i].emit(\n        EVENTS.INTERSECT_CLEAR,\n        this.intersectedClearedDetail\n      );\n    }\n    copyArray(this.clearedIntersectedEls, this.intersectedEls);\n    this.intersectedEls.length = 0;\n    this.intersections.length = 0;\n    this.el.emit(EVENTS.INTERSECTION_CLEAR, this.intersectionClearedDetail);\n  },\n});\n\n/**\n * Copy contents of one array to another without allocating new array.\n */\nfunction copyArray(a, b) {\n  var i;\n  a.length = b.length;\n  for (i = 0; i < b.length; i++) {\n    a[i] = b[i];\n  }\n}\n",
    "var degToRad = require(\"../lib/three\").Math.degToRad;\nvar registerComponent = require(\"../core/component\").registerComponent;\n\nmodule.exports.Component = registerComponent(\"rotation\", {\n  schema: { type: \"vec3\" },\n\n  /**\n   * Updates object3D rotation.\n   */\n  update: function () {\n    var data = this.data;\n    var object3D = this.el.object3D;\n    object3D.rotation.set(degToRad(data.x), degToRad(data.y), degToRad(data.z));\n    object3D.rotation.order = \"YXZ\";\n  },\n\n  remove: function () {\n    // Pretty much for mixins.\n    this.el.object3D.rotation.set(0, 0, 0);\n  },\n});\n",
    "var registerComponent = require(\"../core/component\").registerComponent;\n\n// Avoids triggering a zero-determinant which makes object3D matrix non-invertible.\nvar zeroScale = 0.00001;\n\nmodule.exports.Component = registerComponent(\"scale\", {\n  schema: {\n    type: \"vec3\",\n    default: { x: 1, y: 1, z: 1 },\n  },\n\n  update: function () {\n    var data = this.data;\n    var object3D = this.el.object3D;\n    var x = data.x === 0 ? zeroScale : data.x;\n    var y = data.y === 0 ? zeroScale : data.y;\n    var z = data.z === 0 ? zeroScale : data.z;\n    object3D.scale.set(x, y, z);\n  },\n\n  remove: function () {\n    // Pretty much for mixins.\n    this.el.object3D.scale.set(1, 1, 1);\n  },\n});\n",
    "/* global THREE */\nvar register = require(\"../../core/component\").registerComponent;\n\nmodule.exports.Component = register(\"background\", {\n  schema: {\n    color: { type: \"color\", default: \"black\" },\n    transparent: { default: false },\n  },\n  update: function () {\n    var data = this.data;\n    var object3D = this.el.object3D;\n    if (data.transparent) {\n      object3D.background = null;\n      return;\n    }\n    object3D.background = new THREE.Color(data.color);\n  },\n});\n",
    "var register = require(\"../../core/component\").registerComponent;\n\nmodule.exports.Component = register(\"debug\", {\n  schema: { default: true },\n});\n",
    "/* global THREE */\nvar registerEffect = require(\"../../../core/effect\").registerEffect;\n\nrequire(\"../../../../vendor/effects/CopyShader\");\nrequire(\"../../../../vendor/effects/ShaderPass\");\nrequire(\"../../../../vendor/effects/LuminosityHighPassShader\");\nrequire(\"../../../../vendor/effects/UnrealBloomPass\");\n\nregisterEffect(\"bloom\", {\n  schema: {\n    strength: { default: 1.5 },\n    radius: { default: 0.4 },\n    threshold: { default: 0.5 },\n  },\n\n  initPass: function () {\n    this.pass = new THREE.UnrealBloomPass(\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\n      1.5,\n      0.4,\n      0.85\n    );\n  },\n\n  update: function () {\n    var data = this.data;\n    var pass = this.pass;\n    if (!pass) {\n      return;\n    }\n    pass.strength = data.strength;\n    pass.radius = data.radius;\n    pass.threshold = data.threshold;\n  },\n});\n",
    "require(\"./bloom\");\nrequire(\"./sepia\");\nrequire(\"./ssao\");\n",
    "/* global THREE */\nvar registerEffect = require(\"../../../core/effect\").registerEffect;\n\nrequire(\"../../../../vendor/effects/ShaderPass\");\nrequire(\"../../../../vendor/effects/SepiaShader\");\n\nregisterEffect(\"sepia\", {\n  schema: {\n    amount: { default: 1.0 },\n  },\n\n  initPass: function () {\n    this.pass = new THREE.ShaderPass(THREE.SepiaShader);\n    this.update();\n  },\n\n  update: function () {\n    if (!this.pass) {\n      return;\n    }\n    this.pass.uniforms.amount.value = this.data.amount;\n    this.pass.uniforms.needsUpdate = true;\n  },\n});\n",
    "/* global THREE */\nvar registerEffect = require(\"../../../core/effect\").registerEffect;\n\nrequire(\"../../../../vendor/effects/SSAOShader\");\nrequire(\"../../../../vendor/effects/SSAOPass\");\n\nregisterEffect(\"ssao\", {\n  schema: {\n    radius: { default: 32 },\n    aoClamp: { default: 0.25 },\n    lumInfluence: { default: 0.7 },\n  },\n\n  initPass: function () {\n    this.pass = new THREE.SSAOPass(this.el.object3D, this.el.camera);\n  },\n\n  update: function () {\n    var data = this.data;\n    var pass = this.pass;\n    if (!pass) {\n      return;\n    }\n    pass.radius = data.radius;\n    pass.aoClamp = data.aoClamp;\n    pass.lumInfluence = data.lumInfluence;\n  },\n});\n",
    "var registerComponent = require(\"../../core/component\").registerComponent;\n\n/**\n * Component to embed an a-frame scene within the layout of a 2D page.\n */\nmodule.exports.Component = registerComponent(\"embedded\", {\n  dependencies: [\"vr-mode-ui\"],\n\n  schema: { default: true },\n\n  update: function () {\n    var sceneEl = this.el;\n    var enterVREl = sceneEl.querySelector(\".a-enter-vr\");\n    if (this.data === true) {\n      if (enterVREl) {\n        enterVREl.classList.add(\"embedded\");\n      }\n      sceneEl.removeFullScreenStyles();\n    } else {\n      if (enterVREl) {\n        enterVREl.classList.remove(\"embedded\");\n      }\n      sceneEl.addFullScreenStyles();\n    }\n  },\n});\n",
    "var register = require(\"../../core/component\").registerComponent;\nvar THREE = require(\"../../lib/three\");\nvar debug = require(\"../../utils/debug\");\n\nvar warn = debug(\"components:fog:warn\");\n\n/**\n * Fog component.\n * Applies only to the scene entity.\n */\nmodule.exports.Component = register(\"fog\", {\n  schema: {\n    color: { type: \"color\", default: \"#000\" },\n    density: { default: 0.00025 },\n    far: { default: 1000, min: 0 },\n    near: { default: 1, min: 0 },\n    type: { default: \"linear\", oneOf: [\"linear\", \"exponential\"] },\n  },\n\n  update: function () {\n    var data = this.data;\n    var el = this.el;\n    var fog = this.el.object3D.fog;\n\n    if (!el.isScene) {\n      warn(\"Fog component can only be applied to <a-scene>\");\n      return;\n    }\n\n    // (Re)create fog if fog doesn't exist or fog type changed.\n    if (!fog || data.type !== fog.name) {\n      el.object3D.fog = getFog(data);\n      el.systems.material.updateMaterials();\n      return;\n    }\n\n    // Fog data changed. Update fog.\n    Object.keys(this.schema).forEach(function (key) {\n      var value = data[key];\n      if (key === \"color\") {\n        value = new THREE.Color(value);\n      }\n      fog[key] = value;\n    });\n  },\n\n  /**\n   * Remove fog on remove (callback).\n   */\n  remove: function () {\n    var fog = this.el.object3D.fog;\n    if (!fog) {\n      return;\n    }\n    fog.far = 0;\n    fog.near = 0.1;\n  },\n});\n\n/**\n * Creates a fog object. Sets fog.name to be able to detect fog type changes.\n *\n * @param {object} data - Fog data.\n * @returns {object} fog\n */\nfunction getFog(data) {\n  var fog;\n  if (data.type === \"exponential\") {\n    fog = new THREE.FogExp2(data.color, data.density);\n  } else {\n    fog = new THREE.Fog(data.color, data.near, data.far);\n  }\n  fog.name = data.type;\n  return fog;\n}\n",
    "/* global AFRAME */\nvar AFRAME_INJECTED = require(\"../../constants\").AFRAME_INJECTED;\nvar bind = require(\"../../utils/bind\");\nvar pkg = require(\"../../../package\");\nvar registerComponent = require(\"../../core/component\").registerComponent;\n\n/**\n * 0.4.2 to 0.4.x\n * Will need to update this when A-Frame goes to 1.x.x.\n */\nfunction getFuzzyPatchVersion(version) {\n  var split = version.split(\".\");\n  split[2] = \"x\";\n  return split.join(\".\");\n}\n\nvar INSPECTOR_DEV_URL =\n  \"https://aframe.io/aframe-inspector/dist/aframe-inspector.js\";\nvar INSPECTOR_RELEASE_URL =\n  \"https://unpkg.com/aframe-inspector@\" +\n  getFuzzyPatchVersion(pkg.version) +\n  \"/dist/aframe-inspector.min.js\";\nvar INSPECTOR_URL =\n  process.env.INSPECTOR_VERSION === \"dev\"\n    ? INSPECTOR_DEV_URL\n    : INSPECTOR_RELEASE_URL;\nvar LOADING_MESSAGE = \"Loading Inspector\";\nvar LOADING_ERROR_MESSAGE = \"Error loading Inspector\";\n\nmodule.exports.Component = registerComponent(\"inspector\", {\n  schema: {\n    url: { default: INSPECTOR_URL },\n  },\n\n  init: function () {\n    this.onKeydown = bind(this.onKeydown, this);\n    this.onMessage = bind(this.onMessage, this);\n    this.initOverlay();\n    window.addEventListener(\"keydown\", this.onKeydown);\n    window.addEventListener(\"message\", this.onMessage);\n  },\n\n  initOverlay: function () {\n    var dotsHTML =\n      '<span class=\"dots\"><span>.</span><span>.</span><span>.</span></span>';\n    this.loadingMessageEl = document.createElement(\"div\");\n    this.loadingMessageEl.classList.add(\"a-inspector-loader\");\n    this.loadingMessageEl.innerHTML = LOADING_MESSAGE + dotsHTML;\n  },\n\n  remove: function () {\n    this.removeEventListeners();\n  },\n\n  /**\n   * <ctrl> + <alt> + i keyboard shortcut.\n   */\n  onKeydown: function (evt) {\n    var shortcutPressed = evt.keyCode === 73 && evt.ctrlKey && evt.altKey;\n    if (!this.data || !shortcutPressed) {\n      return;\n    }\n    this.injectInspector();\n  },\n\n  showLoader: function () {\n    document.body.appendChild(this.loadingMessageEl);\n  },\n\n  hideLoader: function () {\n    document.body.removeChild(this.loadingMessageEl);\n  },\n\n  /**\n   * postMessage. aframe.io uses this to create a button on examples to open Inspector.\n   */\n  onMessage: function (evt) {\n    if (evt.data === \"INJECT_AFRAME_INSPECTOR\") {\n      this.injectInspector();\n    }\n  },\n\n  injectInspector: function () {\n    var self = this;\n    var script;\n\n    if (AFRAME.INSPECTOR || AFRAME.inspectorInjected) {\n      return;\n    }\n\n    this.showLoader();\n\n    // Inject.\n    script = document.createElement(\"script\");\n    script.src = this.data.url;\n    script.setAttribute(\"data-name\", \"aframe-inspector\");\n    script.setAttribute(AFRAME_INJECTED, \"\");\n    script.onload = function () {\n      AFRAME.INSPECTOR.open();\n      self.hideLoader();\n      self.removeEventListeners();\n    };\n    script.onerror = function () {\n      self.loadingMessageEl.innerHTML = LOADING_ERROR_MESSAGE;\n    };\n    document.head.appendChild(script);\n    AFRAME.inspectorInjected = true;\n  },\n\n  removeEventListeners: function () {\n    window.removeEventListener(\"keydown\", this.onKeydown);\n    window.removeEventListener(\"message\", this.onMessage);\n  },\n});\n",
    "/* global THREE */\nvar register = require(\"../../core/component\").registerComponent;\n\nmodule.exports.Component = register(\"overlay\", {\n  schema: {\n    enabled: { default: true },\n    objects: { default: \"\" },\n  },\n\n  init: function () {\n    this.objectsVisibility = [];\n  },\n\n  update: function () {\n    var data = this.data;\n    this.scene = data.objects && new THREE.Scene();\n    this.restoreObjects();\n    if (!data.enabled) {\n      return;\n    }\n    this.initObjects();\n  },\n\n  initObjects: function () {\n    var els;\n    var scene = this.scene;\n    if (!scene) {\n      return;\n    }\n    els = this.els = this.el.sceneEl.querySelectorAll(this.data.objects);\n    for (var i = 0; i < els.length; ++i) {\n      if (!els[i].object3D) {\n        continue;\n      }\n      scene.add(els[i].object3D);\n    }\n  },\n\n  render: function () {\n    var renderer = this.el.renderer;\n    var autoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.clearDepth();\n    this.scene.visible = true;\n    // this.el.effect.render(this.scene, this.el.camera);\n    // Hide objects so they are not rendered on first pass.\n    this.scene.visible = false;\n    renderer.autoClear = autoClear;\n  },\n\n  /* Return ownership to the a-scene THREE.Scene */\n  restoreObjects: function () {\n    var els = this.els;\n    var scene = this.scene;\n    var i;\n    if (!this.els) {\n      return;\n    }\n    for (i = 0; i < els.length; ++i) {\n      scene && scene.remove(els[i].object3D);\n      this.el.object3D.add(els[i].object3D);\n    }\n  },\n\n  remove: function () {\n    this.restoreObjects();\n  },\n});\n",
    "var debug = require(\"../../utils/debug\");\nvar registerComponent = require(\"../../core/component\").registerComponent;\n\nvar warn = debug(\"components:pool:warn\");\n\n/**\n * Pool component to reuse entities.\n * Avoids creating and destroying the same kind of entities.\n * Helps reduce GC pauses. For example in a game to reuse enemies entities.\n *\n * @member {array} availableEls - Available entities in the pool.\n * @member {array} usedEls - Entities of the pool in use.\n */\nmodule.exports.Component = registerComponent(\"pool\", {\n  schema: {\n    container: { default: \"\" },\n    mixin: { default: \"\" },\n    size: { default: 0 },\n    dynamic: { default: false },\n  },\n\n  multiple: true,\n\n  initPool: function () {\n    var i;\n\n    this.availableEls = [];\n    this.usedEls = [];\n\n    if (!this.data.mixin) {\n      warn(\"No mixin provided for pool component.\");\n    }\n\n    if (this.data.container) {\n      this.container = document.querySelector(this.data.container);\n      if (!this.container) {\n        warn(\"Container \" + this.data.container + \" not found.\");\n      }\n    }\n    this.container = this.container || this.el;\n\n    for (i = 0; i < this.data.size; ++i) {\n      this.createEntity();\n    }\n  },\n\n  update: function (oldData) {\n    var data = this.data;\n    if (oldData.mixin !== data.mixin || oldData.size !== data.size) {\n      this.initPool();\n    }\n  },\n\n  /**\n   * Add a new entity to the list of available entities.\n   */\n  createEntity: function () {\n    var el;\n    el = document.createElement(\"a-entity\");\n    el.play = this.wrapPlay(el.play);\n    el.setAttribute(\"mixin\", this.data.mixin);\n    el.object3D.visible = false;\n    el.pause();\n    this.container.appendChild(el);\n    this.availableEls.push(el);\n  },\n\n  /**\n   * Play wrapper for pooled entities. When pausing and playing a scene, don't want to play\n   * entities that are not in use.\n   */\n  wrapPlay: function (playMethod) {\n    var usedEls = this.usedEls;\n    return function () {\n      if (usedEls.indexOf(this) === -1) {\n        return;\n      }\n      playMethod.call(this);\n    };\n  },\n\n  /**\n   * Used to request one of the available entities of the pool.\n   */\n  requestEntity: function () {\n    var el;\n    if (this.availableEls.length === 0) {\n      if (this.data.dynamic === false) {\n        // warn('Requested entity from empty pool: ' + this.attrName);\n        return;\n      } else {\n        // warn('Requested entity from empty pool. This pool is dynamic and will resize ' +\n        //      'automatically. You might want to increase its initial size: ' + this.attrName);\n      }\n      this.createEntity();\n    }\n    el = this.availableEls.shift();\n    this.usedEls.push(el);\n    el.object3D.visible = true;\n    return el;\n  },\n\n  /**\n   * Used to return a used entity to the pool.\n   */\n  returnEntity: function (el) {\n    var index = this.usedEls.indexOf(el);\n    if (index === -1) {\n      // warn('The returned entity was not previously pooled from ' + this.attrName);\n      return;\n    }\n    this.usedEls.splice(index, 1);\n    this.availableEls.push(el);\n    el.object3D.visible = false;\n    el.pause();\n    return el;\n  },\n});\n",
    "var register = require(\"../../core/component\").registerComponent;\nvar debug = require(\"../../utils/debug\");\n\nvar warn = debug(\"components:renderer:warn\");\n\n/**\n * Determines state of various renderer properties.\n *\n * NOTE: Because the `renderer` component is not added to the scene\n * automatically, changing default values here has no effect unless\n * the same changes are included in `a-scene.js`.\n */\nmodule.exports.Component = register(\"renderer\", {\n  schema: {\n    antialias: { default: \"auto\", oneOf: [\"true\", \"false\", \"auto\"] },\n    logarithmicDepthBuffer: {\n      default: \"auto\",\n      oneOf: [\"true\", \"false\", \"auto\"],\n    },\n    maxCanvasWidth: { default: 1920 },\n    maxCanvasHeight: { default: 1920 },\n    gammaOutput: { default: false },\n    physicallyCorrectLights: { default: false },\n    sortObjects: { default: false },\n  },\n\n  init: function () {\n    var el = this.el;\n\n    if (!el.isScene) {\n      warn(\"Renderer component can only be applied to <a-scene>\");\n    }\n\n    // TODO: Uncomment these lines and deprecate 'antialias' for v0.9.0.\n    // if (el.hasAttribute('antialias')) {\n    //   warn('Component `antialias` is deprecated. Use `renderer=\"antialias: true\"` instead.');\n    // }\n  },\n\n  update: function (prevData) {\n    var data = this.data;\n    var sceneEl = this.el;\n    var renderer = sceneEl.renderer;\n    var needsShaderUpdate = false;\n\n    if (sceneEl.time > 0 && data.antialias !== prevData.antialias) {\n      warn('Property \"antialias\" cannot be changed after scene initialization');\n    }\n\n    if (\n      sceneEl.time > 0 &&\n      data.logarithmicDepthBuffer !== prevData.logarithmicDepthBuffer\n    ) {\n      warn(\n        'Property \"logarithmicDepthBuffer\" cannot be changed after scene initialization'\n      );\n    }\n\n    if (data.sortObjects !== prevData.sortObjects) {\n      renderer.sortObjects = data.sortObjects;\n    }\n\n    if (data.gammaOutput !== prevData.gammaOutput) {\n      renderer.gammaOutput = data.gammaOutput;\n      needsShaderUpdate = true;\n    }\n\n    if (data.physicallyCorrectLights !== prevData.physicallyCorrectLights) {\n      renderer.physicallyCorrectLights = data.physicallyCorrectLights;\n      needsShaderUpdate = true;\n    }\n\n    if (!needsShaderUpdate || sceneEl.time === 0) {\n      return;\n    }\n\n    warn(\n      \"Modifying renderer properties at runtime requires shader update and may drop frames.\"\n    );\n\n    sceneEl.object3D.traverse(function (node) {\n      if (!node.isMesh) {\n        return;\n      }\n      if (Array.isArray(node.material)) {\n        node.material.forEach(function (material) {\n          material.needsUpdate = true;\n        });\n      } else {\n        node.material.needsUpdate = true;\n      }\n    });\n  },\n});\n",
    "/* global ImageData, URL */\nvar registerComponent = require(\"../../core/component\").registerComponent;\nvar THREE = require(\"../../lib/three\");\n\nvar VERTEX_SHADER = [\n  \"attribute vec3 position;\",\n  \"attribute vec2 uv;\",\n  \"uniform mat4 projectionMatrix;\",\n  \"uniform mat4 modelViewMatrix;\",\n  \"varying vec2 vUv;\",\n  \"void main()  {\",\n  \"  vUv = vec2( 1.- uv.x, uv.y );\",\n  \"  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n  \"}\",\n].join(\"\\n\");\n\nvar FRAGMENT_SHADER = [\n  \"precision mediump float;\",\n  \"uniform samplerCube map;\",\n  \"varying vec2 vUv;\",\n  \"#define M_PI 3.141592653589793238462643383279\",\n  \"void main() {\",\n  \"  vec2 uv = vUv;\",\n  \"  float longitude = uv.x * 2. * M_PI - M_PI + M_PI / 2.;\",\n  \"  float latitude = uv.y * M_PI;\",\n  \"  vec3 dir = vec3(\",\n  \"    - sin( longitude ) * sin( latitude ),\",\n  \"    cos( latitude ),\",\n  \"    - cos( longitude ) * sin( latitude )\",\n  \"  );\",\n  \"  normalize( dir );\",\n  \"  gl_FragColor = vec4( textureCube( map, dir ).rgb, 1.0 );\",\n  \"}\",\n].join(\"\\n\");\n\n/**\n * Component to take screenshots of the scene using a keboard shortcut (alt+s).\n * It can be configured to either take 360&deg; captures (`equirectangular`)\n * or regular screenshots (`projection`)\n *\n * This is based on https://github.com/spite/THREE.CubemapToEquirectangular\n * To capture an equirectangular projection of the scene a THREE.CubeCamera is used\n * The cube map produced by the CubeCamera is projected on a quad and then rendered to\n * WebGLRenderTarget with an ortographic camera.\n */\nmodule.exports.Component = registerComponent(\"screenshot\", {\n  schema: {\n    width: { default: 4096 },\n    height: { default: 2048 },\n    camera: { type: \"selector\" },\n  },\n\n  init: function () {\n    var el = this.el;\n    var self = this;\n\n    if (el.renderer) {\n      setup();\n    } else {\n      el.addEventListener(\"render-target-loaded\", setup);\n    }\n\n    function setup() {\n      var gl = el.renderer.getContext();\n      if (!gl) {\n        return;\n      }\n      self.cubeMapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n      self.material = new THREE.RawShaderMaterial({\n        uniforms: { map: { type: \"t\", value: null } },\n        vertexShader: VERTEX_SHADER,\n        fragmentShader: FRAGMENT_SHADER,\n        side: THREE.DoubleSide,\n      });\n      self.quad = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(1, 1),\n        self.material\n      );\n      self.quad.visible = false;\n      self.camera = new THREE.OrthographicCamera(\n        -1 / 2,\n        1 / 2,\n        1 / 2,\n        -1 / 2,\n        -10000,\n        10000\n      );\n      self.canvas = document.createElement(\"canvas\");\n      self.ctx = self.canvas.getContext(\"2d\");\n      if (el.camera) {\n        el.camera.add(self.quad);\n      }\n      self.onKeyDown = self.onKeyDown.bind(self);\n      self.onCameraActive = self.onCameraActive.bind(self);\n      el.addEventListener(\"camera-set-active\", self.onCameraActive);\n    }\n  },\n\n  getRenderTarget: function (width, height) {\n    return new THREE.WebGLRenderTarget(width, height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      wrapS: THREE.ClampToEdgeWrapping,\n      wrapT: THREE.ClampToEdgeWrapping,\n      format: THREE.RGBAFormat,\n      type: THREE.UnsignedByteType,\n    });\n  },\n\n  resize: function (width, height) {\n    // Resize quad.\n    this.quad.scale.set(width, height, 1);\n\n    // Resize camera.\n    this.camera.left = (-1 * width) / 2;\n    this.camera.right = width / 2;\n    this.camera.top = height / 2;\n    this.camera.bottom = (-1 * height) / 2;\n    this.camera.updateProjectionMatrix();\n\n    // Resize canvas.\n    this.canvas.width = width;\n    this.canvas.height = height;\n  },\n\n  play: function () {\n    window.addEventListener(\"keydown\", this.onKeyDown);\n  },\n\n  onCameraActive: function (evt) {\n    var cameraParent = this.quad.parent;\n    if (cameraParent) {\n      cameraParent.remove(this.quad);\n    }\n    evt.detail.cameraEl.getObject3D(\"camera\").add(this.quad);\n  },\n\n  /**\n   * <ctrl> + <alt> + s = Regular screenshot.\n   * <ctrl> + <alt> + <shift> + s = Equirectangular screenshot.\n   */\n  onKeyDown: function (evt) {\n    var shortcutPressed = evt.keyCode === 83 && evt.ctrlKey && evt.altKey;\n    if (!this.data || !shortcutPressed) {\n      return;\n    }\n    var projection = evt.shiftKey ? \"equirectangular\" : \"perspective\";\n    this.capture(projection);\n  },\n\n  /**\n   * Capture a screenshot of the scene.\n   *\n   * @param {string} projection - Screenshot projection (equirectangular or perspective).\n   */\n  setCapture: function (projection) {\n    var el = this.el;\n    var size;\n    var camera;\n    var cubeCamera;\n    // Configure camera.\n    if (projection === \"perspective\") {\n      // Quad is only used in equirectangular mode. Hide it in this case.\n      this.quad.visible = false;\n      // Use scene camera.\n      camera =\n        (this.data.camera && this.data.camera.components.camera.camera) ||\n        el.camera;\n      size = { width: this.data.width, height: this.data.height };\n    } else {\n      // Use ortho camera.\n      camera = this.camera;\n      // Copy position and rotation of scene camera into the ortho one.\n      el.camera.getWorldPosition(camera.position);\n      el.camera.getWorldRotation(camera.rotation);\n      // Create cube camera and copy position from scene camera.\n      cubeCamera = new THREE.CubeCamera(\n        el.camera.near,\n        el.camera.far,\n        Math.min(this.cubeMapSize, 2048)\n      );\n      el.camera.getWorldPosition(cubeCamera.position);\n      el.camera.getWorldRotation(cubeCamera.rotation);\n      // Render scene with cube camera.\n      cubeCamera.updateCubeMap(el.renderer, el.object3D);\n      this.quad.material.uniforms.map.value = cubeCamera.renderTarget.texture;\n      size = { width: this.data.width, height: this.data.height };\n      // Use quad to project image taken by the cube camera.\n      this.quad.visible = true;\n    }\n    return {\n      camera: camera,\n      size: size,\n      projection: projection,\n    };\n  },\n\n  /**\n   * Maintained for backwards compatibility.\n   */\n  capture: function (projection) {\n    var params = this.setCapture(projection);\n    this.renderCapture(params.camera, params.size, params.projection);\n    // Trigger file download.\n    this.saveCapture();\n  },\n\n  /**\n   * Return canvas instead of triggering download (e.g., for uploading blob to server).\n   */\n  getCanvas: function (projection) {\n    var params = this.setCapture(projection);\n    this.renderCapture(params.camera, params.size, params.projection);\n    return this.canvas;\n  },\n\n  renderCapture: function (camera, size, projection) {\n    var autoClear = this.el.renderer.autoClear;\n    var el = this.el;\n    var imageData;\n    var output;\n    var pixels;\n    var renderer = this.el.renderer;\n    // Create rendering target and buffer to store the read pixels.\n    output = this.getRenderTarget(size.width, size.height);\n    pixels = new Uint8Array(4 * size.width * size.height);\n    // Resize quad, camera, and canvas.\n    this.resize(size.width, size.height);\n    // Render scene to render target.\n    renderer.autoClear = true;\n    // renderer.render(el.object3D, camera, output, true);\n    renderer.autoClear = autoClear;\n    // Read image pizels back.\n    renderer.readRenderTargetPixels(\n      output,\n      0,\n      0,\n      size.width,\n      size.height,\n      pixels\n    );\n    if (projection === \"perspective\") {\n      pixels = this.flipPixelsVertically(pixels, size.width, size.height);\n    }\n    imageData = new ImageData(\n      new Uint8ClampedArray(pixels),\n      size.width,\n      size.height\n    );\n    // Hide quad after projecting the image.\n    this.quad.visible = false;\n    // Copy pixels into canvas.\n    this.ctx.putImageData(imageData, 0, 0);\n  },\n\n  flipPixelsVertically: function (pixels, width, height) {\n    var flippedPixels = pixels.slice(0);\n    for (var x = 0; x < width; ++x) {\n      for (var y = 0; y < height; ++y) {\n        flippedPixels[x * 4 + y * width * 4] =\n          pixels[x * 4 + (height - y) * width * 4];\n        flippedPixels[x * 4 + 1 + y * width * 4] =\n          pixels[x * 4 + 1 + (height - y) * width * 4];\n        flippedPixels[x * 4 + 2 + y * width * 4] =\n          pixels[x * 4 + 2 + (height - y) * width * 4];\n        flippedPixels[x * 4 + 3 + y * width * 4] =\n          pixels[x * 4 + 3 + (height - y) * width * 4];\n      }\n    }\n    return flippedPixels;\n  },\n\n  /**\n   * Download capture to file.\n   */\n  saveCapture: function () {\n    this.canvas.toBlob(function (blob) {\n      var fileName =\n        \"screenshot-\" +\n        document.title.toLowerCase() +\n        \"-\" +\n        Date.now() +\n        \".png\";\n      var linkEl = document.createElement(\"a\");\n      var url = URL.createObjectURL(blob);\n      linkEl.href = url;\n      linkEl.setAttribute(\"download\", fileName);\n      linkEl.innerHTML = \"downloading...\";\n      linkEl.style.display = \"none\";\n      document.body.appendChild(linkEl);\n      setTimeout(function () {\n        linkEl.click();\n        document.body.removeChild(linkEl);\n      }, 1);\n    }, \"image/png\");\n  },\n});\n",
    "var registerComponent = require(\"../../core/component\").registerComponent;\nvar RStats = require(\"../../../vendor/rStats\");\nvar utils = require(\"../../utils\");\nrequire(\"../../../vendor/rStats.extras\");\nrequire(\"../../lib/rStatsAframe\");\n\nvar AFrameStats = window.aframeStats;\nvar bind = utils.bind;\nvar HIDDEN_CLASS = \"a-hidden\";\nvar ThreeStats = window.threeStats;\n\n/**\n * Stats appended to document.body by RStats.\n */\nmodule.exports.Component = registerComponent(\"stats\", {\n  schema: { default: true },\n\n  init: function () {\n    var scene = this.el;\n\n    if (utils.getUrlParameter(\"stats\") === \"false\") {\n      return;\n    }\n\n    this.stats = createStats(scene);\n    this.statsEl = document.querySelector(\".rs-base\");\n\n    this.hideBound = bind(this.hide, this);\n    this.showBound = bind(this.show, this);\n\n    scene.addEventListener(\"enter-vr\", this.hideBound);\n    scene.addEventListener(\"exit-vr\", this.showBound);\n  },\n\n  update: function () {\n    if (!this.stats) {\n      return;\n    }\n    return !this.data ? this.hide() : this.show();\n  },\n\n  remove: function () {\n    this.el.removeEventListener(\"enter-vr\", this.hideBound);\n    this.el.removeEventListener(\"exit-vr\", this.showBound);\n    if (!this.statsEl) {\n      return;\n    } // Scene detached.\n    this.statsEl.parentNode.removeChild(this.statsEl);\n  },\n\n  tick: function () {\n    var stats = this.stats;\n\n    if (!stats) {\n      return;\n    }\n\n    stats(\"rAF\").tick();\n    stats(\"FPS\").frame();\n    stats().update();\n  },\n\n  hide: function () {\n    this.statsEl.classList.add(HIDDEN_CLASS);\n  },\n\n  show: function () {\n    this.statsEl.classList.remove(HIDDEN_CLASS);\n  },\n});\n\nfunction createStats(scene) {\n  var threeStats = new ThreeStats(scene.renderer);\n  var aframeStats = new AFrameStats(scene);\n  var plugins = scene.isMobile ? [] : [threeStats, aframeStats];\n  return new RStats({\n    css: [], // Our stylesheet is injected from `src/index.js`.\n    values: {\n      fps: { caption: \"fps\", below: 30 },\n    },\n    groups: [{ caption: \"Framerate\", values: [\"fps\", \"raf\"] }],\n    plugins: plugins,\n  });\n}\n",
    "var component = require(\"../core/component\");\nvar THREE = require(\"../lib/three\");\nvar bind = require(\"../utils/bind\");\nvar registerComponent = component.registerComponent;\n\n/**\n * Shadow component.\n *\n * When applied to an entity, that entity's geometry and any descendants will cast or receive\n * shadows as specified by the `cast` and `receive` properties.\n */\nmodule.exports.Component = registerComponent(\"shadow\", {\n  schema: {\n    cast: { default: true },\n    receive: { default: true },\n  },\n\n  init: function () {\n    this.onMeshChanged = bind(this.update, this);\n    this.el.addEventListener(\"object3dset\", this.onMeshChanged);\n    this.system.setShadowMapEnabled(true);\n  },\n\n  update: function () {\n    var data = this.data;\n    this.updateDescendants(data.cast, data.receive);\n  },\n\n  remove: function () {\n    var el = this.el;\n    el.removeEventListener(\"object3dset\", this.onMeshChanged);\n    this.updateDescendants(false, false);\n  },\n\n  updateDescendants: function (cast, receive) {\n    var sceneEl = this.el.sceneEl;\n    this.el.object3D.traverse(function (node) {\n      if (!(node instanceof THREE.Mesh)) {\n        return;\n      }\n\n      node.castShadow = cast;\n      node.receiveShadow = receive;\n\n      // If scene has already rendered, materials must be updated.\n      if (sceneEl.hasLoaded && node.material) {\n        var materials = Array.isArray(node.material)\n          ? node.material\n          : [node.material];\n        for (var i = 0; i < materials.length; i++) {\n          materials[i].needsUpdate = true;\n        }\n      }\n    });\n  },\n});\n",
    "var registerComponent = require(\"../core/component\").registerComponent;\nvar debug = require(\"../utils/debug\");\nvar THREE = require(\"../lib/three\");\n\nvar warn = debug(\"components:sound:warn\");\n\n/**\n * Sound component.\n */\nmodule.exports.Component = registerComponent(\"sound\", {\n  schema: {\n    autoplay: { default: false },\n    distanceModel: {\n      default: \"inverse\",\n      oneOf: [\"linear\", \"inverse\", \"exponential\"],\n    },\n    loop: { default: false },\n    maxDistance: { default: 10000 },\n    on: { default: \"\" },\n    poolSize: { default: 1 },\n    positional: { default: true },\n    refDistance: { default: 1 },\n    rolloffFactor: { default: 1 },\n    src: { type: \"audio\" },\n    volume: { default: 1 },\n  },\n\n  multiple: true,\n\n  init: function () {\n    var self = this;\n\n    this.listener = null;\n    this.audioLoader = new THREE.AudioLoader();\n    this.pool = new THREE.Group();\n    this.loaded = false;\n    this.mustPlay = false;\n\n    // Don't pass evt because playSound takes a function as parameter.\n    this.playSoundBound = function () {\n      self.playSound();\n    };\n  },\n\n  update: function (oldData) {\n    var data = this.data;\n    var i;\n    var sound;\n    var srcChanged = data.src !== oldData.src;\n\n    // Create new sound if not yet created or changing `src`.\n    if (srcChanged) {\n      if (!data.src) {\n        warn(\"Audio source was not specified with `src`\");\n        return;\n      }\n      this.setupSound();\n    }\n\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n      if (data.positional) {\n        sound.setDistanceModel(data.distanceModel);\n        sound.setMaxDistance(data.maxDistance);\n        sound.setRefDistance(data.refDistance);\n        sound.setRolloffFactor(data.rolloffFactor);\n      }\n      sound.setLoop(data.loop);\n      sound.setVolume(data.volume);\n      sound.isPaused = false;\n    }\n\n    if (data.on !== oldData.on) {\n      this.updateEventListener(oldData.on);\n    }\n\n    // All sound values set. Load in `src`.\n    if (srcChanged) {\n      var self = this;\n\n      this.loaded = false;\n      this.audioLoader.load(data.src, function (buffer) {\n        for (i = 0; i < self.pool.children.length; i++) {\n          sound = self.pool.children[i];\n          sound.setBuffer(buffer);\n        }\n        self.loaded = true;\n\n        // Remove this key from cache, otherwise we can't play it again\n        THREE.Cache.remove(data.src);\n        if (self.data.autoplay || self.mustPlay) {\n          self.playSound();\n        }\n        self.el.emit(\"sound-loaded\", self.evtDetail, false);\n      });\n    }\n  },\n\n  pause: function () {\n    this.stopSound();\n    this.removeEventListener();\n  },\n\n  play: function () {\n    if (this.data.autoplay) {\n      this.playSound();\n    }\n    this.updateEventListener();\n  },\n\n  remove: function () {\n    var i;\n    var sound;\n\n    this.removeEventListener();\n    this.el.removeObject3D(this.attrName);\n\n    try {\n      for (i = 0; i < this.pool.children.length; i++) {\n        sound = this.pool.children[i];\n        sound.disconnect();\n      }\n    } catch (e) {\n      // disconnect() will throw if it was never connected initially.\n      warn(\"Audio source not properly disconnected\");\n    }\n  },\n\n  /**\n   *  Update listener attached to the user defined on event.\n   */\n  updateEventListener: function (oldEvt) {\n    var el = this.el;\n    if (oldEvt) {\n      el.removeEventListener(oldEvt, this.playSoundBound);\n    }\n    el.addEventListener(this.data.on, this.playSoundBound);\n  },\n\n  removeEventListener: function () {\n    this.el.removeEventListener(this.data.on, this.playSoundBound);\n  },\n\n  /**\n   * Removes current sound object, creates new sound object, adds to entity.\n   *\n   * @returns {object} sound\n   */\n  setupSound: function () {\n    var self = this;\n    var el = this.el;\n    var i;\n    var sceneEl = el.sceneEl;\n    var sound;\n\n    if (this.pool.children.length > 0) {\n      this.stopSound();\n      el.removeObject3D(\"sound\");\n    }\n\n    // Only want one AudioListener. Cache it on the scene.\n    var listener = (this.listener =\n      sceneEl.audioListener || new THREE.AudioListener());\n    sceneEl.audioListener = listener;\n\n    if (sceneEl.camera) {\n      sceneEl.camera.add(listener);\n    }\n\n    // Wait for camera if necessary.\n    sceneEl.addEventListener(\"camera-set-active\", function (evt) {\n      evt.detail.cameraEl.getObject3D(\"camera\").add(listener);\n    });\n\n    // Create [poolSize] audio instances and attach them to pool\n    this.pool = new THREE.Group();\n    for (i = 0; i < this.data.poolSize; i++) {\n      sound = this.data.positional\n        ? new THREE.PositionalAudio(listener)\n        : new THREE.Audio(listener);\n      this.pool.add(sound);\n    }\n    el.setObject3D(this.attrName, this.pool);\n\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n      sound.onEnded = function () {\n        this.isPlaying = false;\n        el.emit(\"sound-ended\", self.evtDetail, false);\n      };\n    }\n  },\n\n  /**\n   * Pause all the sounds in the pool.\n   */\n  pauseSound: function () {\n    var i;\n    var sound;\n\n    this.isPlaying = false;\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n      if (\n        !sound.source ||\n        !sound.source.buffer ||\n        !sound.isPlaying ||\n        sound.isPaused\n      ) {\n        continue;\n      }\n      sound.isPaused = true;\n      sound.pause();\n    }\n  },\n\n  /**\n   * Look for an unused sound in the pool and play it if found.\n   */\n  playSound: function (processSound) {\n    var found;\n    var i;\n    var sound;\n\n    if (!this.loaded) {\n      warn(\"Sound not loaded yet. It will be played once it finished loading\");\n      this.mustPlay = true;\n      return;\n    }\n\n    found = false;\n    this.isPlaying = true;\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n      if (!sound.isPlaying && sound.buffer && !found) {\n        if (processSound) {\n          processSound(sound);\n        }\n        sound.play();\n        sound.isPaused = false;\n        found = true;\n        continue;\n      }\n    }\n\n    if (!found) {\n      return;\n    }\n\n    this.mustPlay = false;\n  },\n\n  /**\n   * Stop all the sounds in the pool.\n   */\n  stopSound: function () {\n    var i;\n    var sound;\n    this.isPlaying = false;\n    for (i = 0; i < this.pool.children.length; i++) {\n      sound = this.pool.children[i];\n      if (!sound.source || !sound.source.buffer) {\n        return;\n      }\n      sound.stop();\n    }\n  },\n});\n",
    "var createTextGeometry = require(\"three-bmfont-text\");\nvar loadBMFont = require(\"load-bmfont\");\n\nvar registerComponent = require(\"../core/component\").registerComponent;\nvar coreShader = require(\"../core/shader\");\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils/\");\n\nvar error = utils.debug(\"components:text:error\");\nvar shaders = coreShader.shaders;\nvar warn = utils.debug(\"components:text:warn\");\n\n// 1 to match other A-Frame default widths.\nvar DEFAULT_WIDTH = 1;\n\n// @bryik set anisotropy to 16. Improves look of large amounts of text when viewed from angle.\nvar MAX_ANISOTROPY = 16;\n\nvar FONT_BASE_URL = \"https://cdn.aframe.io/fonts/\";\nvar FONTS = {\n  aileronsemibold: FONT_BASE_URL + \"Aileron-Semibold.fnt\",\n  dejavu: FONT_BASE_URL + \"DejaVu-sdf.fnt\",\n  exo2bold: FONT_BASE_URL + \"Exo2Bold.fnt\",\n  exo2semibold: FONT_BASE_URL + \"Exo2SemiBold.fnt\",\n  kelsonsans: FONT_BASE_URL + \"KelsonSans.fnt\",\n  monoid: FONT_BASE_URL + \"Monoid.fnt\",\n  mozillavr: FONT_BASE_URL + \"mozillavr.fnt\",\n  roboto: FONT_BASE_URL + \"Roboto-msdf.json\",\n  sourcecodepro: FONT_BASE_URL + \"SourceCodePro.fnt\",\n};\nvar MSDF_FONTS = [\"roboto\"];\nvar DEFAULT_FONT = \"roboto\";\nmodule.exports.FONTS = FONTS;\n\nvar cache = new PromiseCache();\nvar fontWidthFactors = {};\nvar textures = {};\n\n// Regular expression for detecting a URLs with a protocol prefix.\nvar protocolRe = /^\\w+:/;\n\n/**\n * SDF-based text component.\n * Based on https://github.com/Jam3/three-bmfont-text.\n *\n * All the stock fonts are for the `sdf` registered shader, an improved version of jam3's\n * original `sdf` shader.\n */\nmodule.exports.Component = registerComponent(\"text\", {\n  multiple: true,\n\n  schema: {\n    align: {\n      type: \"string\",\n      default: \"left\",\n      oneOf: [\"left\", \"right\", \"center\"],\n    },\n    alphaTest: { default: 0.5 },\n    // `anchor` defaults to center to match geometries.\n    anchor: { default: \"center\", oneOf: [\"left\", \"right\", \"center\", \"align\"] },\n    baseline: { default: \"center\", oneOf: [\"top\", \"center\", \"bottom\"] },\n    color: { type: \"color\", default: \"#FFF\" },\n    font: { type: \"string\", default: DEFAULT_FONT },\n    // `fontImage` defaults to the font name as a .png (e.g., mozillavr.fnt -> mozillavr.png).\n    fontImage: { type: \"string\" },\n    // `height` has no default, will be populated at layout.\n    height: { type: \"number\" },\n    letterSpacing: { type: \"number\", default: 0 },\n    // `lineHeight` defaults to font's `lineHeight` value.\n    lineHeight: { type: \"number\" },\n    // `negate` must be true for fonts generated with older versions of msdfgen (white background).\n    negate: { type: \"boolean\", default: true },\n    opacity: { type: \"number\", default: 1.0 },\n    shader: { default: \"sdf\", oneOf: shaders },\n    side: { default: \"front\", oneOf: [\"front\", \"back\", \"double\"] },\n    tabSize: { default: 4 },\n    transparent: { default: true },\n    value: { type: \"string\" },\n    whiteSpace: { default: \"normal\", oneOf: [\"normal\", \"pre\", \"nowrap\"] },\n    // `width` defaults to geometry width if present, else `DEFAULT_WIDTH`.\n    width: { type: \"number\" },\n    // `wrapCount` units are about one default font character. Wrap roughly at this number.\n    wrapCount: { type: \"number\", default: 40 },\n    // `wrapPixels` will wrap using bmfont pixel units (e.g., dejavu's is 32 pixels).\n    wrapPixels: { type: \"number\" },\n    // `xOffset` to add padding.\n    xOffset: { type: \"number\", default: 0 },\n    // `yOffset` to adjust generated fonts from tools that may have incorrect metrics.\n    yOffset: { type: \"number\", default: 0 },\n    // `zOffset` will provide a small z offset to avoid z-fighting.\n    zOffset: { type: \"number\", default: 0.001 },\n  },\n\n  init: function () {\n    this.shaderData = {};\n    this.geometry = createTextGeometry();\n    this.createOrUpdateMaterial();\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n    this.el.setObject3D(this.attrName, this.mesh);\n  },\n\n  update: function (oldData) {\n    var data = this.data;\n    var font = this.currentFont;\n\n    if (textures[data.font]) {\n      this.texture = textures[data.font];\n    } else {\n      // Create texture per font.\n      this.texture = textures[data.font] = new THREE.Texture();\n      this.texture.anisotropy = MAX_ANISOTROPY;\n    }\n\n    // Update material.\n    this.createOrUpdateMaterial();\n\n    // New font. `updateFont` will later change data and layout.\n    if (oldData.font !== data.font) {\n      this.updateFont();\n      return;\n    }\n\n    // Update geometry and layout.\n    if (font) {\n      this.updateGeometry(this.geometry, font);\n      this.updateLayout();\n    }\n  },\n\n  /**\n   * Clean up geometry, material, texture, mesh, objects.\n   */\n  remove: function () {\n    this.geometry.dispose();\n    this.geometry = null;\n    this.el.removeObject3D(this.attrName);\n    this.material.dispose();\n    this.material = null;\n    this.texture.dispose();\n    this.texture = null;\n    if (this.shaderObject) {\n      delete this.shaderObject;\n    }\n  },\n\n  /**\n   * Update the shader of the material.\n   */\n  createOrUpdateMaterial: function () {\n    var data = this.data;\n    var hasChangedShader;\n    var material = this.material;\n    var NewShader;\n    var shaderData = this.shaderData;\n    var shaderName;\n\n    // Infer shader if using a stock font (or from `-msdf` filename convention).\n    shaderName = data.shader;\n    if (\n      MSDF_FONTS.indexOf(data.font) !== -1 ||\n      data.font.indexOf(\"-msdf.\") >= 0\n    ) {\n      shaderName = \"msdf\";\n    } else if (data.font in FONTS && MSDF_FONTS.indexOf(data.font) === -1) {\n      shaderName = \"sdf\";\n    }\n\n    hasChangedShader =\n      (this.shaderObject && this.shaderObject.name) !== shaderName;\n\n    shaderData.alphaTest = data.alphaTest;\n    shaderData.color = data.color;\n    shaderData.map = this.texture;\n    shaderData.opacity = data.opacity;\n    shaderData.side = parseSide(data.side);\n    shaderData.transparent = data.transparent;\n    shaderData.negate = data.negate;\n\n    // Shader has not changed, do an update.\n    if (!hasChangedShader) {\n      // Update shader material.\n      this.shaderObject.update(shaderData);\n      // Apparently, was not set on `init` nor `update`.\n      material.transparent = shaderData.transparent;\n      material.side = shaderData.side;\n      return;\n    }\n\n    // Shader has changed. Create a shader material.\n    NewShader = createShader(this.el, shaderName, shaderData);\n    this.material = NewShader.material;\n    this.shaderObject = NewShader.shader;\n\n    // Set new shader material.\n    this.material.side = shaderData.side;\n    if (this.mesh) {\n      this.mesh.material = this.material;\n    }\n  },\n\n  /**\n   * Load font for geometry, load font image for material, and apply.\n   */\n  updateFont: function () {\n    var data = this.data;\n    var el = this.el;\n    var fontSrc;\n    var geometry = this.geometry;\n    var self = this;\n\n    if (!data.font) {\n      warn(\"No font specified. Using the default font.\");\n    }\n\n    // Make invisible during font swap.\n    this.mesh.visible = false;\n\n    // Look up font URL to use, and perform cached load.\n    fontSrc = this.lookupFont(data.font || DEFAULT_FONT) || data.font;\n    cache\n      .get(fontSrc, function doLoadFont() {\n        return loadFont(fontSrc, data.yOffset);\n      })\n      .then(function setFont(font) {\n        var fontImgSrc;\n\n        if (font.pages.length !== 1) {\n          throw new Error(\n            \"Currently only single-page bitmap fonts are supported.\"\n          );\n        }\n\n        if (!fontWidthFactors[fontSrc]) {\n          font.widthFactor = fontWidthFactors[font] =\n            computeFontWidthFactor(font);\n        }\n\n        // Update geometry given font metrics.\n        self.updateGeometry(geometry, font);\n\n        // Set font and update layout.\n        self.currentFont = font;\n        self.updateLayout();\n\n        // Look up font image URL to use, and perform cached load.\n        fontImgSrc = self.getFontImageSrc();\n        cache\n          .get(fontImgSrc, function () {\n            return loadTexture(fontImgSrc);\n          })\n          .then(function (image) {\n            // Make mesh visible and apply font image as texture.\n            var texture = self.texture;\n            texture.image = image;\n            texture.needsUpdate = true;\n            textures[data.font] = texture;\n            self.texture = texture;\n            self.mesh.visible = true;\n            el.emit(\"textfontset\", { font: data.font, fontObj: font });\n          })\n          .catch(function (err) {\n            error(err);\n            throw err;\n          });\n      })\n      .catch(function (err) {\n        error(err);\n        throw err;\n      });\n  },\n\n  getFontImageSrc: function () {\n    if (this.data.fontImage) {\n      return this.data.fontImage;\n    }\n    var fontSrc =\n      this.lookupFont(this.data.font || DEFAULT_FONT) || this.data.font;\n    var imageSrc = this.currentFont.pages[0];\n    // If the image URL contains a non-HTTP(S) protocol, assume it's an absolute\n    // path on disk and try to infer the path from the font source instead.\n    if (imageSrc.match(protocolRe) && imageSrc.indexOf(\"http\") !== 0) {\n      return fontSrc.replace(/(\\.fnt)|(\\.json)/, \".png\");\n    }\n    return THREE.LoaderUtils.extractUrlBase(fontSrc) + imageSrc;\n  },\n\n  /**\n   * Update layout with anchor, alignment, baseline, and considering any meshes.\n   */\n  updateLayout: function () {\n    var anchor;\n    var baseline;\n    var el = this.el;\n    var data = this.data;\n    var geometry = this.geometry;\n    var geometryComponent;\n    var height;\n    var layout;\n    var mesh = this.mesh;\n    var textRenderWidth;\n    var textScale;\n    var width;\n    var x;\n    var y;\n\n    if (!geometry.layout) {\n      return;\n    }\n\n    // Determine width to use (defined width, geometry's width, or default width).\n    geometryComponent = el.getAttribute(\"geometry\");\n    width =\n      data.width ||\n      (geometryComponent && geometryComponent.width) ||\n      DEFAULT_WIDTH;\n\n    // Determine wrap pixel count. Either specified or by experimental fudge factor.\n    // Note that experimental factor will never be correct for variable width fonts.\n    textRenderWidth = computeWidth(\n      data.wrapPixels,\n      data.wrapCount,\n      this.currentFont.widthFactor\n    );\n    textScale = width / textRenderWidth;\n\n    // Determine height to use.\n    layout = geometry.layout;\n    height = textScale * (layout.height + layout.descender);\n\n    // Update geometry dimensions to match text layout if width and height are set to 0.\n    // For example, scales a plane to fit text.\n    if (geometryComponent) {\n      if (!geometryComponent.width) {\n        el.setAttribute(\"geometry\", \"width\", width);\n      }\n      if (!geometryComponent.height) {\n        el.setAttribute(\"geometry\", \"height\", height);\n      }\n    }\n\n    // Calculate X position to anchor text left, center, or right.\n    anchor = data.anchor === \"align\" ? data.align : data.anchor;\n    if (anchor === \"left\") {\n      x = 0;\n    } else if (anchor === \"right\") {\n      x = -1 * layout.width;\n    } else if (anchor === \"center\") {\n      x = (-1 * layout.width) / 2;\n    } else {\n      throw new TypeError(\"Invalid text.anchor property value\", anchor);\n    }\n\n    // Calculate Y position to anchor text top, center, or bottom.\n    baseline = data.baseline;\n    if (baseline === \"bottom\") {\n      y = 0;\n    } else if (baseline === \"top\") {\n      y = -1 * layout.height + layout.ascender;\n    } else if (baseline === \"center\") {\n      y = (-1 * layout.height) / 2;\n    } else {\n      throw new TypeError(\"Invalid text.baseline property value\", baseline);\n    }\n\n    // Position and scale mesh to apply layout.\n    mesh.position.x = x * textScale + data.xOffset;\n    mesh.position.y = y * textScale;\n    // Place text slightly in front to avoid Z-fighting.\n    mesh.position.z = data.zOffset;\n    mesh.scale.set(textScale, -1 * textScale, textScale);\n  },\n\n  /**\n   * Grab font from the constant.\n   * Set as a method for test stubbing purposes.\n   */\n  lookupFont: function (key) {\n    return FONTS[key];\n  },\n\n  /**\n   * Update the text geometry using `three-bmfont-text.update`.\n   */\n  updateGeometry: (function () {\n    var geometryUpdateBase = {};\n    var geometryUpdateData = {};\n    var newLineRegex = /\\\\n/g;\n    var tabRegex = /\\\\t/g;\n\n    return function (geometry, font) {\n      var data = this.data;\n\n      geometryUpdateData.font = font;\n      geometryUpdateData.lineHeight =\n        data.lineHeight && isFinite(data.lineHeight)\n          ? data.lineHeight\n          : font.common.lineHeight;\n      geometryUpdateData.text = data.value\n        .toString()\n        .replace(newLineRegex, \"\\n\")\n        .replace(tabRegex, \"\\t\");\n      geometryUpdateData.width = computeWidth(\n        data.wrapPixels,\n        data.wrapCount,\n        font.widthFactor\n      );\n      geometry.update(\n        utils.extend(geometryUpdateBase, data, geometryUpdateData)\n      );\n    };\n  })(),\n});\n\n/**\n * Due to using negative scale, we return the opposite side specified.\n * https://github.com/mrdoob/three.js/pull/12787/\n */\nfunction parseSide(side) {\n  switch (side) {\n    case \"back\": {\n      return THREE.FrontSide;\n    }\n    case \"double\": {\n      return THREE.DoubleSide;\n    }\n    default: {\n      return THREE.BackSide;\n    }\n  }\n}\n\n/**\n * @returns {Promise}\n */\nfunction loadFont(src, yOffset) {\n  return new Promise(function (resolve, reject) {\n    loadBMFont(src, function (err, font) {\n      if (err) {\n        error(\"Error loading font\", src);\n        reject(err);\n        return;\n      }\n\n      // Fix negative Y offsets for Roboto MSDF font from tool. Experimentally determined.\n      if (src.indexOf(\"/Roboto-msdf.json\") >= 0) {\n        yOffset = 30;\n      }\n      if (yOffset) {\n        font.chars.map(function doOffset(ch) {\n          ch.yoffset += yOffset;\n        });\n      }\n\n      resolve(font);\n    });\n  });\n}\n\n/**\n * @returns {Promise}\n */\nfunction loadTexture(src) {\n  return new Promise(function (resolve, reject) {\n    new THREE.ImageLoader().load(\n      src,\n      function (image) {\n        resolve(image);\n      },\n      undefined,\n      function () {\n        error(\"Error loading font image\", src);\n        reject(null);\n      }\n    );\n  });\n}\n\nfunction createShader(el, shaderName, data) {\n  var shader;\n  var shaderObject;\n\n  // Set up Shader.\n  shaderObject = new shaders[shaderName].Shader();\n  shaderObject.el = el;\n  shaderObject.init(data);\n  shaderObject.update(data);\n\n  // Get material.\n  shader = shaderObject.material;\n  // Apparently, was not set on `init` nor `update`.\n  shader.transparent = data.transparent;\n\n  return {\n    material: shader,\n    shader: shaderObject,\n  };\n}\n\n/**\n * Determine wrap pixel count. Either specified or by experimental fudge factor.\n * Note that experimental factor will never be correct for variable width fonts.\n */\nfunction computeWidth(wrapPixels, wrapCount, widthFactor) {\n  return wrapPixels || (0.5 + wrapCount) * widthFactor;\n}\n\n/**\n * Compute default font width factor to use.\n */\nfunction computeFontWidthFactor(font) {\n  var sum = 0;\n  var digitsum = 0;\n  var digits = 0;\n  font.chars.map(function (ch) {\n    sum += ch.xadvance;\n    if (ch.id >= 48 && ch.id <= 57) {\n      digits++;\n      digitsum += ch.xadvance;\n    }\n  });\n  return digits ? digitsum / digits : sum / font.chars.length;\n}\n\n/**\n * Get or create a promise given a key and promise generator.\n * @todo Move to a utility and use in other parts of A-Frame.\n */\nfunction PromiseCache() {\n  var cache = (this.cache = {});\n\n  this.get = function (key, promiseGenerator) {\n    if (key in cache) {\n      return cache[key];\n    }\n    cache[key] = promiseGenerator();\n    return cache[key];\n  };\n}\n",
    "var registerComponent = require(\"../core/component\").registerComponent;\n\n/**\n * Visibility component.\n */\nmodule.exports.Component = registerComponent(\"visible\", {\n  schema: { default: true },\n\n  update: function () {\n    this.el.object3D.visible = this.data;\n  },\n});\n",
    "var KEYCODE_TO_CODE = require(\"../constants\").keyboardevent.KEYCODE_TO_CODE;\nvar registerComponent = require(\"../core/component\").registerComponent;\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils/\");\n\nvar bind = utils.bind;\nvar shouldCaptureKeyEvent = utils.shouldCaptureKeyEvent;\n\nvar CLAMP_VELOCITY = 0.00001;\nvar MAX_DELTA = 0.2;\nvar KEYS = [\"KeyW\", \"KeyA\", \"KeyS\", \"KeyD\", \"KeyX\", \"KeyC\"];\n\n/**\n * WASD component to control entities using WASD keys.\n */\nmodule.exports.Component = registerComponent(\"wasd-controls\", {\n  schema: {\n    acceleration: { default: 65 },\n    adAxis: { default: \"x\", oneOf: [\"x\", \"y\", \"z\"] },\n    adEnabled: { default: true },\n    adInverted: { default: false },\n    easing: { default: 20 },\n    enabled: { default: true },\n    fly: { default: true },\n    wsAxis: { default: \"z\", oneOf: [\"x\", \"y\", \"z\"] },\n    wsEnabled: { default: true },\n    xcAxis: { default: \"y\", oneOf: [\"x\", \"y\", \"z\"] },\n    xcEnabled: { default: true },\n    wsInverted: { default: false },\n  },\n\n  init: function () {\n    // To keep track of the pressed keys.\n    this.keys = {};\n    this.velocity = new THREE.Vector3();\n    this.dir = new THREE.Vector3();\n\n    // Bind methods and add event listeners.\n    this.onBlur = bind(this.onBlur, this);\n    this.onFocus = bind(this.onFocus, this);\n    this.onKeyDown = bind(this.onKeyDown, this);\n    this.onKeyUp = bind(this.onKeyUp, this);\n    this.onVisibilityChange = bind(this.onVisibilityChange, this);\n    this.attachVisibilityEventListeners();\n  },\n\n  tick: function (time, delta) {\n    var data = this.data;\n    var el = this.el;\n    var velocity = this.velocity;\n    var dir = this.dir;\n\n    if (\n      !velocity[data.adAxis] &&\n      !velocity[data.wsAxis] &&\n      !velocity[data.xcAxis] &&\n      isEmptyObject(this.keys)\n    ) {\n      return;\n    }\n\n    // Update velocity.\n    delta = delta / 1000;\n    this.updateVelocity(delta);\n\n    if (\n      !velocity[data.adAxis] &&\n      !velocity[data.wsAxis] &&\n      !velocity[data.xcAxis]\n    ) {\n      return;\n    }\n\n    // Get movement vector and translate position.\n    // el.object3D.getWorldDirection(dir);\n    // el.object3D.position.add( dir.multiply(velocity));\n    // el.object3D.position.addScaledVector(dir, velocity[data.wsAxis] * delta);\n\n    const movement = this.getMovementVector(delta);\n    el.object3D.position.y += movement.y;\n    el.object3D.position.x += movement.x;\n    el.object3D.position.z += movement.z;\n  },\n\n  remove: function () {\n    this.removeKeyEventListeners();\n    this.removeVisibilityEventListeners();\n  },\n\n  play: function () {\n    this.attachKeyEventListeners();\n  },\n\n  pause: function () {\n    this.keys = {};\n    this.removeKeyEventListeners();\n  },\n\n  updateVelocity: function (delta) {\n    var acceleration;\n    var adAxis;\n    var adSign;\n    var data = this.data;\n    var keys = this.keys;\n    var velocity = this.velocity;\n    var wsAxis;\n    var wsSign;\n    var xcAxis;\n\n    adAxis = data.adAxis;\n    wsAxis = data.wsAxis;\n    xcAxis = data.xcAxis;\n\n    // If FPS too low, reset velocity.\n    if (delta > MAX_DELTA) {\n      velocity[adAxis] = 0;\n      velocity[wsAxis] = 0;\n      velocity[xcAxis] = 0;\n      return;\n    }\n\n    // Decay velocity.\n    if (velocity[adAxis] !== 0) {\n      velocity[adAxis] -= velocity[adAxis] * data.easing * delta;\n    }\n    if (velocity[wsAxis] !== 0) {\n      velocity[wsAxis] -= velocity[wsAxis] * data.easing * delta;\n    }\n    if (velocity[xcAxis] !== 0) {\n      velocity[xcAxis] -= velocity[xcAxis] * data.easing * delta;\n    }\n    // Clamp velocity easing.\n    if (Math.abs(velocity[adAxis]) < CLAMP_VELOCITY) {\n      velocity[adAxis] = 0;\n    }\n    if (Math.abs(velocity[wsAxis]) < CLAMP_VELOCITY) {\n      velocity[wsAxis] = 0;\n    }\n    if (Math.abs(velocity[xcAxis]) < CLAMP_VELOCITY) {\n      velocity[xcAxis] = 0;\n    }\n\n    if (!data.enabled) {\n      return;\n    }\n\n    // Update velocity using keys pressed.\n    acceleration = data.acceleration;\n    if (data.adEnabled) {\n      adSign = data.adInverted ? -1 : 1;\n      if (keys.KeyA || keys.ArrowLeft) {\n        velocity[adAxis] -= adSign * acceleration * delta;\n      }\n      if (keys.KeyD || keys.ArrowRight) {\n        velocity[adAxis] += adSign * acceleration * delta;\n      }\n    }\n    if (data.wsEnabled) {\n      wsSign = data.wsInverted ? -1 : 1;\n      if (keys.KeyW || keys.ArrowUp) {\n        velocity[wsAxis] -= wsSign * acceleration * delta;\n      }\n      if (keys.KeyS || keys.ArrowDown) {\n        velocity[wsAxis] += wsSign * acceleration * delta;\n      }\n    }\n\n    if (keys.KeyX) {\n      velocity[xcAxis] -= acceleration * delta;\n    }\n    if (keys.KeyC) {\n      velocity[xcAxis] += acceleration * delta;\n    }\n  },\n\n  getMovementVector: (function () {\n    var directionVector = new THREE.Vector3(0, 0, 0);\n    var rotationEuler = new THREE.Euler(0, 0, 0, \"YXZ\");\n\n    return function (delta) {\n      var rotation = this.el.getAttribute(\"rotation\");\n      var velocity = this.velocity;\n      var xRotation;\n\n      directionVector.copy(velocity);\n      directionVector.multiplyScalar(delta);\n\n      // Absolute.\n      if (!rotation) {\n        return directionVector;\n      }\n\n      xRotation = this.data.fly ? rotation.x : 0;\n\n      // Transform direction relative to heading.\n      rotationEuler.set(\n        THREE.Math.degToRad(xRotation),\n        THREE.Math.degToRad(rotation.y),\n        THREE.Math.degToRad(rotation.z)\n      );\n      directionVector.applyEuler(rotationEuler);\n      return directionVector;\n    };\n  })(),\n\n  attachVisibilityEventListeners: function () {\n    window.addEventListener(\"blur\", this.onBlur);\n    window.addEventListener(\"focus\", this.onFocus);\n    document.addEventListener(\"visibilitychange\", this.onVisibilityChange);\n  },\n\n  removeVisibilityEventListeners: function () {\n    window.removeEventListener(\"blur\", this.onBlur);\n    window.removeEventListener(\"focus\", this.onFocus);\n    document.removeEventListener(\"visibilitychange\", this.onVisibilityChange);\n  },\n\n  attachKeyEventListeners: function () {\n    window.addEventListener(\"keydown\", this.onKeyDown);\n    window.addEventListener(\"keyup\", this.onKeyUp);\n  },\n\n  removeKeyEventListeners: function () {\n    window.removeEventListener(\"keydown\", this.onKeyDown);\n    window.removeEventListener(\"keyup\", this.onKeyUp);\n  },\n\n  onBlur: function () {\n    this.pause();\n  },\n\n  onFocus: function () {\n    this.play();\n  },\n\n  onVisibilityChange: function () {\n    if (document.hidden) {\n      this.onBlur();\n    } else {\n      this.onFocus();\n    }\n  },\n\n  onKeyDown: function (event) {\n    var code;\n    if (!shouldCaptureKeyEvent(event)) {\n      return;\n    }\n    code = event.code || KEYCODE_TO_CODE[event.keyCode];\n    if (KEYS.indexOf(code) !== -1) {\n      this.keys[code] = true;\n    }\n  },\n\n  onKeyUp: function (event) {\n    var code;\n    code = event.code || KEYCODE_TO_CODE[event.keyCode];\n    delete this.keys[code];\n  },\n});\n\nfunction isEmptyObject(keys) {\n  var key;\n  for (key in keys) {\n    return false;\n  }\n  return true;\n}\n",
    "module.exports = {\n  AFRAME_INJECTED: \"aframe-injected\",\n  DEFAULT_CAMERA_HEIGHT: 1.75,\n  DEFAULT_HANDEDNESS: \"right\",\n  keyboardevent: require(\"./keyboardevent\"),\n};\n",
    "module.exports = {\n  // Tiny KeyboardEvent.code polyfill.\n  KEYCODE_TO_CODE: {\n    38: \"ArrowUp\",\n    37: \"ArrowLeft\",\n    40: \"ArrowDown\",\n    39: \"ArrowRight\",\n    87: \"KeyW\",\n    65: \"KeyA\",\n    83: \"KeyS\",\n    68: \"KeyD\",\n  },\n};\n",
    "var ANode = require(\"./a-node\");\nvar bind = require(\"../utils/bind\");\nvar debug = require(\"../utils/debug\");\nvar registerElement = require(\"./a-register-element\").registerElement;\nvar THREE = require(\"../lib/three\");\n\nvar fileLoader = new THREE.FileLoader();\nvar warn = debug(\"core:a-assets:warn\");\n\n/**\n * Asset management system. Handles blocking on asset loading.\n */\nmodule.exports = registerElement(\"a-assets\", {\n  prototype: Object.create(ANode.prototype, {\n    createdCallback: {\n      value: function () {\n        this.isAssets = true;\n        this.fileLoader = fileLoader;\n        this.timeout = null;\n      },\n    },\n\n    attachedCallback: {\n      value: function () {\n        var self = this;\n        var i;\n        var loaded = [];\n        var mediaEl;\n        var mediaEls;\n        var imgEl;\n        var imgEls;\n        var timeout;\n\n        if (!this.parentNode.isScene) {\n          throw new Error(\"<a-assets> must be a child of a <a-scene>.\");\n        }\n\n        // Wait for <img>s.\n        imgEls = this.querySelectorAll(\"img\");\n        for (i = 0; i < imgEls.length; i++) {\n          imgEl = fixUpMediaElement(imgEls[i]);\n          loaded.push(\n            new Promise(function (resolve, reject) {\n              // Set in cache because we won't be needing to call three.js loader if we have.\n              // a loaded media element.\n              THREE.Cache.files[imgEls[i].getAttribute(\"src\")] = imgEl;\n              imgEl.onload = resolve;\n              imgEl.onerror = reject;\n            })\n          );\n        }\n\n        // Wait for <audio>s and <video>s.\n        mediaEls = this.querySelectorAll(\"audio, video\");\n        for (i = 0; i < mediaEls.length; i++) {\n          mediaEl = fixUpMediaElement(mediaEls[i]);\n          if (!mediaEl.src && !mediaEl.srcObject) {\n            warn(\n              \"Audio/video asset has neither `src` nor `srcObject` attributes.\"\n            );\n          }\n          loaded.push(mediaElementLoaded(mediaEl));\n        }\n\n        // Trigger loaded for scene to start rendering.\n        Promise.all(loaded).then(bind(this.load, this));\n\n        // Timeout to start loading anyways.\n        timeout = parseInt(this.getAttribute(\"timeout\"), 10) || 3000;\n        this.timeout = setTimeout(function () {\n          if (self.hasLoaded) {\n            return;\n          }\n          warn(\"Asset loading timed out in \", timeout, \"ms\");\n          self.emit(\"timeout\");\n          self.load();\n        }, timeout);\n      },\n    },\n\n    detachedCallback: {\n      value: function () {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n        }\n      },\n    },\n\n    load: {\n      value: function () {\n        ANode.prototype.load.call(this, null, function waitOnFilter(el) {\n          return el.isAssetItem && el.hasAttribute(\"src\");\n        });\n      },\n    },\n  }),\n});\n\n/**\n * Preload using XHRLoader for any type of asset.\n */\nregisterElement(\"a-asset-item\", {\n  prototype: Object.create(ANode.prototype, {\n    createdCallback: {\n      value: function () {\n        this.data = null;\n        this.isAssetItem = true;\n      },\n    },\n\n    attachedCallback: {\n      value: function () {\n        var self = this;\n        var src = this.getAttribute(\"src\");\n        fileLoader.setResponseType(\n          this.getAttribute(\"response-type\") || inferResponseType(src)\n        );\n        fileLoader.load(\n          src,\n          function handleOnLoad(response) {\n            self.data = response;\n            /*\n            Workaround for a Chrome bug. If another XHR is sent to the same url before the\n            previous one closes, the second request never finishes.\n            setTimeout finishes the first request and lets the logic triggered by load open\n            subsequent requests.\n            setTimeout can be removed once the fix for the bug below ships:\n            https://bugs.chromium.org/p/chromium/issues/detail?id=633696&q=component%3ABlink%3ENetwork%3EXHR%20&colspec=ID%20Pri%20M%20Stars%20ReleaseBlock%20Component%20Status%20Owner%20Summary%20OS%20Modified\n          */\n            setTimeout(function load() {\n              ANode.prototype.load.call(self);\n            });\n          },\n          function handleOnProgress(xhr) {\n            self.emit(\"progress\", {\n              loadedBytes: xhr.loaded,\n              totalBytes: xhr.total,\n              xhr: xhr,\n            });\n          },\n          function handleOnError(xhr) {\n            self.emit(\"error\", { xhr: xhr });\n          }\n        );\n      },\n    },\n  }),\n});\n\n/**\n * Create a Promise that resolves once the media element has finished buffering.\n *\n * @param {Element} el - HTMLMediaElement.\n * @returns {Promise}\n */\nfunction mediaElementLoaded(el) {\n  if (!el.hasAttribute(\"autoplay\") && el.getAttribute(\"preload\") !== \"auto\") {\n    return;\n  }\n\n  // If media specifies autoplay or preload, wait until media is completely buffered.\n  return new Promise(function (resolve, reject) {\n    if (el.readyState === 4) {\n      return resolve();\n    } // Already loaded.\n    if (el.error) {\n      return reject();\n    } // Error.\n\n    el.addEventListener(\"loadeddata\", checkProgress, false);\n    el.addEventListener(\"progress\", checkProgress, false);\n    el.addEventListener(\"error\", reject, false);\n\n    function checkProgress() {\n      // Add up the seconds buffered.\n      var secondsBuffered = 0;\n      for (var i = 0; i < el.buffered.length; i++) {\n        secondsBuffered += el.buffered.end(i) - el.buffered.start(i);\n      }\n\n      // Compare seconds buffered to media duration.\n      if (secondsBuffered >= el.duration) {\n        // Set in cache because we won't be needing to call three.js loader if we have.\n        // a loaded media element.\n        // Store video elements only. three.js loader is used for audio elements.\n        // See assetParse too.\n        if (el.tagName === \"VIDEO\") {\n          THREE.Cache.files[el.getAttribute(\"src\")] = el;\n        }\n        resolve();\n      }\n    }\n  });\n}\n\n/**\n * Automatically add attributes to media elements where convenient.\n * crossorigin, playsinline.\n */\nfunction fixUpMediaElement(mediaEl) {\n  // Cross-origin.\n  var newMediaEl = setCrossOrigin(mediaEl);\n\n  // Plays inline for mobile.\n  if (newMediaEl.tagName && newMediaEl.tagName.toLowerCase() === \"video\") {\n    newMediaEl.setAttribute(\"playsinline\", \"\");\n    newMediaEl.setAttribute(\"webkit-playsinline\", \"\");\n  }\n\n  if (newMediaEl !== mediaEl) {\n    mediaEl.parentNode.appendChild(newMediaEl);\n    mediaEl.parentNode.removeChild(mediaEl);\n  }\n  return newMediaEl;\n}\n\n/**\n * Automatically set `crossorigin` if not defined on the media element.\n * If it is not defined, we must create and re-append a new media element <img> and\n * have the browser re-request it with `crossorigin` set.\n *\n * @param {Element} Media element (e.g., <img>, <audio>, <video>).\n * @returns {Element} Media element to be used to listen to for loaded events.\n */\nfunction setCrossOrigin(mediaEl) {\n  var newMediaEl;\n  var src;\n\n  // Already has crossorigin set.\n  if (mediaEl.hasAttribute(\"crossorigin\")) {\n    return mediaEl;\n  }\n\n  src = mediaEl.getAttribute(\"src\");\n\n  if (src !== null) {\n    // Does not have protocol.\n    if (src.indexOf(\"://\") === -1) {\n      return mediaEl;\n    }\n\n    // Determine if cross origin is actually needed.\n    if (extractDomain(src) === window.location.host) {\n      return mediaEl;\n    }\n  }\n\n  warn(\n    \"Cross-origin element (e.g., <img>) was requested without `crossorigin` set. \" +\n      \"A-Frame will re-request the asset with `crossorigin` attribute set. \" +\n      'Please set `crossorigin` on the element (e.g., <img crossorigin=\"anonymous\">)',\n    src\n  );\n  mediaEl.crossOrigin = \"anonymous\";\n  newMediaEl = mediaEl.cloneNode(true);\n  return newMediaEl;\n}\n\n/**\n * Extract domain out of URL.\n *\n * @param {string} url\n * @returns {string}\n */\nfunction extractDomain(url) {\n  // Find and remove protocol (e.g., http, ftp, etc.) to get domain.\n  var domain = url.indexOf(\"://\") > -1 ? url.split(\"/\")[2] : url.split(\"/\")[0];\n\n  // Find and remove port number.\n  return domain.substring(0, domain.indexOf(\":\"));\n}\n\n/**\n * Infer response-type attribute from src.\n * Default is text(default XMLHttpRequest.responseType)\n * but we use arraybuffer for .gltf and .glb files\n * because of THREE.GLTFLoader specification.\n *\n * @param {string} src\n * @returns {string}\n */\nfunction inferResponseType(src) {\n  var dotLastIndex = src.lastIndexOf(\".\");\n  if (dotLastIndex >= 0) {\n    var extension = src.slice(dotLastIndex, src.length);\n    if (extension === \".gltf\" || extension === \".glb\") {\n      return \"arraybuffer\";\n    }\n  }\n  return \"text\";\n}\nmodule.exports.inferResponseType = inferResponseType;\n",
    "var debug = require(\"../utils/debug\");\nvar registerElement = require(\"./a-register-element\").registerElement;\n\nvar warn = debug(\"core:cubemap:warn\");\n\n/**\n * Cubemap element that handles validation and exposes list of URLs.\n * Does not listen to updates.\n */\nmodule.exports = registerElement(\"a-cubemap\", {\n  prototype: Object.create(window.HTMLElement.prototype, {\n    /**\n     * Calculates this.srcs.\n     */\n    attachedCallback: {\n      value: function () {\n        this.srcs = this.validate();\n      },\n      writable: window.debug,\n    },\n\n    /**\n     * Checks for exactly six elements with [src].\n     * Does not check explicitly for <img>s in case user does not want\n     * prefetching.\n     *\n     * @returns {Array|null} - six URLs if valid, else null.\n     */\n    validate: {\n      value: function () {\n        var elements = this.querySelectorAll(\"[src]\");\n        var i;\n        var srcs = [];\n        if (elements.length === 6) {\n          for (i = 0; i < elements.length; i++) {\n            srcs.push(elements[i].getAttribute(\"src\"));\n          }\n          return srcs;\n        }\n        // Else if there are not six elements, throw a warning.\n        warn(\n          \"<a-cubemap> did not contain exactly six elements each with a \" +\n            \"`src` attribute.\"\n        );\n      },\n      writable: window.debug,\n    },\n  }),\n});\n",
    "var ANode = require(\"./a-node\");\nvar COMPONENTS = require(\"./component\").components;\nvar registerElement = require(\"./a-register-element\").registerElement;\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils/\");\n\nvar AEntity;\nvar debug = utils.debug(\"core:a-entity:debug\");\nvar warn = utils.debug(\"core:a-entity:warn\");\n\nvar MULTIPLE_COMPONENT_DELIMITER = \"__\";\nvar OBJECT3D_COMPONENTS = [\"position\", \"rotation\", \"scale\", \"visible\"];\nvar ONCE = { once: true };\n\n/**\n * Entity is a container object that components are plugged into to comprise everything in\n * the scene. In A-Frame, they inherently have position, rotation, and scale.\n *\n * To be able to take components, the scene element inherits from the entity definition.\n *\n * @member {object} components - entity's currently initialized components.\n * @member {object} object3D - three.js object.\n * @member {array} states\n * @member {boolean} isPlaying - false if dynamic behavior of the entity is paused.\n */\nvar proto = Object.create(ANode.prototype, {\n  createdCallback: {\n    value: function () {\n      this.components = {};\n      // To avoid double initializations and infinite loops.\n      this.initializingComponents = {};\n      this.componentsToUpdate = {};\n      this.isEntity = true;\n      this.isPlaying = false;\n      this.object3D = new THREE.Group();\n      this.object3D.el = this;\n      this.object3DMap = {};\n      this.parentEl = null;\n      this.rotationObj = {};\n      this.states = [];\n    },\n  },\n\n  /**\n   * Handle changes coming from the browser DOM inspector.\n   */\n  attributeChangedCallback: {\n    value: function (attr, oldVal, newVal) {\n      var component = this.components[attr];\n      // If the empty string is passed by the component initialization\n      // logic we ignore the component update.\n      if (component && component.justInitialized && newVal === \"\") {\n        delete component.justInitialized;\n        return;\n      }\n      // When a component is removed after calling el.removeAttribute('material')\n      if (!component && newVal === null) {\n        return;\n      }\n      this.setEntityAttribute(attr, oldVal, newVal);\n    },\n  },\n\n  /**\n   * Add to parent, load, play.\n   */\n  attachedCallback: {\n    value: function () {\n      var assetsEl; // Asset management system element.\n      var sceneEl = this.sceneEl;\n      var self = this; // Component.\n\n      this.addToParent();\n\n      // Don't .load() scene on attachedCallback.\n      if (this.isScene) {\n        return;\n      }\n\n      // Gracefully not error when outside of <a-scene> (e.g., tests).\n      if (!sceneEl) {\n        this.load();\n        return;\n      }\n\n      // Wait for asset management system to finish before loading.\n      assetsEl = sceneEl.querySelector(\"a-assets\");\n      if (assetsEl && !assetsEl.hasLoaded) {\n        assetsEl.addEventListener(\"loaded\", function () {\n          self.load();\n        });\n        return;\n      }\n      this.load();\n    },\n  },\n\n  /**\n   * Tell parent to remove this element's object3D from its object3D.\n   * Do not call on scene element because that will cause a call to document.body.remove().\n   */\n  detachedCallback: {\n    value: function () {\n      var componentName;\n\n      if (!this.parentEl) {\n        return;\n      }\n\n      // Remove components.\n      for (componentName in this.components) {\n        this.removeComponent(componentName);\n      }\n\n      if (this.isScene) {\n        return;\n      }\n\n      this.removeFromParent();\n      ANode.prototype.detachedCallback.call(this);\n\n      // Remove cyclic reference.\n      this.object3D.el = null;\n    },\n  },\n\n  getObject3D: {\n    value: function (type) {\n      return this.object3DMap[type];\n    },\n  },\n\n  /**\n   * Set a THREE.Object3D into the map.\n   *\n   * @param {string} type - Developer-set name of the type of object, will be unique per type.\n   * @param {object} obj - A THREE.Object3D.\n   */\n  setObject3D: {\n    value: function (type, obj) {\n      var oldObj;\n      var self = this;\n\n      if (!(obj instanceof THREE.Object3D)) {\n        throw new Error(\n          \"`Entity.setObject3D` was called with an object that was not an instance of \" +\n            \"THREE.Object3D.\"\n        );\n      }\n\n      // Remove existing object of the type.\n      oldObj = this.getObject3D(type);\n      if (oldObj) {\n        this.object3D.remove(oldObj);\n      }\n\n      // Set references to A-Frame entity.\n      obj.el = this;\n      if (obj.children.length) {\n        obj.traverse(function bindEl(child) {\n          child.el = self;\n        });\n      }\n\n      // Add.\n      this.object3D.add(obj);\n      this.object3DMap[type] = obj;\n      this.emit(\"object3dset\", { object: obj, type: type });\n    },\n  },\n\n  /**\n   * Remove object from scene and entity object3D map.\n   */\n  removeObject3D: {\n    value: function (type) {\n      var obj = this.getObject3D(type);\n      if (!obj) {\n        warn(\n          \"Tried to remove `Object3D` of type:\",\n          type,\n          \"which was not defined.\"\n        );\n        return;\n      }\n      this.object3D.remove(obj);\n      delete this.object3DMap[type];\n      this.emit(\"object3dremove\", { type: type });\n    },\n  },\n\n  /**\n   * Gets or creates an object3D of a given type.\n   *\n   * @param {string} type - Type of the object3D.\n   * @param {string} Constructor - Constructor to use to create the object3D if needed.\n   * @returns {object}\n   */\n  getOrCreateObject3D: {\n    value: function (type, Constructor) {\n      var object3D = this.getObject3D(type);\n      if (!object3D && Constructor) {\n        object3D = new Constructor();\n        this.setObject3D(type, object3D);\n      }\n      warn(\n        \"`getOrCreateObject3D` has been deprecated. Use `setObject3D()` \" +\n          \"and `object3dset` event instead.\"\n      );\n      return object3D;\n    },\n  },\n\n  /**\n   * Add child entity.\n   *\n   * @param {Element} el - Child entity.\n   */\n  add: {\n    value: function (el) {\n      if (!el.object3D) {\n        throw new Error(\n          \"Trying to add an element that doesn't have an `object3D`\"\n        );\n      }\n      this.object3D.add(el.object3D);\n      this.object3D.updateMatrixWorld(true);\n      this.emit(\"child-attached\", { el: el });\n    },\n  },\n\n  /**\n   * Tell parentNode to add this entity to itself.\n   */\n  addToParent: {\n    value: function () {\n      var parentNode = (this.parentEl = this.parentNode);\n\n      // `!parentNode` check primarily for unit tests.\n      if (!parentNode || !parentNode.add || this.attachedToParent) {\n        return;\n      }\n\n      parentNode.add(this);\n      this.attachedToParent = true; // To prevent multiple attachments to same parent.\n    },\n  },\n\n  /**\n   * Tell parentNode to remove this entity from itself.\n   */\n  removeFromParent: {\n    value: function () {\n      var parentEl = this.parentEl;\n      this.parentEl.remove(this);\n      this.attachedToParent = false;\n      this.parentEl = null;\n      parentEl.emit(\"child-detached\", { el: this });\n    },\n  },\n\n  load: {\n    value: function () {\n      var self = this;\n\n      if (this.hasLoaded || !this.parentEl) {\n        return;\n      }\n\n      ANode.prototype.load.call(this, function entityLoadCallback() {\n        // Check if entity was detached while it was waiting to load.\n        if (!self.parentEl) {\n          return;\n        }\n\n        self.updateComponents();\n        if (self.isScene || self.parentEl.isPlaying) {\n          self.play();\n        }\n      });\n    },\n    writable: window.debug,\n  },\n\n  /**\n   * Remove child entity.\n   *\n   * @param {Element} el - Child entity.\n   */\n  remove: {\n    value: function (el) {\n      this.object3D.remove(el.object3D);\n    },\n  },\n\n  /**\n   * @returns {array} Direct children that are entities.\n   */\n  getChildEntities: {\n    value: function () {\n      var children = this.children;\n      var childEntities = [];\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        if (child instanceof AEntity) {\n          childEntities.push(child);\n        }\n      }\n\n      return childEntities;\n    },\n  },\n\n  /**\n   * Initialize component.\n   *\n   * @param {string} attrName - Attribute name asociated to the component.\n   * @param {object} data - Component data\n   * @param {boolean} isDependency - True if the component is a dependency.\n   */\n  initComponent: {\n    value: function (attrName, data, isDependency) {\n      var component;\n      var componentId;\n      var componentInfo;\n      var componentName;\n      var isComponentDefined;\n\n      componentInfo = utils.split(attrName, MULTIPLE_COMPONENT_DELIMITER);\n      componentName = componentInfo[0];\n      componentId =\n        componentInfo.length > 2\n          ? componentInfo.slice(1).join(\"__\")\n          : componentInfo[1];\n\n      // Not a registered component.\n      if (!COMPONENTS[componentName]) {\n        return;\n      }\n\n      // Component is not a dependency and is undefined.\n      // If a component is a dependency, then it is okay to have no data.\n      isComponentDefined =\n        checkComponentDefined(this, attrName) || data !== undefined;\n      if (!isComponentDefined && !isDependency) {\n        return;\n      }\n\n      // Component already initialized.\n      if (attrName in this.components) {\n        return;\n      }\n\n      // Initialize dependencies first\n      this.initComponentDependencies(componentName);\n\n      // If component name has an id we check component type multiplic\n      if (componentId && !COMPONENTS[componentName].multiple) {\n        throw new Error(\n          \"Trying to initialize multiple \" +\n            \"components of type `\" +\n            componentName +\n            \"`. There can only be one component of this type per entity.\"\n        );\n      }\n      component = new COMPONENTS[componentName].Component(\n        this,\n        data,\n        componentId\n      );\n      if (this.isPlaying) {\n        component.play();\n      }\n\n      // Components are reflected in the DOM as attributes but the state is not shown\n      // hence we set the attribute to empty string.\n      // The flag justInitialized is for attributeChangedCallback to not overwrite\n      // the component with the empty string.\n      if (!this.hasAttribute(attrName)) {\n        component.justInitialized = true;\n        window.HTMLElement.prototype.setAttribute.call(this, attrName, \"\");\n      }\n\n      debug(\"Component initialized: %s\", attrName);\n    },\n    writable: window.debug,\n  },\n\n  /**\n   * Initialize dependencies of a component.\n   *\n   * @param {string} name - Root component name.\n   */\n  initComponentDependencies: {\n    value: function (name) {\n      var self = this;\n      var component = COMPONENTS[name];\n      var dependencies;\n      var i;\n\n      // Not a component.\n      if (!component) {\n        return;\n      }\n\n      // No dependencies.\n      dependencies = COMPONENTS[name].dependencies;\n\n      if (!dependencies) {\n        return;\n      }\n\n      // Initialize dependencies.\n      for (i = 0; i < dependencies.length; i++) {\n        // Call getAttribute to initialize the data from the DOM.\n        self.initComponent(\n          dependencies[i],\n          window.HTMLElement.prototype.getAttribute.call(\n            self,\n            dependencies[i]\n          ) || undefined,\n          true\n        );\n      }\n    },\n  },\n\n  removeComponent: {\n    value: function (name) {\n      var component;\n\n      component = this.components[name];\n      if (!component) {\n        return;\n      }\n\n      // Wait for component to initialize.\n      if (!component.initialized) {\n        this.addEventListener(\n          \"componentinitialized\",\n          function tryRemoveLater(evt) {\n            if (evt.detail.name !== name) {\n              return;\n            }\n            this.removeComponent(name);\n            this.removeEventListener(\"componentinitialized\", tryRemoveLater);\n          }\n        );\n        return;\n      }\n\n      component.pause();\n      component.remove();\n      delete this.components[name];\n      this.emit(\"componentremoved\", component.evtDetail);\n    },\n    writable: window.debug,\n  },\n\n  /**\n   * Initialize or update all components.\n   * Build data using initial components, defined attributes, mixins, and defaults.\n   * Update default components before the rest.\n   *\n   * @member {function} getExtraComponents - Can be implemented to include component data\n   *   from other sources (e.g., implemented by primitives).\n   */\n  updateComponents: {\n    value: function () {\n      var data;\n      var extraComponents;\n      var i;\n      var name;\n      var componentsToUpdate = this.componentsToUpdate;\n\n      if (!this.hasLoaded) {\n        return;\n      }\n\n      // Gather mixin-defined components.\n      for (i = 0; i < this.mixinEls.length; i++) {\n        for (name in this.mixinEls[i].componentCache) {\n          if (isComponent(name)) {\n            componentsToUpdate[name] = true;\n          }\n        }\n      }\n\n      // Gather from extra initial component data if defined (e.g., primitives).\n      if (this.getExtraComponents) {\n        extraComponents = this.getExtraComponents();\n        for (name in extraComponents) {\n          if (isComponent(name)) {\n            componentsToUpdate[name] = true;\n          }\n        }\n      }\n\n      // Gather entity-defined components.\n      for (i = 0; i < this.attributes.length; ++i) {\n        name = this.attributes[i].name;\n        if (OBJECT3D_COMPONENTS.indexOf(name) !== -1) {\n          continue;\n        }\n        if (isComponent(name)) {\n          componentsToUpdate[name] = true;\n        }\n      }\n\n      // object3D components first (position, rotation, scale, visible).\n      for (i = 0; i < OBJECT3D_COMPONENTS.length; i++) {\n        name = OBJECT3D_COMPONENTS[i];\n        if (!this.hasAttribute(name)) {\n          continue;\n        }\n        this.updateComponent(name, this.getDOMAttribute(name));\n      }\n\n      // Initialize or update rest of components.\n      for (name in componentsToUpdate) {\n        data = mergeComponentData(\n          this.getDOMAttribute(name),\n          extraComponents && extraComponents[name]\n        );\n        this.updateComponent(name, data);\n        delete componentsToUpdate[name];\n      }\n    },\n    writable: window.debug,\n  },\n\n  /**\n   * Initialize, update, or remove a single component.\n   *\n   * When initializing, we set the component on `this.components`.\n   *\n   * @param {string} attr - Component name.\n   * @param {object} attrValue - Value of the DOM attribute.\n   * @param {boolean} clobber - If new attrValue completely replaces previous properties.\n   */\n  updateComponent: {\n    value: function (attr, attrValue, clobber) {\n      var component = this.components[attr];\n\n      if (component) {\n        // Remove component.\n        if (attrValue === null && !checkComponentDefined(this, attr)) {\n          this.removeComponent(attr);\n          return;\n        }\n        // Component already initialized. Update component.\n        component.updateProperties(attrValue, clobber);\n        return;\n      }\n\n      // Component not yet initialized. Initialize component.\n      this.initComponent(attr, attrValue, false);\n    },\n  },\n\n  /**\n   * If `attr` is a component name, detach the component from the entity.\n   *\n   * If `propertyName` is given, reset the component property value to its default.\n   *\n   * @param {string} attr - Attribute name, which could also be a component name.\n   * @param {string} propertyName - Component prop name, if resetting an individual prop.\n   */\n  removeAttribute: {\n    value: function (attr, propertyName) {\n      var component = this.components[attr];\n\n      // Remove component.\n      if (component && propertyName === undefined) {\n        this.removeComponent(attr);\n      }\n\n      // Reset component property value.\n      if (component && propertyName !== undefined) {\n        component.resetProperty(propertyName);\n        return;\n      }\n\n      // Remove mixins.\n      if (attr === \"mixin\") {\n        this.mixinUpdate(\"\");\n      }\n\n      window.HTMLElement.prototype.removeAttribute.call(this, attr);\n    },\n  },\n\n  /**\n   * Start dynamic behavior associated with entity such as dynamic components and animations.\n   * Tell all children entities to also play.\n   */\n  play: {\n    value: function () {\n      var entities;\n      var i;\n      var key;\n\n      // Already playing.\n      if (this.isPlaying || !this.hasLoaded) {\n        return;\n      }\n      this.isPlaying = true;\n\n      // Wake up all components.\n      for (key in this.components) {\n        this.components[key].play();\n      }\n\n      // Tell all child entities to play.\n      entities = this.getChildEntities();\n      for (i = 0; i < entities.length; i++) {\n        entities[i].play();\n      }\n\n      this.emit(\"play\");\n    },\n    writable: true,\n  },\n\n  /**\n   * Pause dynamic behavior associated with entity such as dynamic components and animations.\n   * Tell all children entities to also pause.\n   */\n  pause: {\n    value: function () {\n      var entities;\n      var i;\n      var key;\n\n      if (!this.isPlaying) {\n        return;\n      }\n      this.isPlaying = false;\n\n      // Sleep all components.\n      for (key in this.components) {\n        this.components[key].pause();\n      }\n\n      // Tell all child entities to pause.\n      entities = this.getChildEntities();\n      for (i = 0; i < entities.length; i++) {\n        entities[i].pause();\n      }\n\n      this.emit(\"pause\");\n    },\n    writable: true,\n  },\n\n  /**\n   * Deals with updates on entity-specific attributes (i.e., components and mixins).\n   *\n   * @param {string} attr\n   * @param {string} oldVal\n   * @param {string|object} newVal\n   */\n  setEntityAttribute: {\n    value: function (attr, oldVal, newVal) {\n      if (COMPONENTS[attr] || this.components[attr]) {\n        this.updateComponent(attr, newVal);\n        return;\n      }\n      if (attr === \"mixin\") {\n        // Ignore if `<a-node>` code is just updating computed mixin in the DOM.\n        if (newVal === this.computedMixinStr) {\n          return;\n        }\n        this.mixinUpdate(newVal, oldVal);\n      }\n    },\n  },\n\n  /**\n   * When mixins updated, trigger init or optimized-update of relevant components.\n   */\n  mixinUpdate: {\n    value: (function () {\n      var componentsUpdated = [];\n\n      return function (newMixins, oldMixins) {\n        var component;\n        var mixinEl;\n        var mixinIds;\n        var i;\n        var self = this;\n\n        if (!this.hasLoaded) {\n          this.addEventListener(\n            \"loaded\",\n            function () {\n              self.mixinUpdate(newMixins, oldMixins);\n            },\n            ONCE\n          );\n          return;\n        }\n\n        oldMixins = oldMixins || this.getAttribute(\"mixin\");\n        mixinIds = this.updateMixins(newMixins, oldMixins);\n\n        // Loop over current mixins.\n        componentsUpdated.length = 0;\n        for (i = 0; i < this.mixinEls.length; i++) {\n          for (component in this.mixinEls[i].componentCache) {\n            if (componentsUpdated.indexOf(component) === -1) {\n              if (this.components[component]) {\n                // Update. Just rebuild data.\n                this.components[component].handleMixinUpdate();\n              } else {\n                // Init. buildData will gather mixin values.\n                this.initComponent(component, null);\n              }\n              componentsUpdated.push(component);\n            }\n          }\n        }\n\n        // Loop over old mixins to call for data rebuild.\n        for (i = 0; i < mixinIds.oldMixinIds.length; i++) {\n          mixinEl = document.getElementById(mixinIds.oldMixinIds[i]);\n          if (!mixinEl) {\n            continue;\n          }\n          for (component in mixinEl.componentCache) {\n            if (componentsUpdated.indexOf(component) === -1) {\n              if (this.components[component]) {\n                // Component removed. Rebuild data if not yet rebuilt.\n                this.components[component].handleMixinUpdate();\n              }\n            }\n          }\n        }\n      };\n    })(),\n  },\n\n  /**\n   * setAttribute can:\n   *\n   * 1. Set a single property of a multi-property component.\n   * 2. Set multiple properties of a multi-property component.\n   * 3. Replace properties of a multi-property component.\n   * 4. Set a value for a single-property component, mixin, or normal HTML attribute.\n   *\n   * @param {string} attrName - Component or attribute name.\n   * @param {*} arg1 - Can be a value, property name, CSS-style property string, or\n   *   object of properties.\n   * @param {*|bool} arg2 - If arg1 is a property name, this should be a value. Otherwise,\n   *   it is a boolean indicating whether to clobber previous values (defaults to false).\n   */\n  setAttribute: {\n    value: (function () {\n      var singlePropUpdate = {};\n\n      return function (attrName, arg1, arg2) {\n        var newAttrValue;\n        var clobber;\n        var componentName;\n        var delimiterIndex;\n        var isDebugMode;\n        var key;\n\n        delimiterIndex = attrName.indexOf(MULTIPLE_COMPONENT_DELIMITER);\n        componentName =\n          delimiterIndex > 0 ? attrName.substring(0, delimiterIndex) : attrName;\n\n        // Not a component. Normal set attribute.\n        if (!COMPONENTS[componentName]) {\n          if (attrName === \"mixin\") {\n            this.mixinUpdate(arg1);\n          }\n          ANode.prototype.setAttribute.call(this, attrName, arg1);\n          return;\n        }\n\n        // Initialize component first if not yet initialized.\n        if (!this.components[attrName] && this.hasAttribute(attrName)) {\n          this.updateComponent(\n            attrName,\n            window.HTMLElement.prototype.getAttribute.call(this, attrName)\n          );\n        }\n\n        // Determine new attributes from the arguments\n        if (\n          typeof arg2 !== \"undefined\" &&\n          typeof arg1 === \"string\" &&\n          arg1.length > 0 &&\n          typeof utils.styleParser.parse(arg1) === \"string\"\n        ) {\n          // Update a single property of a multi-property component\n          for (key in singlePropUpdate) {\n            delete singlePropUpdate[key];\n          }\n          newAttrValue = singlePropUpdate;\n          newAttrValue[arg1] = arg2;\n          clobber = false;\n        } else {\n          // Update with a value, object, or CSS-style property string, with the possiblity\n          // of clobbering previous values.\n          newAttrValue = arg1;\n          clobber = arg2 === true;\n        }\n\n        // Update component\n        this.updateComponent(attrName, newAttrValue, clobber);\n\n        // In debug mode, write component data up to the DOM.\n        isDebugMode = this.sceneEl && this.sceneEl.getAttribute(\"debug\");\n        if (isDebugMode) {\n          this.components[attrName].flushToDOM();\n        }\n      };\n    })(),\n    writable: window.debug,\n  },\n\n  /**\n   * Reflect component data in the DOM (as seen from the browser DOM Inspector).\n   *\n   * @param {bool} recursive - Also flushToDOM on the children.\n   **/\n  flushToDOM: {\n    value: function (recursive) {\n      var components = this.components;\n      var child;\n      var children = this.children;\n      var i;\n      var key;\n\n      // Flush entity's components to DOM.\n      for (key in components) {\n        components[key].flushToDOM();\n      }\n\n      // Recurse.\n      if (!recursive) {\n        return;\n      }\n      for (i = 0; i < children.length; ++i) {\n        child = children[i];\n        if (!child.flushToDOM) {\n          continue;\n        }\n        child.flushToDOM(recursive);\n      }\n    },\n  },\n\n  /**\n   * If `attr` is a component, returns ALL component data including applied mixins and\n   * defaults.\n   *\n   * If `attr` is not a component, fall back to HTML getAttribute.\n   *\n   * @param {string} attr\n   * @returns {object|string} Object if component, else string.\n   */\n  getAttribute: {\n    value: function (attr) {\n      // If component, return component data.\n      var component;\n      if (attr === \"position\") {\n        return this.object3D.position;\n      }\n      if (attr === \"rotation\") {\n        return getRotation(this);\n      }\n      if (attr === \"scale\") {\n        return this.object3D.scale;\n      }\n      if (attr === \"visible\") {\n        return this.object3D.visible;\n      }\n      component = this.components[attr];\n      if (component) {\n        return component.data;\n      }\n      return window.HTMLElement.prototype.getAttribute.call(this, attr);\n    },\n    writable: window.debug,\n  },\n\n  /**\n   * If `attr` is a component, returns JUST the component data defined on the entity.\n   * Like a partial version of `getComputedAttribute` as returned component data\n   * does not include applied mixins or defaults.\n   *\n   * If `attr` is not a component, fall back to HTML getAttribute.\n   *\n   * @param {string} attr\n   * @returns {object|string} Object if component, else string.\n   */\n  getDOMAttribute: {\n    value: function (attr) {\n      // If cached value exists, return partial component data.\n      var component = this.components[attr];\n      if (component) {\n        return component.attrValue;\n      }\n      return window.HTMLElement.prototype.getAttribute.call(this, attr);\n    },\n    writable: window.debug,\n  },\n\n  addState: {\n    value: function (state) {\n      if (this.is(state)) {\n        return;\n      }\n      this.states.push(state);\n      this.emit(\"stateadded\", state);\n    },\n  },\n\n  removeState: {\n    value: function (state) {\n      var stateIndex = this.states.indexOf(state);\n      if (stateIndex === -1) {\n        return;\n      }\n      this.states.splice(stateIndex, 1);\n      this.emit(\"stateremoved\", state);\n    },\n  },\n\n  /**\n   * Checks if the element is in a given state. e.g. el.is('alive');\n   * @type {string} state - Name of the state we want to check\n   */\n  is: {\n    value: function (state) {\n      return this.states.indexOf(state) !== -1;\n    },\n  },\n});\n\n/**\n * Check if a component is *defined* for an entity, including defaults and mixins.\n * Does not check whether the component has been *initialized* for an entity.\n *\n * @param {string} el - Entity.\n * @param {string} name - Component name.\n * @returns {boolean}\n */\nfunction checkComponentDefined(el, name) {\n  // Check if element contains the component.\n  if (el.components[name] && el.components[name].attrValue) {\n    return true;\n  }\n\n  return isComponentMixedIn(name, el.mixinEls);\n}\n\n/**\n * Check if any mixins contains a component.\n *\n * @param {string} name - Component name.\n * @param {array} mixinEls - Array of <a-mixin>s.\n */\nfunction isComponentMixedIn(name, mixinEls) {\n  var i;\n  var inMixin = false;\n  for (i = 0; i < mixinEls.length; ++i) {\n    inMixin = mixinEls[i].hasAttribute(name);\n    if (inMixin) {\n      break;\n    }\n  }\n  return inMixin;\n}\n\n/**\n * Given entity defined value, merge in extra data if necessary.\n * Handle both single and multi-property components.\n *\n * @param {string} attrValue - Entity data.\n * @param extraData - Entity data from another source to merge in.\n */\nfunction mergeComponentData(attrValue, extraData) {\n  // Extra data not defined, just return attrValue.\n  if (!extraData) {\n    return attrValue;\n  }\n\n  // Merge multi-property data.\n  if (extraData.constructor === Object) {\n    return utils.extend(extraData, utils.styleParser.parse(attrValue || {}));\n  }\n\n  // Return data, precendence to the defined value.\n  return attrValue || extraData;\n}\n\nfunction isComponent(componentName) {\n  if (componentName.indexOf(MULTIPLE_COMPONENT_DELIMITER) !== -1) {\n    componentName = utils.split(componentName, MULTIPLE_COMPONENT_DELIMITER)[0];\n  }\n  if (!COMPONENTS[componentName]) {\n    return false;\n  }\n  return true;\n}\n\nfunction getRotation(entityEl) {\n  var radToDeg = THREE.Math.radToDeg;\n  var rotation = entityEl.object3D.rotation;\n  var rotationObj = entityEl.rotationObj;\n  rotationObj.x = radToDeg(rotation.x);\n  rotationObj.y = radToDeg(rotation.y);\n  rotationObj.z = radToDeg(rotation.z);\n  return rotationObj;\n}\n\nAEntity = registerElement(\"a-entity\", { prototype: proto });\nmodule.exports = AEntity;\n",
    "var ANode = require(\"./a-node\");\nvar registerElement = require(\"./a-register-element\").registerElement;\nvar components = require(\"./component\").components;\nvar utils = require(\"../utils\");\n\nvar MULTIPLE_COMPONENT_DELIMITER = \"__\";\n\n/**\n * @member {object} componentCache - Cache of pre-parsed values. An object where the keys\n *         are component names and the values are already parsed by the component.\n */\nmodule.exports = registerElement(\"a-mixin\", {\n  prototype: Object.create(ANode.prototype, {\n    createdCallback: {\n      value: function () {\n        this.componentCache = {};\n        this.id = this.getAttribute(\"id\");\n        this.isMixin = true;\n      },\n    },\n\n    attributeChangedCallback: {\n      value: function (attr, oldVal, newVal) {\n        this.cacheAttribute(attr, newVal);\n        this.updateEntities();\n      },\n    },\n\n    attachedCallback: {\n      value: function () {\n        this.sceneEl = this.closestScene();\n        this.cacheAttributes();\n        this.updateEntities();\n        this.load();\n      },\n    },\n\n    /**\n     * setAttribute that parses and caches component values.\n     */\n    setAttribute: {\n      value: function (attr, value) {\n        window.HTMLElement.prototype.setAttribute.call(this, attr, value);\n        this.cacheAttribute(attr, value);\n      },\n    },\n\n    /**\n     * If `attr` is a component, then parse the value using the schema and store it.\n     */\n    cacheAttribute: {\n      value: function (attr, value) {\n        var component;\n        var componentName;\n\n        // Get component data.\n        componentName = utils.split(attr, MULTIPLE_COMPONENT_DELIMITER)[0];\n        component = components[componentName];\n        if (!component) {\n          return;\n        }\n        if (value === undefined) {\n          value = window.HTMLElement.prototype.getAttribute.call(this, attr);\n        }\n        this.componentCache[attr] = component.parseAttrValueForCache(value);\n      },\n    },\n\n    /**\n     * If `attr` is a component, then grab pre-parsed value from the cache.\n     * Else do a normal getAttribute.\n     */\n    getAttribute: {\n      value: function (attr) {\n        return (\n          this.componentCache[attr] ||\n          window.HTMLElement.prototype.getAttribute.call(this, attr)\n        );\n      },\n    },\n\n    /**\n     * Parse and cache every component defined on the mixin.\n     */\n    cacheAttributes: {\n      value: function () {\n        var attributes = this.attributes;\n        var attrName;\n        var i;\n        for (i = 0; i < attributes.length; i++) {\n          attrName = attributes[i].name;\n          this.cacheAttribute(attrName);\n        }\n      },\n    },\n\n    /**\n     * For entities that already have been loaded by the time the mixin was attached, tell\n     * those entities to register the mixin and refresh their component data.\n     */\n    updateEntities: {\n      value: function () {\n        var entity;\n        var entities;\n        var i;\n\n        if (!this.sceneEl) {\n          return;\n        }\n\n        entities = this.sceneEl.querySelectorAll(\"[mixin~=\" + this.id + \"]\");\n        for (i = 0; i < entities.length; i++) {\n          entity = entities[i];\n          if (!entity.hasLoaded || entity.isMixin) {\n            continue;\n          }\n          entity.mixinUpdate(this.id);\n        }\n      },\n    },\n  }),\n});\n",
    "/* global CustomEvent */\nvar registerElement = require(\"./a-register-element\").registerElement;\nvar isNode = require(\"./a-register-element\").isNode;\nvar utils = require(\"../utils/\");\n\nvar warn = utils.debug(\"core:a-node:warn\");\nvar error = utils.debug(\"core:a-node:error\");\n\n/**\n * Base class for A-Frame that manages loading of objects.\n *\n * Nodes can be modified using mixins.\n * Nodes emit a `loaded` event when they and their children have initialized.\n */\nmodule.exports = registerElement(\"a-node\", {\n  prototype: Object.create(window.HTMLElement.prototype, {\n    createdCallback: {\n      value: function () {\n        this.computedMixinStr = \"\";\n        this.hasLoaded = false;\n        this.isNode = true;\n        this.mixinEls = [];\n      },\n      writable: window.debug,\n    },\n\n    attachedCallback: {\n      value: function () {\n        var mixins;\n        this.sceneEl = this.closestScene();\n\n        if (!this.sceneEl) {\n          warn(\n            \"You are attempting to attach <\" +\n              this.tagName +\n              \"> outside of an A-Frame \" +\n              \"scene. Append this element to `<a-scene>` instead.\"\n          );\n        }\n\n        this.hasLoaded = false;\n        this.emit(\"nodeready\", undefined, false);\n\n        if (!this.isMixin) {\n          mixins = this.getAttribute(\"mixin\");\n          if (mixins) {\n            this.updateMixins(mixins);\n          }\n        }\n      },\n      writable: window.debug,\n    },\n\n    /**\n     * Handle mixin.\n     */\n    attributeChangedCallback: {\n      value: function (attr, oldVal, newVal) {\n        // Ignore if `<a-node>` code is just updating computed mixin in the DOM.\n        if (newVal === this.computedMixinStr) {\n          return;\n        }\n\n        if (attr === \"mixin\" && !this.isMixin) {\n          this.updateMixins(newVal, oldVal);\n        }\n      },\n    },\n\n    /**\n     * Returns the first scene by traversing up the tree starting from and\n     * including receiver element.\n     */\n    closestScene: {\n      value: function closest() {\n        var element = this;\n        while (element) {\n          if (element.isScene) {\n            break;\n          }\n          element = element.parentElement;\n        }\n        return element;\n      },\n    },\n\n    /**\n     * Returns first element matching a selector by traversing up the tree starting\n     * from and including receiver element.\n     *\n     * @param {string} selector - Selector of element to find.\n     */\n    closest: {\n      value: function closest(selector) {\n        var matches =\n          this.matches ||\n          this.mozMatchesSelector ||\n          this.msMatchesSelector ||\n          this.oMatchesSelector ||\n          this.webkitMatchesSelector;\n        var element = this;\n        while (element) {\n          if (matches.call(element, selector)) {\n            break;\n          }\n          element = element.parentElement;\n        }\n        return element;\n      },\n    },\n\n    detachedCallback: {\n      value: function () {\n        this.hasLoaded = false;\n      },\n    },\n\n    /**\n     * Wait for children to load, if any.\n     * Then emit `loaded` event and set `hasLoaded`.\n     */\n    load: {\n      value: function (cb, childFilter) {\n        var children;\n        var childrenLoaded;\n        var self = this;\n\n        if (this.hasLoaded) {\n          return;\n        }\n\n        // Default to waiting for all nodes.\n        childFilter = childFilter || isNode;\n        // Wait for children to load (if any), then load.\n        children = this.getChildren();\n        childrenLoaded = children.filter(childFilter).map(function (child) {\n          return new Promise(function waitForLoaded(resolve) {\n            if (child.hasLoaded) {\n              return resolve();\n            }\n            child.addEventListener(\"loaded\", resolve);\n          });\n        });\n\n        Promise.all(childrenLoaded)\n          .then(function emitLoaded() {\n            self.hasLoaded = true;\n            if (cb) {\n              cb();\n            }\n            self.emit(\"loaded\", undefined, false);\n          })\n          .catch(function (err) {\n            error(\"Failure loading node: \", err);\n          });\n      },\n      writable: true,\n    },\n\n    getChildren: {\n      value: function () {\n        return Array.prototype.slice.call(this.children, 0);\n      },\n    },\n\n    /**\n     * Unregister old mixins and listeners.\n     * Register new mixins and listeners.\n     * Registering means to update `this.mixinEls` with listeners.\n     */\n    updateMixins: {\n      value: (function () {\n        var newMixinIdArray = [];\n        var oldMixinIdArray = [];\n        var mixinIds = {};\n\n        return function (newMixins, oldMixins) {\n          var i;\n          var newMixinIds;\n          var oldMixinIds;\n\n          newMixinIdArray.length = 0;\n          oldMixinIdArray.length = 0;\n          newMixinIds = newMixins\n            ? utils.split(newMixins.trim(), /\\s+/)\n            : newMixinIdArray;\n          oldMixinIds = oldMixins\n            ? utils.split(oldMixins.trim(), /\\s+/)\n            : oldMixinIdArray;\n\n          mixinIds.newMixinIds = newMixinIds;\n          mixinIds.oldMixinIds = oldMixinIds;\n\n          // Unregister old mixins.\n          for (i = 0; i < oldMixinIds.length; i++) {\n            if (newMixinIds.indexOf(oldMixinIds[i]) === -1) {\n              this.unregisterMixin(oldMixinIds[i]);\n            }\n          }\n\n          // Register new mixins.\n          this.computedMixinStr = \"\";\n          this.mixinEls.length = 0;\n          for (i = 0; i < newMixinIds.length; i++) {\n            this.registerMixin(document.getElementById(newMixinIds[i]));\n          }\n\n          // Update DOM. Keep track of `computedMixinStr` to not recurse back here after\n          // update.\n          if (this.computedMixinStr) {\n            this.computedMixinStr = this.computedMixinStr.trim();\n            window.HTMLElement.prototype.setAttribute.call(\n              this,\n              \"mixin\",\n              this.computedMixinStr\n            );\n          }\n\n          return mixinIds;\n        };\n      })(),\n    },\n\n    /**\n     * From mixin ID, add mixin element to `mixinEls`.\n     *\n     * @param {Element} mixinEl\n     */\n    registerMixin: {\n      value: function (mixinEl) {\n        var compositedMixinIds;\n        var i;\n        var mixin;\n\n        if (!mixinEl) {\n          return;\n        }\n\n        // Register composited mixins (if mixin has mixins).\n        mixin = mixinEl.getAttribute(\"mixin\");\n        if (mixin) {\n          compositedMixinIds = utils.split(mixin.trim(), /\\s+/);\n          for (i = 0; i < compositedMixinIds.length; i++) {\n            this.registerMixin(document.getElementById(compositedMixinIds[i]));\n          }\n        }\n\n        // Register mixin.\n        this.computedMixinStr = this.computedMixinStr + \" \" + mixinEl.id;\n        this.mixinEls.push(mixinEl);\n      },\n    },\n\n    setAttribute: {\n      value: function (attr, newValue) {\n        if (attr === \"mixin\") {\n          this.updateMixins(newValue);\n        }\n        window.HTMLElement.prototype.setAttribute.call(this, attr, newValue);\n      },\n    },\n\n    unregisterMixin: {\n      value: function (mixinId) {\n        var i;\n        var mixinEls = this.mixinEls;\n        var mixinEl;\n        for (i = 0; i < mixinEls.length; ++i) {\n          mixinEl = mixinEls[i];\n          if (mixinId === mixinEl.id) {\n            mixinEls.splice(i, 1);\n            break;\n          }\n        }\n      },\n    },\n\n    /**\n     * Emit a DOM event.\n     *\n     * @param {string} name - Name of event.\n     * @param {object} [detail={}] - Custom data to pass as `detail` to the event.\n     * @param {boolean} [bubbles=true] - Whether the event should bubble.\n     * @param {object} [extraData] - Extra data to pass to the event, if any.\n     */\n    emit: {\n      value: (function () {\n        var data = {};\n\n        return function (name, detail, bubbles, extraData) {\n          if (bubbles === undefined) {\n            bubbles = true;\n          }\n          data.bubbles = !!bubbles;\n          data.detail = detail;\n\n          // If extra data is present, we need to create a new object.\n          if (extraData) {\n            data = utils.extend({}, extraData, data);\n          }\n\n          this.dispatchEvent(new CustomEvent(name, data));\n        };\n      })(),\n      writable: window.debug,\n    },\n  }),\n});\n",
    "/*\n  ------------------------------------------------------------\n  ------------- WARNING WARNING WARNING WARNING --------------\n  ------------------------------------------------------------\n\n  This module wraps registerElement to deal with components that inherit from\n  `ANode` and `AEntity`.  It's a pass through in any other case.\n\n  It wraps some of the prototype methods of the created element to make sure\n  that the corresponding functions in the base prototypes (`AEntity` and `ANode`)\n  are also invoked. The method in the base prototype is always called before the one\n  in the derived prototype.\n*/\n\n// Polyfill `document.registerElement`.\nrequire(\"document-register-element\");\n\nvar ANode; // Must declare before AEntity. Initialized at the bottom.\nvar AEntity;\nvar knownTags = (module.exports.knownTags = {});\n\nfunction addTagName(tagName) {\n  knownTags[tagName.toLowerCase()] = true;\n}\n\n/**\n * Return whether the element type is one of our known registered ones.\n *\n * @param {string} node - The name of the tag to register.\n * @returns {boolean} Whether the tag name matches that of our registered custom elements.\n */\nmodule.exports.isNode = function (node) {\n  return node.tagName.toLowerCase() in knownTags || node.isNode;\n};\n\n/**\n * @param {string} tagName - The name of the tag to register.\n * @param {object} obj - The prototype of the new element.\n * @returns {object} The prototype of the new element.\n */\nmodule.exports.registerElement = function (tagName, obj) {\n  var proto = Object.getPrototypeOf(obj.prototype);\n  var newObj = obj;\n  var isANode = ANode && proto === ANode.prototype;\n  var isAEntity = AEntity && proto === AEntity.prototype;\n\n  if (isANode || isAEntity) {\n    addTagName(tagName);\n  }\n\n  // Wrap if element inherits from `ANode`.\n  if (isANode) {\n    newObj = wrapANodeMethods(obj.prototype);\n    newObj = { prototype: Object.create(proto, newObj) };\n  }\n\n  // Wrap if element inherits from `AEntity`.\n  if (isAEntity) {\n    newObj = wrapAEntityMethods(obj.prototype);\n    newObj = { prototype: Object.create(proto, newObj) };\n  }\n\n  // Give all functions their proper name.\n  Object.getOwnPropertyNames(newObj.prototype).forEach(function (propName) {\n    var propVal = newObj.prototype[propName];\n    if (typeof propVal === \"function\") {\n      propVal.displayName = propName;\n    }\n  });\n\n  return document.registerElement(tagName, newObj);\n};\n\n/**\n * Wrap some obj methods to call those on `ANode` base prototype.\n *\n * @param {object} obj - Object that contains the methods that will be wrapped.\n * @return {object} An object with the same properties as the input parameter but\n * with some of methods wrapped.\n */\nfunction wrapANodeMethods(obj) {\n  var newObj = {};\n  var ANodeMethods = [\n    \"attachedCallback\",\n    \"attributeChangedCallback\",\n    \"createdCallback\",\n    \"detachedCallback\",\n  ];\n  wrapMethods(newObj, ANodeMethods, obj, ANode.prototype);\n  copyProperties(obj, newObj);\n  return newObj;\n}\n\n/**\n * This wraps some of the obj methods to call those on `AEntity` base prototype.\n *\n * @param {object} obj - The objects that contains the methods that will be wrapped.\n * @return {object} - An object with the same properties as the input parameter but\n * with some of methods wrapped.\n */\nfunction wrapAEntityMethods(obj) {\n  var newObj = {};\n  var ANodeMethods = [\n    \"attachedCallback\",\n    \"attributeChangedCallback\",\n    \"createdCallback\",\n    \"detachedCallback\",\n  ];\n  var AEntityMethods = [\n    \"attachedCallback\",\n    \"attributeChangedCallback\",\n    \"createdCallback\",\n    \"detachedCallback\",\n  ];\n\n  wrapMethods(newObj, ANodeMethods, obj, ANode.prototype);\n  wrapMethods(newObj, AEntityMethods, obj, AEntity.prototype);\n  // Copies the remaining properties into the new object.\n  copyProperties(obj, newObj);\n  return newObj;\n}\n\n/**\n * Wrap a list a methods to ensure that those in the base prototype are called\n * before the derived one.\n *\n * @param {object} targetObj - Object that will contain the wrapped methods.\n * @param {array} methodList - List of methods from the derivedObj that will be wrapped.\n * @param {object} derivedObject - Object that inherits from the baseObj.\n * @param {object} baseObj - Object that derivedObj inherits from.\n */\nfunction wrapMethods(targetObj, methodList, derivedObj, baseObj) {\n  methodList.forEach(function (methodName) {\n    wrapMethod(targetObj, methodName, derivedObj, baseObj);\n  });\n}\nmodule.exports.wrapMethods = wrapMethods;\n\n/**\n * Wrap one method to ensure that the one in the base prototype is called before\n * the one in the derived one.\n *\n * @param {object} obj - Object that will contain the wrapped method.\n * @param {string} methodName - The name of the method that will be wrapped.\n * @param {object} derivedObject - Object that inherits from the baseObj.\n * @param {object} baseObj - Object that derivedObj inherits from.\n */\nfunction wrapMethod(obj, methodName, derivedObj, baseObj) {\n  var derivedMethod = derivedObj[methodName];\n  var baseMethod = baseObj[methodName];\n\n  // Derived prototype does not define method, no need to wrap.\n  if (!derivedMethod || !baseMethod) {\n    return;\n  }\n\n  // Derived prototype doesn't override the one in the base one, no need to wrap.\n  if (derivedMethod === baseMethod) {\n    return;\n  }\n\n  // Wrap to ensure the base method is called before the one in the derived prototype.\n  obj[methodName] = {\n    value: function wrappedMethod() {\n      baseMethod.apply(this, arguments);\n      return derivedMethod.apply(this, arguments);\n    },\n    writable: window.debug,\n  };\n}\n\n/**\n * It copies the properties from source to destination object if they don't\n * exist already.\n *\n * @param {object} source - The object where properties are copied from.\n * @param {type} destination - The object where properties are copied to.\n */\nfunction copyProperties(source, destination) {\n  var props = Object.getOwnPropertyNames(source);\n  props.forEach(function (prop) {\n    var desc;\n    if (!destination[prop]) {\n      desc = Object.getOwnPropertyDescriptor(source, prop);\n      destination[prop] = { value: source[prop], writable: desc.writable };\n    }\n  });\n}\n\nANode = require(\"./a-node\");\nAEntity = require(\"./a-entity\");\n",
    "/* global Node */\nvar schema = require(\"./schema\");\nvar scenes = require(\"./scene/scenes\");\nvar systems = require(\"./system\");\nvar utils = require(\"../utils/\");\n\nvar components = (module.exports.components = {}); // Keep track of registered components.\nvar parseProperties = schema.parseProperties;\nvar parseProperty = schema.parseProperty;\nvar processSchema = schema.process;\nvar isSingleProp = schema.isSingleProperty;\nvar stringifyProperties = schema.stringifyProperties;\nvar stringifyProperty = schema.stringifyProperty;\nvar styleParser = utils.styleParser;\nvar warn = utils.debug(\"core:component:warn\");\n\nvar aframeScript = document.currentScript;\nvar upperCaseRegExp = new RegExp(\"[A-Z]+\");\n\n// Object pools by component, created upon registration.\nvar objectPools = {};\n\n/**\n * Component class definition.\n *\n * Components configure appearance, modify behavior, or add functionality to\n * entities. The behavior and appearance of an entity can be changed at runtime\n * by adding, removing, or updating components. Entities do not share instances\n * of components.\n *\n * @member {object} el - Reference to the entity element.\n * @member {string} attrValue - Value of the corresponding HTML attribute.\n * @member {object} data - Component data populated by parsing the\n *         mapped attribute of the component plus applying defaults and mixins.\n */\nvar Component = (module.exports.Component = function (el, attrValue, id) {\n  var self = this;\n  this.el = el;\n  this.id = id;\n  this.attrName = this.name + (id ? \"__\" + id : \"\");\n  this.evtDetail = { id: this.id, name: this.name };\n  this.initialized = false;\n  this.isSingleProperty = isSingleProp(this.schema);\n  this.isSinglePropertyObject =\n    this.isSingleProperty && isObject(parseProperty(undefined, this.schema));\n  this.isObjectBased = !this.isSingleProperty || this.isSinglePropertyObject;\n  this.el.components[this.attrName] = this;\n  this.objectPool = objectPools[this.name];\n\n  // Store component data from previous update call.\n  this.attrValue = undefined;\n  this.nextData = this.isObjectBased ? this.objectPool.use() : undefined;\n  this.oldData = this.isObjectBased ? this.objectPool.use() : undefined;\n  this.previousOldData = this.isObjectBased ? this.objectPool.use() : undefined;\n  this.parsingAttrValue = this.isObjectBased\n    ? this.objectPool.use()\n    : undefined;\n\n  // Last value passed to updateProperties.\n  this.throttledEmitComponentChanged = utils.throttle(function emitChange() {\n    el.emit(\"componentchanged\", self.evtDetail, false);\n  }, 200);\n  this.updateProperties(attrValue);\n});\n\nComponent.prototype = {\n  /**\n   * Contains the type schema and defaults for the data values.\n   * Data is coerced into the types of the values of the defaults.\n   */\n  schema: {},\n\n  /**\n   * Init handler. Similar to attachedCallback.\n   * Called during component initialization and is only run once.\n   * Components can use this to set initial state.\n   */\n  init: function () {\n    /* no-op */\n  },\n\n  /**\n   * Update handler. Similar to attributeChangedCallback.\n   * Called whenever component's data changes.\n   * Also called on component initialization when the component receives initial data.\n   *\n   * @param {object} prevData - Previous attributes of the component.\n   */\n  update: function (prevData) {\n    /* no-op */\n  },\n\n  updateSchema: undefined,\n\n  /**\n   * Tick handler.\n   * Called on each tick of the scene render loop.\n   * Affected by play and pause.\n   *\n   * @param {number} time - Scene tick time.\n   * @param {number} timeDelta - Difference in current render time and previous render time.\n   */\n  tick: undefined,\n\n  /**\n   * Tock handler.\n   * Called on each tock of the scene render loop.\n   * Affected by play and pause.\n   *\n   * @param {number} time - Scene tick time.\n   * @param {number} timeDelta - Difference in current render time and previous render time.\n   * @param {object} camera - Camera used to render the last frame.\n   */\n  tock: undefined,\n\n  /**\n   * Called to start any dynamic behavior (e.g., animation, AI, events, physics).\n   */\n  play: function () {\n    /* no-op */\n  },\n\n  /**\n   * Called to stop any dynamic behavior (e.g., animation, AI, events, physics).\n   */\n  pause: function () {\n    /* no-op */\n  },\n\n  /**\n   * Remove handler. Similar to detachedCallback.\n   * Called whenever component is removed from the entity (i.e., removeAttribute).\n   * Components can use this to reset behavior on the entity.\n   */\n  remove: function () {\n    /* no-op */\n  },\n\n  /**\n   * Parses each property based on property type.\n   * If component is single-property, then parses the single property value.\n   *\n   * @param {string} value - HTML attribute value.\n   * @param {boolean} silent - Suppress warning messages.\n   * @returns {object} Component data.\n   */\n  parse: function (value, silent) {\n    var schema = this.schema;\n    if (this.isSingleProperty) {\n      return parseProperty(value, schema);\n    }\n    return parseProperties(\n      styleParser.parse(value),\n      schema,\n      true,\n      this.name,\n      silent\n    );\n  },\n\n  /**\n   * Stringify properties if necessary.\n   *\n   * Only called from `Entity.setAttribute` for properties whose parsers accept a non-string\n   * value (e.g., selector, vec3 property types).\n   *\n   * @param {object} data - Complete component data.\n   * @returns {string}\n   */\n  stringify: function (data) {\n    var schema = this.schema;\n    if (typeof data === \"string\") {\n      return data;\n    }\n    if (this.isSingleProperty) {\n      return stringifyProperty(data, schema);\n    }\n    data = stringifyProperties(data, schema);\n    return styleParser.stringify(data);\n  },\n\n  /**\n   * Update the cache of the pre-parsed attribute value.\n   *\n   * @param {string} value - New data.\n   * @param {boolean } clobber - Whether to wipe out and replace previous data.\n   */\n  updateCachedAttrValue: function (value, clobber) {\n    var newAttrValue;\n    var tempObject;\n    var property;\n\n    if (value === undefined) {\n      return;\n    }\n\n    // If null value is the new attribute value, make the attribute value falsy.\n    if (value === null) {\n      if (this.isObjectBased && this.attrValue) {\n        this.objectPool.recycle(this.attrValue);\n      }\n      this.attrValue = undefined;\n      return;\n    }\n\n    if (value instanceof Object) {\n      // If value is an object, copy it to our pooled newAttrValue object to use to update\n      // the attrValue.\n      tempObject = this.objectPool.use();\n      newAttrValue = utils.extend(tempObject, value);\n    } else {\n      newAttrValue = this.parseAttrValueForCache(value);\n    }\n\n    // Merge new data with previous `attrValue` if updating and not clobbering.\n    if (this.isObjectBased && !clobber && this.attrValue) {\n      for (property in this.attrValue) {\n        if (newAttrValue[property] === undefined) {\n          newAttrValue[property] = this.attrValue[property];\n        }\n      }\n    }\n\n    // Update attrValue.\n    if (this.isObjectBased && !this.attrValue) {\n      this.attrValue = this.objectPool.use();\n    }\n    utils.objectPool.clearObject(this.attrValue);\n    this.attrValue = extendProperties(\n      this.attrValue,\n      newAttrValue,\n      this.isObjectBased\n    );\n    utils.objectPool.clearObject(tempObject);\n  },\n\n  /**\n   * Given an HTML attribute value parses the string based on the component schema.\n   * To avoid double parsings of strings into strings we store the original instead\n   * of the parsed one\n   *\n   * @param {string} value - HTML attribute value\n   */\n  parseAttrValueForCache: function (value) {\n    var parsedValue;\n    if (typeof value !== \"string\") {\n      return value;\n    }\n    if (this.isSingleProperty) {\n      parsedValue = this.schema.parse(value);\n      /**\n       * To avoid bogus double parsings. Cached values will be parsed when building\n       * component data. For instance when parsing a src id to its url, we want to cache\n       * original string and not the parsed one (#monster -> models/monster.dae)\n       * so when building data we parse the expected value.\n       */\n      if (typeof parsedValue === \"string\") {\n        parsedValue = value;\n      }\n    } else {\n      // Parse using the style parser to avoid double parsing of individual properties.\n      utils.objectPool.clearObject(this.parsingAttrValue);\n      parsedValue = styleParser.parse(value, this.parsingAttrValue);\n    }\n    return parsedValue;\n  },\n\n  /**\n   * Write cached attribute data to the entity DOM element.\n   *\n   * @param {boolean} isDefault - Whether component is a default component. Always flush for\n   *   default components.\n   */\n  flushToDOM: function (isDefault) {\n    var attrValue = isDefault ? this.data : this.attrValue;\n    if (!attrValue) {\n      return;\n    }\n    window.HTMLElement.prototype.setAttribute.call(\n      this.el,\n      this.attrName,\n      this.stringify(attrValue)\n    );\n  },\n\n  /**\n   * Apply new component data if data has changed (from setAttribute).\n   *\n   * @param {string} attrValue - HTML attribute value.\n   *        If undefined, use the cached attribute value and continue updating properties.\n   * @param {boolean} clobber - The previous component data is overwritten by the atrrValue\n   */\n  updateProperties: function (attrValue, clobber) {\n    var el = this.el;\n\n    // Just cache the attribute if the entity has not loaded\n    // Components are not initialized until the entity has loaded\n    if (!el.hasLoaded) {\n      this.updateCachedAttrValue(attrValue);\n      return;\n    }\n\n    // Parse the attribute value.\n    // Cache current attrValue for future updates. Updates `this.attrValue`.\n    // `null` means no value on purpose, do not set a default value, let mixins take over.\n    if (attrValue !== null) {\n      attrValue = this.parseAttrValueForCache(attrValue);\n    }\n\n    // Cache current attrValue for future updates.\n    this.updateCachedAttrValue(attrValue, clobber);\n\n    if (this.initialized) {\n      this.updateComponent(attrValue, clobber);\n      this.callUpdateHandler();\n    } else {\n      this.initComponent();\n    }\n  },\n\n  initComponent: function () {\n    var el = this.el;\n    var initialOldData;\n\n    // Build data.\n    if (this.updateSchema) {\n      this.updateSchema(this.buildData(this.attrValue, false, true));\n    }\n    this.data = this.buildData(this.attrValue);\n\n    // Component is being already initialized.\n    if (el.initializingComponents[this.name]) {\n      return;\n    }\n\n    // Prevent infinite loop in case of init method setting same component on the entity.\n    el.initializingComponents[this.name] = true;\n    // Initialize component.\n    this.init();\n    this.initialized = true;\n    delete el.initializingComponents[this.name];\n\n    // Store current data as previous data for future updates.\n    this.oldData = extendProperties(\n      this.oldData,\n      this.data,\n      this.isObjectBased\n    );\n\n    // For oldData, pass empty object to multiple-prop schemas or object single-prop schema.\n    // Pass undefined to rest of types.\n    initialOldData = this.isObjectBased ? this.objectPool.use() : undefined;\n    this.update(initialOldData);\n    if (this.isObjectBased) {\n      this.objectPool.recycle(initialOldData);\n    }\n\n    // Play the component if the entity is playing.\n    if (el.isPlaying) {\n      this.play();\n    }\n    el.emit(\"componentinitialized\", this.evtDetail, false);\n  },\n\n  /**\n   * @param attrValue - Passed argument from setAttribute.\n   */\n  updateComponent: function (attrValue, clobber) {\n    var key;\n    var mayNeedSchemaUpdate;\n\n    if (clobber) {\n      // Clobber. Rebuild.\n      if (this.updateSchema) {\n        this.updateSchema(this.buildData(this.attrValue, true, true));\n      }\n      this.data = this.buildData(this.attrValue, true, false);\n      return;\n    }\n\n    // Apply new value to this.data in place since direct update.\n    if (this.isSingleProperty) {\n      // Single-property (already parsed).\n      this.data = attrValue;\n      return;\n    }\n\n    parseProperties(attrValue, this.schema, true, this.name);\n\n    // Check if we need to update schema.\n    if (this.schemaChangeKeys.length) {\n      for (key in attrValue) {\n        if (this.schema[key].schemaChange) {\n          mayNeedSchemaUpdate = true;\n          break;\n        }\n      }\n    }\n    if (mayNeedSchemaUpdate) {\n      // Rebuild data if need schema update.\n      if (this.updateSchema) {\n        this.updateSchema(this.buildData(this.attrValue, true, true));\n      }\n      this.data = this.buildData(this.attrValue, true, false);\n      return;\n    }\n\n    // Normal update.\n    for (key in attrValue) {\n      if (attrValue[key] === undefined) {\n        continue;\n      }\n      this.data[key] = attrValue[key];\n    }\n  },\n\n  /**\n   * Check if component should fire update and fire update lifecycle handler.\n   */\n  callUpdateHandler: function () {\n    var hasComponentChanged;\n\n    // Store the previous old data before we calculate the new oldData.\n    if (this.previousOldData instanceof Object) {\n      utils.objectPool.clearObject(this.previousOldData);\n    }\n    if (this.isObjectBased) {\n      copyData(this.previousOldData, this.oldData);\n    } else {\n      this.previousOldData = this.oldData;\n    }\n\n    hasComponentChanged = !utils.deepEqual(this.oldData, this.data);\n\n    // Don't update if properties haven't changed.\n    // Always update rotation, position, scale.\n    if (!this.isPositionRotationScale && !hasComponentChanged) {\n      return;\n    }\n\n    // Store current data as previous data for future updates.\n    // Reuse `this.oldData` object to try not to allocate another one.\n    if (this.oldData instanceof Object) {\n      utils.objectPool.clearObject(this.oldData);\n    }\n    this.oldData = extendProperties(\n      this.oldData,\n      this.data,\n      this.isObjectBased\n    );\n\n    // Update component with the previous old data.\n    this.update(this.previousOldData);\n\n    this.throttledEmitComponentChanged();\n  },\n\n  handleMixinUpdate: function () {\n    this.data = this.buildData(this.attrValue);\n    this.callUpdateHandler();\n  },\n\n  /**\n   * Reset value of a property to the property's default value.\n   * If single-prop component, reset value to component's default value.\n   *\n   * @param {string} propertyName - Name of property to reset.\n   */\n  resetProperty: function (propertyName) {\n    if (this.isObjectBased) {\n      if (!(propertyName in this.attrValue)) {\n        return;\n      }\n      delete this.attrValue[propertyName];\n      this.data[propertyName] = this.schema[propertyName].default;\n    } else {\n      this.attrValue = this.schema.default;\n      this.data = this.schema.default;\n    }\n    this.updateProperties(this.attrValue);\n  },\n\n  /**\n   * Extend schema of component given a partial schema.\n   *\n   * Some components might want to mutate their schema based on certain properties.\n   * e.g., Material component changes its schema based on `shader` to account for different\n   * uniforms\n   *\n   * @param {object} schemaAddon - Schema chunk that extend base schema.\n   */\n  extendSchema: function (schemaAddon) {\n    var extendedSchema;\n    // Clone base schema.\n    extendedSchema = utils.extend({}, components[this.name].schema);\n    // Extend base schema with new schema chunk.\n    utils.extend(extendedSchema, schemaAddon);\n    this.schema = processSchema(extendedSchema);\n    this.el.emit(\"schemachanged\", this.evtDetail);\n  },\n\n  /**\n   * Build component data from the current state of the entity.data.\n   *\n   * Precedence:\n   * 1. Defaults data\n   * 2. Mixin data.\n   * 3. Attribute data.\n   *\n   * Finally coerce the data to the types of the defaults.\n   *\n   * @param {object} newData - Element new data.\n   * @param {boolean} clobber - The previous data is completely replaced by the new one.\n   * @param {boolean} silent - Suppress warning messages.\n   * @return {object} The component data\n   */\n  buildData: function (newData, clobber, silent) {\n    var componentDefined;\n    var data;\n    var defaultValue;\n    var key;\n    var mixinData;\n    var nextData = this.nextData;\n    var schema = this.schema;\n    var i;\n    var mixinEls = this.el.mixinEls;\n    var previousData;\n\n    // Whether component has a defined value. For arrays, treat empty as not defined.\n    componentDefined =\n      newData && newData.constructor === Array\n        ? newData.length\n        : newData !== undefined && newData !== null;\n\n    if (this.isObjectBased) {\n      utils.objectPool.clearObject(nextData);\n    }\n\n    // 1. Gather default values (lowest precendence).\n    if (this.isSingleProperty) {\n      if (this.isObjectBased) {\n        // If object-based single-prop, then copy over the data to our pooled object.\n        data = copyData(nextData, schema.default);\n      } else {\n        // If is plain single-prop, copy by value the default.\n        data = isObjectOrArray(schema.default)\n          ? utils.clone(schema.default)\n          : schema.default;\n      }\n    } else {\n      // Preserve previously set properties if clobber not enabled.\n      previousData = !clobber && this.attrValue;\n\n      // Clone default value if object so components don't share object\n      data =\n        previousData instanceof Object\n          ? copyData(nextData, previousData)\n          : nextData;\n\n      // Apply defaults.\n      for (key in schema) {\n        defaultValue = schema[key].default;\n        if (data[key] !== undefined) {\n          continue;\n        }\n        // Clone default value if object so components don't share object\n        data[key] = isObjectOrArray(defaultValue)\n          ? utils.clone(defaultValue)\n          : defaultValue;\n      }\n    }\n\n    // 2. Gather mixin values.\n    for (i = 0; i < mixinEls.length; i++) {\n      mixinData = mixinEls[i].getAttribute(this.attrName);\n      if (!mixinData) {\n        continue;\n      }\n      data = extendProperties(data, mixinData, this.isObjectBased);\n    }\n\n    // 3. Gather attribute values (highest precendence).\n    if (componentDefined) {\n      if (this.isSingleProperty) {\n        // If object-based, copy the value to not modify the original.\n        if (isObject(newData)) {\n          copyData(this.parsingAttrValue, newData);\n          return parseProperty(this.parsingAttrValue, schema);\n        }\n        return parseProperty(newData, schema);\n      }\n      data = extendProperties(data, newData, this.isObjectBased);\n    } else {\n      // Parse and coerce using the schema.\n      if (this.isSingleProperty) {\n        return parseProperty(data, schema);\n      }\n    }\n\n    return parseProperties(data, schema, undefined, this.name, silent);\n  },\n};\n\n// For testing.\nif (window.debug) {\n  var registrationOrderWarnings = (module.exports.registrationOrderWarnings =\n    {});\n}\n\n/**\n * Registers a component to A-Frame.\n *\n * @param {string} name - Component name.\n * @param {object} definition - Component schema and lifecycle method handlers.\n * @returns {object} Component.\n */\nmodule.exports.registerComponent = function (name, definition) {\n  var NewComponent;\n  var propertyName;\n  var proto = {};\n  var schema;\n  var schemaIsSingleProp;\n\n  // Warning if component is statically registered after the scene.\n  if (document.currentScript && document.currentScript !== aframeScript) {\n    scenes.forEach(function checkPosition(sceneEl) {\n      // Okay to register component after the scene at runtime.\n      if (sceneEl.hasLoaded) {\n        return;\n      }\n\n      // Check that component is declared before the scene.\n      if (\n        document.currentScript.compareDocumentPosition(sceneEl) ===\n        Node.DOCUMENT_POSITION_FOLLOWING\n      ) {\n        return;\n      }\n\n      warn(\n        \"The component `\" +\n          name +\n          \"` was registered in a <script> tag after the scene. \" +\n          \"Component <script> tags in an HTML file should be declared *before* the scene \" +\n          \"such that the component is available to entities during scene initialization.\"\n      );\n\n      // For testing.\n      if (window.debug) {\n        registrationOrderWarnings[name] = true;\n      }\n    });\n  }\n\n  if (upperCaseRegExp.test(name) === true) {\n    warn(\n      \"The component name `\" +\n        name +\n        \"` contains uppercase characters, but \" +\n        \"HTML will ignore the capitalization of attribute names. \" +\n        \"Change the name to be lowercase: `\" +\n        name.toLowerCase() +\n        \"`\"\n    );\n  }\n\n  if (name.indexOf(\"__\") !== -1) {\n    throw new Error(\n      \"The component name `\" +\n        name +\n        \"` is not allowed. \" +\n        \"The sequence __ (double underscore) is reserved to specify an id\" +\n        \" for multiple components of the same type\"\n    );\n  }\n\n  // Format definition object to prototype object.\n  Object.keys(definition).forEach(function (key) {\n    proto[key] = {\n      value: definition[key],\n      writable: true,\n    };\n  });\n\n  if (components[name]) {\n    throw new Error(\n      \"The component `\" +\n        name +\n        \"` has been already registered. \" +\n        \"Check that you are not loading two versions of the same component \" +\n        \"or two different components of the same name.\"\n    );\n  }\n\n  NewComponent = function (el, attr, id) {\n    Component.call(this, el, attr, id);\n  };\n\n  NewComponent.prototype = Object.create(Component.prototype, proto);\n  NewComponent.prototype.name = name;\n  NewComponent.prototype.isPositionRotationScale =\n    name === \"position\" || name === \"rotation\" || name === \"scale\";\n  NewComponent.prototype.constructor = NewComponent;\n  NewComponent.prototype.system = systems && systems.systems[name];\n  NewComponent.prototype.play = wrapPlay(NewComponent.prototype.play);\n  NewComponent.prototype.pause = wrapPause(NewComponent.prototype.pause);\n  NewComponent.prototype.remove = wrapRemove(NewComponent.prototype.remove);\n\n  schema = utils.extend(\n    processSchema(NewComponent.prototype.schema, NewComponent.prototype.name)\n  );\n  schemaIsSingleProp = isSingleProp(NewComponent.prototype.schema);\n\n  // Keep track of keys that may potentially change the schema.\n  if (!schemaIsSingleProp) {\n    NewComponent.prototype.schemaChangeKeys = [];\n    for (propertyName in schema) {\n      if (schema[propertyName].schemaChange) {\n        NewComponent.prototype.schemaChangeKeys.push(propertyName);\n      }\n    }\n  }\n\n  // Create object pool for class of components.\n  objectPools[name] = utils.objectPool.createPool();\n\n  components[name] = {\n    Component: NewComponent,\n    dependencies: NewComponent.prototype.dependencies,\n    isSingleProp: schemaIsSingleProp,\n    multiple: NewComponent.prototype.multiple,\n    name: name,\n    parse: NewComponent.prototype.parse,\n    parseAttrValueForCache: NewComponent.prototype.parseAttrValueForCache,\n    schema: schema,\n    stringify: NewComponent.prototype.stringify,\n    type: NewComponent.prototype.type,\n  };\n  return NewComponent;\n};\n\n/**\n * Clone component data.\n * Clone only the properties that are plain objects while keeping a reference for the rest.\n *\n * @param data - Component data to clone.\n * @returns Cloned data.\n */\nfunction copyData(dest, sourceData) {\n  var parsedProperty;\n  var key;\n  for (key in sourceData) {\n    if (sourceData[key] === undefined) {\n      continue;\n    }\n    parsedProperty = sourceData[key];\n    dest[key] = isObjectOrArray(parsedProperty)\n      ? utils.clone(parsedProperty)\n      : parsedProperty;\n  }\n  return dest;\n}\n\n/**\n * Object extending with checking for single-property schema.\n *\n * @param dest - Destination object or value.\n * @param source - Source object or value\n * @param {boolean} isObjectBased - Whether values are objects.\n * @returns Overridden object or value.\n */\nfunction extendProperties(dest, source, isObjectBased) {\n  var key;\n  if (isObjectBased && source.constructor === Object) {\n    for (key in source) {\n      if (source[key] === undefined) {\n        continue;\n      }\n      if (source[key] && source[key].constructor === Object) {\n        dest[key] = utils.clone(source[key]);\n      } else {\n        dest[key] = source[key];\n      }\n    }\n    return dest;\n  }\n  return source;\n}\n\n/**\n * Checks if a component has defined a method that needs to run every frame.\n */\nfunction hasBehavior(component) {\n  return component.tick || component.tock;\n}\n\n/**\n * Wrapper for defined pause method.\n * Pause component by removing tick behavior and calling user's pause method.\n *\n * @param pauseMethod {function}\n */\nfunction wrapPause(pauseMethod) {\n  return function pause() {\n    var sceneEl = this.el.sceneEl;\n    if (!this.isPlaying) {\n      return;\n    }\n    pauseMethod.call(this);\n    this.isPlaying = false;\n    // Remove tick behavior.\n    if (!hasBehavior(this)) {\n      return;\n    }\n    sceneEl.removeBehavior(this);\n  };\n}\n\n/**\n * Wrapper for defined play method.\n * Play component by adding tick behavior and calling user's play method.\n *\n * @param playMethod {function}\n */\nfunction wrapPlay(playMethod) {\n  return function play() {\n    var sceneEl = this.el.sceneEl;\n    var shouldPlay = this.el.isPlaying && !this.isPlaying;\n    if (!this.initialized || !shouldPlay) {\n      return;\n    }\n    playMethod.call(this);\n    this.isPlaying = true;\n    // Add tick behavior.\n    if (!hasBehavior(this)) {\n      return;\n    }\n    sceneEl.addBehavior(this);\n  };\n}\n\n/**\n * Wrapper for defined remove method.\n * Clean up memory.\n *\n * @param removeMethod {function} - Defined remove method.\n */\nfunction wrapRemove(removeMethod) {\n  return function remove() {\n    removeMethod.call(this);\n    this.objectPool.recycle(this.attrValue);\n    this.objectPool.recycle(this.oldData);\n    this.objectPool.recycle(this.parsingAttrValue);\n\n    this.attrValue = this.oldData = this.parsingAttrValue = undefined;\n  };\n}\n\nfunction isObject(value) {\n  return value && value.constructor === Object;\n}\n\nfunction isObjectOrArray(value) {\n  return value && (value.constructor === Object || value.constructor === Array);\n}\n",
    "require(\"../../vendor/effects/EffectComposer\");\nrequire(\"../../vendor/effects/RenderPass\");\n\nvar registerComponent = require(\"./component\").registerComponent;\nvar THREE = require(\"../lib/three\");\nvar warn = require(\"../utils/\").debug(\"components:effect:warn\");\n\nvar lastEffectInitialized;\n\nvar effectOrder = [\"render\", \"bloom\", \"sepia\", \"ssao\"];\nvar passes = {};\n\nvar proto = {\n  schema: {},\n  init: function () {\n    var sceneEl = this.el;\n    if (!this.el.isScene) {\n      warn(\"Effect components can only be applied to <a-scene>\");\n      return;\n    }\n\n    // if (!sceneEl.camera) {\n    //   sceneEl.addEventListener('camera-set-active', this.init.bind(this));\n    //   return;\n    // }\n    // sceneEl.resize();\n    sceneEl.effectComposer || this.initEffectComposer();\n    this.initPass();\n    this.update();\n    lastEffectInitialized.renderToScreen = false;\n    this.pass.renderToScreen = true;\n    lastEffectInitialized = this.pass;\n    passes[this.effectName] = this.pass;\n    this.rebuild();\n  },\n\n  rebuild: function () {\n    var effectComposer = this.el.effectComposer;\n    effectComposer.passes = [];\n    effectOrder.forEach(function (effect) {\n      if (!passes[effect]) {\n        return;\n      }\n      effectComposer.addPass(passes[effect]);\n    });\n    effectComposer.reset();\n  },\n\n  remove: function () {\n    this.el.effectComposer.removePass(this.pass);\n    passes[this.effectName] = undefined;\n  },\n\n  initEffectComposer: function () {\n    var sceneEl = this.el;\n    var effectComposer = (sceneEl.effectComposer = new THREE.EffectComposer(\n      sceneEl.renderer,\n      undefined,\n      sceneEl.mainRenderer\n    ));\n    var renderPass = new THREE.RenderPass(sceneEl.object3D, sceneEl.camera);\n    effectComposer.addPass(renderPass);\n    lastEffectInitialized = renderPass;\n    passes.render = renderPass;\n    return effectComposer;\n  },\n};\n\n/**\n * Registers an effect to A-Frame.\n *\n * @param {string} name - Effect name.\n * @param {object} definition - Effect property and methods.\n */\nmodule.exports.registerEffect = function (name, definition) {\n  Object.keys(definition).forEach(function (key) {\n    proto[key] = definition[key];\n  });\n\n  proto.effectName = name;\n  // setTimeout(() => {\n  registerComponent(\"effect-\" + name, proto);\n  // }, 100);\n};\n",
    "var schema = require(\"./schema\");\n\nvar processSchema = schema.process;\nvar geometries = (module.exports.geometries = {}); // Registered geometries.\nvar geometryNames = (module.exports.geometryNames = []); // Names of registered geometries.\nvar THREE = require(\"../lib/three\");\n\n/**\n * Geometry class definition.\n *\n * Geometries extend the geometry component API to create and register geometry types.\n */\nvar Geometry = (module.exports.Geometry = function () {});\n\nGeometry.prototype = {\n  /**\n   * Contains the type schema and defaults for the data values.\n   * Data is coerced into the types of the values of the defaults.\n   */\n  schema: {},\n\n  /**\n   * Init handler. Similar to attachedCallback.\n   * Called during shader initialization and is only run once.\n   */\n  init: function (data) {\n    this.geometry = new THREE.Geometry();\n    return this.geometry;\n  },\n\n  /**\n   * Update handler. Similar to attributeChangedCallback.\n   * Called whenever the associated geometry data changes.\n   *\n   * @param {object} data - New geometry data.\n   */\n  update: function (data) {\n    /* no-op */\n  },\n};\n\n/**\n * Registers a geometry to A-Frame.\n *\n * @param {string} name - Geometry name.\n * @param {object} definition - Geometry property and methods.\n * @returns {object} Geometry.\n */\nmodule.exports.registerGeometry = function (name, definition) {\n  var NewGeometry;\n  var proto = {};\n\n  // Format definition object to prototype object.\n  Object.keys(definition).forEach(function expandDefinition(key) {\n    proto[key] = {\n      value: definition[key],\n      writable: true,\n    };\n  });\n\n  if (geometries[name]) {\n    throw new Error(\"The geometry `\" + name + \"` has been already registered\");\n  }\n  NewGeometry = function () {\n    Geometry.call(this);\n  };\n  NewGeometry.prototype = Object.create(Geometry.prototype, proto);\n  NewGeometry.prototype.name = name;\n  NewGeometry.prototype.constructor = NewGeometry;\n  geometries[name] = {\n    Geometry: NewGeometry,\n    schema: processSchema(NewGeometry.prototype.schema),\n  };\n  geometryNames.push(name);\n  return NewGeometry;\n};\n",
    "var coordinates = require(\"../utils/coordinates\");\nvar debug = require(\"debug\");\n\nvar error = debug(\"core:propertyTypes:warn\");\nvar warn = debug(\"core:propertyTypes:warn\");\n\nvar propertyTypes = (module.exports.propertyTypes = {});\nvar nonCharRegex = /[,> .[\\]:]/;\nvar urlRegex = /\\url\\((.+)\\)/;\n\n// Built-in property types.\nregisterPropertyType(\"audio\", \"\", assetParse);\nregisterPropertyType(\"array\", [], arrayParse, arrayStringify);\nregisterPropertyType(\"asset\", \"\", assetParse);\nregisterPropertyType(\"boolean\", false, boolParse);\nregisterPropertyType(\"color\", \"#FFF\", defaultParse, defaultStringify);\nregisterPropertyType(\"int\", 0, intParse);\nregisterPropertyType(\"number\", 0, numberParse);\nregisterPropertyType(\"map\", \"\", assetParse);\nregisterPropertyType(\"model\", \"\", assetParse);\nregisterPropertyType(\"selector\", null, selectorParse, selectorStringify);\nregisterPropertyType(\n  \"selectorAll\",\n  null,\n  selectorAllParse,\n  selectorAllStringify\n);\nregisterPropertyType(\"src\", \"\", srcParse);\nregisterPropertyType(\"string\", \"\", defaultParse, defaultStringify);\nregisterPropertyType(\"time\", 0, intParse);\nregisterPropertyType(\"vec2\", { x: 0, y: 0 }, vecParse, coordinates.stringify);\nregisterPropertyType(\n  \"vec3\",\n  { x: 0, y: 0, z: 0 },\n  vecParse,\n  coordinates.stringify\n);\nregisterPropertyType(\n  \"vec4\",\n  { x: 0, y: 0, z: 0, w: 1 },\n  vecParse,\n  coordinates.stringify\n);\n\n/**\n * Register a parser for re-use such that when someone uses `type` in the schema,\n * `schema.process` will set the property `parse` and `stringify`.\n *\n * @param {string} type - Type name.\n * @param [defaultValue=null] -\n *   Default value to use if component does not define default value.\n * @param {function} [parse=defaultParse] - Parse string function.\n * @param {function} [stringify=defaultStringify] - Stringify to DOM function.\n */\nfunction registerPropertyType(type, defaultValue, parse, stringify) {\n  if (\"type\" in propertyTypes) {\n    error(\"Property type \" + type + \" is already registered.\");\n    return;\n  }\n\n  propertyTypes[type] = {\n    default: defaultValue,\n    parse: parse || defaultParse,\n    stringify: stringify || defaultStringify,\n  };\n}\nmodule.exports.registerPropertyType = registerPropertyType;\n\nfunction arrayParse(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n  if (!value || typeof value !== \"string\") {\n    return [];\n  }\n  return value.split(\",\").map(trim);\n  function trim(str) {\n    return str.trim();\n  }\n}\n\nfunction arrayStringify(value) {\n  return value.join(\", \");\n}\n\n/**\n * For general assets.\n *\n * @param {string} value - Can either be `url(<value>)`, an ID selector to an asset, or\n *   just string.\n * @returns {string} Parsed value from `url(<value>)`, src from `<someasset src>`, or\n *   just string.\n */\nfunction assetParse(value) {\n  var el;\n  var parsedUrl;\n\n  // If an element was provided (e.g. canvas or video), just return it.\n  if (typeof value !== \"string\") {\n    return value;\n  }\n\n  // Wrapped `url()` in case of data URI.\n  parsedUrl = value.match(urlRegex);\n  if (parsedUrl) {\n    return parsedUrl[1];\n  }\n\n  // ID.\n  if (value.charAt(0) === \"#\") {\n    el = document.getElementById(value.substring(1));\n    if (el) {\n      // Pass through media elements. If we have the elements, we don't have to call\n      // three.js loaders which would re-request the assets.\n      if (\n        el.tagName === \"CANVAS\" ||\n        el.tagName === \"VIDEO\" ||\n        el.tagName === \"IMG\"\n      ) {\n        return el;\n      }\n      return el.getAttribute(\"src\");\n    }\n    warn('\"' + value + '\" asset not found.');\n    return;\n  }\n\n  // Non-wrapped url().\n  return value;\n}\n\nfunction defaultParse(value) {\n  return value;\n}\n\nfunction defaultStringify(value) {\n  if (value === null) {\n    return \"null\";\n  }\n  return value.toString();\n}\n\nfunction boolParse(value) {\n  return value !== \"false\" && value !== false;\n}\n\nfunction intParse(value) {\n  return parseInt(value, 10);\n}\n\nfunction numberParse(value) {\n  return parseFloat(value, 10);\n}\n\nfunction selectorParse(value) {\n  if (!value) {\n    return null;\n  }\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  if (value[0] === \"#\" && !nonCharRegex.test(value)) {\n    // When selecting element by ID only, use getElementById for better performance.\n    // Don't match like #myId .child.\n    return document.getElementById(value.substring(1));\n  }\n  return document.querySelector(value);\n}\n\nfunction selectorAllParse(value) {\n  if (!value) {\n    return null;\n  }\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  return Array.prototype.slice.call(document.querySelectorAll(value), 0);\n}\n\nfunction selectorStringify(value) {\n  if (value.getAttribute) {\n    return \"#\" + value.getAttribute(\"id\");\n  }\n  return defaultStringify(value);\n}\n\nfunction selectorAllStringify(value) {\n  if (value instanceof Array) {\n    return value\n      .map(function (element) {\n        return \"#\" + element.getAttribute(\"id\");\n      })\n      .join(\", \");\n  }\n  return defaultStringify(value);\n}\n\nfunction srcParse(value) {\n  warn(\"`src` property type is deprecated. Use `asset` instead.\");\n  return assetParse(value);\n}\n\nfunction vecParse(value) {\n  return coordinates.parse(value, this.default);\n}\n\n/**\n * Validate the default values in a schema to match their type.\n *\n * @param {string} type - Property type name.\n * @param defaultVal - Property type default value.\n * @returns {boolean} Whether default value is accurate given the type.\n */\nfunction isValidDefaultValue(type, defaultVal) {\n  if (type === \"audio\" && typeof defaultVal !== \"string\") {\n    return false;\n  }\n  if (type === \"array\" && !Array.isArray(defaultVal)) {\n    return false;\n  }\n  if (type === \"asset\" && typeof defaultVal !== \"string\") {\n    return false;\n  }\n  if (type === \"boolean\" && typeof defaultVal !== \"boolean\") {\n    return false;\n  }\n  if (type === \"color\" && typeof defaultVal !== \"string\") {\n    return false;\n  }\n  if (type === \"int\" && typeof defaultVal !== \"number\") {\n    return false;\n  }\n  if (type === \"number\" && typeof defaultVal !== \"number\") {\n    return false;\n  }\n  if (type === \"map\" && typeof defaultVal !== \"string\") {\n    return false;\n  }\n  if (type === \"model\" && typeof defaultVal !== \"string\") {\n    return false;\n  }\n  if (\n    type === \"selector\" &&\n    typeof defaultVal !== \"string\" &&\n    defaultVal !== null\n  ) {\n    return false;\n  }\n  if (\n    type === \"selectorAll\" &&\n    typeof defaultVal !== \"string\" &&\n    defaultVal !== null\n  ) {\n    return false;\n  }\n  if (type === \"src\" && typeof defaultVal !== \"string\") {\n    return false;\n  }\n  if (type === \"string\" && typeof defaultVal !== \"string\") {\n    return false;\n  }\n  if (type === \"time\" && typeof defaultVal !== \"number\") {\n    return false;\n  }\n  if (type === \"vec2\") {\n    return isValidDefaultCoordinate(defaultVal, 2);\n  }\n  if (type === \"vec3\") {\n    return isValidDefaultCoordinate(defaultVal, 3);\n  }\n  if (type === \"vec4\") {\n    return isValidDefaultCoordinate(defaultVal, 4);\n  }\n  return true;\n}\nmodule.exports.isValidDefaultValue = isValidDefaultValue;\n\n/**\n * Checks if default coordinates are valid.\n *\n * @param possibleCoordinates\n * @param {number} dimensions - 2 for 2D Vector, 3 for 3D vector.\n * @returns {boolean} Whether coordinates are parsed correctly.\n */\nfunction isValidDefaultCoordinate(possibleCoordinates, dimensions) {\n  if (possibleCoordinates === null) {\n    return true;\n  }\n  if (typeof possibleCoordinates !== \"object\") {\n    return false;\n  }\n\n  if (Object.keys(possibleCoordinates).length !== dimensions) {\n    return false;\n  } else {\n    var x = possibleCoordinates.x;\n    var y = possibleCoordinates.y;\n    var z = possibleCoordinates.z;\n    var w = possibleCoordinates.w;\n\n    if (typeof x !== \"number\" || typeof y !== \"number\") {\n      return false;\n    }\n    if (dimensions > 2 && typeof z !== \"number\") {\n      return false;\n    }\n    if (dimensions > 3 && typeof w !== \"number\") {\n      return false;\n    }\n  }\n\n  return true;\n}\nmodule.exports.isValidDefaultCoordinate = isValidDefaultCoordinate;\n",
    "/* global Promise, screen */\nvar initMetaTags = require(\"./metaTags\").inject;\nvar initWakelock = require(\"./wakelock\");\nvar loadingScreen = require(\"./loadingScreen\");\nvar re = require(\"../a-register-element\");\nvar scenes = require(\"./scenes\");\nvar systems = require(\"../system\").systems;\nvar THREE = require(\"../../lib/three\");\nvar utils = require(\"../../utils/\");\n// Require after.\nvar AEntity = require(\"../a-entity\");\nvar ANode = require(\"../a-node\");\nvar initPostMessageAPI = require(\"./postMessage\");\n\nvar bind = utils.bind;\nvar isIOS = utils.device.isIOS();\nvar isMobile = utils.device.isMobile();\nvar registerElement = re.registerElement;\nvar warn = utils.debug(\"core:a-scene:warn\");\n\n/**\n * Scene element, holds all entities.\n *\n * @member {array} behaviors - Component instances that have registered themselves to be\n           updated on every tick.\n * @member {object} camera - three.js Camera object.\n * @member {object} canvas\n * @member {bool} isScene - Differentiates as scene entity as opposed to other entites.\n * @member {bool} isMobile - Whether browser is mobile (via UA detection).\n * @member {object} object3D - Root three.js Scene object.\n * @member {object} renderer\n * @member {bool} renderStarted\n * @member {object} systems - Registered instantiated systems.\n * @member {number} time\n */\nmodule.exports.AScene = registerElement(\"a-scene\", {\n  prototype: Object.create(AEntity.prototype, {\n    createdCallback: {\n      value: function () {\n        this.isIOS = isIOS;\n        this.isMobile = isMobile;\n        this.isScene = true;\n        this.object3D = new THREE.Scene();\n        this.render = bind(this.render, this);\n        this.calculate = bind(this.calculate, this);\n        this.systems = {};\n        this.systemNames = [];\n        this.time = this.delta = 0;\n\n        this.behaviors = { tick: [], tock: [] };\n        this.hasLoaded = false;\n        this.isPlaying = false;\n        this.originalHTML = this.innerHTML;\n        this.renderTarget = null;\n\n        // Default components.\n        // this.setAttribute('inspector', '');\n        // this.setAttribute('keyboard-shortcuts', '');\n        // this.setAttribute('screenshot', '');\n        // this.setAttribute('vr-mode-ui', '');\n      },\n    },\n\n    addFullScreenStyles: {\n      value: function () {\n        document.documentElement.classList.add(\"a-fullscreen\");\n      },\n    },\n\n    removeFullScreenStyles: {\n      value: function () {\n        document.documentElement.classList.remove(\"a-fullscreen\");\n      },\n    },\n\n    attachedCallback: {\n      value: function () {\n        var self = this;\n        // Renderer initialization\n        setupCanvas(this);\n        this.setupRenderer();\n\n        this.resize();\n        this.addFullScreenStyles();\n        initPostMessageAPI(this);\n\n        initMetaTags(this);\n        initWakelock(this);\n\n        // Camera set up by camera system.\n        this.addEventListener(\"cameraready\", function () {\n          self.attachedCallbackPostCamera();\n        });\n\n        this.initSystems();\n      },\n    },\n\n    attachedCallbackPostCamera: {\n      value: function () {\n        var resize;\n        var self = this;\n\n        resize = bind(this.resize, this);\n        window.addEventListener(\"load\", resize);\n        window.addEventListener(\"resize\", function () {\n          // Workaround for a Webkit bug (https://bugs.webkit.org/show_bug.cgi?id=170595)\n          // where the window does not contain the correct viewport size\n          // after an orientation change. The window size is correct if the operation\n          // is postponed a few milliseconds.\n          // self.resize can be called directly once the bug above is fixed.\n          if (self.isIOS) {\n            setTimeout(resize, 100);\n          } else {\n            resize();\n          }\n        });\n        this.play();\n\n        // Add to scene index.\n        scenes.push(this);\n\n        // Handler to exit VR (e.g., Oculus Browser back button).\n\n        // bind functions\n      },\n      writable: window.debug,\n    },\n\n    /**\n     * Initialize all systems.\n     */\n    initSystems: {\n      value: function () {\n        var name;\n\n        // Initialize camera system first.\n        this.initSystem(\"camera\");\n\n        for (name in systems) {\n          if (name === \"camera\") {\n            continue;\n          }\n          this.initSystem(name);\n        }\n      },\n    },\n\n    /**\n     * Initialize a system.\n     */\n    initSystem: {\n      value: function (name) {\n        if (this.systems[name]) {\n          return;\n        }\n        if (systems[name]) {\n          this.systems[name] = new systems[name](this);\n          this.systemNames.push(name);\n        }\n      },\n    },\n\n    /**\n     * Shut down scene on detach.\n     */\n    detachedCallback: {\n      value: function () {\n        // Remove from scene index.\n        var sceneIndex = scenes.indexOf(this);\n        scenes.splice(sceneIndex, 1);\n      },\n    },\n\n    /**\n     * Add ticks and tocks.\n     *\n     * @param {object} behavior - A component.\n     */\n    addBehavior: {\n      value: function (behavior) {\n        var behaviorArr;\n        var behaviors = this.behaviors;\n        var behaviorType;\n\n        // Check if behavior has tick and/or tock and add the behavior to the appropriate list.\n        for (behaviorType in behaviors) {\n          if (!behavior[behaviorType]) {\n            continue;\n          }\n          behaviorArr = this.behaviors[behaviorType];\n          if (behaviorArr.indexOf(behavior) === -1) {\n            behaviorArr.push(behavior);\n          }\n        }\n      },\n    },\n\n    /**\n     * For tests.\n     */\n    getPointerLockElement: {\n      value: function () {\n        return document.pointerLockElement;\n      },\n      writable: window.debug,\n    },\n\n    /**\n     * For tests.\n     */\n    checkHeadsetConnected: {\n      value: utils.device.checkHeadsetConnected,\n      writable: window.debug,\n    },\n\n    pointerRestricted: {\n      value: function () {\n        if (this.canvas) {\n          var pointerLockElement = this.getPointerLockElement();\n          if (\n            pointerLockElement &&\n            pointerLockElement !== this.canvas &&\n            document.exitPointerLock\n          ) {\n            // Recreate pointer lock on the canvas, if taken on another element.\n            document.exitPointerLock();\n          }\n\n          if (this.canvas.requestPointerLock) {\n            this.canvas.requestPointerLock();\n          }\n        }\n      },\n    },\n\n    pointerUnrestricted: {\n      value: function () {\n        var pointerLockElement = this.getPointerLockElement();\n        if (\n          pointerLockElement &&\n          pointerLockElement === this.canvas &&\n          document.exitPointerLock\n        ) {\n          document.exitPointerLock();\n        }\n      },\n    },\n\n    /**\n     * Wraps Entity.getAttribute to take into account for systems.\n     * If system exists, then return system data rather than possible component data.\n     */\n    getAttribute: {\n      value: function (attr) {\n        var system = this.systems[attr];\n        if (system) {\n          return system.data;\n        }\n        return AEntity.prototype.getAttribute.call(this, attr);\n      },\n    },\n\n    /**\n     * `getAttribute` used to be `getDOMAttribute` and `getComputedAttribute` used to be\n     * what `getAttribute` is now. Now legacy code.\n     */\n    getComputedAttribute: {\n      value: function (attr) {\n        warn(\n          \"`getComputedAttribute` is deprecated. Use `getAttribute` instead.\"\n        );\n        this.getAttribute(attr);\n      },\n    },\n\n    /**\n     * Wraps Entity.getDOMAttribute to take into account for systems.\n     * If system exists, then return system data rather than possible component data.\n     */\n    getDOMAttribute: {\n      value: function (attr) {\n        var system = this.systems[attr];\n        if (system) {\n          return system.data;\n        }\n        return AEntity.prototype.getDOMAttribute.call(this, attr);\n      },\n    },\n\n    /**\n     * Wrap Entity.setAttribute to take into account for systems.\n     * If system exists, then skip component initialization checks and do a normal\n     * setAttribute.\n     */\n    setAttribute: {\n      value: function (attr, value, componentPropValue) {\n        var system = this.systems[attr];\n        if (system) {\n          ANode.prototype.setAttribute.call(this, attr, value);\n          system.updateProperties(value);\n          return;\n        }\n        AEntity.prototype.setAttribute.call(\n          this,\n          attr,\n          value,\n          componentPropValue\n        );\n      },\n    },\n\n    /**\n     * @param {object} behavior - A component.\n     */\n    removeBehavior: {\n      value: function (behavior) {\n        var behaviorArr;\n        var behaviorType;\n        var behaviors = this.behaviors;\n        var index;\n\n        // Check if behavior has tick and/or tock and remove the behavior from the appropriate\n        // array.\n        for (behaviorType in behaviors) {\n          if (!behavior[behaviorType]) {\n            continue;\n          }\n          behaviorArr = this.behaviors[behaviorType];\n          index = behaviorArr.indexOf(behavior);\n          if (index !== -1) {\n            behaviorArr.splice(index, 1);\n          }\n        }\n      },\n    },\n\n    resize: {\n      value: function () {\n        var camera = this.camera;\n        var canvas = this.canvas;\n        var embedded;\n        var isVRPresenting;\n        var size;\n        isVRPresenting = this.mainRenderer.isPresenting;\n        // Do not update renderer, if a camera or a canvas have not been injected.\n        // In VR mode, three handles canvas resize based on the dimensions returned by\n        // the getEyeParameters function of the WebVR API. These dimensions are independent of\n        // the window size, therefore should not be overwritten with the window's width and\n        // height, // except when in fullscreen mode.\n        if (\n          !camera ||\n          !canvas ||\n          (this.is(\"vr-mode\") && (this.isMobile || isVRPresenting))\n        ) {\n          return;\n        }\n\n        // Update camera.\n        embedded = this.getAttribute(\"embedded\") && !this.is(\"vr-mode\");\n        size = getCanvasSize(\n          canvas,\n          embedded,\n          this.maxCanvasSize,\n          this.is(\"vr-mode\")\n        );\n        camera.aspect = size.width / size.height;\n        camera.updateProjectionMatrix();\n\n        // Notify renderer of size change.\n        this.renderer.setSize(size.width, size.height, false);\n        this.emit(\"rendererresize\", null, false);\n      },\n      writable: true,\n    },\n\n    setupRenderer: {\n      value: function () {\n        var self = this;\n        var renderer;\n        var rendererAttr;\n        var rendererAttrString;\n        var rendererConfig;\n\n        rendererConfig = {\n          alpha: true,\n          antialias: !isMobile,\n          canvas: this.canvas,\n          logarithmicDepthBuffer: false,\n        };\n        if (this.hasAttribute(\"antialias\")) {\n          rendererConfig.antialias = this.getAttribute(\"antialias\") === \"true\";\n        }\n\n        if (this.hasAttribute(\"logarithmicDepthBuffer\")) {\n          rendererConfig.logarithmicDepthBuffer =\n            this.getAttribute(\"logarithmicDepthBuffer\") === \"true\";\n        }\n\n        this.maxCanvasSize = { height: 1920, width: 1920 };\n\n        if (this.hasAttribute(\"renderer\")) {\n          rendererAttrString = this.getAttribute(\"renderer\");\n          rendererAttr = utils.styleParser.parse(rendererAttrString);\n\n          this.maxCanvasSize = {\n            width: rendererAttr.maxCanvasWidth\n              ? parseInt(rendererAttr.maxCanvasWidth)\n              : this.maxCanvasSize.width,\n            height: rendererAttr.maxCanvasHeight\n              ? parseInt(rendererAttr.maxCanvasHeight)\n              : this.maxCanvasSize.height,\n          };\n        }\n\n        renderer = this.renderer = new THREE.WebGLRenderer(rendererConfig);\n        this.mainRenderer = new THREE.MainRenderer(renderer);\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.sortObjects = false;\n        loadingScreen.setup(this, getCanvasSize);\n      },\n      writable: window.debug,\n    },\n\n    /**\n     * Handler attached to elements to help scene know when to kick off.\n     * Scene waits for all entities to load.\n     */\n    play: {\n      value: function () {\n        var self = this;\n        var sceneEl = this;\n\n        if (this.renderStarted) {\n          AEntity.prototype.play.call(this);\n          return;\n        }\n\n        this.addEventListener(\"loaded\", function () {\n          AEntity.prototype.play.call(this); // .play() *before* render.\n\n          if (sceneEl.renderStarted) {\n            return;\n          }\n\n          sceneEl.resize();\n\n          // Kick off render loop.\n          if (sceneEl.renderer) {\n            if (window.performance) {\n              window.performance.mark(\"render-started\");\n            }\n            sceneEl.clock = new THREE.Clock();\n            loadingScreen.remove();\n            sceneEl.calculate();\n            sceneEl.render();\n            sceneEl.calculate();\n            sceneEl.renderStarted = true;\n            sceneEl.emit(\"renderstart\");\n          }\n        });\n\n        // setTimeout to wait for all nodes to attach and run their callbacks.\n        setTimeout(function () {\n          AEntity.prototype.load.call(self);\n        });\n      },\n    },\n\n    /**\n     * Wrap `updateComponent` to not initialize the component if the component has a system\n     * (aframevr/aframe#2365).\n     */\n    updateComponent: {\n      value: function (componentName) {\n        if (componentName in systems) {\n          return;\n        }\n        AEntity.prototype.updateComponent.apply(this, arguments);\n      },\n    },\n\n    /**\n     * Behavior-updater meant to be called from scene render.\n     * Abstracted to a different function to facilitate unit testing (`scene.tick()`) without\n     * needing to render.\n     */\n    tick: {\n      value: function (time, timeDelta) {\n        var i;\n        var systems = this.systems;\n\n        // Components.\n        for (i = 0; i < this.behaviors.tick.length; i++) {\n          if (!this.behaviors.tick[i].el.isPlaying) {\n            continue;\n          }\n          this.behaviors.tick[i].tick(time, timeDelta);\n        }\n\n        // Systems.\n        for (i = 0; i < this.systemNames.length; i++) {\n          if (!systems[this.systemNames[i]].tick) {\n            continue;\n          }\n          systems[this.systemNames[i]].tick(time, timeDelta);\n        }\n      },\n    },\n\n    /**\n     * Behavior-updater meant to be called after scene render for post processing purposes.\n     * Abstracted to a different function to facilitate unit testing (`scene.tock()`) without\n     * needing to render.\n     */\n    tock: {\n      value: function (time, timeDelta, camera) {\n        var i;\n        var systems = this.systems;\n\n        // Components.\n        for (i = 0; i < this.behaviors.tock.length; i++) {\n          if (!this.behaviors.tock[i].el.isPlaying) {\n            continue;\n          }\n          this.behaviors.tock[i].tock(time, timeDelta, camera);\n        }\n\n        // Systems.\n        for (i = 0; i < this.systemNames.length; i++) {\n          if (!systems[this.systemNames[i]].tock) {\n            continue;\n          }\n          systems[this.systemNames[i]].tock(time, timeDelta, camera);\n        }\n      },\n    },\n\n    /**\n     * The render loop.\n     *\n     * Updates animations.\n     * Updates behaviors.\n     * Renders with request animation frame.\n     */\n    render: {\n      value: function () {\n        var effectComposer = this.effectComposer;\n        var mainRenderer = this.mainRenderer;\n\n        this.delta = this.clock.getDelta() * 1000;\n        this.time = this.clock.elapsedTime * 1000;\n\n        if (\n          this.hasAttribute(\"pixelRatio\") &&\n          this.pixelRatio != this.getAttribute(\"pixelRatio\")\n        ) {\n          this.pixelRatio = this.getAttribute(\"pixelRatio\");\n          this.renderer.setPixelRatio(\n            window.devicePixelRatio * this.getAttribute(\"pixelRatio\")\n          );\n        }\n\n        if (this.isPlaying) {\n          this.tick(this.time, this.delta);\n        }\n\n        mainRenderer.requestAnimationFrame(this.render);\n        if (this.getAttribute(\"bloom\") === \"true\" && effectComposer) {\n          effectComposer.render(\n            this.delta,\n            this.object3D,\n            this.camera,\n            this.renderTarget,\n            false,\n            this.camera.el.components.camera.data\n          );\n          if (this.additiveCameras) {\n            this.additiveCameras.forEach((element) => {\n              mainRenderer.render(\n                this.object3D,\n                element.getObject3D(\"camera\"),\n                this.renderTarget,\n                false,\n                element.components[\"orthographic-camera\"].data\n              );\n            });\n          }\n        } else {\n          mainRenderer.render(\n            this.object3D,\n            this.camera,\n            this.renderTarget,\n            false,\n            this.camera.el.components.camera.data\n          );\n          if (this.additiveCameras) {\n            this.additiveCameras.forEach((element) => {\n              mainRenderer.render(\n                this.object3D,\n                element.getObject3D(\"camera\"),\n                this.renderTarget,\n                false,\n                element.components[\"orthographic-camera\"].data\n              );\n            });\n          }\n        }\n\n        if (this.isPlaying) {\n          this.tock(this.time, this.delta, this.camera);\n        }\n\n        // this.components.overlay && this.components.overlay.render();\n      },\n      writable: true,\n    },\n\n    calculate: {\n      value: function () {\n        var mainRenderer = this.mainRenderer;\n\n        this.delta = this.clock.getDelta() * 1000;\n        this.time = this.clock.elapsedTime * 1000;\n\n        if (this.isPlaying) {\n          this.tick(this.time, this.delta);\n        }\n\n        mainRenderer.requestAnimationFrame(this.calculate);\n\n        if (this.isPlaying) {\n          this.tock(this.time, this.delta, this.camera);\n        }\n      },\n      writable: true,\n    },\n  }),\n});\n\n/**\n * Return the canvas size where the scene will be rendered.\n * Will be always the window size except when the scene is embedded.\n * The parent size (less than max size) will be returned in that case.\n *\n * @param {object} canvasEl - the canvas element\n * @param {boolean} embedded - Is the scene embedded?\n * @param {object} max - Max size parameters\n * @param {boolean} isVR - If in VR\n */\nfunction getCanvasSize(canvasEl, embedded, maxSize, isVR) {\n  if (embedded) {\n    return {\n      height: canvasEl.parentElement.offsetHeight,\n      width: canvasEl.parentElement.offsetWidth,\n    };\n  }\n  const result = getMaxSize(maxSize, isVR);\n  return result;\n}\n\n/**\n * Return the canvas size. Will be the window size unless that size is greater than the\n * maximum size (1920x1920 by default).  The constrained size will be returned in that case,\n * maintaining aspect ratio\n *\n * @param {object} maxSize - Max size parameters (width and height).\n * @param {boolean} isVR - If in VR.\n * @returns {object} Width and height.\n */\nfunction getMaxSize(maxSize, isVR) {\n  var aspectRatio;\n  var size;\n  var pixelRatio = window.devicePixelRatio;\n\n  size = {\n    height: document.body.offsetHeight,\n    width: document.body.offsetWidth,\n  };\n  if (!maxSize || isVR || (maxSize.width === -1 && maxSize.height === -1)) {\n    return size;\n  }\n\n  if (\n    size.width * pixelRatio < maxSize.width &&\n    size.height * pixelRatio < maxSize.height\n  ) {\n    return size;\n  }\n\n  aspectRatio = size.width / size.height;\n\n  if (size.width * pixelRatio > maxSize.width && maxSize.width !== -1) {\n    size.width = Math.round(maxSize.width / pixelRatio);\n    size.height = Math.round(maxSize.width / aspectRatio / pixelRatio);\n  }\n\n  if (size.height * pixelRatio > maxSize.height && maxSize.height !== -1) {\n    size.height = Math.round(maxSize.height / pixelRatio);\n    size.width = Math.round((maxSize.height * aspectRatio) / pixelRatio);\n  }\n\n  return size;\n}\n\nfunction setupCanvas(sceneEl) {\n  var canvasEl;\n\n  canvasEl = document.getElementById(\"main-canvas\");\n  canvasEl.classList.add(\"a-canvas\");\n  canvasEl.classList.add(\"showControls\");\n  // Mark canvas as provided/injected by A-Frame.\n  canvasEl.dataset.aframeCanvas = true;\n\n  document.addEventListener(\"fullscreenchange\", onFullScreenChange);\n  document.addEventListener(\"mozfullscreenchange\", onFullScreenChange);\n  document.addEventListener(\"webkitfullscreenchange\", onFullScreenChange);\n\n  // Prevent overscroll on mobile.\n  canvasEl.addEventListener(\"touchmove\", function (event) {\n    event.preventDefault();\n  });\n\n  // Set canvas on scene.\n  sceneEl.canvas = canvasEl;\n  sceneEl.emit(\"render-target-loaded\", { target: canvasEl });\n  // For unknown reasons a synchronous resize does not work on desktop when\n  // entering/exiting fullscreen.\n  setTimeout(bind(sceneEl.resize, sceneEl), 0);\n\n  function onFullScreenChange() {\n    var fullscreenEl =\n      document.fullscreenElement ||\n      document.mozFullScreenElement ||\n      document.webkitFullscreenElement;\n    // No fullscren element === exit fullscreen\n    if (!fullscreenEl) {\n      sceneEl.exitVR();\n    }\n    document.activeElement.blur();\n    document.body.focus();\n  }\n}\nmodule.exports.setupCanvas = setupCanvas; // For testing.\n",
    "/* global THREE */\nvar utils = require(\"../../utils/\");\nvar styleParser = utils.styleParser;\n\nvar sceneEl;\nvar raf;\nvar titleEl;\nvar getSceneCanvasSize;\n\nvar ATTR_NAME = \"loading-screen\";\nvar LOADER_TITLE_CLASS = \"a-loader-title\";\n\n// It catches vrdisplayactivate early to ensure we can enter VR mode after the scene loads.\n// window.addEventListener('vrdisplayactivate', function () {\n//   var vrManager = sceneEl.renderer.vr;\n//   var vrDisplay = utils.device.getVRDisplay();\n\n//   vrManager.setDevice(vrDisplay);\n//   vrManager.enabled = true;\n//   if (!vrDisplay.isPresenting) {\n//     return vrDisplay.requestPresent([{source: sceneEl.canvas}]).then(function () {}, function () {});\n//   }\n// });\n\nmodule.exports.setup = function setup(el, getCanvasSize) {\n  sceneEl = el;\n  getSceneCanvasSize = getCanvasSize;\n  var loaderAttribute = sceneEl.hasAttribute(ATTR_NAME)\n    ? styleParser.parse(sceneEl.getAttribute(ATTR_NAME))\n    : undefined;\n  var dotsColor = (loaderAttribute && loaderAttribute.dotsColor) || \"white\";\n  var backgroundColor =\n    (loaderAttribute && loaderAttribute.backgroundColor) || \"#24CAFF\";\n  var loaderEnabled =\n    loaderAttribute === undefined ||\n    loaderAttribute.enabled === true ||\n    loaderAttribute.enabled === undefined; // true default\n  var loaderScene;\n  var sphereGeometry;\n  var sphereMaterial;\n  var sphereMesh1;\n  var sphereMesh2;\n  var sphereMesh3;\n  var camera;\n  var clock;\n  var time;\n  var render;\n\n  if (!loaderEnabled) {\n    return;\n  }\n\n  // Setup Scene.\n  loaderScene = new THREE.Scene();\n  sphereGeometry = new THREE.SphereGeometry(\n    0.2,\n    36,\n    18,\n    0,\n    2 * Math.PI,\n    0,\n    Math.PI\n  );\n  sphereMaterial = new THREE.MeshBasicMaterial({ color: dotsColor });\n  sphereMesh1 = new THREE.Mesh(sphereGeometry, sphereMaterial);\n  sphereMesh2 = sphereMesh1.clone();\n  sphereMesh3 = sphereMesh1.clone();\n  // camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.0005, 10000);\n  clock = new THREE.Clock();\n  time = 0;\n  render = function () {\n    raf = sceneEl.mainRenderer.requestAnimationFrame(render);\n    // sceneEl.effect.render(loaderScene, camera);\n    time = clock.getElapsedTime() % 4;\n    sphereMesh1.visible = time >= 1;\n    sphereMesh2.visible = time >= 2;\n    sphereMesh3.visible = time >= 3;\n  };\n\n  loaderScene.background = new THREE.Color(backgroundColor);\n  // loaderScene.add(camera);\n  sphereMesh1.position.set(-1, 0, -15);\n  sphereMesh2.position.set(0, 0, -15);\n  sphereMesh3.position.set(1, 0, -15);\n  // camera.add(sphereMesh1);\n  // camera.add(sphereMesh2);\n  // camera.add(sphereMesh3);\n  setupTitle();\n\n  // Delay 200ms to avoid loader flashes.\n  setTimeout(function () {\n    if (sceneEl.hasLoaded) {\n      return;\n    }\n    // resize(camera);\n    titleEl.style.display = \"block\";\n    // window.addEventListener('resize', function () { resize(camera); });\n    render();\n  }, 200);\n};\n\nmodule.exports.remove = function remove() {\n  window.removeEventListener(\"resize\", resize);\n  if (!titleEl) {\n    return;\n  }\n  // Hide title.\n  titleEl.style.display = \"none\";\n  sceneEl.mainRenderer.cancelAnimationFrame(raf);\n};\n\nfunction resize(camera) {\n  var size = getSceneCanvasSize(\n    sceneEl.canvas,\n    false,\n    sceneEl.maxCanvasSize,\n    sceneEl.is(\"vr-mode\")\n  );\n  camera.aspect = size.width / size.height;\n  camera.updateProjectionMatrix();\n  // Notify renderer of size change.\n  sceneEl.renderer.setSize(size.width, size.height, false);\n}\n\nfunction setupTitle() {\n  titleEl = document.createElement(\"div\");\n  titleEl.className = LOADER_TITLE_CLASS;\n  titleEl.innerHTML = document.title;\n  titleEl.style.display = \"none\";\n  sceneEl.appendChild(titleEl);\n}\n",
    "var constants = require(\"../../constants/\");\nvar extend = require(\"../../utils\").extend;\n\nvar MOBILE_HEAD_TAGS = (module.exports.MOBILE_HEAD_TAGS = [\n  Meta({\n    name: \"viewport\",\n    content:\n      \"width=device-width,initial-scale=1,maximum-scale=1,shrink-to-fit=no,user-scalable=no,minimal-ui\",\n  }),\n\n  // W3C-standardised meta tags.\n  Meta({ name: \"mobile-web-app-capable\", content: \"yes\" }),\n  Meta({ name: \"theme-color\", content: \"black\" }),\n]);\n\nvar MOBILE_IOS_HEAD_TAGS = [\n  // iOS-specific meta tags for fullscreen when pinning to homescreen.\n  Meta({ name: \"apple-mobile-web-app-capable\", content: \"yes\" }),\n  Meta({ name: \"apple-mobile-web-app-status-bar-style\", content: \"black\" }),\n  Link({\n    rel: \"apple-touch-icon\",\n    href: \"https://aframe.io/images/aframe-logo-152.png\",\n  }),\n];\n\nfunction Meta(attrs) {\n  return {\n    tagName: \"meta\",\n    attributes: attrs,\n    exists: function () {\n      return document.querySelector('meta[name=\"' + attrs.name + '\"]');\n    },\n  };\n}\n\nfunction Link(attrs) {\n  return {\n    tagName: \"link\",\n    attributes: attrs,\n    exists: function () {\n      return document.querySelector('link[rel=\"' + attrs.rel + '\"]');\n    },\n  };\n}\n\n/**\n * Injects the necessary metatags in the document for mobile support:\n * 1. Prevent the user to zoom in the document.\n * 2. Ensure that window.innerWidth and window.innerHeight have the correct\n *    values and the canvas is properly scaled.\n * 3. To allow fullscreen mode when pinning a web app on the home screen on\n *    iOS.\n * Adapted from https://www.reddit.com/r/web_design/comments/3la04p/\n *\n * @param {object} scene - Scene element\n * @returns {Array}\n */\nmodule.exports.inject = function injectHeadTags(scene) {\n  var headEl = document.head;\n  var headScriptEl = headEl.querySelector(\"script\");\n  var tag;\n  var headTags = [];\n  MOBILE_HEAD_TAGS.forEach(createAndInjectTag);\n  if (scene.isIOS) {\n    MOBILE_IOS_HEAD_TAGS.forEach(createAndInjectTag);\n  }\n  return headTags;\n\n  function createAndInjectTag(tagObj) {\n    if (!tagObj || tagObj.exists()) {\n      return;\n    }\n\n    tag = createTag(tagObj);\n    if (!tag) {\n      return;\n    }\n\n    if (headScriptEl) {\n      headScriptEl.parentNode.insertBefore(tag, headScriptEl);\n    } else {\n      headEl.appendChild(tag);\n    }\n\n    headTags.push(tag);\n  }\n};\n\nfunction createTag(tagObj) {\n  if (!tagObj || !tagObj.tagName) {\n    return;\n  }\n  var meta = document.createElement(tagObj.tagName);\n  meta.setAttribute(constants.AFRAME_INJECTED, \"\");\n  return extend(meta, tagObj.attributes);\n}\n",
    "var bind = require(\"../../utils/bind\");\nvar isIframed = require(\"../../utils/\").isIframed;\n\n/**\n * Provides a post message API for scenes contained\n * in an iframe.\n */\nmodule.exports = function initPostMessageAPI(scene) {\n  // Handles fullscreen behavior when inside an iframe.\n  if (!isIframed()) {\n    return;\n  }\n  // postMessage API handler\n  window.addEventListener(\"message\", bind(postMessageAPIHandler, scene));\n};\n\nfunction postMessageAPIHandler(event) {\n  var scene = this;\n  if (!event.data) {\n    return;\n  }\n\n  switch (event.data.type) {\n    case \"vr\": {\n      switch (event.data.data) {\n        case \"enter\":\n          scene.enterVR();\n          break;\n        case \"exit\":\n          scene.exitVR();\n          break;\n      }\n    }\n  }\n}\n",
    "/*\n  Scene index for keeping track of created scenes.\n*/\nmodule.exports = [];\n",
    "var Wakelock = require(\"../../../vendor/wakelock/wakelock\");\n\nmodule.exports = function initWakelock(scene) {\n  if (!scene.isMobile) {\n    return;\n  }\n\n  var wakelock = (scene.wakelock = new Wakelock());\n  scene.addEventListener(\"enter-vr\", function () {\n    wakelock.request();\n  });\n  scene.addEventListener(\"exit-vr\", function () {\n    wakelock.release();\n  });\n};\n",
    "var utils = require(\"../utils/\");\nvar PropertyTypes = require(\"./propertyTypes\");\n\nvar debug = utils.debug;\nvar isValidDefaultValue = PropertyTypes.isValidDefaultValue;\nvar propertyTypes = PropertyTypes.propertyTypes;\n\nvar warn = debug(\"core:schema:warn\");\n\n/**\n * A schema is classified as a schema for a single property if:\n * - `type` is defined on the schema as a string.\n * - OR `default` is defined on the schema, as a reserved keyword.\n * - OR schema is empty.\n */\nfunction isSingleProperty(schema) {\n  if (\"type\" in schema) {\n    return typeof schema.type === \"string\";\n  }\n  return \"default\" in schema;\n}\nmodule.exports.isSingleProperty = isSingleProperty;\n\n/**\n * Build step to schema to use `type` to inject default value, parser, and stringifier.\n *\n * @param {object} schema\n * @param {string} componentName\n * @returns {object} Schema.\n */\nmodule.exports.process = function (schema, componentName) {\n  var propName;\n\n  // For single property schema, run processPropDefinition over the whole schema.\n  if (isSingleProperty(schema)) {\n    return processPropertyDefinition(schema, componentName);\n  }\n\n  // For multi-property schema, run processPropDefinition over each property definition.\n  for (propName in schema) {\n    schema[propName] = processPropertyDefinition(\n      schema[propName],\n      componentName\n    );\n  }\n  return schema;\n};\n\n/**\n * Inject default value, parser, stringifier for single property.\n *\n * @param {object} propDefinition\n * @param {string} componentName\n */\nfunction processPropertyDefinition(propDefinition, componentName) {\n  var defaultVal = propDefinition.default;\n  var isCustomType;\n  var propType;\n  var typeName = propDefinition.type;\n\n  // Type inference.\n  if (!propDefinition.type) {\n    if (\n      defaultVal !== undefined &&\n      (typeof defaultVal === \"boolean\" || typeof defaultVal === \"number\")\n    ) {\n      // Type inference.\n      typeName = typeof defaultVal;\n    } else if (Array.isArray(defaultVal)) {\n      typeName = \"array\";\n    } else {\n      // Fall back to string.\n      typeName = \"string\";\n    }\n  } else if (propDefinition.type === \"bool\") {\n    typeName = \"boolean\";\n  } else if (propDefinition.type === \"float\") {\n    typeName = \"number\";\n  }\n\n  propType = propertyTypes[typeName];\n  if (!propType) {\n    warn(\n      \"Unknown property type for component `\" + componentName + \"`: \" + typeName\n    );\n  }\n\n  // Fill in parse and stringify using property types.\n  isCustomType = !!propDefinition.parse;\n  propDefinition.parse = propDefinition.parse || propType.parse;\n  propDefinition.stringify = propDefinition.stringify || propType.stringify;\n\n  // Fill in type name.\n  propDefinition.type = typeName;\n\n  // Check that default value exists.\n  if (\"default\" in propDefinition) {\n    // Check that default values are valid.\n    if (!isCustomType && !isValidDefaultValue(typeName, defaultVal)) {\n      warn(\n        \"Default value `\" +\n          defaultVal +\n          \"` does not match type `\" +\n          typeName +\n          \"` in component `\" +\n          componentName +\n          \"`\"\n      );\n    }\n  } else {\n    // Fill in default value.\n    propDefinition.default = propType.default;\n  }\n\n  return propDefinition;\n}\nmodule.exports.processPropertyDefinition = processPropertyDefinition;\n\n/**\n * Parse propData using schema. Use default values if not existing in propData.\n *\n * @param {object} propData - Unparsed properties.\n * @param {object} schema - Property types definition.\n * @param {boolean} getPartialData - Whether to return full component data or just the data\n *        with keys in `propData`.\n * @param {string } componentName - Name of the component, used for the property warning.\n * @param {boolean} silent - Suppress warning messages.\n */\nmodule.exports.parseProperties = (function () {\n  var propNames = [];\n\n  return function (propData, schema, getPartialData, componentName, silent) {\n    var i;\n    var propName;\n    var propDefinition;\n    var propValue;\n\n    propNames.length = 0;\n    for (propName in getPartialData ? propData : schema) {\n      if (getPartialData && propData[propName] === undefined) {\n        continue;\n      }\n      propNames.push(propName);\n    }\n\n    if (propData === null || typeof propData !== \"object\") {\n      return propData;\n    }\n\n    // Validation errors.\n    for (propName in propData) {\n      if (propData[propName] !== undefined && !schema[propName] && !silent) {\n        warn(\n          \"Unknown property `\" +\n            propName +\n            \"` for component/system `\" +\n            componentName +\n            \"`.\"\n        );\n      }\n    }\n\n    for (i = 0; i < propNames.length; i++) {\n      propName = propNames[i];\n      propDefinition = schema[propName];\n      propValue = propData[propName];\n      if (!schema[propName]) {\n        return;\n      }\n      propData[propName] = parseProperty(propValue, propDefinition);\n    }\n\n    return propData;\n  };\n})();\n\n/**\n * Deserialize a single property.\n */\nfunction parseProperty(value, propDefinition) {\n  // Use default value if value is falsy.\n  if (value === undefined || value === null || value === \"\") {\n    value = propDefinition.default;\n    if (Array.isArray(value)) {\n      value = value.slice();\n    }\n  }\n  // Invoke property type parser.\n  return propDefinition.parse(value, propDefinition.default);\n}\nmodule.exports.parseProperty = parseProperty;\n\n/**\n * Serialize a group of properties.\n */\nmodule.exports.stringifyProperties = function (propData, schema) {\n  var propName;\n  var propDefinition;\n  var propValue;\n  var stringifiedData = {};\n  var value;\n\n  for (propName in propData) {\n    propDefinition = schema[propName];\n    propValue = propData[propName];\n    value = propValue;\n    if (typeof value === \"object\") {\n      value = stringifyProperty(propValue, propDefinition);\n      if (!propDefinition) {\n        warn(\"Unknown component property: \" + propName);\n      }\n    }\n    stringifiedData[propName] = value;\n  }\n  return stringifiedData;\n};\n\n/**\n * Serialize a single property.\n */\nfunction stringifyProperty(value, propDefinition) {\n  // This function stringifies but it's used in a context where\n  // there's always second stringification pass. By returning the original\n  // value when it's not an object we save one unnecessary call\n  // to JSON.stringify.\n  if (typeof value !== \"object\") {\n    return value;\n  }\n  // if there's no schema for the property we use standar JSON stringify\n  if (!propDefinition || value === null) {\n    return JSON.stringify(value);\n  }\n  return propDefinition.stringify(value);\n}\nmodule.exports.stringifyProperty = stringifyProperty;\n",
    "var schema = require(\"./schema\");\n\nvar processSchema = schema.process;\nvar shaders = (module.exports.shaders = {}); // Keep track of registered shaders.\nvar shaderNames = (module.exports.shaderNames = []); // Keep track of the names of registered shaders.\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils\");\n\n// A-Frame properties to three.js uniform types.\nvar propertyToThreeMapping = {\n  array: \"v3\",\n  color: \"v3\",\n  int: \"i\",\n  number: \"f\",\n  map: \"t\",\n  time: \"f\",\n  vec2: \"v2\",\n  vec3: \"v3\",\n  vec4: \"v4\",\n};\n\n/**\n * Shader class definition.\n *\n * Shaders extend the material component API so you can create your own library\n * of customized materials\n *\n */\nvar Shader = (module.exports.Shader = function () {});\n\nShader.prototype = {\n  /**\n   * Contains the type schema and defaults for the data values.\n   * Data is coerced into the types of the values of the defaults.\n   */\n  schema: {},\n\n  vertexShader:\n    \"void main() {\" +\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\" +\n    \"}\",\n\n  fragmentShader:\n    \"void main() {\" + \"gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);\" + \"}\",\n\n  /**\n   * Init handler. Similar to attachedCallback.\n   * Called during shader initialization and is only run once.\n   */\n  init: function (data) {\n    this.attributes = this.initVariables(data, \"attribute\");\n    this.uniforms = this.initVariables(data, \"uniform\");\n    this.material = new (\n      this.raw ? THREE.RawShaderMaterial : THREE.ShaderMaterial\n    )({\n      // attributes: this.attributes,\n      uniforms: this.uniforms,\n      vertexShader: this.vertexShader,\n      fragmentShader: this.fragmentShader,\n    });\n    return this.material;\n  },\n\n  initVariables: function (data, type) {\n    var key;\n    var schema = this.schema;\n    var variables = {};\n    var varType;\n\n    for (key in schema) {\n      if (schema[key].is !== type) {\n        continue;\n      }\n      varType = propertyToThreeMapping[schema[key].type];\n      variables[key] = {\n        type: varType,\n        value: undefined, // Let updateVariables handle setting these.\n      };\n    }\n    return variables;\n  },\n\n  /**\n   * Update handler. Similar to attributeChangedCallback.\n   * Called whenever the associated material data changes.\n   *\n   * @param {object} data - New material data.\n   */\n  update: function (data) {\n    this.updateVariables(data, \"attribute\");\n    this.updateVariables(data, \"uniform\");\n  },\n\n  updateVariables: function (data, type) {\n    var key;\n    var materialKey;\n    var schema = this.schema;\n    var variables;\n\n    variables = type === \"uniform\" ? this.uniforms : this.attributes;\n    for (key in data) {\n      if (!schema[key] || schema[key].is !== type) {\n        continue;\n      }\n\n      if (schema[key].type === \"map\") {\n        // If data unchanged, get out early.\n        if (!variables[key] || variables[key].value === data[key]) {\n          continue;\n        }\n\n        // Special handling is needed for textures.\n        materialKey = \"_texture_\" + key;\n\n        // We can't actually set the variable correctly until we've loaded the texture.\n        this.setMapOnTextureLoad(variables, key, materialKey);\n\n        // Kick off the texture update now that handler is added.\n        utils.material.updateMapMaterialFromData(materialKey, key, this, data);\n        continue;\n      }\n      variables[key].value = this.parseValue(schema[key].type, data[key]);\n      variables[key].needsUpdate = true;\n    }\n  },\n\n  parseValue: function (type, value) {\n    var color;\n    switch (type) {\n      case \"vec2\": {\n        return new THREE.Vector2(value.x, value.y);\n      }\n      case \"vec3\": {\n        return new THREE.Vector3(value.x, value.y, value.z);\n      }\n      case \"vec4\": {\n        return new THREE.Vector4(value.x, value.y, value.z, value.w);\n      }\n      case \"color\": {\n        color = new THREE.Color(value);\n        return new THREE.Vector3(color.r, color.g, color.b);\n      }\n      case \"map\": {\n        return THREE.ImageUtils.loadTexture(value);\n      }\n      default: {\n        return value;\n      }\n    }\n  },\n\n  setMapOnTextureLoad: function (variables, key, materialKey) {\n    var self = this;\n    this.el.addEventListener(\"materialtextureloaded\", function () {\n      variables[key].value = self.material[materialKey];\n      variables[key].needsUpdate = true;\n    });\n  },\n};\n\n/**\n * Registers a shader to A-Frame.\n *\n * @param {string} name - shader name.\n * @param {object} definition - shader property and methods.\n * @returns {object} Shader.\n */\nmodule.exports.registerShader = function (name, definition) {\n  var NewShader;\n  var proto = {};\n\n  // Format definition object to prototype object.\n  Object.keys(definition).forEach(function (key) {\n    proto[key] = {\n      value: definition[key],\n      writable: true,\n    };\n  });\n\n  if (shaders[name]) {\n    throw new Error(\"The shader \" + name + \" has been already registered\");\n  }\n  NewShader = function () {\n    Shader.call(this);\n  };\n  NewShader.prototype = Object.create(Shader.prototype, proto);\n  NewShader.prototype.name = name;\n  NewShader.prototype.constructor = NewShader;\n  shaders[name] = {\n    Shader: NewShader,\n    schema: processSchema(NewShader.prototype.schema),\n  };\n  shaderNames.push(name);\n  return NewShader;\n};\n",
    "var components = require(\"./component\");\nvar schema = require(\"./schema\");\nvar utils = require(\"../utils/\");\n\nvar parseProperties = schema.parseProperties;\nvar parseProperty = schema.parseProperty;\nvar processSchema = schema.process;\nvar isSingleProp = schema.isSingleProperty;\nvar styleParser = utils.styleParser;\n\nvar systems = (module.exports.systems = {}); // Keep track of registered systems.\n\n/**\n * System class definition.\n *\n * Systems provide global scope and services to a group of instantiated components of the\n * same class. They can also help abstract logic away from components such that components\n * only have to worry about data.\n *\n * For example, a physics component that creates a physics world that oversees\n * all entities with a physics or rigid body component.\n *\n * TODO: Have the System prototype reuse the Component prototype. Most code is copied\n * and some pieces are missing from the Component facilities (e.g., attribute caching,\n * setAttribute behavior).\n *\n * @member {string} name - Name that system is registered under.\n * @member {Element} sceneEl - Handle to the scene element where system applies to.\n */\nvar System = (module.exports.System = function (sceneEl) {\n  var component = components && components.components[this.name];\n\n  // Set reference to scene.\n  this.el = sceneEl;\n  this.sceneEl = sceneEl;\n\n  // Set reference to matching component (if exists).\n  if (component) {\n    component.Component.prototype.system = this;\n  }\n\n  // Process system configuration.\n  this.buildData();\n  this.init();\n  this.update({});\n});\n\nSystem.prototype = {\n  /**\n   * Schema to configure system.\n   */\n  schema: {},\n\n  /**\n   * Init handler. Called during scene initialization and is only run once.\n   * Systems can use this to set initial state.\n   */\n  init: function () {\n    /* no-op */\n  },\n\n  /**\n   * Update handler. Called during scene attribute updates.\n   * Systems can use this to dynamically update their state.\n   */\n  update: function (oldData) {\n    /* no-op */\n  },\n\n  /**\n   * Build data and call update handler.\n   *\n   * @private\n   */\n  updateProperties: function (rawData) {\n    var oldData = this.data;\n    if (!Object.keys(schema).length) {\n      return;\n    }\n    this.buildData(rawData);\n    this.update(oldData);\n  },\n\n  /**\n   * Parse data.\n   */\n  buildData: function (rawData) {\n    var schema = this.schema;\n    if (!Object.keys(schema).length) {\n      return;\n    }\n    rawData =\n      rawData ||\n      window.HTMLElement.prototype.getAttribute.call(this.sceneEl, this.name);\n    if (isSingleProp(schema)) {\n      this.data = parseProperty(rawData, schema);\n    } else {\n      this.data = parseProperties(styleParser.parse(rawData) || {}, schema);\n    }\n  },\n\n  /**\n   * Tick handler.\n   * Called on each tick of the scene render loop.\n   * Affected by play and pause.\n   *\n   * @param {number} time - Scene tick time.\n   * @param {number} timeDelta - Difference in current render time and previous render time.\n   */\n  tick: undefined,\n\n  /**\n   * Tock handler.\n   * Called on each tock of the scene render loop.\n   * Affected by play and pause.\n   *\n   * @param {number} time - Scene tick time.\n   * @param {number} timeDelta - Difference in current render time and previous render time.\n   */\n  tock: undefined,\n\n  /**\n   * Called to start any dynamic behavior (e.g., animation, AI, events, physics).\n   */\n  play: function () {\n    /* no-op */\n  },\n\n  /**\n   * Called to stop any dynamic behavior (e.g., animation, AI, events, physics).\n   */\n  pause: function () {\n    /* no-op */\n  },\n};\n\n/**\n * Registers a system to A-Frame.\n *\n * @param {string} name - Component name.\n * @param {object} definition - Component property and methods.\n * @returns {object} Component.\n */\nmodule.exports.registerSystem = function (name, definition) {\n  var i;\n  var NewSystem;\n  var proto = {};\n  var scenes = utils.findAllScenes(document);\n\n  // Format definition object to prototype object.\n  Object.keys(definition).forEach(function (key) {\n    proto[key] = {\n      value: definition[key],\n      writable: true,\n    };\n  });\n\n  if (systems[name]) {\n    throw new Error(\n      \"The system `\" +\n        name +\n        \"` has been already registered. \" +\n        \"Check that you are not loading two versions of the same system \" +\n        \"or two different systems of the same name.\"\n    );\n  }\n  NewSystem = function (sceneEl) {\n    System.call(this, sceneEl);\n  };\n  NewSystem.prototype = Object.create(System.prototype, proto);\n  NewSystem.prototype.name = name;\n  NewSystem.prototype.constructor = NewSystem;\n  NewSystem.prototype.schema = utils.extend(\n    processSchema(NewSystem.prototype.schema)\n  );\n  systems[name] = NewSystem;\n\n  // Initialize systems for existing scenes\n  for (i = 0; i < scenes.length; i++) {\n    scenes[i].initSystem(name);\n  }\n};\n",
    "require(\"./pivot\");\n",
    "var registerComponent = require(\"../../core/component\").registerComponent;\nvar THREE = require(\"../../lib/three\");\n\nvar originalPosition = new THREE.Vector3();\nvar originalRotation = new THREE.Vector3();\n\n/**\n * Wrap el.object3D within an outer group. Apply pivot to el.object3D as position.\n */\nregisterComponent(\"pivot\", {\n  dependencies: [\"position\"],\n\n  schema: { type: \"vec3\" },\n\n  init: function () {\n    var data = this.data;\n    var el = this.el;\n    var originalParent = el.object3D.parent;\n    var originalGroup = el.object3D;\n    var outerGroup = new THREE.Group();\n\n    originalPosition.copy(originalGroup.position);\n    originalRotation.copy(originalGroup.rotation);\n\n    // Detach current group from parent.\n    originalParent.remove(originalGroup);\n    outerGroup.add(originalGroup);\n\n    // Set new group as the outer group.\n    originalParent.add(outerGroup);\n\n    // Set outer group as new object3D.\n    el.object3D = outerGroup;\n\n    // Apply pivot to original group.\n    originalGroup.position.set(-1 * data.x, -1 * data.y, -1 * data.z);\n\n    // Offset the pivot so that world position not affected.\n    // And restore position onto outer group.\n    outerGroup.position.set(\n      data.x + originalPosition.x,\n      data.y + originalPosition.y,\n      data.z + originalPosition.z\n    );\n\n    // Transfer rotation to outer group.\n    outerGroup.rotation.copy(originalGroup.rotation);\n    originalGroup.rotation.set(0, 0, 0);\n  },\n});\n",
    "/**\n * Common mesh defaults, mappings, and transforms.\n */\nvar components = require(\"../../core/component\").components;\nvar shaders = require(\"../../core/shader\").shaders;\nvar utils = require(\"../../utils/\");\n\nvar materialMappings = {};\nObject.keys(components.material.schema).forEach(addMapping);\nObject.keys(shaders.standard.schema).forEach(addMapping);\n\nfunction addMapping(prop) {\n  // To hyphenated.\n  var htmlAttrName = prop.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n  if (prop === \"fog\") {\n    htmlAttrName = \"material-fog\";\n  }\n  if (prop === \"visible\") {\n    htmlAttrName = \"material-visible\";\n  }\n  materialMappings[htmlAttrName] = \"material.\" + prop;\n}\n\nmodule.exports = function getMeshMixin() {\n  return {\n    defaultComponents: { material: {} },\n    mappings: utils.extend({}, materialMappings),\n  };\n};\n",
    "require(\"./primitives/a-camera\");\nrequire(\"./primitives/a-collada-model\");\nrequire(\"./primitives/a-cursor\");\nrequire(\"./primitives/a-curvedimage\");\nrequire(\"./primitives/a-gltf-model\");\nrequire(\"./primitives/a-image\");\nrequire(\"./primitives/a-light\");\nrequire(\"./primitives/a-link\");\nrequire(\"./primitives/a-obj-model\");\nrequire(\"./primitives/a-sky\");\nrequire(\"./primitives/a-sound\");\nrequire(\"./primitives/a-text\");\nrequire(\"./primitives/a-video\");\nrequire(\"./primitives/a-videosphere\");\nrequire(\"./primitives/meshPrimitives\");\n",
    "var AEntity = require(\"../../core/a-entity\");\nvar components = require(\"../../core/component\").components;\nvar registerElement = require(\"../../core/a-register-element\").registerElement;\nvar utils = require(\"../../utils/\");\n\nvar debug = utils.debug;\nvar setComponentProperty = utils.entity.setComponentProperty;\nvar log = debug(\"extras:primitives:debug\");\nvar warn = debug(\"extras:primitives:warn\");\n\nvar primitives = (module.exports.primitives = {});\n\nmodule.exports.registerPrimitive = function registerPrimitive(\n  name,\n  definition\n) {\n  name = name.toLowerCase();\n  log(\"Registering <%s>\", name);\n\n  // Deprecation warning for defaultAttributes usage.\n  if (definition.defaultAttributes) {\n    warn(\n      \"The 'defaultAttributes' object is deprecated. Use 'defaultComponents' instead.\"\n    );\n  }\n\n  var primitive = registerElement(name, {\n    prototype: Object.create(AEntity.prototype, {\n      defaultComponentsFromPrimitive: {\n        value:\n          definition.defaultComponents || definition.defaultAttributes || {},\n      },\n      deprecated: { value: definition.deprecated || null },\n      deprecatedMappings: { value: definition.deprecatedMappings || {} },\n      mappings: { value: definition.mappings || {} },\n\n      createdCallback: {\n        value: function () {\n          if (definition.deprecated) {\n            console.warn(definition.deprecated);\n          }\n          this.resolveMappingCollisions();\n        },\n      },\n\n      /**\n       * If a mapping collides with a registered component name\n       * it renames the mapping to componentname-property\n       */\n      resolveMappingCollisions: {\n        value: function () {\n          var mappings = this.mappings;\n          var self = this;\n          Object.keys(mappings).forEach(function resolveCollision(key) {\n            var newAttribute;\n            if (key !== key.toLowerCase()) {\n              warn(\n                \"Mapping keys should be specified in lower case. The mapping key \" +\n                  key +\n                  \" may not be recognized\"\n              );\n            }\n            if (components[key]) {\n              newAttribute = mappings[key].replace(\".\", \"-\");\n              mappings[newAttribute] = mappings[key];\n              delete mappings[key];\n              console.warn(\n                \"The primitive \" +\n                  self.tagName.toLowerCase() +\n                  \" has a mapping collision. \" +\n                  \"The attribute \" +\n                  key +\n                  \" has the same name as a registered component and\" +\n                  \" has been renamed to \" +\n                  newAttribute\n              );\n            }\n          });\n        },\n      },\n\n      getExtraComponents: {\n        value: function () {\n          var attr;\n          var data;\n          var i;\n          var mapping;\n          var mixins;\n          var path;\n          var self = this;\n\n          // Gather component data from default components.\n          data = utils.clone(this.defaultComponentsFromPrimitive);\n\n          // Factor in mixins to overwrite default components.\n          mixins = this.getAttribute(\"mixin\");\n          if (mixins) {\n            mixins = mixins.trim().split(\" \");\n            mixins.forEach(function applyMixin(mixinId) {\n              var mixinComponents = self.sceneEl.querySelector(\n                \"#\" + mixinId\n              ).componentCache;\n              Object.keys(mixinComponents).forEach(function setComponent(name) {\n                data[name] = extend(data[name], mixinComponents[name]);\n              });\n            });\n          }\n\n          // Gather component data from mappings.\n          for (i = 0; i < this.attributes.length; i++) {\n            attr = this.attributes[i];\n            mapping = this.mappings[attr.name];\n            if (mapping) {\n              path = utils.entity.getComponentPropertyPath(mapping);\n              if (path.constructor === Array) {\n                data[path[0]] = data[path[0]] || {};\n                data[path[0]][path[1]] = attr.value.trim();\n              } else {\n                data[path] = attr.value.trim();\n              }\n              continue;\n            }\n          }\n\n          return data;\n\n          /**\n           * For the base to be extensible, both objects must be pure JavaScript objects.\n           * The function assumes that base is undefined, or null or a pure object.\n           */\n          function extend(base, extension) {\n            if (isUndefined(base)) {\n              return copy(extension);\n            }\n            if (isUndefined(extension)) {\n              return copy(base);\n            }\n            if (isPureObject(base) && isPureObject(extension)) {\n              return utils.extendDeep(base, extension);\n            }\n            return copy(extension);\n          }\n\n          function isUndefined(value) {\n            return typeof value === \"undefined\";\n          }\n\n          function copy(value) {\n            if (isPureObject(value)) {\n              return utils.extendDeep({}, value);\n            }\n            return value;\n          }\n\n          function isPureObject(value) {\n            return value !== null && value.constructor === Object;\n          }\n        },\n      },\n\n      /**\n       * Sync to attribute to component property whenever mapped attribute changes.\n       * If attribute is mapped to a component property, set the component property using\n       * the attribute value.\n       */\n      attributeChangedCallback: {\n        value: function (attr, oldVal, value) {\n          var componentName = this.mappings[attr];\n\n          if (attr in this.deprecatedMappings) {\n            console.warn(this.deprecatedMappings[attr]);\n          }\n\n          if (!attr || !componentName) {\n            return;\n          }\n\n          // Set value.\n          setComponentProperty(this, componentName, value);\n        },\n      },\n    }),\n  });\n\n  // Store.\n  primitives[name] = primitive;\n  return primitive;\n};\n\n/**\n * Add component mappings using schema.\n */\nfunction addComponentMapping(componentName, mappings) {\n  var schema = components[componentName].schema;\n  Object.keys(schema).map(function (prop) {\n    // Hyphenate where there is camelCase.\n    var attrName = prop.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n    // If there is a mapping collision, prefix with component name and hyphen.\n    if (mappings[attrName] !== undefined) {\n      attrName = componentName + \"-\" + prop;\n    }\n    mappings[attrName] = componentName + \".\" + prop;\n  });\n}\n\n/**\n * Helper to define a primitive, building mappings using a component schema.\n */\nfunction definePrimitive(tagName, defaultComponents, mappings) {\n  // If no initial mappings provided, start from empty map.\n  mappings = mappings || {};\n\n  // From the default components, add mapping automagically.\n  Object.keys(defaultComponents).map(function buildMappings(componentName) {\n    addComponentMapping(componentName, mappings);\n  });\n\n  // Register the primitive.\n  module.exports.registerPrimitive(\n    tagName,\n    utils.extendDeep({}, null, {\n      defaultComponents: defaultComponents,\n      mappings: mappings,\n    })\n  );\n}\nmodule.exports.definePrimitive = definePrimitive;\n",
    "var registerPrimitive = require(\"../primitives\").registerPrimitive;\n\nregisterPrimitive(\"a-camera\", {\n  defaultComponents: {\n    camera: {},\n    \"look-controls\": {},\n    \"wasd-controls\": {},\n    position: { y: 1.6 },\n  },\n\n  mappings: {\n    active: \"camera.active\",\n    far: \"camera.far\",\n    fov: \"camera.fov\",\n    \"look-controls-enabled\": \"look-controls.enabled\",\n    near: \"camera.near\",\n    \"pointer-lock-enabled\": \"look-controls.pointerLockEnabled\",\n    \"wasd-controls-enabled\": \"wasd-controls.enabled\",\n    \"reverse-mouse-drag\": \"look-controls.reverseMouseDrag\",\n    zoom: \"camera.zoom\",\n  },\n});\n",
    "var registerPrimitive = require(\"../primitives\").registerPrimitive;\n\nregisterPrimitive(\"a-collada-model\", {\n  mappings: {\n    src: \"collada-model\",\n  },\n});\n",
    "var getMeshMixin = require(\"../getMeshMixin\");\nvar registerPrimitive = require(\"../primitives\").registerPrimitive;\nvar utils = require(\"../../../utils/\");\n\nregisterPrimitive(\n  \"a-cursor\",\n  utils.extendDeep({}, getMeshMixin(), {\n    defaultComponents: {\n      cursor: {},\n      geometry: {\n        primitive: \"ring\",\n        radiusOuter: 0.016,\n        radiusInner: 0.01,\n        segmentsTheta: 32,\n      },\n      material: {\n        color: \"#000\",\n        shader: \"flat\",\n        opacity: 0.8,\n      },\n      position: {\n        x: 0,\n        y: 0,\n        z: -1,\n      },\n    },\n\n    mappings: {\n      far: \"raycaster.far\",\n      fuse: \"cursor.fuse\",\n      \"fuse-timeout\": \"cursor.fuseTimeout\",\n      interval: \"raycaster.interval\",\n      objects: \"raycaster.objects\",\n    },\n  })\n);\n",
    "var getMeshMixin = require(\"../getMeshMixin\");\nvar registerPrimitive = require(\"../primitives\").registerPrimitive;\nvar utils = require(\"../../../utils/\");\n\nregisterPrimitive(\n  \"a-curvedimage\",\n  utils.extendDeep({}, getMeshMixin(), {\n    defaultComponents: {\n      geometry: {\n        height: 1,\n        primitive: \"cylinder\",\n        radius: 2,\n        segmentsRadial: 48,\n        thetaLength: 270,\n        openEnded: true,\n        thetaStart: 0,\n      },\n      material: {\n        color: \"#FFF\",\n        shader: \"flat\",\n        side: \"double\",\n        transparent: true,\n        repeat: \"-1 1\",\n      },\n    },\n\n    mappings: {\n      height: \"geometry.height\",\n      \"open-ended\": \"geometry.openEnded\",\n      radius: \"geometry.radius\",\n      segments: \"geometry.segmentsRadial\",\n      start: \"geometry.thetaStart\",\n      \"theta-length\": \"geometry.thetaLength\",\n      \"theta-start\": \"geometry.thetaStart\",\n      width: \"geometry.thetaLength\",\n    },\n  })\n);\n",
    "var registerPrimitive = require(\"../primitives\").registerPrimitive;\n\nregisterPrimitive(\"a-gltf-model\", {\n  mappings: {\n    src: \"gltf-model\",\n  },\n});\n",
    "var getMeshMixin = require(\"../getMeshMixin\");\nvar registerPrimitive = require(\"../primitives\").registerPrimitive;\nvar utils = require(\"../../../utils/\");\n\nregisterPrimitive(\n  \"a-image\",\n  utils.extendDeep({}, getMeshMixin(), {\n    defaultComponents: {\n      geometry: {\n        primitive: \"plane\",\n      },\n      material: {\n        color: \"#FFF\",\n        shader: \"flat\",\n        side: \"double\",\n        transparent: true,\n      },\n    },\n\n    mappings: {\n      height: \"geometry.height\",\n      width: \"geometry.width\",\n    },\n  })\n);\n",
    "var registerPrimitive = require(\"../primitives\").registerPrimitive;\n\nregisterPrimitive(\"a-light\", {\n  defaultComponents: {\n    light: {},\n  },\n\n  mappings: {\n    angle: \"light.angle\",\n    color: \"light.color\",\n    \"ground-color\": \"light.groundColor\",\n    decay: \"light.decay\",\n    distance: \"light.distance\",\n    intensity: \"light.intensity\",\n    penumbra: \"light.penumbra\",\n    type: \"light.type\",\n    target: \"light.target\",\n  },\n});\n",
    "var registerPrimitive = require(\"../primitives\").registerPrimitive;\n\nregisterPrimitive(\"a-link\", {\n  defaultComponents: {\n    link: {\n      visualAspectEnabled: true,\n    },\n  },\n\n  mappings: {\n    href: \"link.href\",\n    image: \"link.image\",\n    title: \"link.title\",\n  },\n});\n",
    "var meshMixin = require(\"../getMeshMixin\")();\nvar registerPrimitive = require(\"../primitives\").registerPrimitive;\nvar utils = require(\"../../../utils/\");\n\nregisterPrimitive(\n  \"a-obj-model\",\n  utils.extendDeep({}, meshMixin, {\n    defaultComponents: {\n      \"obj-model\": {},\n    },\n\n    mappings: {\n      src: \"obj-model.obj\",\n      mtl: \"obj-model.mtl\",\n    },\n  })\n);\n",
    "var getMeshMixin = require(\"../getMeshMixin\");\nvar registerPrimitive = require(\"../primitives\").registerPrimitive;\nvar utils = require(\"../../../utils/\");\nvar meshPrimitives = require(\"./meshPrimitives\");\n\nregisterPrimitive(\n  \"a-sky\",\n  utils.extendDeep({}, getMeshMixin(), {\n    defaultComponents: {\n      geometry: {\n        primitive: \"sphere\",\n        radius: 5000,\n        segmentsWidth: 64,\n        segmentsHeight: 32,\n      },\n      material: {\n        color: \"#FFF\",\n        side: \"back\",\n        shader: \"flat\",\n        npot: true,\n      },\n      scale: \"-1 1 1\",\n    },\n\n    mappings: utils.extendDeep(\n      {},\n      meshPrimitives[\"a-sphere\"].prototype.mappings\n    ),\n  })\n);\n",
    "var registerPrimitive = require(\"../primitives\").registerPrimitive;\n\nregisterPrimitive(\"a-sound\", {\n  defaultComponents: {\n    sound: {},\n  },\n\n  mappings: {\n    src: \"sound.src\",\n    on: \"sound.on\",\n    autoplay: \"sound.autoplay\",\n    loop: \"sound.loop\",\n    volume: \"sound.volume\",\n  },\n});\n",
    "// <a-text> using `definePrimitive` helper.\nvar definePrimitive = require(\"../primitives\").definePrimitive;\ndefinePrimitive(\"a-text\", { text: { anchor: \"align\", width: 5 } });\n",
    "var getMeshMixin = require(\"../getMeshMixin\");\nvar registerPrimitive = require(\"../primitives\").registerPrimitive;\nvar utils = require(\"../../../utils/\");\n\nregisterPrimitive(\n  \"a-video\",\n  utils.extendDeep({}, getMeshMixin(), {\n    defaultComponents: {\n      geometry: {\n        primitive: \"plane\",\n      },\n      material: {\n        color: \"#FFF\",\n        shader: \"flat\",\n        side: \"double\",\n        transparent: true,\n      },\n    },\n\n    mappings: {\n      height: \"geometry.height\",\n      width: \"geometry.width\",\n    },\n  })\n);\n",
    "var getMeshMixin = require(\"../getMeshMixin\");\nvar registerPrimitive = require(\"../primitives\").registerPrimitive;\nvar utils = require(\"../../../utils/\");\n\nregisterPrimitive(\n  \"a-videosphere\",\n  utils.extendDeep({}, getMeshMixin(), {\n    defaultComponents: {\n      geometry: {\n        primitive: \"sphere\",\n        radius: 5000,\n        segmentsWidth: 64,\n        segmentsHeight: 32,\n      },\n      material: {\n        color: \"#FFF\",\n        shader: \"flat\",\n        side: \"back\",\n        npot: true,\n      },\n      scale: \"-1 1 1\",\n    },\n\n    mappings: {\n      radius: \"geometry.radius\",\n      \"segments-height\": \"geometry.segmentsHeight\",\n      \"segments-width\": \"geometry.segmentsWidth\",\n    },\n  })\n);\n",
    "/**\n * Automated mesh primitive registration.\n */\nvar getMeshMixin = require(\"../getMeshMixin\");\nvar geometries = require(\"../../../core/geometry\").geometries;\nvar geometryNames = require(\"../../../core/geometry\").geometryNames;\nvar registerPrimitive = require(\"../primitives\").registerPrimitive;\nvar utils = require(\"../../../utils/\");\n\n// For testing.\nvar meshPrimitives = (module.exports = {});\n\n// Generate primitive for each geometry type.\ngeometryNames.forEach(function registerMeshPrimitive(geometryName) {\n  var geometry = geometries[geometryName];\n  var geometryHyphened = unCamelCase(geometryName);\n\n  // Generate mappings.\n  var mappings = {};\n  Object.keys(geometry.schema).forEach(function createMapping(property) {\n    mappings[unCamelCase(property)] = \"geometry.\" + property;\n  });\n\n  // Register.\n  var tagName = \"a-\" + geometryHyphened;\n  var primitive = registerPrimitive(\n    tagName,\n    utils.extendDeep({}, getMeshMixin(), {\n      defaultComponents: { geometry: { primitive: geometryName } },\n      mappings: mappings,\n    })\n  );\n  meshPrimitives[tagName] = primitive;\n});\n\n/**\n * camelCase to hyphened-string.\n */\nfunction unCamelCase(str) {\n  return str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nregisterGeometry(\"box\", {\n  schema: {\n    depth: { default: 1, min: 0 },\n    height: { default: 1, min: 0 },\n    width: { default: 1, min: 0 },\n    segmentsHeight: { default: 1, min: 1, max: 20, type: \"int\" },\n    segmentsWidth: { default: 1, min: 1, max: 20, type: \"int\" },\n    segmentsDepth: { default: 1, min: 1, max: 20, type: \"int\" },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.BoxGeometry(\n      data.width,\n      data.height,\n      data.depth,\n      data.segmentsWidth,\n      data.segmentsHeight,\n      data.segmentsDepth\n    );\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nvar degToRad = THREE.Math.degToRad;\n\nregisterGeometry(\"circle\", {\n  schema: {\n    radius: { default: 1, min: 0 },\n    segments: { default: 32, min: 3, type: \"int\" },\n    thetaLength: { default: 360, min: 0 },\n    thetaStart: { default: 0 },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.CircleGeometry(\n      data.radius,\n      data.segments,\n      degToRad(data.thetaStart),\n      degToRad(data.thetaLength)\n    );\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nvar degToRad = THREE.Math.degToRad;\n\nregisterGeometry(\"cone\", {\n  schema: {\n    height: { default: 1, min: 0 },\n    openEnded: { default: false },\n    radiusBottom: { default: 1, min: 0 },\n    radiusTop: { default: 0.01, min: 0 },\n    segmentsHeight: { default: 18, min: 1, type: \"int\" },\n    segmentsRadial: { default: 36, min: 3, type: \"int\" },\n    thetaLength: { default: 360, min: 0 },\n    thetaStart: { default: 0 },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.CylinderGeometry(\n      data.radiusTop,\n      data.radiusBottom,\n      data.height,\n      data.segmentsRadial,\n      data.segmentsHeight,\n      data.openEnded,\n      degToRad(data.thetaStart),\n      degToRad(data.thetaLength)\n    );\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nvar degToRad = THREE.Math.degToRad;\n\nregisterGeometry(\"cylinder\", {\n  schema: {\n    height: { default: 1, min: 0 },\n    openEnded: { default: false },\n    radius: { default: 1, min: 0 },\n    segmentsHeight: { default: 18, min: 1, type: \"int\" },\n    segmentsRadial: { default: 36, min: 3, type: \"int\" },\n    thetaLength: { default: 360, min: 0 },\n    thetaStart: { default: 0 },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.CylinderGeometry(\n      data.radius,\n      data.radius,\n      data.height,\n      data.segmentsRadial,\n      data.segmentsHeight,\n      data.openEnded,\n      degToRad(data.thetaStart),\n      degToRad(data.thetaLength)\n    );\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nregisterGeometry(\"dodecahedron\", {\n  schema: {\n    detail: { default: 0, min: 0, max: 5, type: \"int\" },\n    radius: { default: 1, min: 0 },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.DodecahedronGeometry(data.radius, data.detail);\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nregisterGeometry(\"icosahedron\", {\n  schema: {\n    detail: { default: 0, min: 0, max: 5, type: \"int\" },\n    radius: { default: 1, min: 0 },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.IcosahedronGeometry(data.radius, data.detail);\n  },\n});\n",
    "require(\"./box.js\");\nrequire(\"./circle.js\");\nrequire(\"./cone.js\");\nrequire(\"./cylinder.js\");\nrequire(\"./dodecahedron.js\");\nrequire(\"./icosahedron.js\");\nrequire(\"./octahedron.js\");\nrequire(\"./plane.js\");\nrequire(\"./ring.js\");\nrequire(\"./sphere.js\");\nrequire(\"./tetrahedron.js\");\nrequire(\"./torus.js\");\nrequire(\"./torusKnot.js\");\nrequire(\"./triangle.js\");\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nregisterGeometry(\"octahedron\", {\n  schema: {\n    detail: { default: 0, min: 0, max: 5, type: \"int\" },\n    radius: { default: 1, min: 0 },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.OctahedronGeometry(data.radius, data.detail);\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nregisterGeometry(\"plane\", {\n  schema: {\n    height: { default: 1, min: 0 },\n    width: { default: 1, min: 0 },\n    segmentsHeight: { default: 1, min: 1, max: 20, type: \"int\" },\n    segmentsWidth: { default: 1, min: 1, max: 20, type: \"int\" },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.PlaneGeometry(\n      data.width,\n      data.height,\n      data.segmentsWidth,\n      data.segmentsHeight\n    );\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nvar degToRad = THREE.Math.degToRad;\n\nregisterGeometry(\"ring\", {\n  schema: {\n    radiusInner: { default: 0.8, min: 0 },\n    radiusOuter: { default: 1.2, min: 0 },\n    segmentsPhi: { default: 10, min: 1, type: \"int\" },\n    segmentsTheta: { default: 32, min: 3, type: \"int\" },\n    thetaLength: { default: 360, min: 0 },\n    thetaStart: { default: 0 },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.RingGeometry(\n      data.radiusInner,\n      data.radiusOuter,\n      data.segmentsTheta,\n      data.segmentsPhi,\n      degToRad(data.thetaStart),\n      degToRad(data.thetaLength)\n    );\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nvar degToRad = THREE.Math.degToRad;\n\nregisterGeometry(\"sphere\", {\n  schema: {\n    radius: { default: 1, min: 0 },\n    phiLength: { default: 360 },\n    phiStart: { default: 0, min: 0 },\n    thetaLength: { default: 180, min: 0 },\n    thetaStart: { default: 0 },\n    segmentsHeight: { default: 18, min: 2, type: \"int\" },\n    segmentsWidth: { default: 36, min: 3, type: \"int\" },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.SphereGeometry(\n      data.radius,\n      data.segmentsWidth,\n      data.segmentsHeight,\n      degToRad(data.phiStart),\n      degToRad(data.phiLength),\n      degToRad(data.thetaStart),\n      degToRad(data.thetaLength)\n    );\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nregisterGeometry(\"tetrahedron\", {\n  schema: {\n    detail: { default: 0, min: 0, max: 5, type: \"int\" },\n    radius: { default: 1, min: 0 },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.TetrahedronGeometry(data.radius, data.detail);\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nvar degToRad = THREE.Math.degToRad;\n\nregisterGeometry(\"torus\", {\n  schema: {\n    arc: { default: 360 },\n    radius: { default: 1, min: 0 },\n    radiusTubular: { default: 0.2, min: 0 },\n    segmentsRadial: { default: 36, min: 2, type: \"int\" },\n    segmentsTubular: { default: 32, min: 3, type: \"int\" },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.TorusGeometry(\n      data.radius,\n      data.radiusTubular * 2,\n      data.segmentsRadial,\n      data.segmentsTubular,\n      degToRad(data.arc)\n    );\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nregisterGeometry(\"torusKnot\", {\n  schema: {\n    p: { default: 2, min: 1 },\n    q: { default: 3, min: 1 },\n    radius: { default: 1, min: 0 },\n    radiusTubular: { default: 0.2, min: 0 },\n    segmentsRadial: { default: 8, min: 3, type: \"int\" },\n    segmentsTubular: { default: 100, min: 3, type: \"int\" },\n  },\n\n  init: function (data) {\n    this.geometry = new THREE.TorusKnotGeometry(\n      data.radius,\n      data.radiusTubular * 2,\n      data.segmentsTubular,\n      data.segmentsRadial,\n      data.p,\n      data.q\n    );\n  },\n});\n",
    "var registerGeometry = require(\"../core/geometry\").registerGeometry;\nvar THREE = require(\"../lib/three\");\n\nvar quaternion = new THREE.Quaternion();\nvar rotateVector = new THREE.Vector3(0, 0, 1);\nvar uvMinVector = new THREE.Vector2();\nvar uvMaxVector = new THREE.Vector2();\nvar uvScaleVector = new THREE.Vector2();\n\nregisterGeometry(\"triangle\", {\n  schema: {\n    vertexA: { type: \"vec3\", default: { x: 0, y: 0.5, z: 0 } },\n    vertexB: { type: \"vec3\", default: { x: -0.5, y: -0.5, z: 0 } },\n    vertexC: { type: \"vec3\", default: { x: 0.5, y: -0.5, z: 0 } },\n  },\n\n  init: function (data) {\n    var geometry;\n    var normal;\n    var triangle;\n    var uvA;\n    var uvB;\n    var uvC;\n\n    triangle = new THREE.Triangle();\n    triangle.a.set(data.vertexA.x, data.vertexA.y, data.vertexA.z);\n    triangle.b.set(data.vertexB.x, data.vertexB.y, data.vertexB.z);\n    triangle.c.set(data.vertexC.x, data.vertexC.y, data.vertexC.z);\n    normal = triangle.getNormal(new THREE.Vector3());\n\n    // Rotate the 3D triangle to be parallel to XY plane.\n    quaternion.setFromUnitVectors(normal, rotateVector);\n    uvA = triangle.a.clone().applyQuaternion(quaternion);\n    uvB = triangle.b.clone().applyQuaternion(quaternion);\n    uvC = triangle.c.clone().applyQuaternion(quaternion);\n\n    // Compute UVs.\n    // Normalize x/y values of UV so they are within 0 to 1.\n    uvMinVector.set(\n      Math.min(uvA.x, uvB.x, uvC.x),\n      Math.min(uvA.y, uvB.y, uvC.y)\n    );\n    uvMaxVector.set(\n      Math.max(uvA.x, uvB.x, uvC.x),\n      Math.max(uvA.y, uvB.y, uvC.y)\n    );\n    uvScaleVector.set(0, 0).subVectors(uvMaxVector, uvMinVector);\n    uvA = new THREE.Vector2()\n      .subVectors(uvA, uvMinVector)\n      .divide(uvScaleVector);\n    uvB = new THREE.Vector2()\n      .subVectors(uvB, uvMinVector)\n      .divide(uvScaleVector);\n    uvC = new THREE.Vector2()\n      .subVectors(uvC, uvMinVector)\n      .divide(uvScaleVector);\n\n    geometry = this.geometry = new THREE.Geometry();\n    geometry.vertices.push(triangle.a);\n    geometry.vertices.push(triangle.b);\n    geometry.vertices.push(triangle.c);\n    geometry.faces.push(new THREE.Face3(0, 1, 2, normal));\n    geometry.faceVertexUvs[0] = [[uvA, uvB, uvC]];\n  },\n});\n",
    "var utils = require(\"./utils/\");\n\nvar debug = utils.debug;\nvar error = debug(\"A-Frame:error\");\nvar warn = debug(\"A-Frame:warn\");\n\nif (\n  window.document.currentScript &&\n  window.document.currentScript.parentNode !== window.document.head &&\n  !window.debug\n) {\n  warn(\n    \"Put the A-Frame <script> tag in the <head> of the HTML *before* the scene to \" +\n      \"ensure everything for A-Frame is properly registered before they are used from \" +\n      \"HTML.\"\n  );\n}\n\n// Error if not using a server.\nif (window.location.protocol === \"file:\") {\n  error(\n    \"This HTML file is currently being served via the file:// protocol. \" +\n      \"Assets, textures, and models WILL NOT WORK due to cross-origin policy! \" +\n      \"Please use a local or hosted server: \" +\n      \"https://aframe.io/docs/0.5.0/introduction/getting-started.html#using-a-local-server.\"\n  );\n}\n\n// CSS.\nif (utils.device.isBrowserEnvironment) {\n  require(\"./style/aframe.css\");\n  require(\"./style/rStats.css\");\n}\n\n// Required before `AEntity` so that all components are registered.\nvar AScene = require(\"./core/scene/a-scene\").AScene;\nvar components = require(\"./core/component\").components;\nvar registerComponent = require(\"./core/component\").registerComponent;\nvar registerGeometry = require(\"./core/geometry\").registerGeometry;\nvar registerPrimitive =\n  require(\"./extras/primitives/primitives\").registerPrimitive;\nvar registerShader = require(\"./core/shader\").registerShader;\nvar registerSystem = require(\"./core/system\").registerSystem;\nvar shaders = require(\"./core/shader\").shaders;\nvar systems = require(\"./core/system\").systems;\n// Exports THREE to window so three.js can be used without alteration.\nvar THREE = (window.THREE = require(\"./lib/three\"));\n\nvar pkg = require(\"../package\");\n\nrequire(\"./components/index\"); // Register standard components.\nrequire(\"./geometries/index\"); // Register standard geometries.\nrequire(\"./shaders/index\"); // Register standard shaders.\nrequire(\"./systems/index\"); // Register standard systems.\nvar ANode = require(\"./core/a-node\");\nvar AEntity = require(\"./core/a-entity\"); // Depends on ANode and core components.\n\nrequire(\"./core/a-assets\");\nrequire(\"./core/a-cubemap\");\nrequire(\"./core/a-mixin\");\n\n// Extras.\nrequire(\"./extras/components/\");\nrequire(\"./extras/primitives/\");\n\nconsole.log(\"A-Frame Version: 0.8.2 (Date 2023-02-11, Commit #50eae056)\");\nconsole.log(\"three Version:\", pkg.dependencies[\"three\"]);\n\nmodule.exports = window.AFRAME = {\n  AComponent: require(\"./core/component\").Component,\n  AEntity: AEntity,\n  ANode: ANode,\n  ANIME: require(\"animejs\"),\n  AScene: AScene,\n  components: components,\n  geometries: require(\"./core/geometry\").geometries,\n  registerComponent: registerComponent,\n  registerElement: require(\"./core/a-register-element\").registerElement,\n  registerGeometry: registerGeometry,\n  registerPrimitive: registerPrimitive,\n  registerShader: registerShader,\n  registerSystem: registerSystem,\n  primitives: {\n    getMeshMixin: require(\"./extras/primitives/getMeshMixin\"),\n    primitives: require(\"./extras/primitives/primitives\").primitives,\n  },\n  scenes: require(\"./core/scene/scenes\"),\n  schema: require(\"./core/schema\"),\n  shaders: shaders,\n  systems: systems,\n  THREE: THREE,\n  utils: utils,\n  version: pkg.version,\n};\n",
    "window.aframeStats = function (scene) {\n  var _rS = null;\n  var _scene = scene;\n  var _values = {\n    te: {\n      caption: \"Entities\",\n    },\n    lt: {\n      caption: \"Load Time\",\n    },\n  };\n  var _groups = [\n    {\n      caption: \"A-Frame\",\n      values: [\"te\", \"lt\"],\n    },\n  ];\n\n  function _update() {\n    _rS(\"te\").set(getEntityCount());\n    if (window.performance.getEntriesByName) {\n      _rS(\"lt\").set(\n        window.performance\n          .getEntriesByName(\"render-started\")[0]\n          .startTime.toFixed(0)\n      );\n    }\n  }\n\n  function getEntityCount() {\n    var elements = _scene.querySelectorAll(\"*\");\n    Array.prototype.slice.call(elements).filter(function (el) {\n      return el.isEntity;\n    });\n    return elements.length;\n  }\n\n  function _start() {}\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: [],\n  };\n};\n\nif (typeof module === \"object\") {\n  module.exports = {\n    aframeStats: window.aframeStats,\n  };\n}\n",
    "var THREE = (global.THREE = require(\"../../vendor/three\"));\n\n// Allow cross-origin images to be loaded.\n\n// This should not be on `THREE.Loader` nor `THREE.ImageUtils`.\n// Must be on `THREE.TextureLoader`.\nif (THREE.TextureLoader) {\n  THREE.TextureLoader.prototype.crossOrigin = \"anonymous\";\n}\n\n// This is for images loaded from the model loaders.\nif (THREE.ImageLoader) {\n  THREE.ImageLoader.prototype.crossOrigin = \"anonymous\";\n}\n\n// In-memory caching for XHRs (for images, audio files, textures, etc.).\nif (THREE.Cache) {\n  THREE.Cache.enabled = true;\n}\n\n// TODO: Eventually include these only if they are needed by a component.\nrequire(\"../../vendor/DRACOLoader\"); // THREE.DRACOLoader\nrequire(\"../../vendor/GLTFLoader\"); // THREE.GLTFLoader\nrequire(\"../../vendor/OBJLoader\"); // THREE.OBJLoader\nrequire(\"../../vendor/MTLLoader\"); // THREE.MTLLoader\nrequire(\"../../vendor/ColladaLoader\"); // THREE.ColladaLoader\nrequire(\"../../vendor/MainRenderer\"); // was THREE.VREffect\n\nTHREE.ColladaLoader.prototype.crossOrigin = \"anonymous\";\nTHREE.GLTFLoader.prototype.crossOrigin = \"anonymous\";\nTHREE.MTLLoader.prototype.crossOrigin = \"anonymous\";\nTHREE.OBJLoader.prototype.crossOrigin = \"anonymous\";\n\nmodule.exports = THREE;\n",
    "var registerShader = require(\"../core/shader\").registerShader;\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils/\");\n\n/**\n * Flat shader using THREE.MeshBasicMaterial.\n */\nmodule.exports.Shader = registerShader(\"flat\", {\n  schema: {\n    color: { type: \"color\" },\n    fog: { default: true },\n    height: { default: 256 },\n    offset: { type: \"vec2\", default: { x: 0, y: 0 } },\n    repeat: { type: \"vec2\", default: { x: 1, y: 1 } },\n    src: { type: \"map\" },\n    width: { default: 512 },\n    wireframe: { default: false },\n    wireframeLinewidth: { default: 2 },\n  },\n\n  /**\n   * Initializes the shader.\n   * Adds a reference from the scene to this entity as the camera.\n   */\n  init: function (data) {\n    this.materialData = { color: new THREE.Color() };\n    this.textureSrc = null;\n    getMaterialData(data, this.materialData);\n    this.material = new THREE.MeshBasicMaterial(this.materialData);\n    utils.material.updateMap(this, data);\n  },\n\n  update: function (data) {\n    this.updateMaterial(data);\n    utils.material.updateMap(this, data);\n  },\n\n  /**\n   * Updating existing material.\n   *\n   * @param {object} data - Material component data.\n   */\n  updateMaterial: function (data) {\n    var key;\n    getMaterialData(data, this.materialData);\n    for (key in this.materialData) {\n      this.material[key] = this.materialData[key];\n    }\n  },\n});\n\n/**\n * Builds and normalize material data, normalizing stuff along the way.\n *\n * @param {object} data - Material data.\n * @param {object} materialData - Object to reuse.\n * @returns {object} Updated material data.\n */\nfunction getMaterialData(data, materialData) {\n  materialData.color.set(data.color);\n  materialData.fog = data.fog;\n  materialData.wireframe = data.wireframe;\n  materialData.wireframeLinewidth = data.wireframeLinewidth;\n  return materialData;\n}\n",
    "require(\"./flat\");\nrequire(\"./standard\");\nrequire(\"./sdf\");\nrequire(\"./msdf\");\nrequire(\"./ios10hls\");\n",
    "var registerShader = require(\"../core/shader\").registerShader;\n\n/**\n * Custom shader for iOS 10 HTTP Live Streaming (HLS).\n * For more information on HLS, see https://datatracker.ietf.org/doc/draft-pantos-http-live-streaming/\n */\nmodule.exports.Shader = registerShader(\"ios10hls\", {\n  schema: {\n    src: { type: \"map\", is: \"uniform\" },\n    opacity: { type: \"number\", is: \"uniform\", default: 1 },\n  },\n\n  vertexShader: [\n    \"varying vec2 vUV;\",\n    \"void main(void) {\",\n    \"  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\",\n    \"  vUV = uv;\",\n    \"}\",\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"uniform sampler2D src;\",\n    \"uniform float opacity;\",\n    \"varying vec2 vUV;\",\n    \"void main() {\",\n    \"  vec2 offset = vec2(0, 0);\",\n    \"  vec2 repeat = vec2(1, 1);\",\n    \"  vec4 color = texture2D(src, vec2(vUV.x / repeat.x + offset.x, (1.0 - vUV.y) / repeat.y + offset.y)).bgra;\",\n    \"  gl_FragColor = vec4(color.rgb, opacity);\",\n    \"}\",\n  ].join(\"\\n\"),\n});\n",
    "var registerShader = require(\"../core/shader\").registerShader;\n\n/**\n * Multi-channel signed distance field.\n * Used by text component.\n */\nmodule.exports.Shader = registerShader(\"msdf\", {\n  schema: {\n    alphaTest: { type: \"number\", is: \"uniform\", default: 0.5 },\n    color: { type: \"color\", is: \"uniform\", default: \"white\" },\n    map: { type: \"map\", is: \"uniform\" },\n    negate: { type: \"boolean\", is: \"uniform\", default: true },\n    opacity: { type: \"number\", is: \"uniform\", default: 1.0 },\n  },\n\n  raw: true,\n\n  vertexShader: [\n    \"attribute vec2 uv;\",\n    \"attribute vec3 position;\",\n    \"uniform mat4 projectionMatrix;\",\n    \"uniform mat4 modelViewMatrix;\",\n    \"varying vec2 vUV;\",\n    \"void main(void) {\",\n    \"  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\",\n    \"  vUV = uv;\",\n    \"}\",\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"#ifdef GL_OES_standard_derivatives\",\n    \"#extension GL_OES_standard_derivatives: enable\",\n    \"#endif\",\n\n    \"precision highp float;\",\n    \"uniform bool negate;\",\n    \"uniform float alphaTest;\",\n    \"uniform float opacity;\",\n    \"uniform sampler2D map;\",\n    \"uniform vec3 color;\",\n    \"varying vec2 vUV;\",\n\n    \"float median(float r, float g, float b) {\",\n    \"  return max(min(r, g), min(max(r, g), b));\",\n    \"}\",\n\n    // FIXME: Experimentally determined constants.\n    \"#define BIG_ENOUGH 0.001\",\n    \"#define MODIFIED_ALPHATEST (0.02 * isBigEnough / BIG_ENOUGH)\",\n\n    \"void main() {\",\n    \"  vec3 sample = texture2D(map, vUV).rgb;\",\n    \"  if (negate) { sample = 1.0 - sample; }\",\n\n    \"  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;\",\n    \"  float alpha = clamp(sigDist / fwidth(sigDist) + 0.5, 0.0, 1.0);\",\n    \"  float dscale = 0.353505;\",\n    \"  vec2 duv = dscale * (dFdx(vUV) + dFdy(vUV));\",\n    \"  float isBigEnough = max(abs(duv.x), abs(duv.y));\",\n\n    \"  // Do modified alpha test.\",\n    \"  if (alpha < alphaTest * MODIFIED_ALPHATEST) { discard; return; }\",\n    \"  gl_FragColor = vec4(color.xyz, alpha * opacity);\",\n    \"}\",\n  ].join(\"\\n\"),\n});\n",
    "var registerShader = require(\"../core/shader\").registerShader;\n\n/**\n * Signed distance field.\n * Used by text component.\n */\nmodule.exports.Shader = registerShader(\"sdf\", {\n  schema: {\n    alphaTest: { type: \"number\", is: \"uniform\", default: 0.5 },\n    color: { type: \"color\", is: \"uniform\", default: \"white\" },\n    map: { type: \"map\", is: \"uniform\" },\n    opacity: { type: \"number\", is: \"uniform\", default: 1.0 },\n  },\n\n  raw: true,\n\n  vertexShader: [\n    \"attribute vec2 uv;\",\n    \"attribute vec3 position;\",\n    \"uniform mat4 projectionMatrix;\",\n    \"uniform mat4 modelViewMatrix;\",\n    \"varying vec2 vUV;\",\n    \"void main(void) {\",\n    \"  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\",\n    \"  vUV = uv;\",\n    \"}\",\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"#ifdef GL_OES_standard_derivatives\",\n    \"#extension GL_OES_standard_derivatives: enable\",\n    \"#endif\",\n\n    \"precision highp float;\",\n    \"uniform float alphaTest;\",\n    \"uniform float opacity;\",\n    \"uniform sampler2D map;\",\n    \"uniform vec3 color;\",\n    \"varying vec2 vUV;\",\n\n    \"#ifdef GL_OES_standard_derivatives\",\n    \"  float contour(float width, float value) {\",\n    \"    return smoothstep(0.5 - value, 0.5 + value, width);\",\n    \"  }\",\n    \"#else\",\n    \"  float aastep(float value, float afwidth) {\",\n    \"    return smoothstep(0.5 - afwidth, 0.5 + afwidth, value);\",\n    \"  }\",\n    \"#endif\",\n\n    // FIXME: Experimentally determined constants.\n    \"#define BIG_ENOUGH 0.001\",\n    \"#define MODIFIED_ALPHATEST (0.02 * isBigEnough / BIG_ENOUGH)\",\n    \"#define ALL_SMOOTH 0.4\",\n    \"#define ALL_ROUGH 0.02\",\n    \"#define DISCARD_ALPHA (alphaTest / (2.2 - 1.2 * ratio))\",\n\n    \"void main() {\",\n    // When we have derivatives and can get texel size for supersampling.\n    \"  #ifdef GL_OES_standard_derivatives\",\n    \"    vec2 uv = vUV;\",\n    \"    vec4 texColor = texture2D(map, uv);\",\n    \"    float dist = texColor.a;\",\n    \"    float width = fwidth(dist);\",\n    \"    float alpha = contour(dist, width);\",\n    \"    float dscale = 0.353505;\",\n\n    \"    vec2 duv = dscale * (dFdx(uv) + dFdy(uv));\",\n    \"    float isBigEnough = max(abs(duv.x), abs(duv.y));\",\n\n    // Otherwise do weighted supersampling.\n    // FIXME: why this weighting?\n    \"    if (isBigEnough <= BIG_ENOUGH) {\",\n    \"      vec4 box = vec4 (uv - duv, uv + duv);\",\n    \"      alpha = (alpha + 0.5 * (\",\n    \"        contour(texture2D(map, box.xy).a, width)\",\n    \"        + contour(texture2D(map, box.zw).a, width)\",\n    \"        + contour(texture2D(map, box.xw).a, width)\",\n    \"        + contour(texture2D(map, box.zy).a, width)\",\n    \"      )) / 3.0;\",\n    \"    }\",\n\n    // Do modified alpha test.\n    \"    if (alpha < alphaTest * MODIFIED_ALPHATEST) { discard; return; }\",\n\n    \"  #else\",\n    // When we don't have derivatives, use approximations.\n    \"    vec4 texColor = texture2D(map, vUV);\",\n    \"    float value = texColor.a;\",\n    // FIXME: if we understood font pixel dimensions, this could probably be improved\n    \"    float afwidth = (1.0 / 32.0) * (1.4142135623730951 / (2.0 * gl_FragCoord.w));\",\n    \"    float alpha = aastep(value, afwidth);\",\n\n    // Use gl_FragCoord.w to guess when we should blend.\n    // FIXME: If we understood font pixel dimensions, this could probably be improved.\n    \"    float ratio = (gl_FragCoord.w >= ALL_SMOOTH) ? 1.0 : (gl_FragCoord.w < ALL_ROUGH) ? 0.0 : (gl_FragCoord.w - ALL_ROUGH) / (ALL_SMOOTH - ALL_ROUGH);\",\n    \"    if (alpha < alphaTest) { if (ratio >= 1.0) { discard; return; } alpha = 0.0; }\",\n    \"    alpha = alpha * ratio + (1.0 - ratio) * value;\",\n    \"    if (ratio < 1.0 && alpha <= DISCARD_ALPHA) { discard; return; }\",\n    \"  #endif\",\n\n    \"  gl_FragColor = vec4(color, opacity * alpha);\",\n    \"}\",\n  ].join(\"\\n\"),\n});\n",
    "var registerShader = require(\"../core/shader\").registerShader;\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils/\");\n\nvar CubeLoader = new THREE.CubeTextureLoader();\nvar texturePromises = {};\n\n/**\n * Standard (physically-based) shader using THREE.MeshStandardMaterial.\n */\nmodule.exports.Shader = registerShader(\"standard\", {\n  schema: {\n    ambientOcclusionMap: { type: \"map\" },\n    ambientOcclusionMapIntensity: { default: 1 },\n    ambientOcclusionTextureOffset: { type: \"vec2\" },\n    ambientOcclusionTextureRepeat: { type: \"vec2\", default: { x: 1, y: 1 } },\n\n    color: { type: \"color\" },\n\n    displacementMap: { type: \"map\" },\n    displacementScale: { default: 1 },\n    displacementBias: { default: 0.5 },\n    displacementTextureOffset: { type: \"vec2\" },\n    displacementTextureRepeat: { type: \"vec2\", default: { x: 1, y: 1 } },\n    emissive: { type: \"color\", default: \"#000\" },\n    emissiveIntensity: { default: 1 },\n    envMap: { default: \"\" },\n\n    fog: { default: true },\n    height: { default: 256 },\n\n    metalness: { default: 0.0, min: 0.0, max: 1.0 },\n    metalnessMap: { type: \"map\" },\n    metalnessTextureOffset: { type: \"vec2\" },\n    metalnessTextureRepeat: { type: \"vec2\", default: { x: 1, y: 1 } },\n\n    normalMap: { type: \"map\" },\n    normalScale: { type: \"vec2\", default: { x: 1, y: 1 } },\n    normalTextureOffset: { type: \"vec2\" },\n    normalTextureRepeat: { type: \"vec2\", default: { x: 1, y: 1 } },\n\n    offset: { type: \"vec2\", default: { x: 0, y: 0 } },\n    repeat: { type: \"vec2\", default: { x: 1, y: 1 } },\n\n    roughness: { default: 0.5, min: 0.0, max: 1.0 },\n    roughnessMap: { type: \"map\" },\n    roughnessTextureOffset: { type: \"vec2\" },\n    roughnessTextureRepeat: { type: \"vec2\", default: { x: 1, y: 1 } },\n\n    sphericalEnvMap: { type: \"map\" },\n    src: { type: \"map\" },\n    width: { default: 512 },\n    wireframe: { default: false },\n    wireframeLinewidth: { default: 2 },\n  },\n\n  /**\n   * Initializes the shader.\n   * Adds a reference from the scene to this entity as the camera.\n   */\n  init: function (data) {\n    this.materialData = {\n      color: new THREE.Color(),\n      emissive: new THREE.Color(),\n    };\n    getMaterialData(data, this.materialData);\n    this.material = new THREE.MeshStandardMaterial(this.materialData);\n\n    utils.material.updateMap(this, data);\n    if (data.normalMap) {\n      utils.material.updateDistortionMap(\"normal\", this, data);\n    }\n    if (data.displacementMap) {\n      utils.material.updateDistortionMap(\"displacement\", this, data);\n    }\n    if (data.ambientOcclusionMap) {\n      utils.material.updateDistortionMap(\"ambientOcclusion\", this, data);\n    }\n    if (data.metalnessMap) {\n      utils.material.updateDistortionMap(\"metalness\", this, data);\n    }\n    if (data.roughnessMap) {\n      utils.material.updateDistortionMap(\"roughness\", this, data);\n    }\n    this.updateEnvMap(data);\n  },\n\n  update: function (data) {\n    this.updateMaterial(data);\n    utils.material.updateMap(this, data);\n    if (data.normalMap) {\n      utils.material.updateDistortionMap(\"normal\", this, data);\n    }\n    if (data.displacementMap) {\n      utils.material.updateDistortionMap(\"displacement\", this, data);\n    }\n    if (data.ambientOcclusionMap) {\n      utils.material.updateDistortionMap(\"ambientOcclusion\", this, data);\n    }\n    if (data.metalnessMap) {\n      utils.material.updateDistortionMap(\"metalness\", this, data);\n    }\n    if (data.roughnessMap) {\n      utils.material.updateDistortionMap(\"roughness\", this, data);\n    }\n    this.updateEnvMap(data);\n  },\n\n  /**\n   * Updating existing material.\n   *\n   * @param {object} data - Material component data.\n   * @returns {object} Material.\n   */\n  updateMaterial: function (data) {\n    var key;\n    var material = this.material;\n    getMaterialData(data, this.materialData);\n    for (key in this.materialData) {\n      material[key] = this.materialData[key];\n    }\n  },\n\n  /**\n   * Handle environment cubemap. Textures are cached in texturePromises.\n   */\n  updateEnvMap: function (data) {\n    var self = this;\n    var material = this.material;\n    var envMap = data.envMap;\n    var sphericalEnvMap = data.sphericalEnvMap;\n\n    // No envMap defined or already loading.\n    if ((!envMap && !sphericalEnvMap) || this.isLoadingEnvMap) {\n      material.envMap = null;\n      material.needsUpdate = true;\n      return;\n    }\n    this.isLoadingEnvMap = true;\n\n    // if a spherical env map is defined then use it.\n    if (sphericalEnvMap) {\n      this.el.sceneEl.systems.material.loadTexture(\n        sphericalEnvMap,\n        { src: sphericalEnvMap },\n        function textureLoaded(texture) {\n          self.isLoadingEnvMap = false;\n          texture.mapping = THREE.SphericalReflectionMapping;\n          material.envMap = texture;\n          utils.material.handleTextureEvents(self.el, texture);\n          material.needsUpdate = true;\n        }\n      );\n      return;\n    }\n\n    // Another material is already loading this texture. Wait on promise.\n    if (texturePromises[envMap]) {\n      texturePromises[envMap].then(function (cube) {\n        self.isLoadingEnvMap = false;\n        material.envMap = cube;\n        utils.material.handleTextureEvents(self.el, cube);\n        material.needsUpdate = true;\n      });\n      return;\n    }\n\n    // Material is first to load this texture. Load and resolve texture.\n    texturePromises[envMap] = new Promise(function (resolve) {\n      utils.srcLoader.validateCubemapSrc(envMap, function loadEnvMap(urls) {\n        CubeLoader.load(urls, function (cube) {\n          // Texture loaded.\n          self.isLoadingEnvMap = false;\n          material.envMap = cube;\n          utils.material.handleTextureEvents(self.el, cube);\n          resolve(cube);\n        });\n      });\n    });\n  },\n});\n\n/**\n * Builds and normalize material data, normalizing stuff along the way.\n *\n * @param {object} data - Material data.\n * @param {object} materialData - Object to use.\n * @returns {object} Updated materialData.\n */\nfunction getMaterialData(data, materialData) {\n  materialData.color.set(data.color);\n  materialData.emissive.set(data.emissive);\n  materialData.emissiveIntensity = data.emissiveIntensity;\n  materialData.fog = data.fog;\n  materialData.metalness = data.metalness;\n  materialData.roughness = data.roughness;\n  materialData.wireframe = data.wireframe;\n  materialData.wireframeLinewidth = data.wireframeLinewidth;\n\n  if (data.normalMap) {\n    materialData.normalScale = data.normalScale;\n  }\n\n  if (data.ambientOcclusionMap) {\n    materialData.aoMapIntensity = data.ambientOcclusionMapIntensity;\n  }\n\n  if (data.displacementMap) {\n    materialData.displacementScale = data.displacementScale;\n    materialData.displacementBias = data.displacementBias;\n  }\n\n  return materialData;\n}\n",
    "var css = \"html.a-fullscreen{bottom:0;left:0;position:fixed;right:0;top:0}html.a-fullscreen body{height:100%;margin:0;overflow:hidden;padding:0;width:100%}html.a-fullscreen .a-canvas{width:100%!important;height:100%!important;top:0!important;left:0!important;right:0!important;bottom:0!important;position:fixed!important}html:not(.a-fullscreen) .a-enter-vr{right:5px;bottom:5px}:-webkit-full-screen{background-color:transparent}.a-hidden{display:none!important}.a-canvas{height:100%;left:0;position:absolute;top:0;width:100%}.a-canvas.a-grab-cursor:hover{cursor:grab;cursor:-moz-grab;cursor:-webkit-grab}.a-inspector-loader{background-color:#ed3160;position:fixed;left:3px;top:3px;padding:6px 10px;color:#fff;text-decoration:none;font-size:12px;font-family:Roboto,sans-serif;text-align:center;z-index:99999;width:204px}@keyframes dots-1{from{opacity:0}25%{opacity:1}}@keyframes dots-2{from{opacity:0}50%{opacity:1}}@keyframes dots-3{from{opacity:0}75%{opacity:1}}@-webkit-keyframes dots-1{from{opacity:0}25%{opacity:1}}@-webkit-keyframes dots-2{from{opacity:0}50%{opacity:1}}@-webkit-keyframes dots-3{from{opacity:0}75%{opacity:1}}.a-inspector-loader .dots span{animation:dots-1 2s infinite steps(1);-webkit-animation:dots-1 2s infinite steps(1)}.a-inspector-loader .dots span:first-child+span{animation-name:dots-2;-webkit-animation-name:dots-2}.a-inspector-loader .dots span:first-child+span+span{animation-name:dots-3;-webkit-animation-name:dots-3}a-assets,a-scene audio,a-scene img,a-scene video{display:none}.a-enter-vr-modal,.a-orientation-modal{font-family:Consolas,Andale Mono,Courier New,monospace}.a-enter-vr-modal a{border-bottom:1px solid #fff;padding:2px 0;text-decoration:none;transition:.1s color ease-in}.a-enter-vr-modal a:hover{background-color:#fff;color:#111;padding:2px 4px;position:relative;left:-4px}.a-enter-vr{font-family:sans-serif,monospace;font-size:13px;width:100%;font-weight:200;line-height:16px;position:absolute;right:20px;bottom:20px}.a-enter-vr-button,.a-enter-vr-modal,.a-enter-vr-modal a{color:#fff}.a-enter-vr-button{background:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20245.82%20141.73%22%3E%3Cdefs%3E%3Cstyle%3E.a%7Bfill%3A%23fff%3Bfill-rule%3Aevenodd%3B%7D%3C%2Fstyle%3E%3C%2Fdefs%3E%3Ctitle%3Emask%3C%2Ftitle%3E%3Cpath%20class%3D%22a%22%20d%3D%22M175.56%2C111.37c-22.52%2C0-40.77-18.84-40.77-42.07S153%2C27.24%2C175.56%2C27.24s40.77%2C18.84%2C40.77%2C42.07S198.08%2C111.37%2C175.56%2C111.37ZM26.84%2C69.31c0-23.23%2C18.25-42.07%2C40.77-42.07s40.77%2C18.84%2C40.77%2C42.07-18.26%2C42.07-40.77%2C42.07S26.84%2C92.54%2C26.84%2C69.31ZM27.27%2C0C11.54%2C0%2C0%2C12.34%2C0%2C28.58V110.9c0%2C16.24%2C11.54%2C30.83%2C27.27%2C30.83H99.57c2.17%2C0%2C4.19-1.83%2C5.4-3.7L116.47%2C118a8%2C8%2C0%2C0%2C1%2C12.52-.18l11.51%2C20.34c1.2%2C1.86%2C3.22%2C3.61%2C5.39%2C3.61h72.29c15.74%2C0%2C27.63-14.6%2C27.63-30.83V28.58C245.82%2C12.34%2C233.93%2C0%2C218.19%2C0H27.27Z%22%2F%3E%3C%2Fsvg%3E) 50% 50%/70% 70% no-repeat rgba(0,0,0,.35);border:0;bottom:0;cursor:pointer;min-width:50px;min-height:30px;padding-right:5%;padding-top:4%;position:absolute;right:0;transition:background-color .05s ease;-webkit-transition:background-color .05s ease;z-index:9999}.a-enter-vr-button:active,.a-enter-vr-button:hover{background-color:#666}[data-a-enter-vr-no-webvr] .a-enter-vr-button{border-color:#666;opacity:.65}[data-a-enter-vr-no-webvr] .a-enter-vr-button:active,[data-a-enter-vr-no-webvr] .a-enter-vr-button:hover{background-color:rgba(0,0,0,.35);cursor:not-allowed}.a-enter-vr-modal{background-color:#666;border-radius:0;display:none;min-height:32px;margin-right:70px;padding:9px;width:280px;right:2%;position:absolute}.a-enter-vr-modal:after{border-bottom:10px solid transparent;border-left:10px solid #666;border-top:10px solid transparent;display:inline-block;content:\\\"\\\";position:absolute;right:-5px;top:5px;width:0;height:0}.a-enter-vr-modal a,.a-enter-vr-modal p{display:inline}.a-enter-vr-modal p{margin:0}.a-enter-vr-modal p:after{content:\\\" \\\"}[data-a-enter-vr-no-headset].a-enter-vr:hover .a-enter-vr-modal,[data-a-enter-vr-no-webvr].a-enter-vr:hover .a-enter-vr-modal{display:block}.a-orientation-modal{background:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%20version%3D%221.1%22%20x%3D%220px%22%20y%3D%220px%22%20viewBox%3D%220%200%2090%2090%22%20enable-background%3D%22new%200%200%2090%2090%22%20xml%3Aspace%3D%22preserve%22%3E%3Cpolygon%20points%3D%220%2C0%200%2C0%200%2C0%20%22%3E%3C/polygon%3E%3Cg%3E%3Cpath%20d%3D%22M71.545%2C48.145h-31.98V20.743c0-2.627-2.138-4.765-4.765-4.765H18.456c-2.628%2C0-4.767%2C2.138-4.767%2C4.765v42.789%20%20%20c0%2C2.628%2C2.138%2C4.766%2C4.767%2C4.766h5.535v0.959c0%2C2.628%2C2.138%2C4.765%2C4.766%2C4.765h42.788c2.628%2C0%2C4.766-2.137%2C4.766-4.765V52.914%20%20%20C76.311%2C50.284%2C74.173%2C48.145%2C71.545%2C48.145z%20M18.455%2C16.935h16.344c2.1%2C0%2C3.808%2C1.708%2C3.808%2C3.808v27.401H37.25V22.636%20%20%20c0-0.264-0.215-0.478-0.479-0.478H16.482c-0.264%2C0-0.479%2C0.214-0.479%2C0.478v36.585c0%2C0.264%2C0.215%2C0.478%2C0.479%2C0.478h7.507v7.644%20%20%20h-5.534c-2.101%2C0-3.81-1.709-3.81-3.81V20.743C14.645%2C18.643%2C16.354%2C16.935%2C18.455%2C16.935z%20M16.96%2C23.116h19.331v25.031h-7.535%20%20%20c-2.628%2C0-4.766%2C2.139-4.766%2C4.768v5.828h-7.03V23.116z%20M71.545%2C73.064H28.757c-2.101%2C0-3.81-1.708-3.81-3.808V52.914%20%20%20c0-2.102%2C1.709-3.812%2C3.81-3.812h42.788c2.1%2C0%2C3.809%2C1.71%2C3.809%2C3.812v16.343C75.354%2C71.356%2C73.645%2C73.064%2C71.545%2C73.064z%22%3E%3C/path%3E%3Cpath%20d%3D%22M28.919%2C58.424c-1.466%2C0-2.659%2C1.193-2.659%2C2.66c0%2C1.466%2C1.193%2C2.658%2C2.659%2C2.658c1.468%2C0%2C2.662-1.192%2C2.662-2.658%20%20%20C31.581%2C59.617%2C30.387%2C58.424%2C28.919%2C58.424z%20M28.919%2C62.786c-0.939%2C0-1.703-0.764-1.703-1.702c0-0.939%2C0.764-1.704%2C1.703-1.704%20%20%20c0.94%2C0%2C1.705%2C0.765%2C1.705%2C1.704C30.623%2C62.022%2C29.858%2C62.786%2C28.919%2C62.786z%22%3E%3C/path%3E%3Cpath%20d%3D%22M69.654%2C50.461H33.069c-0.264%2C0-0.479%2C0.215-0.479%2C0.479v20.288c0%2C0.264%2C0.215%2C0.478%2C0.479%2C0.478h36.585%20%20%20c0.263%2C0%2C0.477-0.214%2C0.477-0.478V50.939C70.131%2C50.676%2C69.917%2C50.461%2C69.654%2C50.461z%20M69.174%2C51.417V70.75H33.548V51.417H69.174z%22%3E%3C/path%3E%3Cpath%20d%3D%22M45.201%2C30.296c6.651%2C0%2C12.233%2C5.351%2C12.551%2C11.977l-3.033-2.638c-0.193-0.165-0.507-0.142-0.675%2C0.048%20%20%20c-0.174%2C0.198-0.153%2C0.501%2C0.045%2C0.676l3.883%2C3.375c0.09%2C0.075%2C0.198%2C0.115%2C0.312%2C0.115c0.141%2C0%2C0.273-0.061%2C0.362-0.166%20%20%20l3.371-3.877c0.173-0.2%2C0.151-0.502-0.047-0.675c-0.194-0.166-0.508-0.144-0.676%2C0.048l-2.592%2C2.979%20%20%20c-0.18-3.417-1.629-6.605-4.099-9.001c-2.538-2.461-5.877-3.817-9.404-3.817c-0.264%2C0-0.479%2C0.215-0.479%2C0.479%20%20%20C44.72%2C30.083%2C44.936%2C30.296%2C45.201%2C30.296z%22%3E%3C/path%3E%3C/g%3E%3C/svg%3E) center/50% 50% no-repeat rgba(244,244,244,1);bottom:0;font-size:14px;font-weight:600;left:0;line-height:20px;right:0;position:fixed;top:0;z-index:9999999}.a-orientation-modal:after{color:#666;content:\\\"Insert phone into Cardboard holder.\\\";display:block;position:absolute;text-align:center;top:70%;transform:translateY(-70%);width:100%}.a-orientation-modal button{background:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%20version%3D%221.1%22%20x%3D%220px%22%20y%3D%220px%22%20viewBox%3D%220%200%20100%20100%22%20enable-background%3D%22new%200%200%20100%20100%22%20xml%3Aspace%3D%22preserve%22%3E%3Cpath%20fill%3D%22%23000000%22%20d%3D%22M55.209%2C50l17.803-17.803c1.416-1.416%2C1.416-3.713%2C0-5.129c-1.416-1.417-3.713-1.417-5.129%2C0L50.08%2C44.872%20%20L32.278%2C27.069c-1.416-1.417-3.714-1.417-5.129%2C0c-1.417%2C1.416-1.417%2C3.713%2C0%2C5.129L44.951%2C50L27.149%2C67.803%20%20c-1.417%2C1.416-1.417%2C3.713%2C0%2C5.129c0.708%2C0.708%2C1.636%2C1.062%2C2.564%2C1.062c0.928%2C0%2C1.856-0.354%2C2.564-1.062L50.08%2C55.13l17.803%2C17.802%20%20c0.708%2C0.708%2C1.637%2C1.062%2C2.564%2C1.062s1.856-0.354%2C2.564-1.062c1.416-1.416%2C1.416-3.713%2C0-5.129L55.209%2C50z%22%3E%3C/path%3E%3C/svg%3E) no-repeat;border:none;height:50px;text-indent:-9999px;width:50px}.a-loader-title{background-color:rgba(0,0,0,.6);font-family:sans-serif,monospace;text-align:center;font-size:20px;height:50px;font-weight:300;line-height:50px;position:absolute;right:0;left:0;top:0;color:#fff}\"; (require(\"browserify-css\").createStyle(css, { \"href\": \"src\\\\style\\\\aframe.css\"})); module.exports = css;",
    "var css = \".rs-base{background-color:#333;color:#fafafa;border-radius:0;font:10px monospace;left:5px;line-height:1em;opacity:.85;overflow:hidden;padding:10px;position:fixed;top:5px;width:300px;z-index:10000}.rs-base div.hidden{display:none}.rs-base h1{color:#fff;cursor:pointer;font-size:1.4em;font-weight:300;margin:0 0 5px;padding:0}.rs-group{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-flex-direction:column-reverse;flex-direction:column-reverse;margin-bottom:5px}.rs-group:last-child{margin-bottom:0}.rs-counter-base{align-items:center;display:-webkit-box;display:-webkit-flex;display:flex;height:10px;-webkit-justify-content:space-between;justify-content:space-between;margin:2px 0}.rs-counter-base.alarm{color:#b70000;text-shadow:0 0 0 #b70000,0 0 1px #fff,0 0 1px #fff,0 0 2px #fff,0 0 2px #fff,0 0 3px #fff,0 0 3px #fff,0 0 4px #fff,0 0 4px #fff}.rs-counter-id{font-weight:300;-webkit-box-ordinal-group:0;-webkit-order:0;order:0;width:54px}.rs-counter-value{font-weight:300;-webkit-box-ordinal-group:1;-webkit-order:1;order:1;text-align:right;width:35px}.rs-canvas{-webkit-box-ordinal-group:2;-webkit-order:2;order:2}@media (min-width:480px){.rs-base{left:20px;top:20px}}\"; (require(\"browserify-css\").createStyle(css, { \"href\": \"src\\\\style\\\\rStats.css\"})); module.exports = css;",
    "var constants = require(\"../constants/\");\nvar registerSystem = require(\"../core/system\").registerSystem;\n\nvar DEFAULT_CAMERA_ATTR = \"data-aframe-default-camera\";\n\n/**\n * Camera system. Manages which camera is active among multiple cameras in scene.\n *\n * @member {object} activeCameraEl - Active camera entity.\n */\nmodule.exports.System = registerSystem(\"camera\", {\n  init: function () {\n    this.activeCameraEl = null;\n    this.additiveCameras = [];\n\n    this.render = this.render.bind(this);\n    this.unwrapRender = this.unwrapRender.bind(this);\n    this.wrapRender = this.wrapRender.bind(this);\n\n    this.initialCameraFound = false;\n    this.numUserCameras = 0;\n    this.numUserCamerasChecked = 0;\n    this.setupInitialCamera();\n  },\n\n  /**\n   * Setup initial camera, either searching for camera or\n   * creating a default camera if user has not added one during the initial scene traversal.\n   * We want sceneEl.camera to be ready, set, and initialized before the rest of the scene\n   * loads.\n   *\n   * Default camera offset height is at average eye level (~1.6m).\n   */\n  setupInitialCamera: function () {\n    var cameraEls;\n    var i;\n    var sceneEl = this.sceneEl;\n    var self = this;\n\n    // Camera already defined or the one defined it is an spectator one.\n    if (sceneEl.camera && !sceneEl.camera.el.getAttribute(\"camera\").spectator) {\n      sceneEl.emit(\"cameraready\", { cameraEl: sceneEl.camera.el });\n      return;\n    }\n\n    // Search for initial user-defined camera.\n    cameraEls = sceneEl.querySelectorAll(\"a-camera, [camera]\");\n\n    // No user cameras, create default one.\n    if (!cameraEls.length) {\n      this.createDefaultCamera();\n      return;\n    }\n\n    this.numUserCameras = cameraEls.length;\n    for (i = 0; i < cameraEls.length; i++) {\n      cameraEls[i].addEventListener(\"object3dset\", function (evt) {\n        if (evt.detail.type !== \"camera\") {\n          return;\n        }\n        self.checkUserCamera(this);\n      });\n\n      // Load camera and wait for camera to initialize.\n      if (cameraEls[i].isNode) {\n        cameraEls[i].load();\n      } else {\n        cameraEls[i].addEventListener(\"nodeready\", function () {\n          this.load();\n        });\n      }\n    }\n  },\n\n  /**\n   * Check if a user-defined camera entity is appropriate to be initial camera.\n   * (active + non-spectator).\n   *\n   * Keep track of the number of cameras we checked and whether we found one.\n   */\n  checkUserCamera: function (cameraEl) {\n    var cameraData;\n    var sceneEl = this.el.sceneEl;\n    this.numUserCamerasChecked++;\n\n    // Already found one.\n    if (this.initialCameraFound) {\n      return;\n    }\n\n    // Check if camera is appropriate for being the initial camera.\n    cameraData = cameraEl.getAttribute(\"camera\");\n\n    this.initialCameraFound = true;\n    sceneEl.camera = cameraEl.getObject3D(\"camera\");\n    sceneEl.emit(\"cameraready\", { cameraEl: cameraEl });\n  },\n\n  createDefaultCamera: function () {\n    var defaultCameraEl;\n    var sceneEl = this.sceneEl;\n\n    // Set up default camera.\n    defaultCameraEl = document.createElement(\"a-entity\");\n    defaultCameraEl.setAttribute(\"camera\", { active: true });\n    defaultCameraEl.setAttribute(\"position\", {\n      x: 0,\n      y: constants.DEFAULT_CAMERA_HEIGHT,\n      z: 0,\n    });\n    defaultCameraEl.setAttribute(\"wasd-controls\", \"\");\n    defaultCameraEl.setAttribute(\"look-controls\", \"\");\n    defaultCameraEl.setAttribute(constants.AFRAME_INJECTED, \"\");\n\n    defaultCameraEl.addEventListener(\"object3dset\", function (evt) {\n      if (evt.detail.type !== \"camera\") {\n        return;\n      }\n      sceneEl.camera = evt.detail.object;\n      sceneEl.emit(\"cameraready\", { cameraEl: defaultCameraEl });\n    });\n\n    sceneEl.appendChild(defaultCameraEl);\n    defaultCameraEl.load();\n  },\n\n  /**\n   * Set a different active camera.\n   * When we choose a (sort of) random scene camera as the replacement, set its `active` to\n   * true. The camera component will call `setActiveCamera` and handle passing the torch to\n   * the new camera.\n   */\n  disableActiveCamera: function () {\n    var cameraEls;\n    var newActiveCameraEl;\n    cameraEls = this.sceneEl.querySelectorAll(\"[camera]\");\n    newActiveCameraEl = cameraEls[cameraEls.length - 1];\n    newActiveCameraEl.setAttribute(\"camera\", \"active\", true);\n  },\n\n  /**\n   * Set active camera to be used by renderer.\n   * Removes the default camera (if present).\n   * Disables all other cameras in the scene.\n   *\n   * @param {Element} newCameraEl - Entity with camera component.\n   */\n  setActiveCamera: function (newCameraEl) {\n    var cameraEl;\n    var cameraEls;\n    var i;\n    var newCamera;\n    var previousCamera = this.activeCameraEl;\n    var sceneEl = this.sceneEl;\n\n    // Same camera.\n    newCamera = newCameraEl.getObject3D(\"camera\");\n    if (!newCamera || newCameraEl === this.activeCameraEl) {\n      return;\n    }\n\n    // Grab the default camera.\n    var defaultCameraWrapper = sceneEl.querySelector(\n      \"[\" + DEFAULT_CAMERA_ATTR + \"]\"\n    );\n    var defaultCameraEl =\n      defaultCameraWrapper && defaultCameraWrapper.querySelector(\"[camera]\");\n\n    // Remove default camera if new camera is not the default camera.\n    if (newCameraEl !== defaultCameraEl) {\n      removeDefaultCamera(sceneEl);\n    }\n\n    // Make new camera active.\n    this.activeCameraEl = newCameraEl;\n    this.activeCameraEl.play();\n    sceneEl.camera = newCamera;\n\n    // Disable current camera\n    if (previousCamera) {\n      previousCamera.setAttribute(\"camera\", \"active\", false);\n    }\n\n    // Disable other cameras in the scene\n    cameraEls = sceneEl.querySelectorAll(\"[camera]\");\n    for (i = 0; i < cameraEls.length; i++) {\n      cameraEl = cameraEls[i];\n      if (!cameraEl.isEntity || newCameraEl === cameraEl) {\n        continue;\n      }\n      cameraEl.setAttribute(\"camera\", \"active\", false);\n      cameraEl.pause();\n    }\n    sceneEl.emit(\"camera-set-active\", { cameraEl: newCameraEl });\n  },\n\n  /**\n   * Set spectator camera to render the scene on a 2D display.\n   *\n   * @param {Element} newCameraEl - Entity with camera component.\n   */\n  setSpectatorCamera: function (newCameraEl) {\n    var newCamera;\n    var previousCamera = this.spectatorCameraEl;\n    var sceneEl = this.sceneEl;\n    var spectatorCameraEl;\n\n    // Same camera.\n    newCamera = newCameraEl.getObject3D(\"camera\");\n    if (!newCamera || newCameraEl === this.spectatorCameraEl) {\n      return;\n    }\n\n    // Disable current camera\n    if (previousCamera) {\n      previousCamera.setAttribute(\"camera\", \"spectator\", false);\n    }\n\n    spectatorCameraEl = this.spectatorCameraEl = newCameraEl;\n\n    sceneEl.addEventListener(\"enter-vr\", this.wrapRender);\n    sceneEl.addEventListener(\"exit-vr\", this.unwrapRender);\n\n    spectatorCameraEl.setAttribute(\"camera\", \"active\", false);\n    spectatorCameraEl.play();\n\n    sceneEl.emit(\"camera-set-spectator\", { cameraEl: newCameraEl });\n  },\n\n  /**\n   * Disables current spectator camera.\n   */\n  disableSpectatorCamera: function () {\n    this.spectatorCameraEl = undefined;\n  },\n\n  removeAdditiveCamera: function (newCameraEl) {\n    this.additiveCameras = this.additiveCameras.filter(\n      (el) => el != newCameraEl\n    );\n    this.sceneEl.additiveCameras = this.additiveCameras;\n  },\n\n  addAdditiveCamera: function (newCameraEl) {\n    this.additiveCameras.push(newCameraEl);\n\n    this.sceneEl.additiveCameras = this.additiveCameras;\n  },\n\n  /**\n   * Wrap the render method of the renderer to render\n   * the spectator camera after vrDisplay.submitFrame.\n   */\n  wrapRender: function () {\n    if (!this.spectatorCameraEl) {\n      return;\n    }\n    this.originalRender = this.sceneEl.renderer.render;\n    this.sceneEl.renderer.render = this.render;\n  },\n\n  unwrapRender: function () {\n    if (!this.originalRender) {\n      return;\n    }\n    this.sceneEl.renderer.render = this.originalRender;\n    this.originalRender = undefined;\n  },\n\n  render: function (scene, camera, renderTarget) {\n    var isVREnabled;\n    var sceneEl = this.sceneEl;\n    var spectatorCamera;\n\n    isVREnabled = sceneEl.renderer.vr.enabled;\n    this.originalRender.call(sceneEl.renderer, scene, camera, renderTarget);\n    if (!this.spectatorCameraEl || sceneEl.isMobile || !isVREnabled) {\n      return;\n    }\n    spectatorCamera = this.spectatorCameraEl.components.camera.camera;\n    sceneEl.renderer.vr.enabled = false;\n    this.originalRender.call(sceneEl.renderer, scene, spectatorCamera);\n    sceneEl.renderer.vr.enabled = isVREnabled;\n  },\n});\n\n/**\n * Remove injected default camera from scene, if present.\n *\n * @param {Element} sceneEl\n */\nfunction removeDefaultCamera(sceneEl) {\n  var defaultCamera;\n  var camera = sceneEl.camera;\n  if (!camera) {\n    return;\n  }\n\n  // Remove default camera if present.\n  defaultCamera = sceneEl.querySelector(\"[\" + DEFAULT_CAMERA_ATTR + \"]\");\n  if (!defaultCamera) {\n    return;\n  }\n  sceneEl.removeChild(defaultCamera);\n}\n",
    "var geometries = require(\"../core/geometry\").geometries;\nvar registerSystem = require(\"../core/system\").registerSystem;\nvar THREE = require(\"../lib/three\");\n\n/**\n * System for geometry component.\n * Handle geometry caching.\n *\n * @member {object} cache - Mapping of stringified component data to THREE.Geometry objects.\n * @member {object} cacheCount - Keep track of number of entities using a geometry to\n *         know whether to dispose on removal.\n */\nmodule.exports.System = registerSystem(\"geometry\", {\n  init: function () {\n    this.cache = {};\n    this.cacheCount = {};\n  },\n\n  /**\n   * Reset cache. Mainly for testing.\n   */\n  clearCache: function () {\n    this.cache = {};\n    this.cacheCount = {};\n  },\n\n  /**\n   * Attempt to retrieve from cache.\n   *\n   * @returns {Object|null} A geometry if it exists, else null.\n   */\n  getOrCreateGeometry: function (data) {\n    var cache = this.cache;\n    var cachedGeometry;\n    var hash;\n\n    // Skip all caching logic.\n    if (data.skipCache) {\n      return createGeometry(data);\n    }\n\n    // Try to retrieve from cache first.\n    hash = this.hash(data);\n    cachedGeometry = cache[hash];\n    incrementCacheCount(this.cacheCount, hash);\n\n    if (cachedGeometry) {\n      return cachedGeometry;\n    }\n\n    // Create geometry.\n    cachedGeometry = createGeometry(data);\n\n    // Cache and return geometry.\n    cache[hash] = cachedGeometry;\n    return cachedGeometry;\n  },\n\n  /**\n   * Let system know that an entity is no longer using a geometry.\n   */\n  unuseGeometry: function (data) {\n    var cache = this.cache;\n    var cacheCount = this.cacheCount;\n    var geometry;\n    var hash;\n\n    if (data.skipCache) {\n      return;\n    }\n\n    hash = this.hash(data);\n\n    if (!cache[hash]) {\n      return;\n    }\n\n    decrementCacheCount(cacheCount, hash);\n\n    // Another entity is still using this geometry. No need to do anything.\n    if (cacheCount[hash] > 0) {\n      return;\n    }\n\n    // No more entities are using this geometry. Dispose.\n    geometry = cache[hash];\n    geometry.dispose();\n    delete cache[hash];\n    delete cacheCount[hash];\n  },\n\n  /**\n   * Use JSON.stringify to turn component data into hash.\n   * Should be deterministic within a single browser engine.\n   * If not, then look into json-stable-stringify.\n   */\n  hash: function (data) {\n    return JSON.stringify(data);\n  },\n});\n\n/**\n * Create geometry using component data.\n *\n * @param {object} data - Component data.\n * @returns {object} Geometry.\n */\nfunction createGeometry(data) {\n  var geometryType = data.primitive;\n  var GeometryClass =\n    geometries[geometryType] && geometries[geometryType].Geometry;\n  var geometryInstance = new GeometryClass();\n\n  if (!GeometryClass) {\n    throw new Error(\"Unknown geometry `\" + geometryType + \"`\");\n  }\n\n  geometryInstance.init(data);\n  return toBufferGeometry(geometryInstance.geometry, data.buffer);\n}\n\n/**\n * Decreate count of entity using a geometry.\n */\nfunction decrementCacheCount(cacheCount, hash) {\n  cacheCount[hash]--;\n}\n\n/**\n * Increase count of entity using a geometry.\n */\nfunction incrementCacheCount(cacheCount, hash) {\n  cacheCount[hash] = cacheCount[hash] === undefined ? 1 : cacheCount[hash] + 1;\n}\n\n/**\n * Transform geometry to BufferGeometry if `doBuffer`.\n *\n * @param {object} geometry\n * @param {boolean} doBuffer\n * @returns {object} Geometry.\n */\nfunction toBufferGeometry(geometry, doBuffer) {\n  var bufferGeometry;\n  if (!doBuffer) {\n    return geometry;\n  }\n\n  bufferGeometry = new THREE.BufferGeometry().fromGeometry(geometry);\n  bufferGeometry.metadata = {\n    type: geometry.type,\n    parameters: geometry.parameters || {},\n  };\n  geometry.dispose(); // Dispose no longer needed non-buffer geometry.\n  return bufferGeometry;\n}\n",
    "var registerSystem = require(\"../core/system\").registerSystem;\nvar THREE = require(\"../lib/three\");\n\n/**\n * glTF model system.\n *\n * Configures glTF loading options. Models using glTF compression require that a Draco decoder be\n * provided externally.\n *\n * @param {string} dracoDecoderPath - Base path from which to load Draco decoder library.\n */\nmodule.exports.System = registerSystem(\"gltf-model\", {\n  schema: {\n    dracoDecoderPath: { default: \"\" },\n  },\n\n  init: function () {\n    var path = this.data.dracoDecoderPath;\n    THREE.DRACOLoader.setDecoderPath(path);\n    this.dracoLoader = path ? new THREE.DRACOLoader() : null;\n  },\n\n  getDRACOLoader: function () {\n    return this.dracoLoader;\n  },\n});\n",
    "require(\"./camera\");\nrequire(\"./geometry\");\nrequire(\"./gltf-model\");\nrequire(\"./light\");\nrequire(\"./material\");\nrequire(\"./shadow\");\n",
    "var registerSystem = require(\"../core/system\").registerSystem;\nvar bind = require(\"../utils/bind\");\nvar constants = require(\"../constants/\");\n\nvar DEFAULT_LIGHT_ATTR = \"data-aframe-default-light\";\n\n/**\n * Light system.\n *\n * Prescribes default lighting if not specified (one ambient, one directional).\n * Removes default lighting from the scene when a new light is added.\n *\n * @param {bool} defaultLights - Whether default lighting are defined.\n * @param {bool} userDefinedLights - Whether user lighting is defined.\n */\nmodule.exports.System = registerSystem(\"light\", {\n  schema: {\n    defaultLightsEnabled: { default: true },\n  },\n\n  init: function () {\n    this.defaultLights = false;\n    this.userDefinedLights = false;\n    // Wait for all entities to fully load before checking for existence of lights.\n    // Since entities wait for <a-assets> to load, any lights attaching to the scene\n    // will do so asynchronously.\n    this.sceneEl.addEventListener(\n      \"loaded\",\n      bind(this.setupDefaultLights, this)\n    );\n  },\n\n  /**\n   * Notify scene that light has been added and to remove the default.\n   *\n   * @param {object} el - element holding the light component.\n   */\n  registerLight: function (el) {\n    if (!el.hasAttribute(DEFAULT_LIGHT_ATTR)) {\n      // User added a light, remove default lights through DOM.\n      this.removeDefaultLights();\n      this.userDefinedLights = true;\n    }\n  },\n\n  removeDefaultLights: function () {\n    var defaultLights;\n    var sceneEl = this.sceneEl;\n\n    if (!this.defaultLights) {\n      return;\n    }\n    defaultLights = document.querySelectorAll(\"[\" + DEFAULT_LIGHT_ATTR + \"]\");\n    for (var i = 0; i < defaultLights.length; i++) {\n      sceneEl.removeChild(defaultLights[i]);\n    }\n    this.defaultLights = false;\n  },\n\n  /**\n   * Prescibe default lights to the scene.\n   * Does so by injecting markup such that this state is not invisible.\n   * These lights are removed if the user adds any lights.\n   */\n  setupDefaultLights: function () {\n    var sceneEl = this.sceneEl;\n    var ambientLight;\n    var directionalLight;\n\n    if (\n      this.userDefinedLights ||\n      this.defaultLights ||\n      !this.data.defaultLightsEnabled\n    ) {\n      return;\n    }\n\n    ambientLight = document.createElement(\"a-entity\");\n    ambientLight.setAttribute(\"light\", { color: \"#BBB\", type: \"ambient\" });\n    ambientLight.setAttribute(DEFAULT_LIGHT_ATTR, \"\");\n    ambientLight.setAttribute(constants.AFRAME_INJECTED, \"\");\n    sceneEl.appendChild(ambientLight);\n\n    directionalLight = document.createElement(\"a-entity\");\n    directionalLight.setAttribute(\"light\", {\n      color: \"#FFF\",\n      intensity: 0.6,\n      castShadow: true,\n    });\n    directionalLight.setAttribute(\"position\", { x: -0.5, y: 1, z: 1 });\n    directionalLight.setAttribute(DEFAULT_LIGHT_ATTR, \"\");\n    directionalLight.setAttribute(constants.AFRAME_INJECTED, \"\");\n    sceneEl.appendChild(directionalLight);\n\n    this.defaultLights = true;\n  },\n});\n",
    "var registerSystem = require(\"../core/system\").registerSystem;\nvar THREE = require(\"../lib/three\");\nvar utils = require(\"../utils/\");\nvar isHLS = require(\"../utils/material\").isHLS;\n\nvar bind = utils.bind;\nvar debug = utils.debug;\nvar error = debug(\"components:texture:error\");\nvar TextureLoader = new THREE.TextureLoader();\nvar warn = debug(\"components:texture:warn\");\n\nTextureLoader.setCrossOrigin(\"anonymous\");\n\n/**\n * System for material component.\n * Handle material registration, updates (for fog), and texture caching.\n *\n * @member {object} materials - Registered materials.\n * @member {object} textureCounts - Number of times each texture is used. Tracked\n *         separately from textureCache, because the cache (1) is populated in\n *         multiple places, and (2) may be cleared at any time.\n * @member {object} textureCache - Texture cache for:\n *   - Images: textureCache has mapping of src -> repeat -> cached three.js texture.\n *   - Videos: textureCache has mapping of videoElement -> cached three.js texture.\n */\nmodule.exports.System = registerSystem(\"material\", {\n  init: function () {\n    this.materials = {};\n    this.textureCounts = {};\n    this.textureCache = {};\n\n    this.sceneEl.addEventListener(\n      \"materialtextureloaded\",\n      bind(this.onMaterialTextureLoaded, this)\n    );\n  },\n\n  clearTextureCache: function () {\n    this.textureCache = {};\n  },\n\n  /**\n   * Determine whether `src` is a image or video. Then try to load the asset, then call back.\n   *\n   * @param {string, or element} src - Texture URL or element.\n   * @param {string} data - Relevant texture data used for caching.\n   * @param {function} cb - Callback to pass texture to.\n   */\n  loadTexture: function (src, data, cb) {\n    var self = this;\n\n    // Canvas.\n    if (src.tagName === \"CANVAS\") {\n      this.loadCanvas(src, data, cb);\n      return;\n    }\n\n    // Video element.\n    if (src.tagName === \"VIDEO\") {\n      if (!src.src && !src.srcObject && !src.childElementCount) {\n        warn(\n          \"Video element was defined with neither `source` elements nor `src` / `srcObject` attributes.\"\n        );\n      }\n      this.loadVideo(src, data, cb);\n      return;\n    }\n\n    utils.srcLoader.validateSrc(src, loadImageCb, loadVideoCb);\n    function loadImageCb(src) {\n      self.loadImage(src, data, cb);\n    }\n    function loadVideoCb(src) {\n      self.loadVideo(src, data, cb);\n    }\n  },\n\n  /**\n   * High-level function for loading image textures (THREE.Texture).\n   *\n   * @param {Element|string} src - Texture source.\n   * @param {object} data - Texture data.\n   * @param {function} cb - Callback to pass texture to.\n   */\n  loadImage: function (src, data, handleImageTextureLoaded) {\n    var hash = this.hash(data);\n    var textureCache = this.textureCache;\n\n    // Texture already being loaded or already loaded. Wait on promise.\n    if (textureCache[hash]) {\n      textureCache[hash].then(handleImageTextureLoaded);\n      return;\n    }\n\n    // Texture not yet being loaded. Start loading it.\n    textureCache[hash] = loadImageTexture(src, data);\n    textureCache[hash].then(handleImageTextureLoaded);\n  },\n\n  /**\n   * High-level function for loading canvas textures (THREE.Texture).\n   *\n   * @param {Element|string} src - Texture source.\n   * @param {object} data - Texture data.\n   * @param {function} cb - Callback to pass texture to.\n   */\n  loadCanvas: function (src, data, cb) {\n    var texture;\n    texture = new THREE.CanvasTexture(src);\n    setTextureProperties(texture, data);\n    cb(texture);\n  },\n\n  /**\n   * Load video texture (THREE.VideoTexture).\n   * Which is just an image texture that RAFs + needsUpdate.\n   * Note that creating a video texture is synchronous unlike loading an image texture.\n   * Made asynchronous to be consistent with image textures.\n   *\n   * @param {Element|string} src - Texture source.\n   * @param {object} data - Texture data.\n   * @param {function} cb - Callback to pass texture to.\n   */\n  loadVideo: function (src, data, cb) {\n    var hash;\n    var texture;\n    var textureCache = this.textureCache;\n    var videoEl;\n    var videoTextureResult;\n\n    function handleVideoTextureLoaded(result) {\n      result.texture.needsUpdate = true;\n      cb(result.texture, result.videoEl);\n    }\n\n    // Video element provided.\n    if (typeof src !== \"string\") {\n      // Check cache before creating texture.\n      videoEl = src;\n      hash = this.hashVideo(data, videoEl);\n      if (textureCache[hash]) {\n        textureCache[hash].then(handleVideoTextureLoaded);\n        return;\n      }\n      // If not in cache, fix up the attributes then start to create the texture.\n      fixVideoAttributes(videoEl);\n    }\n\n    // Only URL provided. Use video element to create texture.\n    videoEl = videoEl || createVideoEl(src, data.width, data.height);\n\n    // Generated video element already cached. Use that.\n    hash = this.hashVideo(data, videoEl);\n    if (textureCache[hash]) {\n      textureCache[hash].then(handleVideoTextureLoaded);\n      return;\n    }\n\n    // Create new video texture.\n    texture = new THREE.VideoTexture(videoEl);\n    texture.minFilter = THREE.LinearFilter;\n    setTextureProperties(texture, data);\n\n    // If iOS and video is HLS, do some hacks.\n    if (\n      this.sceneEl.isIOS &&\n      isHLS(\n        videoEl.src || videoEl.getAttribute(\"src\"),\n        videoEl.type || videoEl.getAttribute(\"type\")\n      )\n    ) {\n      // Actually BGRA. Tell shader to correct later.\n      texture.format = THREE.RGBAFormat;\n      texture.needsCorrectionBGRA = true;\n      // Apparently needed for HLS. Tell shader to correct later.\n      texture.flipY = false;\n      texture.needsCorrectionFlipY = true;\n    }\n\n    // Cache as promise to be consistent with image texture caching.\n    videoTextureResult = { texture: texture, videoEl: videoEl };\n    textureCache[hash] = Promise.resolve(videoTextureResult);\n    handleVideoTextureLoaded(videoTextureResult);\n  },\n\n  /**\n   * Create a hash of the material properties for texture cache key.\n   */\n  hash: function (data) {\n    if (data.src.tagName) {\n      // Since `data.src` can be an element, parse out the string if necessary for the hash.\n      data = utils.extendDeep({}, data);\n      data.src = data.src.src;\n    }\n    return JSON.stringify(data);\n  },\n\n  hashVideo: function (data, videoEl) {\n    return calculateVideoCacheHash(data, videoEl);\n  },\n\n  /**\n   * Keep track of material in case an update trigger is needed (e.g., fog).\n   *\n   * @param {object} material\n   */\n  registerMaterial: function (material) {\n    this.materials[material.uuid] = material;\n  },\n\n  /**\n   * Stop tracking material, and dispose of any textures not being used by\n   * another material component.\n   *\n   * @param {object} material\n   */\n  unregisterMaterial: function (material) {\n    delete this.materials[material.uuid];\n\n    // If any textures on this material are no longer in use, dispose of them.\n    var textureCounts = this.textureCounts;\n    Object.keys(material)\n      .filter(function (propName) {\n        return material[propName] && material[propName].isTexture;\n      })\n      .forEach(function (mapName) {\n        textureCounts[material[mapName].uuid]--;\n        if (textureCounts[material[mapName].uuid] <= 0) {\n          material[mapName].dispose();\n        }\n      });\n  },\n\n  /**\n   * Trigger update to all registered materials.\n   */\n  updateMaterials: function (material) {\n    var materials = this.materials;\n    Object.keys(materials).forEach(function (uuid) {\n      materials[uuid].needsUpdate = true;\n    });\n  },\n\n  /**\n   * Track textures used by material components, so that they can be safely\n   * disposed when no longer in use. Textures must be registered here, and not\n   * through registerMaterial(), because textures may not be attached at the\n   * time the material is registered.\n   *\n   * @param {Event} e\n   */\n  onMaterialTextureLoaded: function (e) {\n    if (!this.textureCounts[e.detail.texture.uuid]) {\n      this.textureCounts[e.detail.texture.uuid] = 0;\n    }\n    this.textureCounts[e.detail.texture.uuid]++;\n  },\n});\n\n/**\n * Calculates consistent hash from a video element using its attributes.\n * If the video element has an ID, use that.\n * Else build a hash that looks like `src:myvideo.mp4;height:200;width:400;`.\n *\n * @param data {object} - Texture data such as repeat.\n * @param videoEl {Element} - Video element.\n * @returns {string}\n */\nfunction calculateVideoCacheHash(data, videoEl) {\n  var i;\n  var id = videoEl.getAttribute(\"id\");\n  var hash;\n  var videoAttributes;\n\n  if (id) {\n    return id;\n  }\n\n  // Calculate hash using sorted video attributes.\n  hash = \"\";\n  videoAttributes = data || {};\n  for (i = 0; i < videoEl.attributes.length; i++) {\n    videoAttributes[videoEl.attributes[i].name] = videoEl.attributes[i].value;\n  }\n  Object.keys(videoAttributes)\n    .sort()\n    .forEach(function (name) {\n      hash += name + \":\" + videoAttributes[name] + \";\";\n    });\n\n  return hash;\n}\n\n/**\n * Load image texture.\n *\n * @private\n * @param {string|object} src - An <img> element or url to an image file.\n * @param {object} data - Data to set texture properties like `repeat`.\n * @returns {Promise} Resolves once texture is loaded.\n */\nfunction loadImageTexture(src, data) {\n  return new Promise(doLoadImageTexture);\n\n  function doLoadImageTexture(resolve, reject) {\n    var isEl = typeof src !== \"string\";\n\n    function resolveTexture(texture) {\n      setTextureProperties(texture, data);\n      texture.needsUpdate = true;\n      resolve(texture);\n    }\n\n    // Create texture from an element.\n    if (isEl) {\n      resolveTexture(new THREE.Texture(src));\n      return;\n    }\n\n    // Request and load texture from src string. THREE will create underlying element.\n    // Use THREE.TextureLoader (src, onLoad, onProgress, onError) to load texture.\n    TextureLoader.load(\n      src,\n      resolveTexture,\n      function () {\n        /* no-op */\n      },\n      function (xhr) {\n        error(\n          \"`$s` could not be fetched (Error code: %s; Response: %s)\",\n          xhr.status,\n          xhr.statusText\n        );\n      }\n    );\n  }\n}\n\n/**\n * Set texture properties such as repeat and offset.\n *\n * @param {object} data - With keys like `repeat`.\n */\nfunction setTextureProperties(texture, data) {\n  var offset = data.offset || { x: 0, y: 0 };\n  var repeat = data.repeat || { x: 1, y: 1 };\n  var npot = data.npot || false;\n\n  // To support NPOT textures, wrap must be ClampToEdge (not Repeat),\n  // and filters must not use mipmaps (i.e. Nearest or Linear).\n  if (npot) {\n    texture.wrapS = THREE.ClampToEdgeWrapping;\n    texture.wrapT = THREE.ClampToEdgeWrapping;\n    texture.magFilter = THREE.LinearFilter;\n    texture.minFilter = THREE.LinearFilter;\n  }\n\n  // Don't bother setting repeat if it is 1/1. Power-of-two is required to repeat.\n  if (repeat.x !== 1 || repeat.y !== 1) {\n    texture.wrapS = THREE.RepeatWrapping;\n    texture.wrapT = THREE.RepeatWrapping;\n    texture.repeat.set(repeat.x, repeat.y);\n  }\n  // Don't bother setting offset if it is 0/0.\n  if (offset.x !== 0 || offset.y !== 0) {\n    texture.offset.set(offset.x, offset.y);\n  }\n}\n\n/**\n * Create video element to be used as a texture.\n *\n * @param {string} src - Url to a video file.\n * @param {number} width - Width of the video.\n * @param {number} height - Height of the video.\n * @returns {Element} Video element.\n */\nfunction createVideoEl(src, width, height) {\n  var videoEl = document.createElement(\"video\");\n  videoEl.width = width;\n  videoEl.height = height;\n  // Support inline videos for iOS webviews.\n  videoEl.setAttribute(\"playsinline\", \"\");\n  videoEl.setAttribute(\"webkit-playsinline\", \"\");\n  videoEl.autoplay = true;\n  videoEl.loop = true;\n  videoEl.crossOrigin = \"anonymous\";\n  videoEl.addEventListener(\n    \"error\",\n    function () {\n      warn(\"`$s` is not a valid video\", src);\n    },\n    true\n  );\n  videoEl.src = src;\n  return videoEl;\n}\n\n/**\n * Fixes a video element's attributes to prevent developers from accidentally passing the\n * wrong attribute values to commonly misused video attributes.\n *\n * <video> does not treat `autoplay`, `controls`, `crossorigin`, `loop`, and `preload` as\n * as booleans. Existence of those attributes will mean truthy.\n *\n * For example, translates <video loop=\"false\"> to <video>.\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/video#Attributes\n * @param {Element} videoEl - Video element.\n * @returns {Element} Video element with the correct properties updated.\n */\nfunction fixVideoAttributes(videoEl) {\n  videoEl.autoplay =\n    videoEl.hasAttribute(\"autoplay\") &&\n    videoEl.getAttribute(\"autoplay\") !== \"false\";\n  videoEl.controls =\n    videoEl.hasAttribute(\"controls\") &&\n    videoEl.getAttribute(\"controls\") !== \"false\";\n  if (videoEl.getAttribute(\"loop\") === \"false\") {\n    videoEl.removeAttribute(\"loop\");\n  }\n  if (videoEl.getAttribute(\"preload\") === \"false\") {\n    videoEl.preload = \"none\";\n  }\n  videoEl.crossOrigin = videoEl.crossOrigin || \"anonymous\";\n  // To support inline videos in iOS webviews.\n  videoEl.setAttribute(\"playsinline\", \"\");\n  videoEl.setAttribute(\"webkit-playsinline\", \"\");\n  return videoEl;\n}\n",
    "var registerSystem = require(\"../core/system\").registerSystem;\nvar THREE = require(\"../lib/three\");\n\nvar SHADOW_MAP_TYPE_MAP = {\n  basic: THREE.BasicShadowMap,\n  pcf: THREE.PCFShadowMap,\n  pcfsoft: THREE.PCFSoftShadowMap,\n};\n\n/**\n * Shadow system.\n *\n * Enabled automatically when one or more shadow components are added to the scene, the system sets\n * options on the WebGLRenderer for configuring shadow appearance.\n */\nmodule.exports.System = registerSystem(\"shadow\", {\n  schema: {\n    autoUpdate: { default: true },\n    type: { default: \"pcf\", oneOf: [\"basic\", \"pcf\", \"pcfsoft\"] },\n  },\n\n  init: function () {\n    var sceneEl = this.sceneEl;\n    var data = this.data;\n\n    this.shadowMapEnabled = false;\n\n    if (!sceneEl.renderer) {\n      return;\n    } // For tests.\n\n    sceneEl.renderer.shadowMap.type = SHADOW_MAP_TYPE_MAP[data.type];\n    sceneEl.renderer.shadowMap.autoUpdate = data.autoUpdate;\n    this.setShadowMapEnabled(this.shadowMapEnabled);\n  },\n\n  /**\n   * Enables/disables the renderer shadow map.\n   * @param {boolean} enabled\n   */\n  setShadowMapEnabled: function (enabled) {\n    var renderer = this.sceneEl.renderer;\n    this.shadowMapEnabled = enabled;\n    if (renderer) {\n      renderer.shadowMap.enabled = enabled;\n    }\n  },\n});\n",
    "/**\n * Faster version of Function.prototype.bind\n * @param {Function} fn - Function to wrap.\n * @param {Object} ctx - What to bind as context.\n * @param {...*} arguments - Arguments to pass through.\n */\nmodule.exports = function bind(fn, ctx /* , arg1, arg2 */) {\n  return (function (prependedArgs) {\n    return function bound() {\n      // Concat the bound function arguments with those passed to original bind\n      var args = prependedArgs.concat(Array.prototype.slice.call(arguments, 0));\n      return fn.apply(ctx, args);\n    };\n  })(Array.prototype.slice.call(arguments, 2));\n};\n",
    "/* global THREE */\nvar debug = require(\"./debug\");\nvar extend = require(\"object-assign\");\n\nvar warn = debug(\"utils:coordinates:warn\");\n\n// Order of coordinates parsed by coordinates.parse.\nvar COORDINATE_KEYS = [\"x\", \"y\", \"z\", \"w\"];\n\n// Coordinate string regex. Handles negative, positive, and decimals.\nvar regex =\n  /^\\s*((-?\\d*\\.{0,1}\\d+(e-?\\d+)?)\\s+){2,3}(-?\\d*\\.{0,1}\\d+(e-?\\d+)?)\\s*$/;\nmodule.exports.regex = regex;\n\n/**\n * Parses coordinates from an \"x y z\" string.\n * Example: \"3 10 -5\" to {x: 3, y: 10, z: -5}.\n *\n * @param {string} val - An \"x y z\" string.\n * @param {string} defaults - fallback value.\n * @returns {object} An object with keys [x, y, z].\n */\nfunction parse(value, defaultVec) {\n  var coordinate;\n  var vec;\n\n  if (value && value instanceof Object) {\n    var x = value.x === undefined ? defaultVec && defaultVec.x : value.x;\n    var y = value.y === undefined ? defaultVec && defaultVec.y : value.y;\n    var z = value.z === undefined ? defaultVec && defaultVec.z : value.z;\n    var w = value.w === undefined ? defaultVec && defaultVec.w : value.w;\n    if (x !== undefined) value.x = parseIfString(x);\n    if (y !== undefined) value.y = parseIfString(y);\n    if (z !== undefined) value.z = parseIfString(z);\n    if (w !== undefined) value.w = parseIfString(w);\n    return value;\n  }\n\n  if (value === null || value === undefined) {\n    return typeof defaultVec === \"object\" ? extend({}, defaultVec) : defaultVec;\n  }\n\n  coordinate = value.trim().split(/\\s+/g);\n\n  vec = {};\n  COORDINATE_KEYS.forEach(function (key, i) {\n    if (coordinate[i]) {\n      vec[key] = parseFloat(coordinate[i], 10);\n    } else {\n      var defaultVal = defaultVec && defaultVec[key];\n      if (defaultVal === undefined) {\n        return;\n      }\n      vec[key] = parseIfString(defaultVal);\n    }\n  });\n  return vec;\n}\nmodule.exports.parse = parse;\n\n/**\n * Stringify coordinates from an object with keys [x y z].\n * Example: {x: 3, y: 10, z: -5} to \"3 10 -5\".\n *\n * @param {object|string} data - An object with keys [x y z].\n * @returns {string} An \"x y z\" string.\n */\nfunction stringify(data) {\n  if (typeof data !== \"object\") {\n    return data;\n  }\n  return [data.x, data.y, data.z, data.w].join(\" \").trim();\n}\nmodule.exports.stringify = stringify;\n\n/**\n * @returns {bool}\n */\nfunction isCoordinates(value) {\n  return regex.test(value);\n}\nmodule.exports.isCoordinates = isCoordinates;\n\nmodule.exports.isCoordinate = function (value) {\n  warn(\n    \"`AFRAME.utils.isCoordinate` has been renamed to `AFRAME.utils.isCoordinates`\"\n  );\n  return isCoordinates(value);\n};\n\nfunction parseIfString(val) {\n  if (val.constructor === String) {\n    return parseFloat(val, 10);\n  }\n  return val;\n}\n\n/**\n * Convert {x, y, z} object to three.js Vector3.\n */\nmodule.exports.toVector3 = function (vec3) {\n  return new THREE.Vector3(vec3.x, vec3.y, vec3.z);\n};\n",
    "var debugLib = require(\"debug\");\nvar extend = require(\"object-assign\");\n\nvar settings = {\n  colors: {\n    debug: \"gray\",\n    error: \"red\",\n    info: \"gray\",\n    warn: \"orange\",\n  },\n};\n\n/**\n * Monkeypatches `debug` so we can colorize error/warning messages.\n *\n * (See issue: https://github.com/visionmedia/debug/issues/137)\n */\nvar debug = function (namespace) {\n  var d = debugLib(namespace);\n\n  d.color = getDebugNamespaceColor(namespace);\n\n  return d;\n};\nextend(debug, debugLib);\n\n/**\n * Returns the type of the namespace (e.g., `error`, `warn`).\n *\n * @param {String} namespace\n *   The debug logger's namespace (e.g., `components:geometry:warn`).\n * @returns {String} The type of the namespace (e.g., `warn`).\n * @api private\n */\nfunction getDebugNamespaceType(namespace) {\n  var chunks = namespace.split(\":\");\n\n  return chunks[chunks.length - 1]; // Return the last one\n}\n\n/**\n * Returns the color of the namespace (e.g., `orange`).\n *\n * @param {String} namespace\n *   The debug logger's namespace (e.g., `components:geometry:warn`).\n * @returns {String} The color of the namespace (e.g., `orange`).\n * @api private\n */\nfunction getDebugNamespaceColor(namespace) {\n  var type = getDebugNamespaceType(namespace);\n\n  var color = settings.colors && settings.colors[type];\n\n  return color || null;\n}\n\n/**\n * Returns `localStorage` if possible.\n *\n * This is necessary because Safari throws when a user disables\n * cookies or `localStorage` and you attempt to access it.\n *\n * @returns {localStorage}\n * @api private\n */\nfunction storage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n/**\n * To enable console logging, type this in the Console of your Dev Tools:\n *\n *   localStorage.logs = 1\n *\n * To disable console logging:\n *\n *   localStorage.logs = 0\n *\n */\nvar ls = storage();\nif (ls && (parseInt(ls.logs, 10) || ls.logs === \"true\")) {\n  debug.enable(\"*\");\n} else {\n  debug.enable(\"*:error,*:info,*:warn\");\n}\n\nif (process.browser) {\n  window.logs = debug;\n}\n\nmodule.exports = debug;\n",
    "var vrDisplay;\n\nif (navigator.getVRDisplays) {\n  navigator.getVRDisplays().then(function (displays) {\n    vrDisplay = displays.length && displays[0];\n  });\n}\n\nfunction getVRDisplay() {\n  return vrDisplay;\n}\nmodule.exports.getVRDisplay = getVRDisplay;\n\n/**\n * Determine if a headset is connected by checking if a vrDisplay is available.\n */\nfunction checkHeadsetConnected() {\n  return !!getVRDisplay();\n}\nmodule.exports.checkHeadsetConnected = checkHeadsetConnected;\n\n/**\n * Checks if browser is mobile.\n * @return {Boolean} True if mobile browser detected.\n */\nvar isMobile = (function () {\n  var _isMobile = false;\n  (function (a) {\n    // eslint-disable-next-line no-useless-escape\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    ) {\n      _isMobile = true;\n    }\n    if (isIOS() || isTablet() || isR7()) {\n      _isMobile = true;\n    }\n  })(window.navigator.userAgent || window.navigator.vendor || window.opera);\n\n  return function () {\n    return _isMobile;\n  };\n})();\nmodule.exports.isMobile = isMobile;\n\n/**\n *  Detect tablet devices.\n *  @param {string} mockUserAgent - Allow passing a mock user agent for testing.\n */\nfunction isTablet(mockUserAgent) {\n  var userAgent = mockUserAgent || window.navigator.userAgent;\n  return /ipad|Nexus (7|9)|xoom|sch-i800|playbook|tablet|kindle/i.test(\n    userAgent\n  );\n}\nmodule.exports.isTablet = isTablet;\n\nfunction isIOS() {\n  return /iPad|iPhone|iPod/.test(window.navigator.platform);\n}\nmodule.exports.isIOS = isIOS;\n\nfunction isGearVR() {\n  return /SamsungBrowser.+Mobile VR/i.test(window.navigator.userAgent);\n}\nmodule.exports.isGearVR = isGearVR;\n\n/**\n *  Detect Oculus Go device\n */\nfunction isOculusGo() {\n  return /Pacific Build.+OculusBrowser.+SamsungBrowser.+Mobile VR/i.test(\n    window.navigator.userAgent\n  );\n}\nmodule.exports.isOculusGo = isOculusGo;\n\nfunction isR7() {\n  return /R7 Build/.test(window.navigator.userAgent);\n}\nmodule.exports.isR7 = isR7;\n\n/**\n * Checks mobile device orientation.\n * @return {Boolean} True if landscape orientation.\n */\nmodule.exports.isLandscape = function () {\n  var orientation = window.orientation;\n  if (isR7()) {\n    orientation += 90;\n  }\n  return orientation === 90 || orientation === -90;\n};\n\n/**\n * Check if device is iOS and older than version 10.\n */\nmodule.exports.isIOSOlderThan10 = function (userAgent) {\n  return /(iphone|ipod|ipad).*os.(7_|8_|9_)/i.test(userAgent);\n};\n\n/**\n * Check if running in a browser or spoofed browser (bundler).\n * We need to check a node api that isn't mocked on either side.\n * `require` and `module.exports` are mocked in browser by bundlers.\n * `window` is mocked in node.\n * `process` is also mocked by browserify, but has custom properties.\n */\nmodule.exports.isBrowserEnvironment = !!(!process || process.browser);\n\n/**\n * Check if running in node on the server.\n */\nmodule.exports.isNodeEnvironment = !module.exports.isBrowserEnvironment;\n",
    "/**\n * Split a delimited component property string (e.g., `material.color`) to an object\n * containing `component` name and `property` name. If there is no delimiter, just return the\n * string back.\n *\n * Cache arrays from splitting strings via delimiter to save on memory.\n *\n * @param {string} str - e.g., `material.opacity`.\n * @param {string} delimiter - e.g., `.`.\n * @returns {array} e.g., `['material', 'opacity']`.\n */\nvar propertyPathCache = {};\nfunction getComponentPropertyPath(str, delimiter) {\n  delimiter = delimiter || \".\";\n  if (!propertyPathCache[delimiter]) {\n    propertyPathCache[delimiter] = {};\n  }\n  if (str.indexOf(delimiter) !== -1) {\n    propertyPathCache[delimiter][str] = str.split(delimiter);\n  } else {\n    propertyPathCache[delimiter][str] = str;\n  }\n  return propertyPathCache[delimiter][str];\n}\nmodule.exports.getComponentPropertyPath = getComponentPropertyPath;\nmodule.exports.propertyPathCache = propertyPathCache;\n\n/**\n * Get component property using encoded component name + component property name with a\n * delimiter.\n */\nmodule.exports.getComponentProperty = function (el, name, delimiter) {\n  var splitName;\n  delimiter = delimiter || \".\";\n  if (name.indexOf(delimiter) !== -1) {\n    splitName = getComponentPropertyPath(name, delimiter);\n    if (splitName.constructor === String) {\n      return el.getAttribute(splitName);\n    }\n    return el.getAttribute(splitName[0])[splitName[1]];\n  }\n  return el.getAttribute(name);\n};\n\n/**\n * Set component property using encoded component name + component property name with a\n * delimiter.\n */\nmodule.exports.setComponentProperty = function (el, name, value, delimiter) {\n  var splitName;\n  delimiter = delimiter || \".\";\n  if (name.indexOf(delimiter) !== -1) {\n    splitName = getComponentPropertyPath(name, delimiter);\n    if (splitName.constructor === String) {\n      el.setAttribute(splitName, value);\n    } else {\n      el.setAttribute(splitName[0], splitName[1], value);\n    }\n    return;\n  }\n  el.setAttribute(name, value);\n};\n",
    "module.exports = function forceCanvasResizeSafariMobile(canvasEl) {\n  var width = canvasEl.style.width;\n  var height = canvasEl.style.height;\n  // Taken from webvr-polyfill (https://github.com/borismus/webvr-polyfill/blob/85f657cd502ec9417bf26b87c3cb2afa6a70e079/src/util.js#L200)\n  // iOS only workaround for https://bugs.webkit.org/show_bug.cgi?id=152556\n  // By changing the size 1 pixel and restoring the previous value\n  // we trigger a size recalculation cycle.\n  canvasEl.style.width = parseInt(width, 10) + 1 + \"px\";\n  canvasEl.style.height = parseInt(height, 10) + 1 + \"px\";\n  setTimeout(function () {\n    canvasEl.style.width = width;\n    canvasEl.style.height = height;\n  }, 200);\n};\n",
    "/* global location */\n\n/* Centralized place to reference utilities since utils is exposed to the user. */\nvar debug = require(\"./debug\");\nvar deepAssign = require(\"deep-assign\");\nvar device = require(\"./device\");\nvar objectAssign = require(\"object-assign\");\nvar objectPool = require(\"./object-pool\");\n\nvar warn = debug(\"utils:warn\");\n\nmodule.exports.bind = require(\"./bind\");\nmodule.exports.coordinates = require(\"./coordinates\");\nmodule.exports.debug = debug;\nmodule.exports.device = device;\nmodule.exports.entity = require(\"./entity\");\nmodule.exports.forceCanvasResizeSafariMobile = require(\"./forceCanvasResizeSafariMobile\");\nmodule.exports.material = require(\"./material\");\nmodule.exports.objectPool = objectPool;\nmodule.exports.split = require(\"./split\").split;\nmodule.exports.styleParser = require(\"./styleParser\");\n\nmodule.exports.checkHeadsetConnected = function () {\n  warn(\n    \"`utils.checkHeadsetConnected` has moved to `utils.device.checkHeadsetConnected`\"\n  );\n  return device.checkHeadsetConnected(arguments);\n};\nmodule.exports.isGearVR = function () {\n  warn(\"`utils.isGearVR` has moved to `utils.device.isGearVR`\");\n  return device.isGearVR(arguments);\n};\nmodule.exports.isIOS = function () {\n  warn(\"`utils.isIOS` has moved to `utils.device.isIOS`\");\n  return device.isIOS(arguments);\n};\nmodule.exports.isMobile = function () {\n  warn(\"`utils.isMobile has moved to `utils.device.isMobile`\");\n  return device.isMobile(arguments);\n};\n\n/**\n * Returns throttle function that gets called at most once every interval.\n *\n * @param {function} functionToThrottle\n * @param {number} minimumInterval - Minimal interval between calls (milliseconds).\n * @param {object} optionalContext - If given, bind function to throttle to this context.\n * @returns {function} Throttled function.\n */\nmodule.exports.throttle = function (\n  functionToThrottle,\n  minimumInterval,\n  optionalContext\n) {\n  var lastTime;\n  if (optionalContext) {\n    functionToThrottle = module.exports.bind(\n      functionToThrottle,\n      optionalContext\n    );\n  }\n  return function () {\n    var time = Date.now();\n    var sinceLastTime =\n      typeof lastTime === \"undefined\" ? minimumInterval : time - lastTime;\n    if (typeof lastTime === \"undefined\" || sinceLastTime >= minimumInterval) {\n      lastTime = time;\n      functionToThrottle.apply(null, arguments);\n    }\n  };\n};\n\n/**\n * Returns throttle function that gets called at most once every interval.\n * Uses the time/timeDelta timestamps provided by the global render loop for better perf.\n *\n * @param {function} functionToThrottle\n * @param {number} minimumInterval - Minimal interval between calls (milliseconds).\n * @param {object} optionalContext - If given, bind function to throttle to this context.\n * @returns {function} Throttled function.\n */\nmodule.exports.throttleTick = function (\n  functionToThrottle,\n  minimumInterval,\n  optionalContext\n) {\n  var lastTime;\n  if (optionalContext) {\n    functionToThrottle = module.exports.bind(\n      functionToThrottle,\n      optionalContext\n    );\n  }\n  return function (time, delta) {\n    var sinceLastTime =\n      typeof lastTime === \"undefined\" ? delta : time - lastTime;\n    if (typeof lastTime === \"undefined\" || sinceLastTime >= minimumInterval) {\n      lastTime = time;\n      functionToThrottle(time, sinceLastTime);\n    }\n  };\n};\n\n/**\n * Returns debounce function that gets called only once after a set of repeated calls.\n *\n * @param {function} functionToDebounce\n * @param {number} wait - Time to wait for repeated function calls (milliseconds).\n * @param {boolean} immediate - Calls the function immediately regardless of if it should be waiting.\n * @returns {function} Debounced function.\n */\nmodule.exports.debounce = function (func, wait, immediate) {\n  var timeout;\n  return function () {\n    var context = this;\n    var args = arguments;\n    var later = function () {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n\n/**\n * Mix the properties of source object(s) into a destination object.\n *\n * @param  {object} dest - The object to which properties will be copied.\n * @param  {...object} source - The object(s) from which properties will be copied.\n */\nmodule.exports.extend = objectAssign;\nmodule.exports.extendDeep = deepAssign;\n\nmodule.exports.clone = function (obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\n/**\n * Checks if two values are equal.\n * Includes objects and arrays and nested objects and arrays.\n * Try to keep this function performant as it will be called often to see if a component\n * should be updated.\n *\n * @param {object} a - First object.\n * @param {object} b - Second object.\n * @returns {boolean} Whether two objects are deeply equal.\n */\nvar deepEqual = (function () {\n  var arrayPool = objectPool.createPool(function () {\n    return [];\n  });\n\n  return function (a, b) {\n    var key;\n    var keysA;\n    var keysB;\n    var i;\n    var valA;\n    var valB;\n\n    // If not objects or arrays, compare as values.\n    if (\n      a === undefined ||\n      b === undefined ||\n      a === null ||\n      b === null ||\n      !(\n        (a && b && a.constructor === Object && b.constructor === Object) ||\n        (a.constructor === Array && b.constructor === Array)\n      )\n    ) {\n      return a === b;\n    }\n\n    // Different number of keys, not equal.\n    keysA = arrayPool.use();\n    keysB = arrayPool.use();\n    keysA.length = 0;\n    keysB.length = 0;\n    for (key in a) {\n      keysA.push(key);\n    }\n    for (key in b) {\n      keysB.push(key);\n    }\n    if (keysA.length !== keysB.length) {\n      arrayPool.recycle(keysA);\n      arrayPool.recycle(keysB);\n      return false;\n    }\n\n    // Return `false` at the first sign of inequality.\n    for (i = 0; i < keysA.length; ++i) {\n      valA = a[keysA[i]];\n      valB = b[keysA[i]];\n      // Check nested array and object.\n      if (\n        typeof valA === \"object\" ||\n        typeof valB === \"object\" ||\n        (Array.isArray(valA) && Array.isArray(valB))\n      ) {\n        if (valA === valB) {\n          continue;\n        }\n        if (!deepEqual(valA, valB)) {\n          arrayPool.recycle(keysA);\n          arrayPool.recycle(keysB);\n          return false;\n        }\n      } else if (valA !== valB) {\n        arrayPool.recycle(keysA);\n        arrayPool.recycle(keysB);\n        return false;\n      }\n    }\n\n    arrayPool.recycle(keysA);\n    arrayPool.recycle(keysB);\n    return true;\n  };\n})();\nmodule.exports.deepEqual = deepEqual;\n\n/**\n * Computes the difference between two objects.\n *\n * @param {object} a - First object to compare (e.g., oldData).\n * @param {object} b - Second object to compare (e.g., newData).\n * @returns {object}\n *   Difference object where set of keys note which values were not equal, and values are\n *   `b`'s values.\n */\nmodule.exports.diff = (function () {\n  var keys = [];\n\n  return function (a, b, targetObject) {\n    var aVal;\n    var bVal;\n    var bKey;\n    var diff;\n    var key;\n    var i;\n    var isComparingObjects;\n\n    diff = targetObject || {};\n\n    // Collect A keys.\n    keys.length = 0;\n    for (key in a) {\n      keys.push(key);\n    }\n\n    if (!b) {\n      return diff;\n    }\n\n    // Collect B keys.\n    for (bKey in b) {\n      if (keys.indexOf(bKey) === -1) {\n        keys.push(bKey);\n      }\n    }\n\n    for (i = 0; i < keys.length; i++) {\n      key = keys[i];\n      aVal = a[key];\n      bVal = b[key];\n      isComparingObjects =\n        aVal &&\n        bVal &&\n        aVal.constructor === Object &&\n        bVal.constructor === Object;\n      if (\n        (isComparingObjects && !deepEqual(aVal, bVal)) ||\n        (!isComparingObjects && aVal !== bVal)\n      ) {\n        diff[key] = bVal;\n      }\n    }\n    return diff;\n  };\n})();\n\n/**\n * Returns whether we should capture this keyboard event for keyboard shortcuts.\n * @param {Event} event Event object.\n * @returns {Boolean} Whether the key event should be captured.\n */\nmodule.exports.shouldCaptureKeyEvent = function (event) {\n  if (event.metaKey) {\n    return false;\n  }\n  return document.activeElement === document.body;\n};\n\n/**\n * Splits a string into an array based on a delimiter.\n *\n * @param   {string=} [str='']        Source string\n * @param   {string=} [delimiter=' '] Delimiter to use\n * @returns {array}                   Array of delimited strings\n */\nmodule.exports.splitString = function (str, delimiter) {\n  if (typeof delimiter === \"undefined\") {\n    delimiter = \" \";\n  }\n  // First collapse the whitespace (or whatever the delimiter is).\n  var regex = new RegExp(delimiter, \"g\");\n  str = (str || \"\").replace(regex, delimiter);\n  // Then split.\n  return str.split(delimiter);\n};\n\n/**\n * Extracts data from the element given an object that contains expected keys.\n *\n * @param {Element} Source element.\n * @param {Object} [defaults={}] Object of default key-value pairs.\n * @returns {Object}\n */\nmodule.exports.getElData = function (el, defaults) {\n  defaults = defaults || {};\n  var data = {};\n  Object.keys(defaults).forEach(copyAttribute);\n  function copyAttribute(key) {\n    if (el.hasAttribute(key)) {\n      data[key] = el.getAttribute(key);\n    }\n  }\n  return data;\n};\n\n/**\n * Retrieves querystring value.\n * @param  {String} name Name of querystring key.\n * @return {String}      Value\n */\nmodule.exports.getUrlParameter = function (name) {\n  // eslint-disable-next-line no-useless-escape\n  name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n  var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n  var results = regex.exec(location.search);\n  return results === null\n    ? \"\"\n    : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n};\n\n/**\n * Detects whether context is within iframe.\n */\nmodule.exports.isIframed = function () {\n  return window.top !== window.self;\n};\n\n/**\n * Finds all elements under the element that have the isScene\n * property set to true\n */\nmodule.exports.findAllScenes = function (el) {\n  var matchingElements = [];\n  var allElements = el.getElementsByTagName(\"*\");\n  for (var i = 0, n = allElements.length; i < n; i++) {\n    if (allElements[i].isScene) {\n      // Element exists with isScene set.\n      matchingElements.push(allElements[i]);\n    }\n  }\n  return matchingElements;\n};\n\n// Must be at bottom to avoid circular dependency.\nmodule.exports.srcLoader = require(\"./src-loader\");\n",
    "var THREE = require(\"../lib/three\");\n\nvar HLS_MIMETYPES = [\"application/x-mpegurl\", \"application/vnd.apple.mpegurl\"];\n\n/**\n * Update `material` texture property (usually but not always `map`)\n * from `data` property (usually but not always `src`)\n *\n * @param {object} shader - A-Frame shader instance.\n * @param {object} data\n */\nmodule.exports.updateMapMaterialFromData = function (\n  materialName,\n  dataName,\n  shader,\n  data\n) {\n  var el = shader.el;\n  var material = shader.material;\n  var src = data[dataName];\n\n  // Because a single material / shader may have multiple textures,\n  // we need to remember the source value for this data property\n  // to avoid redundant operations which can be expensive otherwise\n  // (e.g. video texture loads).\n  if (!shader.materialSrcs) {\n    shader.materialSrcs = {};\n  }\n\n  if (!src) {\n    // Forget the prior material src.\n    delete shader.materialSrcs[materialName];\n    // Remove the texture.\n    setMap(null);\n    return;\n  }\n\n  // Don't process if material src hasn't changed.\n  if (src === shader.materialSrcs[materialName]) {\n    return;\n  }\n\n  // Remember the new src for this texture (there may be multiple).\n  shader.materialSrcs[materialName] = src;\n\n  // If the new material src is already a texture, just use it.\n  if (src instanceof THREE.Texture) {\n    setMap(src);\n  } else {\n    // Load texture for the new material src.\n    // (And check if we should still use it once available in callback.)\n    el.sceneEl.systems.material.loadTexture(\n      src,\n      { src: src, repeat: data.repeat, offset: data.offset, npot: data.npot },\n      checkSetMap\n    );\n  }\n\n  function checkSetMap(texture) {\n    // If the source has been changed, don't use loaded texture.\n    if (shader.materialSrcs[materialName] !== src) {\n      return;\n    }\n    setMap(texture);\n  }\n\n  function setMap(texture) {\n    material[materialName] = texture;\n    material.needsUpdate = true;\n    handleTextureEvents(el, texture);\n  }\n};\n\n/**\n * Update `material.map` given `data.src`. For standard and flat shaders.\n *\n * @param {object} shader - A-Frame shader instance.\n * @param {object} data\n */\nmodule.exports.updateMap = function (shader, data) {\n  return module.exports.updateMapMaterialFromData(\"map\", \"src\", shader, data);\n};\n\n/**\n * Updates the material's maps which give the illusion of extra geometry.\n *\n * @param {string} longType - The friendly name of the map from the component e.g. ambientOcclusionMap becomes aoMap in THREE.js\n * @param {object} shader - A-Frame shader instance\n * @param {object} data\n */\nmodule.exports.updateDistortionMap = function (longType, shader, data) {\n  var shortType = longType;\n  if (longType === \"ambientOcclusion\") {\n    shortType = \"ao\";\n  }\n  var el = shader.el;\n  var material = shader.material;\n  var src = data[longType + \"Map\"];\n  var info = {};\n  info.src = src;\n\n  // Pass through the repeat and offset to be handled by the material loader.\n  info.offset = data[longType + \"TextureOffset\"];\n  info.repeat = data[longType + \"TextureRepeat\"];\n  info.wrap = data[longType + \"TextureWrap\"];\n\n  if (src) {\n    if (src === shader[longType + \"TextureSrc\"]) {\n      return;\n    }\n\n    // Texture added or changed.\n    shader[longType + \"TextureSrc\"] = src;\n    el.sceneEl.systems.material.loadTexture(src, info, setMap);\n    return;\n  }\n\n  // Texture removed.\n  if (!material.map) {\n    return;\n  }\n  setMap(null);\n\n  function setMap(texture) {\n    material[shortType + \"Map\"] = texture;\n    material.needsUpdate = true;\n    handleTextureEvents(el, texture);\n  }\n};\n\n/**\n * Emit event on entities on texture-related events.\n *\n * @param {Element} el - Entity.\n * @param {object} texture - three.js Texture.\n */\nfunction handleTextureEvents(el, texture) {\n  if (!texture) {\n    return;\n  }\n\n  el.emit(\"materialtextureloaded\", { src: texture.image, texture: texture });\n\n  // Video events.\n  if (!texture.image || texture.image.tagName !== \"VIDEO\") {\n    return;\n  }\n\n  texture.image.addEventListener(\n    \"loadeddata\",\n    function emitVideoTextureLoadedDataAll() {\n      // Check to see if we need to use iOS 10 HLS shader.\n      // Only override the shader if it is stock shader that we know doesn't correct.\n      if (!el.components || !el.components.material) {\n        return;\n      }\n\n      if (\n        texture.needsCorrectionBGRA &&\n        texture.needsCorrectionFlipY &&\n        [\"standard\", \"flat\"].indexOf(el.components.material.data.shader) !== -1\n      ) {\n        el.setAttribute(\"material\", \"shader\", \"ios10hls\");\n      }\n\n      el.emit(\"materialvideoloadeddata\", {\n        src: texture.image,\n        texture: texture,\n      });\n    }\n  );\n  texture.image.addEventListener(\"ended\", function emitVideoTextureEndedAll() {\n    // Works for non-looping videos only.\n    el.emit(\"materialvideoended\", { src: texture.image, texture: texture });\n  });\n}\nmodule.exports.handleTextureEvents = handleTextureEvents;\n\n/**\n * Given video element src and type, guess whether stream is HLS.\n *\n * @param {string} src - src from video element (generally URL to content).\n * @param {string} type - type from video element (generally MIME type if present).\n */\nmodule.exports.isHLS = function (src, type) {\n  if (type && HLS_MIMETYPES.includes(type.toLowerCase())) {\n    return true;\n  }\n  if (src && src.toLowerCase().indexOf(\".m3u8\") > 0) {\n    return true;\n  }\n  return false;\n};\n",
    "/*\n  Adapted deePool by Kyle Simpson.\n  MIT License: http://getify.mit-license.org\n*/\nvar EMPTY_SLOT = Object.freeze(Object.create(null));\n\n// Default object factory.\nfunction defaultObjectFactory() {\n  return {};\n}\n\n/**\n * Create a new pool.\n */\nmodule.exports.createPool = function createPool(objectFactory) {\n  var objPool = [];\n  var nextFreeSlot = null; // Pool location to look for a free object to use.\n\n  objectFactory = objectFactory || defaultObjectFactory;\n\n  function use() {\n    var objToUse;\n    if (nextFreeSlot === null || nextFreeSlot === objPool.length) {\n      grow(objPool.length || 5);\n    }\n    objToUse = objPool[nextFreeSlot];\n    objPool[nextFreeSlot++] = EMPTY_SLOT;\n    clearObject(objToUse);\n    return objToUse;\n  }\n\n  function recycle(obj) {\n    if (!(obj instanceof Object)) {\n      return;\n    }\n    if (nextFreeSlot === null || nextFreeSlot === -1) {\n      objPool[objPool.length] = obj;\n      return;\n    }\n    objPool[--nextFreeSlot] = obj;\n  }\n\n  function grow(count) {\n    var currentLength;\n    var i;\n\n    count = count === undefined ? objPool.length : count;\n    if (count > 0 && nextFreeSlot == null) {\n      nextFreeSlot = 0;\n    }\n\n    if (count > 0) {\n      currentLength = objPool.length;\n      objPool.length += Number(count);\n      for (i = currentLength; i < objPool.length; i++) {\n        // Add new obj to pool.\n        objPool[i] = objectFactory();\n      }\n    }\n\n    return objPool.length;\n  }\n\n  function size() {\n    return objPool.length;\n  }\n\n  return {\n    grow: grow,\n    pool: objPool,\n    recycle: recycle,\n    size: size,\n    use: use,\n  };\n};\n\nfunction clearObject(obj) {\n  var key;\n  if (!obj || obj.constructor !== Object) {\n    return;\n  }\n  for (key in obj) {\n    obj[key] = undefined;\n  }\n}\nmodule.exports.clearObject = clearObject;\n",
    "/**\n * String split with cached result.\n */\nmodule.exports.split = (function () {\n  var splitCache = {};\n\n  return function (str, delimiter) {\n    if (!(delimiter in splitCache)) {\n      splitCache[delimiter] = {};\n    }\n\n    if (str in splitCache[delimiter]) {\n      return splitCache[delimiter][str];\n    }\n\n    splitCache[delimiter][str] = str.split(delimiter);\n    return splitCache[delimiter][str];\n  };\n})();\n",
    "/* global Image, XMLHttpRequest */\nvar debug = require(\"./debug\");\n\nvar warn = debug(\"utils:src-loader:warn\");\n\n/**\n * Validate a texture, either as a selector or as a URL.\n * Detects whether `src` is pointing to an image or video and invokes the appropriate\n * callback.\n *\n * `src` will be passed into the callback\n *\n * @params {string|Element} src - URL or media element.\n * @params {function} isImageCb - callback if texture is an image.\n * @params {function} isVideoCb - callback if texture is a video.\n */\nfunction validateSrc(src, isImageCb, isVideoCb) {\n  checkIsImage(src, function isAnImageUrl(isImage) {\n    if (isImage) {\n      isImageCb(src);\n      return;\n    }\n    isVideoCb(src);\n  });\n}\n\n/**\n * Validates six images as a cubemap, either as selector or comma-separated\n * URLs.\n *\n * @param {string} src - A selector or comma-separated image URLs. Image URLs\n          must be wrapped by `url()`.\n * @param {string} src - A selector or comma-separated image URLs. Image URLs\n          must be wrapped by `url()`.\n */\nfunction validateCubemapSrc(src, cb) {\n  var aCubemap;\n  var cubemapSrcRegex = \"\";\n  var i;\n  var urls;\n  var validatedUrls = [];\n\n  for (i = 0; i < 5; i++) {\n    cubemapSrcRegex += \"(url\\\\((?:[^\\\\)]+)\\\\),\\\\s*)\";\n  }\n  cubemapSrcRegex += \"(url\\\\((?:[^\\\\)]+)\\\\)\\\\s*)\";\n  urls = src.match(new RegExp(cubemapSrcRegex));\n\n  // `src` is a comma-separated list of URLs.\n  // In this case, re-use validateSrc for each side of the cube.\n  function isImageCb(url) {\n    validatedUrls.push(url);\n    if (validatedUrls.length === 6) {\n      cb(validatedUrls);\n    }\n  }\n  if (urls) {\n    for (i = 1; i < 7; i++) {\n      validateSrc(parseUrl(urls[i]), isImageCb);\n    }\n    return;\n  }\n\n  // `src` is a query selector to <a-cubemap> containing six $([src])s.\n  aCubemap = validateAndGetQuerySelector(src);\n  if (!aCubemap) {\n    return;\n  }\n  if (aCubemap.tagName === \"A-CUBEMAP\" && aCubemap.srcs) {\n    return cb(aCubemap.srcs);\n  }\n  // Else if aCubeMap is not a <a-cubemap>.\n  warn('Selector \"%s\" does not point to <a-cubemap>', src);\n}\n\n/**\n * Parses src from `url(src)`.\n * @param  {string} src - String to parse.\n * @return {string} The parsed src, if parseable.\n */\nfunction parseUrl(src) {\n  var parsedSrc = src.match(/\\url\\((.+)\\)/);\n  if (!parsedSrc) {\n    return;\n  }\n  return parsedSrc[1];\n}\n\n/**\n * Call back whether `src` is an image.\n *\n * @param {string|Element} src - URL or element that will be tested.\n * @param {function} onResult - Callback with whether `src` is an image.\n */\nfunction checkIsImage(src, onResult) {\n  var request;\n\n  if (src.tagName) {\n    onResult(src.tagName === \"IMG\");\n    return;\n  }\n  request = new XMLHttpRequest();\n\n  // Try to send HEAD request to check if image first.\n  request.open(\"HEAD\", src);\n  request.addEventListener(\"load\", function (event) {\n    var contentType;\n    if (request.status >= 200 && request.status < 300) {\n      contentType = request.getResponseHeader(\"Content-Type\");\n      if (contentType == null) {\n        checkIsImageFallback(src, onResult);\n      } else {\n        if (contentType.startsWith(\"image\")) {\n          onResult(true);\n        } else {\n          onResult(false);\n        }\n      }\n    } else {\n      checkIsImageFallback(src, onResult);\n    }\n    request.abort();\n  });\n  request.send();\n}\n\nfunction checkIsImageFallback(src, onResult) {\n  var tester = new Image();\n  tester.addEventListener(\"load\", onLoad);\n  function onLoad() {\n    onResult(true);\n  }\n  tester.addEventListener(\"error\", onError);\n  function onError() {\n    onResult(false);\n  }\n  tester.src = src;\n}\n\n/**\n * Query and validate a query selector,\n *\n * @param  {string} selector - DOM selector.\n * @return {object|null|undefined} Selected DOM element if exists.\n           null if query yields no results.\n           undefined if `selector` is not a valid selector.\n */\nfunction validateAndGetQuerySelector(selector) {\n  try {\n    var el = document.querySelector(selector);\n    if (!el) {\n      warn('No element was found matching the selector: \"%s\"', selector);\n    }\n    return el;\n  } catch (e) {\n    // Capture exception if it's not a valid selector.\n    warn('\"%s\" is not a valid selector', selector);\n    return undefined;\n  }\n}\n\nmodule.exports = {\n  parseUrl: parseUrl,\n  validateSrc: validateSrc,\n  validateCubemapSrc: validateCubemapSrc,\n};\n",
    "/**\n * Utils for parsing style-like strings (e.g., \"primitive: box; width: 5; height: 4.5\").\n * Some code adapted from `style-attr` (https://github.com/joshwnj/style-attr)\n * by Josh Johnston (MIT License).\n */\nvar DASH_REGEX = /-([a-z])/g;\n\n/**\n * Deserialize style-like string into an object of properties.\n *\n * @param {string} value - HTML attribute value.\n * @param {object} obj - Reused object for object pooling.\n * @returns {object} Property data.\n */\nmodule.exports.parse = function (value, obj) {\n  var parsedData;\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  parsedData = styleParse(value, obj);\n  // The style parser returns an object { \"\" : \"test\"} when fed a string\n  if (parsedData[\"\"]) {\n    return value;\n  }\n  return transformKeysToCamelCase(parsedData);\n};\n\n/**\n * Serialize an object of properties into a style-like string.\n *\n * @param {object} data - Property data.\n * @returns {string}\n */\nmodule.exports.stringify = function (data) {\n  if (typeof data === \"string\") {\n    return data;\n  }\n  return styleStringify(data);\n};\n\n/**\n * Converts string from hyphen to camelCase.\n *\n * @param {string} str - String to camelCase.\n * @return {string} CamelCased string.\n */\nfunction toCamelCase(str) {\n  return str.replace(DASH_REGEX, upperCase);\n}\nmodule.exports.toCamelCase = toCamelCase;\n\n/**\n * Converts object's keys from hyphens to camelCase (e.g., `max-value` to\n * `maxValue`).\n *\n * @param {object} obj - The object to camelCase keys.\n * @return {object} The object with keys camelCased.\n */\nfunction transformKeysToCamelCase(obj) {\n  var camelKey;\n  var key;\n  for (key in obj) {\n    camelKey = toCamelCase(key);\n    if (key === camelKey) {\n      continue;\n    }\n    obj[camelKey] = obj[key];\n    delete obj[key];\n  }\n  return obj;\n}\nmodule.exports.transformKeysToCamelCase = transformKeysToCamelCase;\n\n/**\n * Split a string into chunks matching `<key>: <value>`\n */\nvar getKeyValueChunks = (function () {\n  var chunks = [];\n  var hasUnclosedUrl = /url\\([^)]+$/;\n\n  return function getKeyValueChunks(raw) {\n    var chunk = \"\";\n    var nextSplit;\n    var offset = 0;\n    var sep = \";\";\n\n    chunks.length = 0;\n\n    while (offset < raw.length) {\n      nextSplit = raw.indexOf(sep, offset);\n      if (nextSplit === -1) {\n        nextSplit = raw.length;\n      }\n\n      chunk += raw.substring(offset, nextSplit);\n\n      // data URIs can contain semicolons, so make sure we get the whole thing\n      if (hasUnclosedUrl.test(chunk)) {\n        chunk += \";\";\n        offset = nextSplit + 1;\n        continue;\n      }\n\n      chunks.push(chunk.trim());\n      chunk = \"\";\n      offset = nextSplit + 1;\n    }\n\n    return chunks;\n  };\n})();\n\n/**\n * Convert a style attribute string to an object.\n *\n * @param {object} str - Attribute string.\n * @param {object} obj - Object to reuse as a base, else a new one will be allocated.\n */\nfunction styleParse(str, obj) {\n  var chunks;\n  var i;\n  var item;\n  var pos;\n  var key;\n  var val;\n\n  obj = obj || {};\n\n  chunks = getKeyValueChunks(str);\n  for (i = 0; i < chunks.length; i++) {\n    item = chunks[i];\n    if (!item) {\n      continue;\n    }\n    // Split with `.indexOf` rather than `.split` because the value may also contain colons.\n    pos = item.indexOf(\":\");\n    key = item.substr(0, pos).trim();\n    val = item.substr(pos + 1).trim();\n    obj[key] = val;\n  }\n  return obj;\n}\n\n/**\n * Convert an object into an attribute string\n **/\nfunction styleStringify(obj) {\n  var key;\n  var keyCount = 0;\n  var i = 0;\n  var str = \"\";\n\n  for (key in obj) {\n    keyCount++;\n  }\n\n  for (key in obj) {\n    str += key + \": \" + obj[key];\n    if (i < keyCount - 1) {\n      str += \"; \";\n    }\n    i++;\n  }\n  return str;\n}\n\nfunction upperCase(str) {\n  return str[1].toUpperCase();\n}\n",
    "/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nTHREE.ColladaLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.ColladaLoader.prototype = {\n  constructor: THREE.ColladaLoader,\n\n  crossOrigin: \"anonymous\",\n\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n\n    var path =\n      scope.path === undefined\n        ? THREE.LoaderUtils.extractUrlBase(url)\n        : scope.path;\n\n    var loader = new THREE.FileLoader(scope.manager);\n    loader.load(\n      url,\n      function (text) {\n        onLoad(scope.parse(text, path));\n      },\n      onProgress,\n      onError\n    );\n  },\n\n  setPath: function (value) {\n    this.path = value;\n    return this;\n  },\n\n  options: {\n    set convertUpAxis(value) {\n      console.warn(\n        \"THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.\"\n      );\n    },\n  },\n\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n    return this;\n  },\n\n  parse: function (text, path) {\n    function getElementsByTagName(xml, name) {\n      // Non recursive xml.getElementsByTagName() ...\n\n      var array = [];\n      var childNodes = xml.childNodes;\n\n      for (var i = 0, l = childNodes.length; i < l; i++) {\n        var child = childNodes[i];\n\n        if (child.nodeName === name) {\n          array.push(child);\n        }\n      }\n\n      return array;\n    }\n\n    function parseStrings(text) {\n      if (text.length === 0) return [];\n\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parts[i];\n      }\n\n      return array;\n    }\n\n    function parseFloats(text) {\n      if (text.length === 0) return [];\n\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseFloat(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseInts(text) {\n      if (text.length === 0) return [];\n\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseInt(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseId(text) {\n      return text.substring(1);\n    }\n\n    function generateId() {\n      return \"three_default_\" + count++;\n    }\n\n    function isEmpty(object) {\n      return Object.keys(object).length === 0;\n    }\n\n    // asset\n\n    function parseAsset(xml) {\n      return {\n        unit: parseAssetUnit(getElementsByTagName(xml, \"unit\")[0]),\n        upAxis: parseAssetUpAxis(getElementsByTagName(xml, \"up_axis\")[0]),\n      };\n    }\n\n    function parseAssetUnit(xml) {\n      if (xml !== undefined && xml.hasAttribute(\"meter\") === true) {\n        return parseFloat(xml.getAttribute(\"meter\"));\n      } else {\n        return 1; // default 1 meter\n      }\n    }\n\n    function parseAssetUpAxis(xml) {\n      return xml !== undefined ? xml.textContent : \"Y_UP\";\n    }\n\n    // library\n\n    function parseLibrary(xml, libraryName, nodeName, parser) {\n      var library = getElementsByTagName(xml, libraryName)[0];\n\n      if (library !== undefined) {\n        var elements = getElementsByTagName(library, nodeName);\n\n        for (var i = 0; i < elements.length; i++) {\n          parser(elements[i]);\n        }\n      }\n    }\n\n    function buildLibrary(data, builder) {\n      for (var name in data) {\n        var object = data[name];\n        object.build = builder(data[name]);\n      }\n    }\n\n    // get\n\n    function getBuild(data, builder) {\n      if (data.build !== undefined) return data.build;\n\n      data.build = builder(data);\n\n      return data.build;\n    }\n\n    // animation\n\n    function parseAnimation(xml) {\n      var data = {\n        sources: {},\n        samplers: {},\n        channels: {},\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        var id;\n\n        switch (child.nodeName) {\n          case \"source\":\n            id = child.getAttribute(\"id\");\n            data.sources[id] = parseSource(child);\n            break;\n\n          case \"sampler\":\n            id = child.getAttribute(\"id\");\n            data.samplers[id] = parseAnimationSampler(child);\n            break;\n\n          case \"channel\":\n            id = child.getAttribute(\"target\");\n            data.channels[id] = parseAnimationChannel(child);\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.animations[xml.getAttribute(\"id\")] = data;\n    }\n\n    function parseAnimationSampler(xml) {\n      var data = {\n        inputs: {},\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"input\":\n            var id = parseId(child.getAttribute(\"source\"));\n            var semantic = child.getAttribute(\"semantic\");\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseAnimationChannel(xml) {\n      var data = {};\n\n      var target = xml.getAttribute(\"target\");\n\n      // parsing SID Addressing Syntax\n\n      var parts = target.split(\"/\");\n\n      var id = parts.shift();\n      var sid = parts.shift();\n\n      // check selection syntax\n\n      var arraySyntax = sid.indexOf(\"(\") !== -1;\n      var memberSyntax = sid.indexOf(\".\") !== -1;\n\n      if (memberSyntax) {\n        //  member selection access\n\n        parts = sid.split(\".\");\n        sid = parts.shift();\n        data.member = parts.shift();\n      } else if (arraySyntax) {\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n\n        var indices = sid.split(\"(\");\n        sid = indices.shift();\n\n        for (var i = 0; i < indices.length; i++) {\n          indices[i] = parseInt(indices[i].replace(/\\)/, \"\"));\n        }\n\n        data.indices = indices;\n      }\n\n      data.id = id;\n      data.sid = sid;\n\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n\n      data.sampler = parseId(xml.getAttribute(\"source\"));\n\n      return data;\n    }\n\n    function buildAnimation(data) {\n      var tracks = [];\n\n      var channels = data.channels;\n      var samplers = data.samplers;\n      var sources = data.sources;\n\n      for (var target in channels) {\n        if (channels.hasOwnProperty(target)) {\n          var channel = channels[target];\n          var sampler = samplers[channel.sampler];\n\n          var inputId = sampler.inputs.INPUT;\n          var outputId = sampler.inputs.OUTPUT;\n\n          var inputSource = sources[inputId];\n          var outputSource = sources[outputId];\n\n          var animation = buildAnimationChannel(\n            channel,\n            inputSource,\n            outputSource\n          );\n\n          createKeyframeTracks(animation, tracks);\n        }\n      }\n\n      return tracks;\n    }\n\n    function getAnimation(id) {\n      return getBuild(library.animations[id], buildAnimation);\n    }\n\n    function buildAnimationChannel(channel, inputSource, outputSource) {\n      var node = library.nodes[channel.id];\n      var object3D = getNode(node.id);\n\n      var transform = node.transforms[channel.sid];\n      var defaultMatrix = node.matrix.clone().transpose();\n\n      var time, stride;\n      var i, il, j, jl;\n\n      var data = {};\n\n      // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch (transform) {\n        case \"matrix\":\n          for (i = 0, il = inputSource.array.length; i < il; i++) {\n            time = inputSource.array[i];\n            stride = i * outputSource.stride;\n\n            if (data[time] === undefined) data[time] = {};\n\n            if (channel.arraySyntax === true) {\n              var value = outputSource.array[stride];\n              var index = channel.indices[0] + 4 * channel.indices[1];\n\n              data[time][index] = value;\n            } else {\n              for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                data[time][j] = outputSource.array[stride + j];\n              }\n            }\n          }\n\n          break;\n\n        case \"translate\":\n          console.warn(\n            'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.',\n            transform\n          );\n          break;\n\n        case \"rotate\":\n          console.warn(\n            'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.',\n            transform\n          );\n          break;\n\n        case \"scale\":\n          console.warn(\n            'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.',\n            transform\n          );\n          break;\n      }\n\n      var keyframes = prepareAnimationData(data, defaultMatrix);\n\n      var animation = {\n        name: object3D.uuid,\n        keyframes: keyframes,\n      };\n\n      return animation;\n    }\n\n    function prepareAnimationData(data, defaultMatrix) {\n      var keyframes = [];\n\n      // transfer data into a sortable array\n\n      for (var time in data) {\n        keyframes.push({ time: parseFloat(time), value: data[time] });\n      }\n\n      // ensure keyframes are sorted by time\n\n      keyframes.sort(ascending);\n\n      // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for (var i = 0; i < 16; i++) {\n        transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n      }\n\n      return keyframes;\n\n      // array sort function\n\n      function ascending(a, b) {\n        return a.time - b.time;\n      }\n    }\n\n    var position = new THREE.Vector3();\n    var scale = new THREE.Vector3();\n    var quaternion = new THREE.Quaternion();\n\n    function createKeyframeTracks(animation, tracks) {\n      var keyframes = animation.keyframes;\n      var name = animation.name;\n\n      var times = [];\n      var positionData = [];\n      var quaternionData = [];\n      var scaleData = [];\n\n      for (var i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n\n        var time = keyframe.time;\n        var value = keyframe.value;\n\n        matrix.fromArray(value).transpose();\n        matrix.decompose(position, quaternion, scale);\n\n        times.push(time);\n        positionData.push(position.x, position.y, position.z);\n        quaternionData.push(\n          quaternion.x,\n          quaternion.y,\n          quaternion.z,\n          quaternion.w\n        );\n        scaleData.push(scale.x, scale.y, scale.z);\n      }\n\n      if (positionData.length > 0)\n        tracks.push(\n          new THREE.VectorKeyframeTrack(name + \".position\", times, positionData)\n        );\n      if (quaternionData.length > 0)\n        tracks.push(\n          new THREE.QuaternionKeyframeTrack(\n            name + \".quaternion\",\n            times,\n            quaternionData\n          )\n        );\n      if (scaleData.length > 0)\n        tracks.push(\n          new THREE.VectorKeyframeTrack(name + \".scale\", times, scaleData)\n        );\n\n      return tracks;\n    }\n\n    function transformAnimationData(keyframes, property, defaultValue) {\n      var keyframe;\n\n      var empty = true;\n      var i, l;\n\n      // check, if values of a property are missing in our keyframes\n\n      for (i = 0, l = keyframes.length; i < l; i++) {\n        keyframe = keyframes[i];\n\n        if (keyframe.value[property] === undefined) {\n          keyframe.value[property] = null; // mark as missing\n        } else {\n          empty = false;\n        }\n      }\n\n      if (empty === true) {\n        // no values at all, so we set a default value\n\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n\n          keyframe.value[property] = defaultValue;\n        }\n      } else {\n        // filling gaps\n\n        createMissingKeyframes(keyframes, property);\n      }\n    }\n\n    function createMissingKeyframes(keyframes, property) {\n      var prev, next;\n\n      for (var i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n\n        if (keyframe.value[property] === null) {\n          prev = getPrev(keyframes, i, property);\n          next = getNext(keyframes, i, property);\n\n          if (prev === null) {\n            keyframe.value[property] = next.value[property];\n            continue;\n          }\n\n          if (next === null) {\n            keyframe.value[property] = prev.value[property];\n            continue;\n          }\n\n          interpolate(keyframe, prev, next, property);\n        }\n      }\n    }\n\n    function getPrev(keyframes, i, property) {\n      while (i >= 0) {\n        var keyframe = keyframes[i];\n\n        if (keyframe.value[property] !== null) return keyframe;\n\n        i--;\n      }\n\n      return null;\n    }\n\n    function getNext(keyframes, i, property) {\n      while (i < keyframes.length) {\n        var keyframe = keyframes[i];\n\n        if (keyframe.value[property] !== null) return keyframe;\n\n        i++;\n      }\n\n      return null;\n    }\n\n    function interpolate(key, prev, next, property) {\n      if (next.time - prev.time === 0) {\n        key.value[property] = prev.value[property];\n        return;\n      }\n\n      key.value[property] =\n        ((key.time - prev.time) *\n          (next.value[property] - prev.value[property])) /\n          (next.time - prev.time) +\n        prev.value[property];\n    }\n\n    // animation clips\n\n    function parseAnimationClip(xml) {\n      var data = {\n        name: xml.getAttribute(\"id\") || \"default\",\n        start: parseFloat(xml.getAttribute(\"start\") || 0),\n        end: parseFloat(xml.getAttribute(\"end\") || 0),\n        animations: [],\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"instance_animation\":\n            data.animations.push(parseId(child.getAttribute(\"url\")));\n            break;\n        }\n      }\n\n      library.clips[xml.getAttribute(\"id\")] = data;\n    }\n\n    function buildAnimationClip(data) {\n      var tracks = [];\n\n      var name = data.name;\n      var duration = data.end - data.start || -1;\n      var animations = data.animations;\n\n      for (var i = 0, il = animations.length; i < il; i++) {\n        var animationTracks = getAnimation(animations[i]);\n\n        for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n          tracks.push(animationTracks[j]);\n        }\n      }\n\n      return new THREE.AnimationClip(name, duration, tracks);\n    }\n\n    function getAnimationClip(id) {\n      return getBuild(library.clips[id], buildAnimationClip);\n    }\n\n    // controller\n\n    function parseController(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"skin\":\n            // there is exactly one skin per controller\n            data.id = parseId(child.getAttribute(\"source\"));\n            data.skin = parseSkin(child);\n            break;\n\n          case \"morph\":\n            data.id = parseId(child.getAttribute(\"source\"));\n            console.warn(\n              \"THREE.ColladaLoader: Morph target animation not supported yet.\"\n            );\n            break;\n        }\n      }\n\n      library.controllers[xml.getAttribute(\"id\")] = data;\n    }\n\n    function parseSkin(xml) {\n      var data = {\n        sources: {},\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"bind_shape_matrix\":\n            data.bindShapeMatrix = parseFloats(child.textContent);\n            break;\n\n          case \"source\":\n            var id = child.getAttribute(\"id\");\n            data.sources[id] = parseSource(child);\n            break;\n\n          case \"joints\":\n            data.joints = parseJoints(child);\n            break;\n\n          case \"vertex_weights\":\n            data.vertexWeights = parseVertexWeights(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseJoints(xml) {\n      var data = {\n        inputs: {},\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"input\":\n            var semantic = child.getAttribute(\"semantic\");\n            var id = parseId(child.getAttribute(\"source\"));\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseVertexWeights(xml) {\n      var data = {\n        inputs: {},\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"input\":\n            var semantic = child.getAttribute(\"semantic\");\n            var id = parseId(child.getAttribute(\"source\"));\n            var offset = parseInt(child.getAttribute(\"offset\"));\n            data.inputs[semantic] = { id: id, offset: offset };\n            break;\n\n          case \"vcount\":\n            data.vcount = parseInts(child.textContent);\n            break;\n\n          case \"v\":\n            data.v = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildController(data) {\n      var build = {\n        id: data.id,\n      };\n\n      var geometry = library.geometries[build.id];\n\n      if (data.skin !== undefined) {\n        build.skin = buildSkin(data.skin);\n\n        // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n      }\n\n      return build;\n    }\n\n    function buildSkin(data) {\n      var BONE_LIMIT = 4;\n\n      var build = {\n        joints: [], // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT,\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT,\n        },\n      };\n\n      var sources = data.sources;\n      var vertexWeights = data.vertexWeights;\n\n      var vcount = vertexWeights.vcount;\n      var v = vertexWeights.v;\n      var jointOffset = vertexWeights.inputs.JOINT.offset;\n      var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n\n      var jointSource = data.sources[data.joints.inputs.JOINT];\n      var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n\n      var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n      var stride = 0;\n\n      var i, j, l;\n\n      // procces skin data for each vertex\n\n      for (i = 0, l = vcount.length; i < l; i++) {\n        var jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n        var vertexSkinData = [];\n\n        for (j = 0; j < jointCount; j++) {\n          var skinIndex = v[stride + jointOffset];\n          var weightId = v[stride + weightOffset];\n          var skinWeight = weights[weightId];\n\n          vertexSkinData.push({ index: skinIndex, weight: skinWeight });\n\n          stride += 2;\n        }\n\n        // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n        vertexSkinData.sort(descending);\n\n        // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for (j = 0; j < BONE_LIMIT; j++) {\n          var d = vertexSkinData[j];\n\n          if (d !== undefined) {\n            build.indices.array.push(d.index);\n            build.weights.array.push(d.weight);\n          } else {\n            build.indices.array.push(0);\n            build.weights.array.push(0);\n          }\n        }\n      }\n\n      // setup bind matrix\n\n      if (data.bindShapeMatrix) {\n        build.bindMatrix = new THREE.Matrix4()\n          .fromArray(data.bindShapeMatrix)\n          .transpose();\n      } else {\n        build.bindMatrix = new THREE.Matrix4().identity();\n      }\n\n      // process bones and inverse bind matrix data\n\n      for (i = 0, l = jointSource.array.length; i < l; i++) {\n        var name = jointSource.array[i];\n        var boneInverse = new THREE.Matrix4()\n          .fromArray(inverseSource.array, i * inverseSource.stride)\n          .transpose();\n\n        build.joints.push({ name: name, boneInverse: boneInverse });\n      }\n\n      return build;\n\n      // array sort function\n\n      function descending(a, b) {\n        return b.weight - a.weight;\n      }\n    }\n\n    function getController(id) {\n      return getBuild(library.controllers[id], buildController);\n    }\n\n    // image\n\n    function parseImage(xml) {\n      var data = {\n        init_from: getElementsByTagName(xml, \"init_from\")[0].textContent,\n      };\n\n      library.images[xml.getAttribute(\"id\")] = data;\n    }\n\n    function buildImage(data) {\n      if (data.build !== undefined) return data.build;\n\n      return data.init_from;\n    }\n\n    function getImage(id) {\n      var data = library.images[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildImage);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find image with ID:\", id);\n\n      return null;\n    }\n\n    // effect\n\n    function parseEffect(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"profile_COMMON\":\n            data.profile = parseEffectProfileCOMMON(child);\n            break;\n        }\n      }\n\n      library.effects[xml.getAttribute(\"id\")] = data;\n    }\n\n    function parseEffectProfileCOMMON(xml) {\n      var data = {\n        surfaces: {},\n        samplers: {},\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"newparam\":\n            parseEffectNewparam(child, data);\n            break;\n\n          case \"technique\":\n            data.technique = parseEffectTechnique(child);\n            break;\n\n          case \"extra\":\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectNewparam(xml, data) {\n      var sid = xml.getAttribute(\"sid\");\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"surface\":\n            data.surfaces[sid] = parseEffectSurface(child);\n            break;\n\n          case \"sampler2D\":\n            data.samplers[sid] = parseEffectSampler(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectSurface(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"init_from\":\n            data.init_from = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectSampler(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"source\":\n            data.source = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"constant\":\n          case \"lambert\":\n          case \"blinn\":\n          case \"phong\":\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameters(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"emission\":\n          case \"diffuse\":\n          case \"specular\":\n          case \"shininess\":\n          case \"transparency\":\n            data[child.nodeName] = parseEffectParameter(child);\n            break;\n          case \"transparent\":\n            data[child.nodeName] = {\n              opaque: child.getAttribute(\"opaque\"),\n              data: parseEffectParameter(child),\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameter(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"color\":\n            data[child.nodeName] = parseFloats(child.textContent);\n            break;\n\n          case \"float\":\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case \"texture\":\n            data[child.nodeName] = {\n              id: child.getAttribute(\"texture\"),\n              extra: parseEffectParameterTexture(child),\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTexture(xml) {\n      var data = {\n        technique: {},\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"extra\":\n            parseEffectParameterTextureExtra(child, data);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTextureExtra(xml, data) {\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"technique\":\n            parseEffectParameterTextureExtraTechnique(child, data);\n            break;\n        }\n      }\n    }\n\n    function parseEffectParameterTextureExtraTechnique(xml, data) {\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"repeatU\":\n          case \"repeatV\":\n          case \"offsetU\":\n          case \"offsetV\":\n            data.technique[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case \"wrapU\":\n          case \"wrapV\":\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n\n            if (child.textContent.toUpperCase() === \"TRUE\") {\n              data.technique[child.nodeName] = 1;\n            } else if (child.textContent.toUpperCase() === \"FALSE\") {\n              data.technique[child.nodeName] = 0;\n            } else {\n              data.technique[child.nodeName] = parseInt(child.textContent);\n            }\n\n            break;\n        }\n      }\n    }\n\n    function parseEffectExtra(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"technique\":\n            data.technique = parseEffectExtraTechnique(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"double_sided\":\n            data[child.nodeName] = parseInt(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildEffect(data) {\n      return data;\n    }\n\n    function getEffect(id) {\n      return getBuild(library.effects[id], buildEffect);\n    }\n\n    // material\n\n    function parseMaterial(xml) {\n      var data = {\n        name: xml.getAttribute(\"name\"),\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"instance_effect\":\n            data.url = parseId(child.getAttribute(\"url\"));\n            break;\n        }\n      }\n\n      library.materials[xml.getAttribute(\"id\")] = data;\n    }\n\n    function getTextureLoader(image) {\n      var loader;\n\n      var extension = image.slice(((image.lastIndexOf(\".\") - 1) >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n      extension = extension.toLowerCase();\n\n      switch (extension) {\n        case \"tga\":\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n      }\n\n      return loader;\n    }\n\n    function buildMaterial(data) {\n      var effect = getEffect(data.url);\n      var technique = effect.profile.technique;\n      var extra = effect.profile.extra;\n\n      var material;\n\n      switch (technique.type) {\n        case \"phong\":\n        case \"blinn\":\n          material = new THREE.MeshPhongMaterial();\n          break;\n\n        case \"lambert\":\n          material = new THREE.MeshLambertMaterial();\n          break;\n\n        default:\n          material = new THREE.MeshBasicMaterial();\n          break;\n      }\n\n      material.name = data.name;\n\n      function getTexture(textureObject) {\n        var sampler = effect.profile.samplers[textureObject.id];\n        var image = null;\n\n        // get image\n\n        if (sampler !== undefined) {\n          var surface = effect.profile.surfaces[sampler.source];\n          image = getImage(surface.init_from);\n        } else {\n          console.warn(\n            \"THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).\"\n          );\n          image = getImage(textureObject.id);\n        }\n\n        // create texture if image is avaiable\n\n        if (image !== null) {\n          var loader = getTextureLoader(image);\n\n          if (loader !== undefined) {\n            var texture = loader.load(image);\n\n            var extra = textureObject.extra;\n\n            if (\n              extra !== undefined &&\n              extra.technique !== undefined &&\n              isEmpty(extra.technique) === false\n            ) {\n              var technique = extra.technique;\n\n              texture.wrapS = technique.wrapU\n                ? THREE.RepeatWrapping\n                : THREE.ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV\n                ? THREE.RepeatWrapping\n                : THREE.ClampToEdgeWrapping;\n\n              texture.offset.set(\n                technique.offsetU || 0,\n                technique.offsetV || 0\n              );\n              texture.repeat.set(\n                technique.repeatU || 1,\n                technique.repeatV || 1\n              );\n            } else {\n              texture.wrapS = THREE.RepeatWrapping;\n              texture.wrapT = THREE.RepeatWrapping;\n            }\n\n            return texture;\n          } else {\n            console.warn(\n              \"THREE.ColladaLoader: Loader for texture %s not found.\",\n              image\n            );\n\n            return null;\n          }\n        } else {\n          console.warn(\n            \"THREE.ColladaLoader: Couldn't create texture with ID:\",\n            textureObject.id\n          );\n\n          return null;\n        }\n      }\n\n      var parameters = technique.parameters;\n\n      for (var key in parameters) {\n        var parameter = parameters[key];\n\n        switch (key) {\n          case \"diffuse\":\n            if (parameter.color) material.color.fromArray(parameter.color);\n            if (parameter.texture) material.map = getTexture(parameter.texture);\n            break;\n          case \"specular\":\n            if (parameter.color && material.specular)\n              material.specular.fromArray(parameter.color);\n            if (parameter.texture)\n              material.specularMap = getTexture(parameter.texture);\n            break;\n          case \"shininess\":\n            if (parameter.float && material.shininess)\n              material.shininess = parameter.float;\n            break;\n          case \"emission\":\n            if (parameter.color && material.emissive)\n              material.emissive.fromArray(parameter.color);\n            if (parameter.texture)\n              material.emissiveMap = getTexture(parameter.texture);\n            break;\n        }\n      }\n\n      //\n\n      var transparent = parameters[\"transparent\"];\n      var transparency = parameters[\"transparency\"];\n\n      // <transparency> does not exist but <transparent>\n\n      if (transparency === undefined && transparent) {\n        transparency = {\n          float: 1,\n        };\n      }\n\n      // <transparent> does not exist but <transparency>\n\n      if (transparent === undefined && transparency) {\n        transparent = {\n          opaque: \"A_ONE\",\n          data: {\n            color: [1, 1, 1, 1],\n          },\n        };\n      }\n\n      if (transparent && transparency) {\n        // handle case if a texture exists but no color\n\n        if (transparent.data.texture) {\n          // we do not set an alpha map (see #13792)\n\n          material.transparent = true;\n        } else {\n          var color = transparent.data.color;\n\n          switch (transparent.opaque) {\n            case \"A_ONE\":\n              material.opacity = color[3] * transparency.float;\n              break;\n            case \"RGB_ZERO\":\n              material.opacity = 1 - color[0] * transparency.float;\n              break;\n            case \"A_ZERO\":\n              material.opacity = 1 - color[3] * transparency.float;\n              break;\n            case \"RGB_ONE\":\n              material.opacity = color[0] * transparency.float;\n              break;\n            default:\n              console.warn(\n                'THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.',\n                transparent.opaque\n              );\n          }\n\n          if (material.opacity < 1) material.transparent = true;\n        }\n      }\n\n      //\n\n      if (\n        extra !== undefined &&\n        extra.technique !== undefined &&\n        extra.technique.double_sided === 1\n      ) {\n        material.side = THREE.DoubleSide;\n      }\n\n      return material;\n    }\n\n    function getMaterial(id) {\n      return getBuild(library.materials[id], buildMaterial);\n    }\n\n    // camera\n\n    function parseCamera(xml) {\n      var data = {\n        name: xml.getAttribute(\"name\"),\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"optics\":\n            data.optics = parseCameraOptics(child);\n            break;\n        }\n      }\n\n      library.cameras[xml.getAttribute(\"id\")] = data;\n    }\n\n    function parseCameraOptics(xml) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case \"technique_common\":\n            return parseCameraTechnique(child);\n        }\n      }\n\n      return {};\n    }\n\n    function parseCameraTechnique(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case \"perspective\":\n          case \"orthographic\":\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters(child);\n\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseCameraParameters(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case \"xfov\":\n          case \"yfov\":\n          case \"xmag\":\n          case \"ymag\":\n          case \"znear\":\n          case \"zfar\":\n          case \"aspect_ratio\":\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildCamera(data) {\n      var camera;\n\n      switch (data.optics.technique) {\n        case \"perspective\":\n          camera = new THREE.PerspectiveCamera(\n            data.optics.parameters.yfov,\n            data.optics.parameters.aspect_ratio,\n            data.optics.parameters.znear,\n            data.optics.parameters.zfar\n          );\n          break;\n\n        case \"orthographic\":\n          var ymag = data.optics.parameters.ymag;\n          var xmag = data.optics.parameters.xmag;\n          var aspectRatio = data.optics.parameters.aspect_ratio;\n\n          xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n          ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n\n          xmag *= 0.5;\n          ymag *= 0.5;\n\n          camera = new THREE.OrthographicCamera(\n            -xmag,\n            xmag,\n            ymag,\n            -ymag, // left, right, top, bottom\n            data.optics.parameters.znear,\n            data.optics.parameters.zfar\n          );\n          break;\n\n        default:\n          camera = new THREE.PerspectiveCamera();\n          break;\n      }\n\n      camera.name = data.name;\n\n      return camera;\n    }\n\n    function getCamera(id) {\n      var data = library.cameras[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildCamera);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find camera with ID:\", id);\n\n      return null;\n    }\n\n    // light\n\n    function parseLight(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"technique_common\":\n            data = parseLightTechnique(child);\n            break;\n        }\n      }\n\n      library.lights[xml.getAttribute(\"id\")] = data;\n    }\n\n    function parseLightTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"directional\":\n          case \"point\":\n          case \"spot\":\n          case \"ambient\":\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters(child);\n        }\n      }\n\n      return data;\n    }\n\n    function parseLightParameters(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"color\":\n            var array = parseFloats(child.textContent);\n            data.color = new THREE.Color().fromArray(array);\n            break;\n\n          case \"falloff_angle\":\n            data.falloffAngle = parseFloat(child.textContent);\n            break;\n\n          case \"quadratic_attenuation\":\n            var f = parseFloat(child.textContent);\n            data.distance = f ? Math.sqrt(1 / f) : 0;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildLight(data) {\n      var light;\n\n      switch (data.technique) {\n        case \"directional\":\n          light = new THREE.DirectionalLight();\n          break;\n\n        case \"point\":\n          light = new THREE.PointLight();\n          break;\n\n        case \"spot\":\n          light = new THREE.SpotLight();\n          break;\n\n        case \"ambient\":\n          light = new THREE.AmbientLight();\n          break;\n      }\n\n      if (data.parameters.color) light.color.copy(data.parameters.color);\n      if (data.parameters.distance) light.distance = data.parameters.distance;\n\n      return light;\n    }\n\n    function getLight(id) {\n      var data = library.lights[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildLight);\n      }\n\n      console.warn(\"THREE.ColladaLoader: Couldn't find light with ID:\", id);\n\n      return null;\n    }\n\n    // geometry\n\n    function parseGeometry(xml) {\n      var data = {\n        name: xml.getAttribute(\"name\"),\n        sources: {},\n        vertices: {},\n        primitives: [],\n      };\n\n      var mesh = getElementsByTagName(xml, \"mesh\")[0];\n\n      // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n      if (mesh === undefined) return;\n\n      for (var i = 0; i < mesh.childNodes.length; i++) {\n        var child = mesh.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        var id = child.getAttribute(\"id\");\n\n        switch (child.nodeName) {\n          case \"source\":\n            data.sources[id] = parseSource(child);\n            break;\n\n          case \"vertices\":\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices(child);\n            break;\n\n          case \"polygons\":\n            console.warn(\n              \"THREE.ColladaLoader: Unsupported primitive type: \",\n              child.nodeName\n            );\n            break;\n\n          case \"lines\":\n          case \"linestrips\":\n          case \"polylist\":\n          case \"triangles\":\n            data.primitives.push(parseGeometryPrimitive(child));\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.geometries[xml.getAttribute(\"id\")] = data;\n    }\n\n    function parseSource(xml) {\n      var data = {\n        array: [],\n        stride: 3,\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"float_array\":\n            data.array = parseFloats(child.textContent);\n            break;\n\n          case \"Name_array\":\n            data.array = parseStrings(child.textContent);\n            break;\n\n          case \"technique_common\":\n            var accessor = getElementsByTagName(child, \"accessor\")[0];\n\n            if (accessor !== undefined) {\n              data.stride = parseInt(accessor.getAttribute(\"stride\"));\n            }\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseGeometryVertices(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        data[child.getAttribute(\"semantic\")] = parseId(\n          child.getAttribute(\"source\")\n        );\n      }\n\n      return data;\n    }\n\n    function parseGeometryPrimitive(xml) {\n      var primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute(\"material\"),\n        count: parseInt(xml.getAttribute(\"count\")),\n        inputs: {},\n        stride: 0,\n        hasUV: false,\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"input\":\n            var id = parseId(child.getAttribute(\"source\"));\n            var semantic = child.getAttribute(\"semantic\");\n            var offset = parseInt(child.getAttribute(\"offset\"));\n            primitive.inputs[semantic] = { id: id, offset: offset };\n            primitive.stride = Math.max(primitive.stride, offset + 1);\n            if (semantic === \"TEXCOORD\") primitive.hasUV = true;\n            break;\n\n          case \"vcount\":\n            primitive.vcount = parseInts(child.textContent);\n            break;\n\n          case \"p\":\n            primitive.p = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return primitive;\n    }\n\n    function groupPrimitives(primitives) {\n      var build = {};\n\n      for (var i = 0; i < primitives.length; i++) {\n        var primitive = primitives[i];\n\n        if (build[primitive.type] === undefined) build[primitive.type] = [];\n\n        build[primitive.type].push(primitive);\n      }\n\n      return build;\n    }\n\n    function checkUVCoordinates(primitives) {\n      var count = 0;\n\n      for (var i = 0, l = primitives.length; i < l; i++) {\n        var primitive = primitives[i];\n\n        if (primitive.hasUV === true) {\n          count++;\n        }\n      }\n\n      if (count > 0 && count < primitives.length) {\n        primitives.uvsNeedsFix = true;\n      }\n    }\n\n    function buildGeometry(data) {\n      var build = {};\n\n      var sources = data.sources;\n      var vertices = data.vertices;\n      var primitives = data.primitives;\n\n      if (primitives.length === 0) return {};\n\n      // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      var groupedPrimitives = groupPrimitives(primitives);\n\n      for (var type in groupedPrimitives) {\n        var primitiveType = groupedPrimitives[type];\n\n        // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates(primitiveType);\n\n        // third, create a buffer geometry for each type of primitives\n\n        build[type] = buildGeometryType(primitiveType, sources, vertices);\n      }\n\n      return build;\n    }\n\n    function buildGeometryType(primitives, sources, vertices) {\n      var build = {};\n\n      var position = { array: [], stride: 0 };\n      var normal = { array: [], stride: 0 };\n      var uv = { array: [], stride: 0 };\n      var color = { array: [], stride: 0 };\n\n      var skinIndex = { array: [], stride: 4 };\n      var skinWeight = { array: [], stride: 4 };\n\n      var geometry = new THREE.BufferGeometry();\n\n      var materialKeys = [];\n\n      var start = 0;\n\n      for (var p = 0; p < primitives.length; p++) {\n        var primitive = primitives[p];\n        var inputs = primitive.inputs;\n\n        // groups\n\n        var count = 0;\n\n        switch (primitive.type) {\n          case \"lines\":\n          case \"linestrips\":\n            count = primitive.count * 2;\n            break;\n\n          case \"triangles\":\n            count = primitive.count * 3;\n            break;\n\n          case \"polylist\":\n            for (var g = 0; g < primitive.count; g++) {\n              var vc = primitive.vcount[g];\n\n              switch (vc) {\n                case 3:\n                  count += 3; // single triangle\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n                  break;\n\n                default:\n                  count += (vc - 2) * 3; // polylist with more than four vertices\n                  break;\n              }\n            }\n\n            break;\n\n          default:\n            console.warn(\n              \"THREE.ColladaLoader: Unknow primitive type:\",\n              primitive.type\n            );\n        }\n\n        geometry.addGroup(start, count, p);\n        start += count;\n\n        // material\n\n        if (primitive.material) {\n          materialKeys.push(primitive.material);\n        }\n\n        // geometry data\n\n        for (var name in inputs) {\n          var input = inputs[name];\n\n          switch (name) {\n            case \"VERTEX\":\n              for (var key in vertices) {\n                var id = vertices[key];\n\n                switch (key) {\n                  case \"POSITION\":\n                    var prevLength = position.array.length;\n                    buildGeometryData(\n                      primitive,\n                      sources[id],\n                      input.offset,\n                      position.array\n                    );\n                    position.stride = sources[id].stride;\n\n                    if (sources.skinWeights && sources.skinIndices) {\n                      buildGeometryData(\n                        primitive,\n                        sources.skinIndices,\n                        input.offset,\n                        skinIndex.array\n                      );\n                      buildGeometryData(\n                        primitive,\n                        sources.skinWeights,\n                        input.offset,\n                        skinWeight.array\n                      );\n                    }\n\n                    // see #3803\n\n                    if (\n                      primitive.hasUV === false &&\n                      primitives.uvsNeedsFix === true\n                    ) {\n                      var count =\n                        (position.array.length - prevLength) / position.stride;\n\n                      for (var i = 0; i < count; i++) {\n                        // fill missing uv coordinates\n\n                        uv.array.push(0, 0);\n                      }\n                    }\n                    break;\n\n                  case \"NORMAL\":\n                    buildGeometryData(\n                      primitive,\n                      sources[id],\n                      input.offset,\n                      normal.array\n                    );\n                    normal.stride = sources[id].stride;\n                    break;\n\n                  case \"COLOR\":\n                    buildGeometryData(\n                      primitive,\n                      sources[id],\n                      input.offset,\n                      color.array\n                    );\n                    color.stride = sources[id].stride;\n                    break;\n\n                  case \"TEXCOORD\":\n                    buildGeometryData(\n                      primitive,\n                      sources[id],\n                      input.offset,\n                      uv.array\n                    );\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  default:\n                    console.warn(\n                      'THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.',\n                      key\n                    );\n                }\n              }\n              break;\n\n            case \"NORMAL\":\n              buildGeometryData(\n                primitive,\n                sources[input.id],\n                input.offset,\n                normal.array\n              );\n              normal.stride = sources[input.id].stride;\n              break;\n\n            case \"COLOR\":\n              buildGeometryData(\n                primitive,\n                sources[input.id],\n                input.offset,\n                color.array\n              );\n              color.stride = sources[input.id].stride;\n              break;\n\n            case \"TEXCOORD\":\n              buildGeometryData(\n                primitive,\n                sources[input.id],\n                input.offset,\n                uv.array\n              );\n              uv.stride = sources[input.id].stride;\n              break;\n          }\n        }\n      }\n\n      // build geometry\n\n      if (position.array.length > 0)\n        geometry.addAttribute(\n          \"position\",\n          new THREE.Float32BufferAttribute(position.array, position.stride)\n        );\n      if (normal.array.length > 0)\n        geometry.addAttribute(\n          \"normal\",\n          new THREE.Float32BufferAttribute(normal.array, normal.stride)\n        );\n      if (color.array.length > 0)\n        geometry.addAttribute(\n          \"color\",\n          new THREE.Float32BufferAttribute(color.array, color.stride)\n        );\n      if (uv.array.length > 0)\n        geometry.addAttribute(\n          \"uv\",\n          new THREE.Float32BufferAttribute(uv.array, uv.stride)\n        );\n\n      if (skinIndex.array.length > 0)\n        geometry.addAttribute(\n          \"skinIndex\",\n          new THREE.Float32BufferAttribute(skinIndex.array, skinIndex.stride)\n        );\n      if (skinWeight.array.length > 0)\n        geometry.addAttribute(\n          \"skinWeight\",\n          new THREE.Float32BufferAttribute(skinWeight.array, skinWeight.stride)\n        );\n\n      build.data = geometry;\n      build.type = primitives[0].type;\n      build.materialKeys = materialKeys;\n\n      return build;\n    }\n\n    function buildGeometryData(primitive, source, offset, array) {\n      var indices = primitive.p;\n      var stride = primitive.stride;\n      var vcount = primitive.vcount;\n\n      function pushVector(i) {\n        var index = indices[i + offset] * sourceStride;\n        var length = index + sourceStride;\n\n        for (; index < length; index++) {\n          array.push(sourceArray[index]);\n        }\n      }\n\n      var sourceArray = source.array;\n      var sourceStride = source.stride;\n\n      if (primitive.vcount !== undefined) {\n        var index = 0;\n\n        for (var i = 0, l = vcount.length; i < l; i++) {\n          var count = vcount[i];\n\n          if (count === 4) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            var d = index + stride * 3;\n\n            pushVector(a);\n            pushVector(b);\n            pushVector(d);\n            pushVector(b);\n            pushVector(c);\n            pushVector(d);\n          } else if (count === 3) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n\n            pushVector(a);\n            pushVector(b);\n            pushVector(c);\n          } else if (count > 4) {\n            for (var k = 1, kl = count - 2; k <= kl; k++) {\n              var a = index + stride * 0;\n              var b = index + stride * k;\n              var c = index + stride * (k + 1);\n\n              pushVector(a);\n              pushVector(b);\n              pushVector(c);\n            }\n          }\n\n          index += stride * count;\n        }\n      } else {\n        for (var i = 0, l = indices.length; i < l; i += stride) {\n          pushVector(i);\n        }\n      }\n    }\n\n    function getGeometry(id) {\n      return getBuild(library.geometries[id], buildGeometry);\n    }\n\n    // kinematics\n\n    function parseKinematicsModel(xml) {\n      var data = {\n        name: xml.getAttribute(\"name\") || \"\",\n        joints: {},\n        links: [],\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"technique_common\":\n            parseKinematicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n\n      library.kinematicsModels[xml.getAttribute(\"id\")] = data;\n    }\n\n    function buildKinematicsModel(data) {\n      if (data.build !== undefined) return data.build;\n\n      return data;\n    }\n\n    function getKinematicsModel(id) {\n      return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n    }\n\n    function parseKinematicsTechniqueCommon(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"joint\":\n            data.joints[child.getAttribute(\"sid\")] =\n              parseKinematicsJoint(child);\n            break;\n\n          case \"link\":\n            data.links.push(parseKinematicsLink(child));\n            break;\n        }\n      }\n    }\n\n    function parseKinematicsJoint(xml) {\n      var data;\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"prismatic\":\n          case \"revolute\":\n            data = parseKinematicsJointParameter(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsJointParameter(xml, data) {\n      var data = {\n        sid: xml.getAttribute(\"sid\"),\n        name: xml.getAttribute(\"name\") || \"\",\n        axis: new THREE.Vector3(),\n        limits: {\n          min: 0,\n          max: 0,\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0,\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"axis\":\n            var array = parseFloats(child.textContent);\n            data.axis.fromArray(array);\n            break;\n          case \"limits\":\n            var max = child.getElementsByTagName(\"max\")[0];\n            var min = child.getElementsByTagName(\"min\")[0];\n\n            data.limits.max = parseFloat(max.textContent);\n            data.limits.min = parseFloat(min.textContent);\n            break;\n        }\n      }\n\n      // if min is equal to or greater than max, consider the joint static\n\n      if (data.limits.min >= data.limits.max) {\n        data.static = true;\n      }\n\n      // calculate middle position\n\n      data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n\n      return data;\n    }\n\n    function parseKinematicsLink(xml) {\n      var data = {\n        sid: xml.getAttribute(\"sid\"),\n        name: xml.getAttribute(\"name\") || \"\",\n        attachments: [],\n        transforms: [],\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"attachment_full\":\n            data.attachments.push(parseKinematicsAttachment(child));\n            break;\n\n          case \"matrix\":\n          case \"translate\":\n          case \"rotate\":\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsAttachment(xml) {\n      var data = {\n        joint: xml.getAttribute(\"joint\").split(\"/\").pop(),\n        transforms: [],\n        links: [],\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"link\":\n            data.links.push(parseKinematicsLink(child));\n            break;\n\n          case \"matrix\":\n          case \"translate\":\n          case \"rotate\":\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsTransform(xml) {\n      var data = {\n        type: xml.nodeName,\n      };\n\n      var array = parseFloats(xml.textContent);\n\n      switch (data.type) {\n        case \"matrix\":\n          data.obj = new THREE.Matrix4();\n          data.obj.fromArray(array).transpose();\n          break;\n\n        case \"translate\":\n          data.obj = new THREE.Vector3();\n          data.obj.fromArray(array);\n          break;\n\n        case \"rotate\":\n          data.obj = new THREE.Vector3();\n          data.obj.fromArray(array);\n          data.angle = THREE.Math.degToRad(array[3]);\n          break;\n      }\n\n      return data;\n    }\n\n    // physics\n\n    function parsePhysicsModel(xml) {\n      var data = {\n        name: xml.getAttribute(\"name\") || \"\",\n        rigidBodies: {},\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"rigid_body\":\n            data.rigidBodies[child.getAttribute(\"name\")] = {};\n            parsePhysicsRigidBody(\n              child,\n              data.rigidBodies[child.getAttribute(\"name\")]\n            );\n            break;\n        }\n      }\n\n      library.physicsModels[xml.getAttribute(\"id\")] = data;\n    }\n\n    function parsePhysicsRigidBody(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"technique_common\":\n            parsePhysicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n    }\n\n    function parsePhysicsTechniqueCommon(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"inertia\":\n            data.inertia = parseFloats(child.textContent);\n            break;\n\n          case \"mass\":\n            data.mass = parseFloats(child.textContent)[0];\n            break;\n        }\n      }\n    }\n\n    // scene\n\n    function parseKinematicsScene(xml) {\n      var data = {\n        bindJointAxis: [],\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"bind_joint_axis\":\n            data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n            break;\n        }\n      }\n\n      library.kinematicsScenes[parseId(xml.getAttribute(\"url\"))] = data;\n    }\n\n    function parseKinematicsBindJointAxis(xml) {\n      var data = {\n        target: xml.getAttribute(\"target\").split(\"/\").pop(),\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"axis\":\n            var param = child.getElementsByTagName(\"param\")[0];\n            data.axis = param.textContent;\n            var tmpJointIndex = data.axis.split(\"inst_\").pop().split(\"axis\")[0];\n            data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildKinematicsScene(data) {\n      if (data.build !== undefined) return data.build;\n\n      return data;\n    }\n\n    function getKinematicsScene(id) {\n      return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n    }\n\n    function setupKinematics() {\n      var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n      var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n      var visualSceneId = Object.keys(library.visualScenes)[0];\n\n      if (kinematicsModelId === undefined || kinematicsSceneId === undefined)\n        return;\n\n      var kinematicsModel = getKinematicsModel(kinematicsModelId);\n      var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n      var visualScene = getVisualScene(visualSceneId);\n\n      var bindJointAxis = kinematicsScene.bindJointAxis;\n      var jointMap = {};\n\n      for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n        var axis = bindJointAxis[i];\n\n        // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        var targetElement = collada.querySelector(\n          '[sid=\"' + axis.target + '\"]'\n        );\n\n        if (targetElement) {\n          // get the parent of the transfrom element\n\n          var parentVisualElement = targetElement.parentElement;\n\n          // connect the joint of the kinematics model with the element in the visual scene\n\n          connect(axis.jointIndex, parentVisualElement);\n        }\n      }\n\n      function connect(jointIndex, visualElement) {\n        var visualElementName = visualElement.getAttribute(\"name\");\n        var joint = kinematicsModel.joints[jointIndex];\n\n        visualScene.traverse(function (object) {\n          if (object.name === visualElementName) {\n            jointMap[jointIndex] = {\n              object: object,\n              transforms: buildTransformList(visualElement),\n              joint: joint,\n              position: joint.zeroPosition,\n            };\n          }\n        });\n      }\n\n      var m0 = new THREE.Matrix4();\n\n      kinematics = {\n        joints: kinematicsModel && kinematicsModel.joints,\n\n        getJointValue: function (jointIndex) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            return jointData.position;\n          } else {\n            console.warn(\n              \"THREE.ColladaLoader: Joint \" + jointIndex + \" doesn't exist.\"\n            );\n          }\n        },\n\n        setJointValue: function (jointIndex, value) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            var joint = jointData.joint;\n\n            if (value > joint.limits.max || value < joint.limits.min) {\n              console.warn(\n                \"THREE.ColladaLoader: Joint \" +\n                  jointIndex +\n                  \" value \" +\n                  value +\n                  \" outside of limits (min: \" +\n                  joint.limits.min +\n                  \", max: \" +\n                  joint.limits.max +\n                  \").\"\n              );\n            } else if (joint.static) {\n              console.warn(\n                \"THREE.ColladaLoader: Joint \" + jointIndex + \" is static.\"\n              );\n            } else {\n              var object = jointData.object;\n              var axis = joint.axis;\n              var transforms = jointData.transforms;\n\n              matrix.identity();\n\n              // each update, we have to apply all transforms in the correct order\n\n              for (var i = 0; i < transforms.length; i++) {\n                var transform = transforms[i];\n\n                // if there is a connection of the transform node with a joint, apply the joint value\n\n                if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                  switch (joint.type) {\n                    case \"revolute\":\n                      matrix.multiply(\n                        m0.makeRotationAxis(axis, THREE.Math.degToRad(value))\n                      );\n                      break;\n\n                    case \"prismatic\":\n                      matrix.multiply(\n                        m0.makeTranslation(\n                          axis.x * value,\n                          axis.y * value,\n                          axis.z * value\n                        )\n                      );\n                      break;\n\n                    default:\n                      console.warn(\n                        \"THREE.ColladaLoader: Unknown joint type: \" + joint.type\n                      );\n                      break;\n                  }\n                } else {\n                  switch (transform.type) {\n                    case \"matrix\":\n                      matrix.multiply(transform.obj);\n                      break;\n\n                    case \"translate\":\n                      matrix.multiply(\n                        m0.makeTranslation(\n                          transform.obj.x,\n                          transform.obj.y,\n                          transform.obj.z\n                        )\n                      );\n                      break;\n\n                    case \"scale\":\n                      matrix.scale(transform.obj);\n                      break;\n\n                    case \"rotate\":\n                      matrix.multiply(\n                        m0.makeRotationAxis(transform.obj, transform.angle)\n                      );\n                      break;\n                  }\n                }\n              }\n\n              object.matrix.copy(matrix);\n              object.matrix.decompose(\n                object.position,\n                object.quaternion,\n                object.scale\n              );\n\n              jointMap[jointIndex].position = value;\n            }\n          } else {\n            console.log(\n              \"THREE.ColladaLoader: \" + jointIndex + \" does not exist.\"\n            );\n          }\n        },\n      };\n    }\n\n    function buildTransformList(node) {\n      var transforms = [];\n\n      var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"matrix\":\n            var array = parseFloats(child.textContent);\n            var matrix = new THREE.Matrix4().fromArray(array).transpose();\n            transforms.push({\n              sid: child.getAttribute(\"sid\"),\n              type: child.nodeName,\n              obj: matrix,\n            });\n            break;\n\n          case \"translate\":\n          case \"scale\":\n            var array = parseFloats(child.textContent);\n            var vector = new THREE.Vector3().fromArray(array);\n            transforms.push({\n              sid: child.getAttribute(\"sid\"),\n              type: child.nodeName,\n              obj: vector,\n            });\n            break;\n\n          case \"rotate\":\n            var array = parseFloats(child.textContent);\n            var vector = new THREE.Vector3().fromArray(array);\n            var angle = THREE.Math.degToRad(array[3]);\n            transforms.push({\n              sid: child.getAttribute(\"sid\"),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle,\n            });\n            break;\n        }\n      }\n\n      return transforms;\n    }\n\n    // nodes\n\n    function prepareNodes(xml) {\n      var elements = xml.getElementsByTagName(\"node\");\n\n      // ensure all node elements have id attributes\n\n      for (var i = 0; i < elements.length; i++) {\n        var element = elements[i];\n\n        if (element.hasAttribute(\"id\") === false) {\n          element.setAttribute(\"id\", generateId());\n        }\n      }\n    }\n\n    var matrix = new THREE.Matrix4();\n    var vector = new THREE.Vector3();\n\n    function parseNode(xml) {\n      var data = {\n        name: xml.getAttribute(\"name\") || \"\",\n        type: xml.getAttribute(\"type\"),\n        id: xml.getAttribute(\"id\"),\n        sid: xml.getAttribute(\"sid\"),\n        matrix: new THREE.Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {},\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case \"node\":\n            data.nodes.push(child.getAttribute(\"id\"));\n            parseNode(child);\n            break;\n\n          case \"instance_camera\":\n            data.instanceCameras.push(parseId(child.getAttribute(\"url\")));\n            break;\n\n          case \"instance_controller\":\n            data.instanceControllers.push(parseNodeInstance(child));\n            break;\n\n          case \"instance_light\":\n            data.instanceLights.push(parseId(child.getAttribute(\"url\")));\n            break;\n\n          case \"instance_geometry\":\n            data.instanceGeometries.push(parseNodeInstance(child));\n            break;\n\n          case \"instance_node\":\n            data.instanceNodes.push(parseId(child.getAttribute(\"url\")));\n            break;\n\n          case \"matrix\":\n            var array = parseFloats(child.textContent);\n            data.matrix.multiply(matrix.fromArray(array).transpose());\n            data.transforms[child.getAttribute(\"sid\")] = child.nodeName;\n            break;\n\n          case \"translate\":\n            var array = parseFloats(child.textContent);\n            vector.fromArray(array);\n            data.matrix.multiply(\n              matrix.makeTranslation(vector.x, vector.y, vector.z)\n            );\n            data.transforms[child.getAttribute(\"sid\")] = child.nodeName;\n            break;\n\n          case \"rotate\":\n            var array = parseFloats(child.textContent);\n            var angle = THREE.Math.degToRad(array[3]);\n            data.matrix.multiply(\n              matrix.makeRotationAxis(vector.fromArray(array), angle)\n            );\n            data.transforms[child.getAttribute(\"sid\")] = child.nodeName;\n            break;\n\n          case \"scale\":\n            var array = parseFloats(child.textContent);\n            data.matrix.scale(vector.fromArray(array));\n            data.transforms[child.getAttribute(\"sid\")] = child.nodeName;\n            break;\n\n          case \"extra\":\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasNode(data.id)) {\n        console.warn(\n          \"THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.\",\n          data.id\n        );\n      } else {\n        library.nodes[data.id] = data;\n      }\n\n      return data;\n    }\n\n    function parseNodeInstance(xml) {\n      var data = {\n        id: parseId(xml.getAttribute(\"url\")),\n        materials: {},\n        skeletons: [],\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case \"bind_material\":\n            var instances = child.getElementsByTagName(\"instance_material\");\n\n            for (var j = 0; j < instances.length; j++) {\n              var instance = instances[j];\n              var symbol = instance.getAttribute(\"symbol\");\n              var target = instance.getAttribute(\"target\");\n\n              data.materials[symbol] = parseId(target);\n            }\n\n            break;\n\n          case \"skeleton\":\n            data.skeletons.push(parseId(child.textContent));\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildSkeleton(skeletons, joints) {\n      var boneData = [];\n      var sortedBoneData = [];\n\n      var i, j, data;\n\n      // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for (i = 0; i < skeletons.length; i++) {\n        var skeleton = skeletons[i];\n\n        var root;\n\n        if (hasNode(skeleton)) {\n          root = getNode(skeleton);\n          buildBoneHierarchy(root, joints, boneData);\n        } else if (hasVisualScene(skeleton)) {\n          // handle case where the skeleton refers to the visual scene (#13335)\n\n          var visualScene = library.visualScenes[skeleton];\n          var children = visualScene.children;\n\n          for (var j = 0; j < children.length; j++) {\n            var child = children[j];\n\n            if (child.type === \"JOINT\") {\n              var root = getNode(child.id);\n              buildBoneHierarchy(root, joints, boneData);\n            }\n          }\n        } else {\n          console.error(\n            \"THREE.ColladaLoader: Unable to find root bone of skeleton with ID:\",\n            skeleton\n          );\n        }\n      }\n\n      // sort bone data (the order is defined in the corresponding controller)\n\n      for (i = 0; i < joints.length; i++) {\n        for (j = 0; j < boneData.length; j++) {\n          data = boneData[j];\n\n          if (data.bone.name === joints[i].name) {\n            sortedBoneData[i] = data;\n            data.processed = true;\n            break;\n          }\n        }\n      }\n\n      // add unprocessed bone data at the end of the list\n\n      for (i = 0; i < boneData.length; i++) {\n        data = boneData[i];\n\n        if (data.processed === false) {\n          sortedBoneData.push(data);\n          data.processed = true;\n        }\n      }\n\n      // setup arrays for skeleton creation\n\n      var bones = [];\n      var boneInverses = [];\n\n      for (i = 0; i < sortedBoneData.length; i++) {\n        data = sortedBoneData[i];\n\n        bones.push(data.bone);\n        boneInverses.push(data.boneInverse);\n      }\n\n      return new THREE.Skeleton(bones, boneInverses);\n    }\n\n    function buildBoneHierarchy(root, joints, boneData) {\n      // setup bone data from visual scene\n\n      root.traverse(function (object) {\n        if (object.isBone === true) {\n          var boneInverse;\n\n          // retrieve the boneInverse from the controller data\n\n          for (var i = 0; i < joints.length; i++) {\n            var joint = joints[i];\n\n            if (joint.name === object.name) {\n              boneInverse = joint.boneInverse;\n              break;\n            }\n          }\n\n          if (boneInverse === undefined) {\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n\n            boneInverse = new THREE.Matrix4();\n          }\n\n          boneData.push({\n            bone: object,\n            boneInverse: boneInverse,\n            processed: false,\n          });\n        }\n      });\n    }\n\n    function buildNode(data) {\n      var objects = [];\n\n      var matrix = data.matrix;\n      var nodes = data.nodes;\n      var type = data.type;\n      var instanceCameras = data.instanceCameras;\n      var instanceControllers = data.instanceControllers;\n      var instanceLights = data.instanceLights;\n      var instanceGeometries = data.instanceGeometries;\n      var instanceNodes = data.instanceNodes;\n\n      // nodes\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        objects.push(getNode(nodes[i]));\n      }\n\n      // instance cameras\n\n      for (var i = 0, l = instanceCameras.length; i < l; i++) {\n        var instanceCamera = getCamera(instanceCameras[i]);\n\n        if (instanceCamera !== null) {\n          objects.push(instanceCamera.clone());\n        }\n      }\n\n      // instance controllers\n\n      for (var i = 0, l = instanceControllers.length; i < l; i++) {\n        var instance = instanceControllers[i];\n        var controller = getController(instance.id);\n        var geometries = getGeometry(controller.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n\n        var skeletons = instance.skeletons;\n        var joints = controller.skin.joints;\n\n        var skeleton = buildSkeleton(skeletons, joints);\n\n        for (var j = 0, jl = newObjects.length; j < jl; j++) {\n          var object = newObjects[j];\n\n          if (object.isSkinnedMesh) {\n            object.bind(skeleton, controller.skin.bindMatrix);\n            object.normalizeSkinWeights();\n          }\n\n          objects.push(object);\n        }\n      }\n\n      // instance lights\n\n      for (var i = 0, l = instanceLights.length; i < l; i++) {\n        var instanceLight = getLight(instanceLights[i]);\n\n        if (instanceLight !== null) {\n          objects.push(instanceLight.clone());\n        }\n      }\n\n      // instance geometries\n\n      for (var i = 0, l = instanceGeometries.length; i < l; i++) {\n        var instance = instanceGeometries[i];\n\n        // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        var geometries = getGeometry(instance.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n\n        for (var j = 0, jl = newObjects.length; j < jl; j++) {\n          objects.push(newObjects[j]);\n        }\n      }\n\n      // instance nodes\n\n      for (var i = 0, l = instanceNodes.length; i < l; i++) {\n        objects.push(getNode(instanceNodes[i]).clone());\n      }\n\n      var object;\n\n      if (nodes.length === 0 && objects.length === 1) {\n        object = objects[0];\n      } else {\n        object = type === \"JOINT\" ? new THREE.Bone() : new THREE.Group();\n\n        for (var i = 0; i < objects.length; i++) {\n          object.add(objects[i]);\n        }\n      }\n\n      if (object.name === \"\") {\n        object.name = type === \"JOINT\" ? data.sid : data.name;\n      }\n\n      object.matrix.copy(matrix);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n\n      return object;\n    }\n\n    var fallbackMaterial = new THREE.MeshBasicMaterial({ color: 0xff00ff });\n\n    function resolveMaterialBinding(keys, instanceMaterials) {\n      var materials = [];\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var id = instanceMaterials[keys[i]];\n\n        if (id === undefined) {\n          console.warn(\n            \"THREE.ColladaLoader: Material with key %s not found. Apply fallback material.\",\n            keys[i]\n          );\n          materials.push(fallbackMaterial);\n        } else {\n          materials.push(getMaterial(id));\n        }\n      }\n\n      return materials;\n    }\n\n    function buildObjects(geometries, instanceMaterials) {\n      var objects = [];\n\n      for (var type in geometries) {\n        var geometry = geometries[type];\n\n        var materials = resolveMaterialBinding(\n          geometry.materialKeys,\n          instanceMaterials\n        );\n\n        // handle case if no materials are defined\n\n        if (materials.length === 0) {\n          if (type === \"lines\" || type === \"linestrips\") {\n            materials.push(new THREE.LineBasicMaterial());\n          } else {\n            materials.push(new THREE.MeshPhongMaterial());\n          }\n        }\n\n        // regard skinning\n\n        var skinning = geometry.data.attributes.skinIndex !== undefined;\n\n        if (skinning) {\n          for (var i = 0, l = materials.length; i < l; i++) {\n            materials[i].skinning = true;\n          }\n        }\n\n        // choose between a single or multi materials (material array)\n\n        var material = materials.length === 1 ? materials[0] : materials;\n\n        // now create a specific 3D object\n\n        var object;\n\n        switch (type) {\n          case \"lines\":\n            object = new THREE.LineSegments(geometry.data, material);\n            break;\n\n          case \"linestrips\":\n            object = new THREE.Line(geometry.data, material);\n            break;\n\n          case \"triangles\":\n          case \"polylist\":\n            if (skinning) {\n              object = new THREE.SkinnedMesh(geometry.data, material);\n            } else {\n              object = new THREE.Mesh(geometry.data, material);\n            }\n            break;\n        }\n\n        objects.push(object);\n      }\n\n      return objects;\n    }\n\n    function hasNode(id) {\n      return library.nodes[id] !== undefined;\n    }\n\n    function getNode(id) {\n      return getBuild(library.nodes[id], buildNode);\n    }\n\n    // visual scenes\n\n    function parseVisualScene(xml) {\n      var data = {\n        name: xml.getAttribute(\"name\"),\n        children: [],\n      };\n\n      prepareNodes(xml);\n\n      var elements = getElementsByTagName(xml, \"node\");\n\n      for (var i = 0; i < elements.length; i++) {\n        data.children.push(parseNode(elements[i]));\n      }\n\n      library.visualScenes[xml.getAttribute(\"id\")] = data;\n    }\n\n    function buildVisualScene(data) {\n      var group = new THREE.Group();\n      group.name = data.name;\n\n      var children = data.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n\n        group.add(getNode(child.id));\n      }\n\n      return group;\n    }\n\n    function hasVisualScene(id) {\n      return library.visualScenes[id] !== undefined;\n    }\n\n    function getVisualScene(id) {\n      return getBuild(library.visualScenes[id], buildVisualScene);\n    }\n\n    // scenes\n\n    function parseScene(xml) {\n      var instance = getElementsByTagName(xml, \"instance_visual_scene\")[0];\n      return getVisualScene(parseId(instance.getAttribute(\"url\")));\n    }\n\n    function setupAnimations() {\n      var clips = library.clips;\n\n      if (isEmpty(clips) === true) {\n        if (isEmpty(library.animations) === false) {\n          // if there are animations but no clips, we create a default clip for playback\n\n          var tracks = [];\n\n          for (var id in library.animations) {\n            var animationTracks = getAnimation(id);\n\n            for (var i = 0, l = animationTracks.length; i < l; i++) {\n              tracks.push(animationTracks[i]);\n            }\n          }\n\n          animations.push(new THREE.AnimationClip(\"default\", -1, tracks));\n        }\n      } else {\n        for (var id in clips) {\n          animations.push(getAnimationClip(id));\n        }\n      }\n    }\n\n    if (text.length === 0) {\n      return { scene: new THREE.Scene() };\n    }\n\n    var xml = new DOMParser().parseFromString(text, \"application/xml\");\n\n    var collada = getElementsByTagName(xml, \"COLLADA\")[0];\n\n    // metadata\n\n    var version = collada.getAttribute(\"version\");\n    console.log(\"THREE.ColladaLoader: File version\", version);\n\n    var asset = parseAsset(getElementsByTagName(collada, \"asset\")[0]);\n    var textureLoader = new THREE.TextureLoader(this.manager);\n    textureLoader.setPath(path).setCrossOrigin(this.crossOrigin);\n\n    var tgaLoader;\n\n    if (THREE.TGALoader) {\n      tgaLoader = new THREE.TGALoader(this.manager);\n      tgaLoader.setPath(path);\n    }\n\n    //\n\n    var animations = [];\n    var kinematics = {};\n    var count = 0;\n\n    //\n\n    var library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {},\n    };\n\n    parseLibrary(collada, \"library_animations\", \"animation\", parseAnimation);\n    parseLibrary(\n      collada,\n      \"library_animation_clips\",\n      \"animation_clip\",\n      parseAnimationClip\n    );\n    parseLibrary(collada, \"library_controllers\", \"controller\", parseController);\n    parseLibrary(collada, \"library_images\", \"image\", parseImage);\n    parseLibrary(collada, \"library_effects\", \"effect\", parseEffect);\n    parseLibrary(collada, \"library_materials\", \"material\", parseMaterial);\n    parseLibrary(collada, \"library_cameras\", \"camera\", parseCamera);\n    parseLibrary(collada, \"library_lights\", \"light\", parseLight);\n    parseLibrary(collada, \"library_geometries\", \"geometry\", parseGeometry);\n    parseLibrary(collada, \"library_nodes\", \"node\", parseNode);\n    parseLibrary(\n      collada,\n      \"library_visual_scenes\",\n      \"visual_scene\",\n      parseVisualScene\n    );\n    parseLibrary(\n      collada,\n      \"library_kinematics_models\",\n      \"kinematics_model\",\n      parseKinematicsModel\n    );\n    parseLibrary(\n      collada,\n      \"library_physics_models\",\n      \"physics_model\",\n      parsePhysicsModel\n    );\n    parseLibrary(\n      collada,\n      \"scene\",\n      \"instance_kinematics_scene\",\n      parseKinematicsScene\n    );\n\n    buildLibrary(library.animations, buildAnimation);\n    buildLibrary(library.clips, buildAnimationClip);\n    buildLibrary(library.controllers, buildController);\n    buildLibrary(library.images, buildImage);\n    buildLibrary(library.effects, buildEffect);\n    buildLibrary(library.materials, buildMaterial);\n    buildLibrary(library.cameras, buildCamera);\n    buildLibrary(library.lights, buildLight);\n    buildLibrary(library.geometries, buildGeometry);\n    buildLibrary(library.visualScenes, buildVisualScene);\n\n    setupAnimations();\n    setupKinematics();\n\n    var scene = parseScene(getElementsByTagName(collada, \"scene\")[0]);\n\n    if (asset.upAxis === \"Z_UP\") {\n      scene.quaternion.setFromEuler(new THREE.Euler(-Math.PI / 2, 0, 0));\n    }\n\n    scene.scale.multiplyScalar(asset.unit);\n\n    return {\n      animations: animations,\n      kinematics: kinematics,\n      library: library,\n      scene: scene,\n    };\n  },\n};\n",
    "// Copyright 2016 The Draco Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n\"use strict\";\n\n/**\n * @param {THREE.LoadingManager} manager\n */\nTHREE.DRACOLoader = function (manager) {\n  this.timeLoaded = 0;\n  this.manager = manager || THREE.DefaultLoadingManager;\n  this.materials = null;\n  this.verbosity = 0;\n  this.attributeOptions = {};\n  this.drawMode = THREE.TrianglesDrawMode;\n  // Native Draco attribute type to Three.JS attribute type.\n  this.nativeAttributeMap = {\n    position: \"POSITION\",\n    normal: \"NORMAL\",\n    color: \"COLOR\",\n    uv: \"TEX_COORD\",\n  };\n};\n\nTHREE.DRACOLoader.prototype = {\n  constructor: THREE.DRACOLoader,\n\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new THREE.FileLoader(scope.manager);\n    loader.setPath(this.path);\n    loader.setResponseType(\"arraybuffer\");\n    loader.load(\n      url,\n      function (blob) {\n        scope.decodeDracoFile(blob, onLoad);\n      },\n      onProgress,\n      onError\n    );\n  },\n\n  setPath: function (value) {\n    this.path = value;\n    return this;\n  },\n\n  setVerbosity: function (level) {\n    this.verbosity = level;\n    return this;\n  },\n\n  /**\n   *  Sets desired mode for generated geometry indices.\n   *  Can be either:\n   *      THREE.TrianglesDrawMode\n   *      THREE.TriangleStripDrawMode\n   */\n  setDrawMode: function (drawMode) {\n    this.drawMode = drawMode;\n    return this;\n  },\n\n  /**\n   * Skips dequantization for a specific attribute.\n   * |attributeName| is the THREE.js name of the given attribute type.\n   * The only currently supported |attributeName| is 'position', more may be\n   * added in future.\n   */\n  setSkipDequantization: function (attributeName, skip) {\n    var skipDequantization = true;\n    if (typeof skip !== \"undefined\") skipDequantization = skip;\n    this.getAttributeOptions(attributeName).skipDequantization =\n      skipDequantization;\n    return this;\n  },\n\n  /**\n   * |attributeUniqueIdMap| specifies attribute unique id for an attribute in\n   * the geometry to be decoded. The name of the attribute must be one of the\n   * supported attribute type in Three.JS, including:\n   *     'position',\n   *     'color',\n   *     'normal',\n   *     'uv',\n   *     'uv2',\n   *     'skinIndex',\n   *     'skinWeight'.\n   * The format is:\n   *     attributeUniqueIdMap[attributeName] = attributeId\n   */\n  decodeDracoFile: function (\n    rawBuffer,\n    callback,\n    attributeUniqueIdMap,\n    attributeTypeMap\n  ) {\n    var scope = this;\n    THREE.DRACOLoader.getDecoderModule().then(function (module) {\n      scope.decodeDracoFileInternal(\n        rawBuffer,\n        module.decoder,\n        callback,\n        attributeUniqueIdMap || {},\n        attributeTypeMap || {}\n      );\n    });\n  },\n\n  decodeDracoFileInternal: function (\n    rawBuffer,\n    dracoDecoder,\n    callback,\n    attributeUniqueIdMap,\n    attributeTypeMap\n  ) {\n    /*\n     * Here is how to use Draco Javascript decoder and get the geometry.\n     */\n    var buffer = new dracoDecoder.DecoderBuffer();\n    buffer.Init(new Int8Array(rawBuffer), rawBuffer.byteLength);\n    var decoder = new dracoDecoder.Decoder();\n\n    /*\n     * Determine what type is this file: mesh or point cloud.\n     */\n    var geometryType = decoder.GetEncodedGeometryType(buffer);\n    if (geometryType == dracoDecoder.TRIANGULAR_MESH) {\n      if (this.verbosity > 0) {\n        console.log(\"Loaded a mesh.\");\n      }\n    } else if (geometryType == dracoDecoder.POINT_CLOUD) {\n      if (this.verbosity > 0) {\n        console.log(\"Loaded a point cloud.\");\n      }\n    } else {\n      var errorMsg = \"THREE.DRACOLoader: Unknown geometry type.\";\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n    callback(\n      this.convertDracoGeometryTo3JS(\n        dracoDecoder,\n        decoder,\n        geometryType,\n        buffer,\n        attributeUniqueIdMap,\n        attributeTypeMap\n      )\n    );\n  },\n\n  addAttributeToGeometry: function (\n    dracoDecoder,\n    decoder,\n    dracoGeometry,\n    attributeName,\n    attributeType,\n    attribute,\n    geometry,\n    geometryBuffer\n  ) {\n    if (attribute.ptr === 0) {\n      var errorMsg = \"THREE.DRACOLoader: No attribute \" + attributeName;\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    var numComponents = attribute.num_components();\n    var numPoints = dracoGeometry.num_points();\n    var numValues = numPoints * numComponents;\n    var attributeData;\n    var TypedBufferAttribute;\n\n    switch (attributeType) {\n      case Float32Array:\n        attributeData = new dracoDecoder.DracoFloat32Array();\n        decoder.GetAttributeFloatForAllPoints(\n          dracoGeometry,\n          attribute,\n          attributeData\n        );\n        geometryBuffer[attributeName] = new Float32Array(numValues);\n        TypedBufferAttribute = THREE.Float32BufferAttribute;\n        break;\n\n      case Int8Array:\n        attributeData = new dracoDecoder.DracoInt8Array();\n        decoder.GetAttributeInt8ForAllPoints(\n          dracoGeometry,\n          attribute,\n          attributeData\n        );\n        geometryBuffer[attributeName] = new Int8Array(numValues);\n        TypedBufferAttribute = THREE.Int8BufferAttribute;\n        break;\n\n      case Int16Array:\n        attributeData = new dracoDecoder.DracoInt16Array();\n        decoder.GetAttributeInt16ForAllPoints(\n          dracoGeometry,\n          attribute,\n          attributeData\n        );\n        geometryBuffer[attributeName] = new Int16Array(numValues);\n        TypedBufferAttribute = THREE.Int16BufferAttribute;\n        break;\n\n      case Int32Array:\n        attributeData = new dracoDecoder.DracoInt32Array();\n        decoder.GetAttributeInt32ForAllPoints(\n          dracoGeometry,\n          attribute,\n          attributeData\n        );\n        geometryBuffer[attributeName] = new Int32Array(numValues);\n        TypedBufferAttribute = THREE.Int32BufferAttribute;\n        break;\n\n      case Uint8Array:\n        attributeData = new dracoDecoder.DracoUInt8Array();\n        decoder.GetAttributeUInt8ForAllPoints(\n          dracoGeometry,\n          attribute,\n          attributeData\n        );\n        geometryBuffer[attributeName] = new Uint8Array(numValues);\n        TypedBufferAttribute = THREE.Uint8BufferAttribute;\n        break;\n\n      case Uint16Array:\n        attributeData = new dracoDecoder.DracoUInt16Array();\n        decoder.GetAttributeUInt16ForAllPoints(\n          dracoGeometry,\n          attribute,\n          attributeData\n        );\n        geometryBuffer[attributeName] = new Uint16Array(numValues);\n        TypedBufferAttribute = THREE.Uint16BufferAttribute;\n        break;\n\n      case Uint32Array:\n        attributeData = new dracoDecoder.DracoUInt32Array();\n        decoder.GetAttributeUInt32ForAllPoints(\n          dracoGeometry,\n          attribute,\n          attributeData\n        );\n        geometryBuffer[attributeName] = new Uint32Array(numValues);\n        TypedBufferAttribute = THREE.Uint32BufferAttribute;\n        break;\n\n      default:\n        var errorMsg = \"THREE.DRACOLoader: Unexpected attribute type.\";\n        console.error(errorMsg);\n        throw new Error(errorMsg);\n    }\n\n    // Copy data from decoder.\n    for (var i = 0; i < numValues; i++) {\n      geometryBuffer[attributeName][i] = attributeData.GetValue(i);\n    }\n    // Add attribute to THREEJS geometry for rendering.\n    geometry.addAttribute(\n      attributeName,\n      new TypedBufferAttribute(geometryBuffer[attributeName], numComponents)\n    );\n    dracoDecoder.destroy(attributeData);\n  },\n\n  convertDracoGeometryTo3JS: function (\n    dracoDecoder,\n    decoder,\n    geometryType,\n    buffer,\n    attributeUniqueIdMap,\n    attributeTypeMap\n  ) {\n    if (this.getAttributeOptions(\"position\").skipDequantization === true) {\n      decoder.SkipAttributeTransform(dracoDecoder.POSITION);\n    }\n    var dracoGeometry;\n    var decodingStatus;\n    const start_time = performance.now();\n    if (geometryType === dracoDecoder.TRIANGULAR_MESH) {\n      dracoGeometry = new dracoDecoder.Mesh();\n      decodingStatus = decoder.DecodeBufferToMesh(buffer, dracoGeometry);\n    } else {\n      dracoGeometry = new dracoDecoder.PointCloud();\n      decodingStatus = decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n    }\n    if (!decodingStatus.ok() || dracoGeometry.ptr == 0) {\n      var errorMsg = \"THREE.DRACOLoader: Decoding failed: \";\n      errorMsg += decodingStatus.error_msg();\n      console.error(errorMsg);\n      dracoDecoder.destroy(decoder);\n      dracoDecoder.destroy(dracoGeometry);\n      throw new Error(errorMsg);\n    }\n\n    var decode_end = performance.now();\n    dracoDecoder.destroy(buffer);\n    /*\n     * Example on how to retrieve mesh and attributes.\n     */\n    var numFaces;\n    if (geometryType == dracoDecoder.TRIANGULAR_MESH) {\n      numFaces = dracoGeometry.num_faces();\n      if (this.verbosity > 0) {\n        console.log(\"Number of faces loaded: \" + numFaces.toString());\n      }\n    } else {\n      numFaces = 0;\n    }\n\n    var numPoints = dracoGeometry.num_points();\n    var numAttributes = dracoGeometry.num_attributes();\n    if (this.verbosity > 0) {\n      console.log(\"Number of points loaded: \" + numPoints.toString());\n      console.log(\"Number of attributes loaded: \" + numAttributes.toString());\n    }\n\n    // Verify if there is position attribute.\n    var posAttId = decoder.GetAttributeId(dracoGeometry, dracoDecoder.POSITION);\n    if (posAttId == -1) {\n      var errorMsg = \"THREE.DRACOLoader: No position attribute found.\";\n      console.error(errorMsg);\n      dracoDecoder.destroy(decoder);\n      dracoDecoder.destroy(dracoGeometry);\n      throw new Error(errorMsg);\n    }\n    var posAttribute = decoder.GetAttribute(dracoGeometry, posAttId);\n\n    // Structure for converting to THREEJS geometry later.\n    var geometryBuffer = {};\n    // Import data to Three JS geometry.\n    var geometry = new THREE.BufferGeometry();\n\n    // Add native Draco attribute type to geometry.\n    for (var attributeName in this.nativeAttributeMap) {\n      // The native attribute type is only used when no unique Id is\n      // provided. For example, loading .drc files.\n      if (attributeUniqueIdMap[attributeName] === undefined) {\n        var attId = decoder.GetAttributeId(\n          dracoGeometry,\n          dracoDecoder[this.nativeAttributeMap[attributeName]]\n        );\n        if (attId !== -1) {\n          if (this.verbosity > 0) {\n            console.log(\"Loaded \" + attributeName + \" attribute.\");\n          }\n          var attribute = decoder.GetAttribute(dracoGeometry, attId);\n          this.addAttributeToGeometry(\n            dracoDecoder,\n            decoder,\n            dracoGeometry,\n            attributeName,\n            Float32Array,\n            attribute,\n            geometry,\n            geometryBuffer\n          );\n        }\n      }\n    }\n\n    // Add attributes of user specified unique id. E.g. GLTF models.\n    for (var attributeName in attributeUniqueIdMap) {\n      var attributeType = attributeTypeMap[attributeName] || Float32Array;\n      var attributeId = attributeUniqueIdMap[attributeName];\n      var attribute = decoder.GetAttributeByUniqueId(\n        dracoGeometry,\n        attributeId\n      );\n      this.addAttributeToGeometry(\n        dracoDecoder,\n        decoder,\n        dracoGeometry,\n        attributeName,\n        attributeType,\n        attribute,\n        geometry,\n        geometryBuffer\n      );\n    }\n\n    // For mesh, we need to generate the faces.\n    if (geometryType == dracoDecoder.TRIANGULAR_MESH) {\n      if (this.drawMode === THREE.TriangleStripDrawMode) {\n        var stripsArray = new dracoDecoder.DracoInt32Array();\n        var numStrips = decoder.GetTriangleStripsFromMesh(\n          dracoGeometry,\n          stripsArray\n        );\n        geometryBuffer.indices = new Uint32Array(stripsArray.size());\n        for (var i = 0; i < stripsArray.size(); ++i) {\n          geometryBuffer.indices[i] = stripsArray.GetValue(i);\n        }\n        dracoDecoder.destroy(stripsArray);\n      } else {\n        var numIndices = numFaces * 3;\n        geometryBuffer.indices = new Uint32Array(numIndices);\n        var ia = new dracoDecoder.DracoInt32Array();\n        for (var i = 0; i < numFaces; ++i) {\n          decoder.GetFaceFromMesh(dracoGeometry, i, ia);\n          var index = i * 3;\n          geometryBuffer.indices[index] = ia.GetValue(0);\n          geometryBuffer.indices[index + 1] = ia.GetValue(1);\n          geometryBuffer.indices[index + 2] = ia.GetValue(2);\n        }\n        dracoDecoder.destroy(ia);\n      }\n    }\n\n    geometry.drawMode = this.drawMode;\n    if (geometryType == dracoDecoder.TRIANGULAR_MESH) {\n      geometry.setIndex(\n        new (geometryBuffer.indices.length > 65535\n          ? THREE.Uint32BufferAttribute\n          : THREE.Uint16BufferAttribute)(geometryBuffer.indices, 1)\n      );\n    }\n    var posTransform = new dracoDecoder.AttributeQuantizationTransform();\n    if (posTransform.InitFromAttribute(posAttribute)) {\n      // Quantized attribute. Store the quantization parameters into the\n      // THREE.js attribute.\n      geometry.attributes[\"position\"].isQuantized = true;\n      geometry.attributes[\"position\"].maxRange = posTransform.range();\n      geometry.attributes[\"position\"].numQuantizationBits =\n        posTransform.quantization_bits();\n      geometry.attributes[\"position\"].minValues = new Float32Array(3);\n      for (var i = 0; i < 3; ++i) {\n        geometry.attributes[\"position\"].minValues[i] =\n          posTransform.min_value(i);\n      }\n    }\n    dracoDecoder.destroy(posTransform);\n    dracoDecoder.destroy(decoder);\n    dracoDecoder.destroy(dracoGeometry);\n\n    this.decode_time = decode_end - start_time;\n    this.import_time = performance.now() - decode_end;\n\n    if (this.verbosity > 0) {\n      console.log(\"Decode time: \" + this.decode_time);\n      console.log(\"Import time: \" + this.import_time);\n    }\n    return geometry;\n  },\n\n  isVersionSupported: function (version, callback) {\n    THREE.DRACOLoader.getDecoderModule().then(function (module) {\n      callback(module.decoder.isVersionSupported(version));\n    });\n  },\n\n  getAttributeOptions: function (attributeName) {\n    if (typeof this.attributeOptions[attributeName] === \"undefined\")\n      this.attributeOptions[attributeName] = {};\n    return this.attributeOptions[attributeName];\n  },\n};\n\nTHREE.DRACOLoader.decoderPath = \"./\";\nTHREE.DRACOLoader.decoderConfig = {};\nTHREE.DRACOLoader.decoderModulePromise = null;\n\n/**\n * Sets the base path for decoder source files.\n * @param {string} path\n */\nTHREE.DRACOLoader.setDecoderPath = function (path) {\n  THREE.DRACOLoader.decoderPath = path;\n};\n\n/**\n * Sets decoder configuration and releases singleton decoder module. Module\n * will be recreated with the next decoding call.\n * @param {Object} config\n */\nTHREE.DRACOLoader.setDecoderConfig = function (config) {\n  var wasmBinary = THREE.DRACOLoader.decoderConfig.wasmBinary;\n  THREE.DRACOLoader.decoderConfig = config || {};\n  THREE.DRACOLoader.releaseDecoderModule();\n\n  // Reuse WASM binary.\n  if (wasmBinary) THREE.DRACOLoader.decoderConfig.wasmBinary = wasmBinary;\n};\n\n/**\n * Releases the singleton DracoDecoderModule instance. Module will be recreated\n * with the next decoding call.\n */\nTHREE.DRACOLoader.releaseDecoderModule = function () {\n  THREE.DRACOLoader.decoderModulePromise = null;\n};\n\n/**\n * Gets WebAssembly or asm.js singleton instance of DracoDecoderModule\n * after testing for browser support. Returns Promise that resolves when\n * module is available.\n * @return {Promise<{decoder: DracoDecoderModule}>}\n */\nTHREE.DRACOLoader.getDecoderModule = function () {\n  var scope = this;\n  var path = THREE.DRACOLoader.decoderPath;\n  var config = THREE.DRACOLoader.decoderConfig;\n  var promise = THREE.DRACOLoader.decoderModulePromise;\n\n  if (promise) return promise;\n\n  // Load source files.\n  if (typeof DracoDecoderModule !== \"undefined\") {\n    // Loaded externally.\n    promise = Promise.resolve();\n  } else if (typeof WebAssembly !== \"object\" || config.type === \"js\") {\n    // Load with asm.js.\n    promise = THREE.DRACOLoader._loadScript(path + \"draco_decoder.js\");\n  } else {\n    // Load with WebAssembly.\n    config.wasmBinaryFile = path + \"draco_decoder.wasm\";\n    promise = THREE.DRACOLoader._loadScript(path + \"draco_wasm_wrapper.js\")\n      .then(function () {\n        return THREE.DRACOLoader._loadArrayBuffer(config.wasmBinaryFile);\n      })\n      .then(function (wasmBinary) {\n        config.wasmBinary = wasmBinary;\n      });\n  }\n\n  // Wait for source files, then create and return a decoder.\n  promise = promise.then(function () {\n    return new Promise(function (resolve) {\n      config.onModuleLoaded = function (decoder) {\n        scope.timeLoaded = performance.now();\n        // Module is Promise-like. Wrap before resolving to avoid loop.\n        resolve({ decoder: decoder });\n      };\n      DracoDecoderModule(config);\n    });\n  });\n\n  THREE.DRACOLoader.decoderModulePromise = promise;\n  return promise;\n};\n\n/**\n * @param {string} src\n * @return {Promise}\n */\nTHREE.DRACOLoader._loadScript = function (src) {\n  var prevScript = document.getElementById(\"decoder_script\");\n  if (prevScript !== null) {\n    prevScript.parentNode.removeChild(prevScript);\n  }\n  var head = document.getElementsByTagName(\"head\")[0];\n  var script = document.createElement(\"script\");\n  script.id = \"decoder_script\";\n  script.type = \"text/javascript\";\n  script.src = src;\n  return new Promise(function (resolve) {\n    script.onload = resolve;\n    head.appendChild(script);\n  });\n};\n\n/**\n * @param {string} src\n * @return {Promise}\n */\nTHREE.DRACOLoader._loadArrayBuffer = function (src) {\n  var loader = new THREE.FileLoader();\n  loader.setResponseType(\"arraybuffer\");\n  return new Promise(function (resolve, reject) {\n    loader.load(src, resolve, undefined, reject);\n  });\n};\n",
    "/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nTHREE.GLTFLoader = (function () {\n  function GLTFLoader(manager) {\n    this.manager =\n      manager !== undefined ? manager : THREE.DefaultLoadingManager;\n    this.dracoLoader = null;\n  }\n\n  GLTFLoader.prototype = {\n    constructor: GLTFLoader,\n\n    crossOrigin: \"anonymous\",\n\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n\n      var path =\n        this.path !== undefined\n          ? this.path\n          : THREE.LoaderUtils.extractUrlBase(url);\n\n      var loader = new THREE.FileLoader(scope.manager);\n\n      loader.setResponseType(\"arraybuffer\");\n\n      loader.load(\n        url,\n        function (data) {\n          try {\n            scope.parse(data, path, onLoad, onError);\n          } catch (e) {\n            if (onError !== undefined) {\n              onError(e);\n            } else {\n              throw e;\n            }\n          }\n        },\n        onProgress,\n        onError\n      );\n    },\n\n    setCrossOrigin: function (value) {\n      this.crossOrigin = value;\n      return this;\n    },\n\n    setPath: function (value) {\n      this.path = value;\n      return this;\n    },\n\n    setDRACOLoader: function (dracoLoader) {\n      this.dracoLoader = dracoLoader;\n      return this;\n    },\n\n    parse: function (data, path, onLoad, onError) {\n      var content;\n      var extensions = {};\n\n      if (typeof data === \"string\") {\n        content = data;\n      } else {\n        var magic = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 4));\n\n        if (magic === BINARY_EXTENSION_HEADER_MAGIC) {\n          try {\n            extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(\n              data\n            );\n          } catch (error) {\n            if (onError) onError(error);\n            return;\n          }\n\n          content = extensions[EXTENSIONS.KHR_BINARY_GLTF].content;\n        } else {\n          content = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n        }\n      }\n\n      var json = JSON.parse(content);\n\n      if (json.asset === undefined || json.asset.version[0] < 2) {\n        if (onError)\n          onError(\n            new Error(\n              \"THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead.\"\n            )\n          );\n        return;\n      }\n\n      if (json.extensionsUsed) {\n        for (var i = 0; i < json.extensionsUsed.length; ++i) {\n          var extensionName = json.extensionsUsed[i];\n          var extensionsRequired = json.extensionsRequired || [];\n\n          switch (extensionName) {\n            case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n              extensions[extensionName] = new GLTFLightsExtension(json);\n              break;\n\n            case EXTENSIONS.KHR_MATERIALS_UNLIT:\n              extensions[extensionName] = new GLTFMaterialsUnlitExtension(json);\n              break;\n\n            case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n              extensions[extensionName] =\n                new GLTFMaterialsPbrSpecularGlossinessExtension();\n              break;\n\n            case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n              extensions[extensionName] = new GLTFDracoMeshCompressionExtension(\n                json,\n                this.dracoLoader\n              );\n              break;\n\n            case EXTENSIONS.MSFT_TEXTURE_DDS:\n              extensions[EXTENSIONS.MSFT_TEXTURE_DDS] =\n                new GLTFTextureDDSExtension();\n              break;\n\n            default:\n              if (extensionsRequired.indexOf(extensionName) >= 0) {\n                console.warn(\n                  'THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".'\n                );\n              }\n          }\n        }\n      }\n\n      var parser = new GLTFParser(json, extensions, {\n        path: path || this.path || \"\",\n        crossOrigin: this.crossOrigin,\n        manager: this.manager,\n      });\n\n      parser.parse(function (scene, scenes, cameras, animations, json) {\n        var glTF = {\n          scene: scene,\n          scenes: scenes,\n          cameras: cameras,\n          animations: animations,\n          asset: json.asset,\n          parser: parser,\n          userData: {},\n        };\n\n        addUnknownExtensionsToUserData(extensions, glTF, json);\n\n        onLoad(glTF);\n      }, onError);\n    },\n  };\n\n  /* GLTFREGISTRY */\n\n  function GLTFRegistry() {\n    var objects = {};\n\n    return {\n      get: function (key) {\n        return objects[key];\n      },\n\n      add: function (key, object) {\n        objects[key] = object;\n      },\n\n      remove: function (key) {\n        delete objects[key];\n      },\n\n      removeAll: function () {\n        objects = {};\n      },\n    };\n  }\n\n  /*********************************/\n  /********** EXTENSIONS ***********/\n  /*********************************/\n\n  var EXTENSIONS = {\n    KHR_BINARY_GLTF: \"KHR_binary_glTF\",\n    KHR_DRACO_MESH_COMPRESSION: \"KHR_draco_mesh_compression\",\n    KHR_LIGHTS_PUNCTUAL: \"KHR_lights_punctual\",\n    KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n      \"KHR_materials_pbrSpecularGlossiness\",\n    KHR_MATERIALS_UNLIT: \"KHR_materials_unlit\",\n    MSFT_TEXTURE_DDS: \"MSFT_texture_dds\",\n  };\n\n  /**\n   * DDS Texture Extension\n   *\n   * Specification:\n   * https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds\n   *\n   */\n  function GLTFTextureDDSExtension() {\n    if (!THREE.DDSLoader) {\n      throw new Error(\n        \"THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader\"\n      );\n    }\n\n    this.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n    this.ddsLoader = new THREE.DDSLoader();\n  }\n\n  /**\n   * Lights Extension\n   *\n   * Specification: PENDING\n   */\n  function GLTFLightsExtension(json) {\n    this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n\n    this.lights = [];\n\n    var extension =\n      (json.extensions && json.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL]) ||\n      {};\n    var lightDefs = extension.lights || [];\n\n    for (var i = 0; i < lightDefs.length; i++) {\n      var lightDef = lightDefs[i];\n      var lightNode;\n\n      var color = new THREE.Color(0xffffff);\n      if (lightDef.color !== undefined) color.fromArray(lightDef.color);\n\n      var range = lightDef.range !== undefined ? lightDef.range : 0;\n\n      switch (lightDef.type) {\n        case \"directional\":\n          lightNode = new THREE.DirectionalLight(color);\n          lightNode.target.position.set(0, 0, 1);\n          lightNode.add(lightNode.target);\n          break;\n\n        case \"point\":\n          lightNode = new THREE.PointLight(color);\n          lightNode.distance = range;\n          break;\n\n        case \"spot\":\n          lightNode = new THREE.SpotLight(color);\n          lightNode.distance = range;\n          // Handle spotlight properties.\n          lightDef.spot = lightDef.spot || {};\n          lightDef.spot.innerConeAngle =\n            lightDef.spot.innerConeAngle !== undefined\n              ? lightDef.spot.innerConeAngle\n              : 0;\n          lightDef.spot.outerConeAngle =\n            lightDef.spot.outerConeAngle !== undefined\n              ? lightDef.spot.outerConeAngle\n              : Math.PI / 4.0;\n          lightNode.angle = lightDef.spot.outerConeAngle;\n          lightNode.penumbra =\n            1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n          lightNode.target.position.set(0, 0, 1);\n          lightNode.add(lightNode.target);\n          break;\n\n        default:\n          throw new Error(\n            'THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".'\n          );\n      }\n\n      lightNode.decay = 2;\n\n      if (lightDef.intensity !== undefined)\n        lightNode.intensity = lightDef.intensity;\n\n      lightNode.name = lightDef.name || \"light_\" + i;\n\n      this.lights.push(lightNode);\n    }\n  }\n\n  /**\n   * Unlit Materials Extension (pending)\n   *\n   * PR: https://github.com/KhronosGroup/glTF/pull/1163\n   */\n  function GLTFMaterialsUnlitExtension(json) {\n    this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n  }\n\n  GLTFMaterialsUnlitExtension.prototype.getMaterialType = function (material) {\n    return THREE.MeshBasicMaterial;\n  };\n\n  GLTFMaterialsUnlitExtension.prototype.extendParams = function (\n    materialParams,\n    material,\n    parser\n  ) {\n    var pending = [];\n\n    materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n    materialParams.opacity = 1.0;\n\n    var metallicRoughness = material.pbrMetallicRoughness;\n\n    if (metallicRoughness) {\n      if (Array.isArray(metallicRoughness.baseColorFactor)) {\n        var array = metallicRoughness.baseColorFactor;\n\n        materialParams.color.fromArray(array);\n        materialParams.opacity = array[3];\n      }\n\n      if (metallicRoughness.baseColorTexture !== undefined) {\n        pending.push(\n          parser.assignTexture(\n            materialParams,\n            \"map\",\n            metallicRoughness.baseColorTexture.index\n          )\n        );\n      }\n    }\n\n    return Promise.all(pending);\n  };\n\n  /* BINARY EXTENSION */\n\n  var BINARY_EXTENSION_BUFFER_NAME = \"binary_glTF\";\n  var BINARY_EXTENSION_HEADER_MAGIC = \"glTF\";\n  var BINARY_EXTENSION_HEADER_LENGTH = 12;\n  var BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4e4f534a, BIN: 0x004e4942 };\n\n  function GLTFBinaryExtension(data) {\n    this.name = EXTENSIONS.KHR_BINARY_GLTF;\n    this.content = null;\n    this.body = null;\n\n    var headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);\n\n    this.header = {\n      magic: THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0, 4))),\n      version: headerView.getUint32(4, true),\n      length: headerView.getUint32(8, true),\n    };\n\n    if (this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC) {\n      throw new Error(\"THREE.GLTFLoader: Unsupported glTF-Binary header.\");\n    } else if (this.header.version < 2.0) {\n      throw new Error(\n        \"THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.\"\n      );\n    }\n\n    var chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);\n    var chunkIndex = 0;\n\n    while (chunkIndex < chunkView.byteLength) {\n      var chunkLength = chunkView.getUint32(chunkIndex, true);\n      chunkIndex += 4;\n\n      var chunkType = chunkView.getUint32(chunkIndex, true);\n      chunkIndex += 4;\n\n      if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {\n        var contentArray = new Uint8Array(\n          data,\n          BINARY_EXTENSION_HEADER_LENGTH + chunkIndex,\n          chunkLength\n        );\n        this.content = THREE.LoaderUtils.decodeText(contentArray);\n      } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {\n        var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n        this.body = data.slice(byteOffset, byteOffset + chunkLength);\n      }\n\n      // Clients must ignore chunks with unknown types.\n\n      chunkIndex += chunkLength;\n    }\n\n    if (this.content === null) {\n      throw new Error(\"THREE.GLTFLoader: JSON content not found.\");\n    }\n  }\n\n  /**\n   * DRACO Mesh Compression Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/pull/874\n   */\n  function GLTFDracoMeshCompressionExtension(json, dracoLoader) {\n    if (!dracoLoader) {\n      throw new Error(\"THREE.GLTFLoader: No DRACOLoader instance provided.\");\n    }\n\n    this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n    this.json = json;\n    this.dracoLoader = dracoLoader;\n  }\n\n  GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function (\n    primitive,\n    parser\n  ) {\n    var json = this.json;\n    var dracoLoader = this.dracoLoader;\n    var bufferViewIndex = primitive.extensions[this.name].bufferView;\n    var gltfAttributeMap = primitive.extensions[this.name].attributes;\n    var threeAttributeMap = {};\n    var attributeNormalizedMap = {};\n    var attributeTypeMap = {};\n\n    for (var attributeName in gltfAttributeMap) {\n      if (!(attributeName in ATTRIBUTES)) continue;\n\n      threeAttributeMap[ATTRIBUTES[attributeName]] =\n        gltfAttributeMap[attributeName];\n    }\n\n    for (attributeName in primitive.attributes) {\n      if (\n        ATTRIBUTES[attributeName] !== undefined &&\n        gltfAttributeMap[attributeName] !== undefined\n      ) {\n        var accessorDef = json.accessors[primitive.attributes[attributeName]];\n        var componentType = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n\n        attributeTypeMap[ATTRIBUTES[attributeName]] = componentType;\n        attributeNormalizedMap[ATTRIBUTES[attributeName]] =\n          accessorDef.normalized === true;\n      }\n    }\n\n    return parser\n      .getDependency(\"bufferView\", bufferViewIndex)\n      .then(function (bufferView) {\n        return new Promise(function (resolve) {\n          dracoLoader.decodeDracoFile(\n            bufferView,\n            function (geometry) {\n              for (var attributeName in geometry.attributes) {\n                var attribute = geometry.attributes[attributeName];\n                var normalized = attributeNormalizedMap[attributeName];\n\n                if (normalized !== undefined) attribute.normalized = normalized;\n              }\n\n              resolve(geometry);\n            },\n            threeAttributeMap,\n            attributeTypeMap\n          );\n        });\n      });\n  };\n\n  /**\n   * Specular-Glossiness Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n   */\n  function GLTFMaterialsPbrSpecularGlossinessExtension() {\n    return {\n      name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n\n      specularGlossinessParams: [\n        \"color\",\n        \"map\",\n        \"lightMap\",\n        \"lightMapIntensity\",\n        \"aoMap\",\n        \"aoMapIntensity\",\n        \"emissive\",\n        \"emissiveIntensity\",\n        \"emissiveMap\",\n        \"bumpMap\",\n        \"bumpScale\",\n        \"normalMap\",\n        \"displacementMap\",\n        \"displacementScale\",\n        \"displacementBias\",\n        \"specularMap\",\n        \"specular\",\n        \"glossinessMap\",\n        \"glossiness\",\n        \"alphaMap\",\n        \"envMap\",\n        \"envMapIntensity\",\n        \"refractionRatio\",\n      ],\n\n      getMaterialType: function () {\n        return THREE.ShaderMaterial;\n      },\n\n      extendParams: function (params, material, parser) {\n        var pbrSpecularGlossiness = material.extensions[this.name];\n\n        var shader = THREE.ShaderLib[\"standard\"];\n\n        var uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n\n        var specularMapParsFragmentChunk = [\n          \"#ifdef USE_SPECULARMAP\",\n          \"\tuniform sampler2D specularMap;\",\n          \"#endif\",\n        ].join(\"\\n\");\n\n        var glossinessMapParsFragmentChunk = [\n          \"#ifdef USE_GLOSSINESSMAP\",\n          \"\tuniform sampler2D glossinessMap;\",\n          \"#endif\",\n        ].join(\"\\n\");\n\n        var specularMapFragmentChunk = [\n          \"vec3 specularFactor = specular;\",\n          \"#ifdef USE_SPECULARMAP\",\n          \"\tvec4 texelSpecular = texture2D( specularMap, vUv );\",\n          \"\ttexelSpecular = sRGBToLinear( texelSpecular );\",\n          \"\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture\",\n          \"\tspecularFactor *= texelSpecular.rgb;\",\n          \"#endif\",\n        ].join(\"\\n\");\n\n        var glossinessMapFragmentChunk = [\n          \"float glossinessFactor = glossiness;\",\n          \"#ifdef USE_GLOSSINESSMAP\",\n          \"\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );\",\n          \"\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture\",\n          \"\tglossinessFactor *= texelGlossiness.a;\",\n          \"#endif\",\n        ].join(\"\\n\");\n\n        var lightPhysicalFragmentChunk = [\n          \"PhysicalMaterial material;\",\n          \"material.diffuseColor = diffuseColor.rgb;\",\n          \"material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );\",\n          \"material.specularColor = specularFactor.rgb;\",\n        ].join(\"\\n\");\n\n        var fragmentShader = shader.fragmentShader\n          .replace(\"uniform float roughness;\", \"uniform vec3 specular;\")\n          .replace(\"uniform float metalness;\", \"uniform float glossiness;\")\n          .replace(\n            \"#include <roughnessmap_pars_fragment>\",\n            specularMapParsFragmentChunk\n          )\n          .replace(\n            \"#include <metalnessmap_pars_fragment>\",\n            glossinessMapParsFragmentChunk\n          )\n          .replace(\"#include <roughnessmap_fragment>\", specularMapFragmentChunk)\n          .replace(\n            \"#include <metalnessmap_fragment>\",\n            glossinessMapFragmentChunk\n          )\n          .replace(\n            \"#include <lights_physical_fragment>\",\n            lightPhysicalFragmentChunk\n          );\n\n        delete uniforms.roughness;\n        delete uniforms.metalness;\n        delete uniforms.roughnessMap;\n        delete uniforms.metalnessMap;\n\n        uniforms.specular = { value: new THREE.Color().setHex(0x111111) };\n        uniforms.glossiness = { value: 0.5 };\n        uniforms.specularMap = { value: null };\n        uniforms.glossinessMap = { value: null };\n\n        params.vertexShader = shader.vertexShader;\n        params.fragmentShader = fragmentShader;\n        params.uniforms = uniforms;\n        params.defines = { STANDARD: \"\" };\n\n        params.color = new THREE.Color(1.0, 1.0, 1.0);\n        params.opacity = 1.0;\n\n        var pending = [];\n\n        if (Array.isArray(pbrSpecularGlossiness.diffuseFactor)) {\n          var array = pbrSpecularGlossiness.diffuseFactor;\n\n          params.color.fromArray(array);\n          params.opacity = array[3];\n        }\n\n        if (pbrSpecularGlossiness.diffuseTexture !== undefined) {\n          pending.push(\n            parser.assignTexture(\n              params,\n              \"map\",\n              pbrSpecularGlossiness.diffuseTexture.index\n            )\n          );\n        }\n\n        params.emissive = new THREE.Color(0.0, 0.0, 0.0);\n        params.glossiness =\n          pbrSpecularGlossiness.glossinessFactor !== undefined\n            ? pbrSpecularGlossiness.glossinessFactor\n            : 1.0;\n        params.specular = new THREE.Color(1.0, 1.0, 1.0);\n\n        if (Array.isArray(pbrSpecularGlossiness.specularFactor)) {\n          params.specular.fromArray(pbrSpecularGlossiness.specularFactor);\n        }\n\n        if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {\n          var specGlossIndex =\n            pbrSpecularGlossiness.specularGlossinessTexture.index;\n          pending.push(\n            parser.assignTexture(params, \"glossinessMap\", specGlossIndex)\n          );\n          pending.push(\n            parser.assignTexture(params, \"specularMap\", specGlossIndex)\n          );\n        }\n\n        return Promise.all(pending);\n      },\n\n      createMaterial: function (params) {\n        // setup material properties based on MeshStandardMaterial for Specular-Glossiness\n\n        var material = new THREE.ShaderMaterial({\n          defines: params.defines,\n          vertexShader: params.vertexShader,\n          fragmentShader: params.fragmentShader,\n          uniforms: params.uniforms,\n          fog: true,\n          lights: true,\n          opacity: params.opacity,\n          transparent: params.transparent,\n        });\n\n        material.isGLTFSpecularGlossinessMaterial = true;\n\n        material.color = params.color;\n\n        material.map = params.map === undefined ? null : params.map;\n\n        material.lightMap = null;\n        material.lightMapIntensity = 1.0;\n\n        material.aoMap = params.aoMap === undefined ? null : params.aoMap;\n        material.aoMapIntensity = 1.0;\n\n        material.emissive = params.emissive;\n        material.emissiveIntensity = 1.0;\n        material.emissiveMap =\n          params.emissiveMap === undefined ? null : params.emissiveMap;\n\n        material.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;\n        material.bumpScale = 1;\n\n        material.normalMap =\n          params.normalMap === undefined ? null : params.normalMap;\n        if (params.normalScale) material.normalScale = params.normalScale;\n\n        material.displacementMap = null;\n        material.displacementScale = 1;\n        material.displacementBias = 0;\n\n        material.specularMap =\n          params.specularMap === undefined ? null : params.specularMap;\n        material.specular = params.specular;\n\n        material.glossinessMap =\n          params.glossinessMap === undefined ? null : params.glossinessMap;\n        material.glossiness = params.glossiness;\n\n        material.alphaMap = null;\n\n        material.envMap = params.envMap === undefined ? null : params.envMap;\n        material.envMapIntensity = 1.0;\n\n        material.refractionRatio = 0.98;\n\n        material.extensions.derivatives = true;\n\n        return material;\n      },\n\n      /**\n       * Clones a GLTFSpecularGlossinessMaterial instance. The ShaderMaterial.copy() method can\n       * copy only properties it knows about or inherits, and misses many properties that would\n       * normally be defined by MeshStandardMaterial.\n       *\n       * This method allows GLTFSpecularGlossinessMaterials to be cloned in the process of\n       * loading a glTF model, but cloning later (e.g. by the user) would require these changes\n       * AND also updating `.onBeforeRender` on the parent mesh.\n       *\n       * @param  {THREE.ShaderMaterial} source\n       * @return {THREE.ShaderMaterial}\n       */\n      cloneMaterial: function (source) {\n        var target = source.clone();\n\n        target.isGLTFSpecularGlossinessMaterial = true;\n\n        var params = this.specularGlossinessParams;\n\n        for (var i = 0, il = params.length; i < il; i++) {\n          target[params[i]] = source[params[i]];\n        }\n\n        return target;\n      },\n\n      // Here's based on refreshUniformsCommon() and refreshUniformsStandard() in WebGLRenderer.\n      refreshUniforms: function (\n        renderer,\n        scene,\n        camera,\n        geometry,\n        material,\n        group\n      ) {\n        if (material.isGLTFSpecularGlossinessMaterial !== true) {\n          return;\n        }\n\n        var uniforms = material.uniforms;\n        var defines = material.defines;\n\n        uniforms.opacity.value = material.opacity;\n\n        uniforms.diffuse.value.copy(material.color);\n        uniforms.emissive.value\n          .copy(material.emissive)\n          .multiplyScalar(material.emissiveIntensity);\n\n        uniforms.map.value = material.map;\n        uniforms.specularMap.value = material.specularMap;\n        uniforms.alphaMap.value = material.alphaMap;\n\n        uniforms.lightMap.value = material.lightMap;\n        uniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n        uniforms.aoMap.value = material.aoMap;\n        uniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n        // uv repeat and offset setting priorities\n        // 1. color map\n        // 2. specular map\n        // 3. normal map\n        // 4. bump map\n        // 5. alpha map\n        // 6. emissive map\n\n        var uvScaleMap;\n\n        if (material.map) {\n          uvScaleMap = material.map;\n        } else if (material.specularMap) {\n          uvScaleMap = material.specularMap;\n        } else if (material.displacementMap) {\n          uvScaleMap = material.displacementMap;\n        } else if (material.normalMap) {\n          uvScaleMap = material.normalMap;\n        } else if (material.bumpMap) {\n          uvScaleMap = material.bumpMap;\n        } else if (material.glossinessMap) {\n          uvScaleMap = material.glossinessMap;\n        } else if (material.alphaMap) {\n          uvScaleMap = material.alphaMap;\n        } else if (material.emissiveMap) {\n          uvScaleMap = material.emissiveMap;\n        }\n\n        if (uvScaleMap !== undefined) {\n          // backwards compatibility\n          if (uvScaleMap.isWebGLRenderTarget) {\n            uvScaleMap = uvScaleMap.texture;\n          }\n\n          if (uvScaleMap.matrixAutoUpdate === true) {\n            uvScaleMap.updateMatrix();\n          }\n\n          uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n        }\n\n        uniforms.envMap.value = material.envMap;\n        uniforms.envMapIntensity.value = material.envMapIntensity;\n        uniforms.flipEnvMap.value =\n          material.envMap && material.envMap.isCubeTexture ? -1 : 1;\n\n        uniforms.refractionRatio.value = material.refractionRatio;\n\n        uniforms.specular.value.copy(material.specular);\n        uniforms.glossiness.value = material.glossiness;\n\n        uniforms.glossinessMap.value = material.glossinessMap;\n\n        uniforms.emissiveMap.value = material.emissiveMap;\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.normalMap.value = material.normalMap;\n\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n\n        if (\n          uniforms.glossinessMap.value !== null &&\n          defines.USE_GLOSSINESSMAP === undefined\n        ) {\n          defines.USE_GLOSSINESSMAP = \"\";\n          // set USE_ROUGHNESSMAP to enable vUv\n          defines.USE_ROUGHNESSMAP = \"\";\n        }\n\n        if (\n          uniforms.glossinessMap.value === null &&\n          defines.USE_GLOSSINESSMAP !== undefined\n        ) {\n          delete defines.USE_GLOSSINESSMAP;\n          delete defines.USE_ROUGHNESSMAP;\n        }\n      },\n    };\n  }\n\n  /*********************************/\n  /********** INTERPOLATION ********/\n  /*********************************/\n\n  // Spline Interpolation\n  // Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\n  function GLTFCubicSplineInterpolant(\n    parameterPositions,\n    sampleValues,\n    sampleSize,\n    resultBuffer\n  ) {\n    THREE.Interpolant.call(\n      this,\n      parameterPositions,\n      sampleValues,\n      sampleSize,\n      resultBuffer\n    );\n  }\n\n  GLTFCubicSplineInterpolant.prototype = Object.create(\n    THREE.Interpolant.prototype\n  );\n  GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n\n  GLTFCubicSplineInterpolant.prototype.interpolate_ = function (i1, t0, t, t1) {\n    var result = this.resultBuffer;\n    var values = this.sampleValues;\n    var stride = this.valueSize;\n\n    var stride2 = stride * 2;\n    var stride3 = stride * 3;\n\n    var td = t1 - t0;\n\n    var p = (t - t0) / td;\n    var pp = p * p;\n    var ppp = pp * p;\n\n    var offset1 = i1 * stride3;\n    var offset0 = offset1 - stride3;\n\n    var s0 = 2 * ppp - 3 * pp + 1;\n    var s1 = ppp - 2 * pp + p;\n    var s2 = -2 * ppp + 3 * pp;\n    var s3 = ppp - pp;\n\n    // Layout of keyframe output values for CUBICSPLINE animations:\n    //   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n    for (var i = 0; i !== stride; i++) {\n      var p0 = values[offset0 + i + stride]; // splineVertex_k\n      var m0 = values[offset0 + i + stride2] * td; // outTangent_k * (t_k+1 - t_k)\n      var p1 = values[offset1 + i + stride]; // splineVertex_k+1\n      var m1 = values[offset1 + i] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n      result[i] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n    }\n\n    return result;\n  };\n\n  /*********************************/\n  /********** INTERNALS ************/\n  /*********************************/\n\n  /* CONSTANTS */\n\n  var WEBGL_CONSTANTS = {\n    FLOAT: 5126,\n    //FLOAT_MAT2: 35674,\n    FLOAT_MAT3: 35675,\n    FLOAT_MAT4: 35676,\n    FLOAT_VEC2: 35664,\n    FLOAT_VEC3: 35665,\n    FLOAT_VEC4: 35666,\n    LINEAR: 9729,\n    REPEAT: 10497,\n    SAMPLER_2D: 35678,\n    POINTS: 0,\n    LINES: 1,\n    LINE_LOOP: 2,\n    LINE_STRIP: 3,\n    TRIANGLES: 4,\n    TRIANGLE_STRIP: 5,\n    TRIANGLE_FAN: 6,\n    UNSIGNED_BYTE: 5121,\n    UNSIGNED_SHORT: 5123,\n  };\n\n  var WEBGL_TYPE = {\n    5126: Number,\n    //35674: THREE.Matrix2,\n    35675: THREE.Matrix3,\n    35676: THREE.Matrix4,\n    35664: THREE.Vector2,\n    35665: THREE.Vector3,\n    35666: THREE.Vector4,\n    35678: THREE.Texture,\n  };\n\n  var WEBGL_COMPONENT_TYPES = {\n    5120: Int8Array,\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array,\n  };\n\n  var WEBGL_FILTERS = {\n    9728: THREE.NearestFilter,\n    9729: THREE.LinearFilter,\n    9984: THREE.NearestMipMapNearestFilter,\n    9985: THREE.LinearMipMapNearestFilter,\n    9986: THREE.NearestMipMapLinearFilter,\n    9987: THREE.LinearMipMapLinearFilter,\n  };\n\n  var WEBGL_WRAPPINGS = {\n    33071: THREE.ClampToEdgeWrapping,\n    33648: THREE.MirroredRepeatWrapping,\n    10497: THREE.RepeatWrapping,\n  };\n\n  var WEBGL_SIDES = {\n    1028: THREE.BackSide, // Culling front\n    1029: THREE.FrontSide, // Culling back\n    //1032: THREE.NoSide   // Culling front and back, what to do?\n  };\n\n  var WEBGL_DEPTH_FUNCS = {\n    512: THREE.NeverDepth,\n    513: THREE.LessDepth,\n    514: THREE.EqualDepth,\n    515: THREE.LessEqualDepth,\n    516: THREE.GreaterEqualDepth,\n    517: THREE.NotEqualDepth,\n    518: THREE.GreaterEqualDepth,\n    519: THREE.AlwaysDepth,\n  };\n\n  var WEBGL_BLEND_EQUATIONS = {\n    32774: THREE.AddEquation,\n    32778: THREE.SubtractEquation,\n    32779: THREE.ReverseSubtractEquation,\n  };\n\n  var WEBGL_BLEND_FUNCS = {\n    0: THREE.ZeroFactor,\n    1: THREE.OneFactor,\n    768: THREE.SrcColorFactor,\n    769: THREE.OneMinusSrcColorFactor,\n    770: THREE.SrcAlphaFactor,\n    771: THREE.OneMinusSrcAlphaFactor,\n    772: THREE.DstAlphaFactor,\n    773: THREE.OneMinusDstAlphaFactor,\n    774: THREE.DstColorFactor,\n    775: THREE.OneMinusDstColorFactor,\n    776: THREE.SrcAlphaSaturateFactor,\n    // The followings are not supported by Three.js yet\n    //32769: CONSTANT_COLOR,\n    //32770: ONE_MINUS_CONSTANT_COLOR,\n    //32771: CONSTANT_ALPHA,\n    //32772: ONE_MINUS_CONSTANT_COLOR\n  };\n\n  var WEBGL_TYPE_SIZES = {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16,\n  };\n\n  var ATTRIBUTES = {\n    POSITION: \"position\",\n    NORMAL: \"normal\",\n    TEXCOORD_0: \"uv\",\n    TEXCOORD0: \"uv\", // deprecated\n    TEXCOORD: \"uv\", // deprecated\n    TEXCOORD_1: \"uv2\",\n    COLOR_0: \"color\",\n    COLOR0: \"color\", // deprecated\n    COLOR: \"color\", // deprecated\n    WEIGHTS_0: \"skinWeight\",\n    WEIGHT: \"skinWeight\", // deprecated\n    JOINTS_0: \"skinIndex\",\n    JOINT: \"skinIndex\", // deprecated\n  };\n\n  var PATH_PROPERTIES = {\n    scale: \"scale\",\n    translation: \"position\",\n    rotation: \"quaternion\",\n    weights: \"morphTargetInfluences\",\n  };\n\n  var INTERPOLATION = {\n    CUBICSPLINE: THREE.InterpolateSmooth, // We use custom interpolation GLTFCubicSplineInterpolation for CUBICSPLINE.\n    // KeyframeTrack.optimize() can't handle glTF Cubic Spline output values layout,\n    // using THREE.InterpolateSmooth for KeyframeTrack instantiation to prevent optimization.\n    // See KeyframeTrack.optimize() for the detail.\n    LINEAR: THREE.InterpolateLinear,\n    STEP: THREE.InterpolateDiscrete,\n  };\n\n  var STATES_ENABLES = {\n    2884: \"CULL_FACE\",\n    2929: \"DEPTH_TEST\",\n    3042: \"BLEND\",\n    3089: \"SCISSOR_TEST\",\n    32823: \"POLYGON_OFFSET_FILL\",\n    32926: \"SAMPLE_ALPHA_TO_COVERAGE\",\n  };\n\n  var ALPHA_MODES = {\n    OPAQUE: \"OPAQUE\",\n    MASK: \"MASK\",\n    BLEND: \"BLEND\",\n  };\n\n  /* UTILITY FUNCTIONS */\n\n  function resolveURL(url, path) {\n    // Invalid URL\n    if (typeof url !== \"string\" || url === \"\") return \"\";\n\n    // Absolute URL http://,https://,//\n    if (/^(https?:)?\\/\\//i.test(url)) return url;\n\n    // Data URI\n    if (/^data:.*,.*$/i.test(url)) return url;\n\n    // Blob URL\n    if (/^blob:.*$/i.test(url)) return url;\n\n    // Relative URL\n    return path + url;\n  }\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n   */\n  function createDefaultMaterial() {\n    return new THREE.MeshStandardMaterial({\n      color: 0xffffff,\n      emissive: 0x000000,\n      metalness: 1,\n      roughness: 1,\n      transparent: false,\n      depthTest: true,\n      side: THREE.FrontSide,\n    });\n  }\n\n  function addUnknownExtensionsToUserData(knownExtensions, object, objectDef) {\n    // Add unknown glTF extensions to an object's userData.\n\n    for (var name in objectDef.extensions) {\n      if (knownExtensions[name] === undefined) {\n        object.userData.gltfExtensions = object.userData.gltfExtensions || {};\n        object.userData.gltfExtensions[name] = objectDef.extensions[name];\n      }\n    }\n  }\n\n  /**\n   * @param {THREE.Object3D|THREE.Material|THREE.BufferGeometry} object\n   * @param {GLTF.definition} def\n   */\n  function assignExtrasToUserData(object, gltfDef) {\n    if (gltfDef.extras !== undefined) {\n      if (typeof gltfDef.extras === \"object\") {\n        object.userData = gltfDef.extras;\n      } else {\n        console.warn(\n          \"THREE.GLTFLoader: Ignoring primitive type .extras, \" + gltfDef.extras\n        );\n      }\n    }\n  }\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n   *\n   * @param {THREE.BufferGeometry} geometry\n   * @param {Array<GLTF.Target>} targets\n   * @param {Array<THREE.BufferAttribute>} accessors\n   */\n  function addMorphTargets(geometry, targets, accessors) {\n    var hasMorphPosition = false;\n    var hasMorphNormal = false;\n\n    for (var i = 0, il = targets.length; i < il; i++) {\n      var target = targets[i];\n\n      if (target.POSITION !== undefined) hasMorphPosition = true;\n      if (target.NORMAL !== undefined) hasMorphNormal = true;\n\n      if (hasMorphPosition && hasMorphNormal) break;\n    }\n\n    if (!hasMorphPosition && !hasMorphNormal) return;\n\n    var morphPositions = [];\n    var morphNormals = [];\n\n    for (var i = 0, il = targets.length; i < il; i++) {\n      var target = targets[i];\n      var attributeName = \"morphTarget\" + i;\n\n      if (hasMorphPosition) {\n        // Three.js morph position is absolute value. The formula is\n        //   basePosition\n        //     + weight0 * ( morphPosition0 - basePosition )\n        //     + weight1 * ( morphPosition1 - basePosition )\n        //     ...\n        // while the glTF one is relative\n        //   basePosition\n        //     + weight0 * glTFmorphPosition0\n        //     + weight1 * glTFmorphPosition1\n        //     ...\n        // then we need to convert from relative to absolute here.\n\n        if (target.POSITION !== undefined) {\n          // Cloning not to pollute original accessor\n          var positionAttribute = cloneBufferAttribute(\n            accessors[target.POSITION]\n          );\n          positionAttribute.name = attributeName;\n\n          var position = geometry.attributes.position;\n\n          for (var j = 0, jl = positionAttribute.count; j < jl; j++) {\n            positionAttribute.setXYZ(\n              j,\n              positionAttribute.getX(j) + position.getX(j),\n              positionAttribute.getY(j) + position.getY(j),\n              positionAttribute.getZ(j) + position.getZ(j)\n            );\n          }\n        } else {\n          positionAttribute = geometry.attributes.position;\n        }\n\n        morphPositions.push(positionAttribute);\n      }\n\n      if (hasMorphNormal) {\n        // see target.POSITION's comment\n\n        var normalAttribute;\n\n        if (target.NORMAL !== undefined) {\n          var normalAttribute = cloneBufferAttribute(accessors[target.NORMAL]);\n          normalAttribute.name = attributeName;\n\n          var normal = geometry.attributes.normal;\n\n          for (var j = 0, jl = normalAttribute.count; j < jl; j++) {\n            normalAttribute.setXYZ(\n              j,\n              normalAttribute.getX(j) + normal.getX(j),\n              normalAttribute.getY(j) + normal.getY(j),\n              normalAttribute.getZ(j) + normal.getZ(j)\n            );\n          }\n        } else {\n          normalAttribute = geometry.attributes.normal;\n        }\n\n        morphNormals.push(normalAttribute);\n      }\n    }\n\n    if (hasMorphPosition) geometry.morphAttributes.position = morphPositions;\n    if (hasMorphNormal) geometry.morphAttributes.normal = morphNormals;\n  }\n\n  /**\n   * @param {THREE.Mesh} mesh\n   * @param {GLTF.Mesh} meshDef\n   */\n  function updateMorphTargets(mesh, meshDef) {\n    mesh.updateMorphTargets();\n\n    if (meshDef.weights !== undefined) {\n      for (var i = 0, il = meshDef.weights.length; i < il; i++) {\n        mesh.morphTargetInfluences[i] = meshDef.weights[i];\n      }\n    }\n\n    // .extras has user-defined data, so check that .extras.targetNames is an array.\n    if (meshDef.extras && Array.isArray(meshDef.extras.targetNames)) {\n      var targetNames = meshDef.extras.targetNames;\n\n      if (mesh.morphTargetInfluences.length === targetNames.length) {\n        mesh.morphTargetDictionary = {};\n\n        for (var i = 0, il = targetNames.length; i < il; i++) {\n          mesh.morphTargetDictionary[targetNames[i]] = i;\n        }\n      } else {\n        console.warn(\n          \"THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.\"\n        );\n      }\n    }\n  }\n\n  function isPrimitiveEqual(a, b) {\n    if (a.indices !== b.indices) {\n      return false;\n    }\n\n    return isObjectEqual(a.attributes, b.attributes);\n  }\n\n  function isObjectEqual(a, b) {\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\n\n    for (var key in a) {\n      if (a[key] !== b[key]) return false;\n    }\n\n    return true;\n  }\n\n  function isArrayEqual(a, b) {\n    if (a.length !== b.length) return false;\n\n    for (var i = 0, il = a.length; i < il; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  }\n\n  function getCachedGeometry(cache, newPrimitive) {\n    for (var i = 0, il = cache.length; i < il; i++) {\n      var cached = cache[i];\n\n      if (isPrimitiveEqual(cached.primitive, newPrimitive))\n        return cached.promise;\n    }\n\n    return null;\n  }\n\n  function getCachedCombinedGeometry(cache, geometries) {\n    for (var i = 0, il = cache.length; i < il; i++) {\n      var cached = cache[i];\n\n      if (isArrayEqual(geometries, cached.baseGeometries))\n        return cached.geometry;\n    }\n\n    return null;\n  }\n\n  function getCachedMultiPassGeometry(cache, geometry, primitives) {\n    for (var i = 0, il = cache.length; i < il; i++) {\n      var cached = cache[i];\n\n      if (\n        geometry === cached.baseGeometry &&\n        isArrayEqual(primitives, cached.primitives)\n      )\n        return cached.geometry;\n    }\n\n    return null;\n  }\n\n  function cloneBufferAttribute(attribute) {\n    if (attribute.isInterleavedBufferAttribute) {\n      var count = attribute.count;\n      var itemSize = attribute.itemSize;\n      var array = attribute.array.slice(0, count * itemSize);\n\n      for (var i = 0; i < count; ++i) {\n        array[i] = attribute.getX(i);\n        if (itemSize >= 2) array[i + 1] = attribute.getY(i);\n        if (itemSize >= 3) array[i + 2] = attribute.getZ(i);\n        if (itemSize >= 4) array[i + 3] = attribute.getW(i);\n      }\n\n      return new THREE.BufferAttribute(array, itemSize, attribute.normalized);\n    }\n\n    return attribute.clone();\n  }\n\n  /**\n   * Checks if we can build a single Mesh with MultiMaterial from multiple primitives.\n   * Returns true if all primitives use the same attributes/morphAttributes/mode\n   * and also have index. Otherwise returns false.\n   *\n   * @param {Array<GLTF.Primitive>} primitives\n   * @return {Boolean}\n   */\n  function isMultiPassGeometry(primitives) {\n    if (primitives.length < 2) return false;\n\n    var primitive0 = primitives[0];\n    var targets0 = primitive0.targets || [];\n\n    if (primitive0.indices === undefined) return false;\n\n    for (var i = 1, il = primitives.length; i < il; i++) {\n      var primitive = primitives[i];\n\n      if (primitive0.mode !== primitive.mode) return false;\n      if (primitive.indices === undefined) return false;\n      if (!isObjectEqual(primitive0.attributes, primitive.attributes))\n        return false;\n\n      var targets = primitive.targets || [];\n\n      if (targets0.length !== targets.length) return false;\n\n      for (var j = 0, jl = targets0.length; j < jl; j++) {\n        if (!isObjectEqual(targets0[j], targets[j])) return false;\n      }\n    }\n\n    return true;\n  }\n\n  /* GLTF PARSER */\n\n  function GLTFParser(json, extensions, options) {\n    this.json = json || {};\n    this.extensions = extensions || {};\n    this.options = options || {};\n\n    // loader object cache\n    this.cache = new GLTFRegistry();\n\n    // BufferGeometry caching\n    this.primitiveCache = [];\n    this.multiplePrimitivesCache = [];\n    this.multiPassGeometryCache = [];\n\n    this.textureLoader = new THREE.TextureLoader(this.options.manager);\n    this.textureLoader.setCrossOrigin(this.options.crossOrigin);\n\n    this.fileLoader = new THREE.FileLoader(this.options.manager);\n    this.fileLoader.setResponseType(\"arraybuffer\");\n  }\n\n  GLTFParser.prototype.parse = function (onLoad, onError) {\n    var json = this.json;\n\n    // Clear the loader cache\n    this.cache.removeAll();\n\n    // Mark the special nodes/meshes in json for efficient parse\n    this.markDefs();\n\n    // Fire the callback on complete\n    this.getMultiDependencies([\"scene\", \"animation\", \"camera\"])\n      .then(function (dependencies) {\n        var scenes = dependencies.scenes || [];\n        var scene = scenes[json.scene || 0];\n        var animations = dependencies.animations || [];\n        var cameras = dependencies.cameras || [];\n\n        onLoad(scene, scenes, cameras, animations, json);\n      })\n      .catch(onError);\n  };\n\n  /**\n   * Marks the special nodes/meshes in json for efficient parse.\n   */\n  GLTFParser.prototype.markDefs = function () {\n    var nodeDefs = this.json.nodes || [];\n    var skinDefs = this.json.skins || [];\n    var meshDefs = this.json.meshes || [];\n\n    var meshReferences = {};\n    var meshUses = {};\n\n    // Nothing in the node definition indicates whether it is a Bone or an\n    // Object3D. Use the skins' joint references to mark bones.\n    for (\n      var skinIndex = 0, skinLength = skinDefs.length;\n      skinIndex < skinLength;\n      skinIndex++\n    ) {\n      var joints = skinDefs[skinIndex].joints;\n\n      for (var i = 0, il = joints.length; i < il; i++) {\n        nodeDefs[joints[i]].isBone = true;\n      }\n    }\n\n    // Meshes can (and should) be reused by multiple nodes in a glTF asset. To\n    // avoid having more than one THREE.Mesh with the same name, count\n    // references and rename instances below.\n    //\n    // Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n    for (\n      var nodeIndex = 0, nodeLength = nodeDefs.length;\n      nodeIndex < nodeLength;\n      nodeIndex++\n    ) {\n      var nodeDef = nodeDefs[nodeIndex];\n\n      if (nodeDef.mesh !== undefined) {\n        if (meshReferences[nodeDef.mesh] === undefined) {\n          meshReferences[nodeDef.mesh] = meshUses[nodeDef.mesh] = 0;\n        }\n\n        meshReferences[nodeDef.mesh]++;\n\n        // Nothing in the mesh definition indicates whether it is\n        // a SkinnedMesh or Mesh. Use the node's mesh reference\n        // to mark SkinnedMesh if node has skin.\n        if (nodeDef.skin !== undefined) {\n          meshDefs[nodeDef.mesh].isSkinnedMesh = true;\n        }\n      }\n    }\n\n    this.json.meshReferences = meshReferences;\n    this.json.meshUses = meshUses;\n  };\n\n  /**\n   * Requests the specified dependency asynchronously, with caching.\n   * @param {string} type\n   * @param {number} index\n   * @return {Promise<Object>}\n   */\n  GLTFParser.prototype.getDependency = function (type, index) {\n    var cacheKey = type + \":\" + index;\n    var dependency = this.cache.get(cacheKey);\n\n    if (!dependency) {\n      switch (type) {\n        case \"scene\":\n          dependency = this.loadScene(index);\n          break;\n\n        case \"node\":\n          dependency = this.loadNode(index);\n          break;\n\n        case \"mesh\":\n          dependency = this.loadMesh(index);\n          break;\n\n        case \"accessor\":\n          dependency = this.loadAccessor(index);\n          break;\n\n        case \"bufferView\":\n          dependency = this.loadBufferView(index);\n          break;\n\n        case \"buffer\":\n          dependency = this.loadBuffer(index);\n          break;\n\n        case \"material\":\n          dependency = this.loadMaterial(index);\n          break;\n\n        case \"texture\":\n          dependency = this.loadTexture(index);\n          break;\n\n        case \"skin\":\n          dependency = this.loadSkin(index);\n          break;\n\n        case \"animation\":\n          dependency = this.loadAnimation(index);\n          break;\n\n        case \"camera\":\n          dependency = this.loadCamera(index);\n          break;\n\n        default:\n          throw new Error(\"Unknown type: \" + type);\n      }\n\n      this.cache.add(cacheKey, dependency);\n    }\n\n    return dependency;\n  };\n\n  /**\n   * Requests all dependencies of the specified type asynchronously, with caching.\n   * @param {string} type\n   * @return {Promise<Array<Object>>}\n   */\n  GLTFParser.prototype.getDependencies = function (type) {\n    var dependencies = this.cache.get(type);\n\n    if (!dependencies) {\n      var parser = this;\n      var defs = this.json[type + (type === \"mesh\" ? \"es\" : \"s\")] || [];\n\n      dependencies = Promise.all(\n        defs.map(function (def, index) {\n          return parser.getDependency(type, index);\n        })\n      );\n\n      this.cache.add(type, dependencies);\n    }\n\n    return dependencies;\n  };\n\n  /**\n   * Requests all multiple dependencies of the specified types asynchronously, with caching.\n   * @param {Array<string>} types\n   * @return {Promise<Object<Array<Object>>>}\n   */\n  GLTFParser.prototype.getMultiDependencies = function (types) {\n    var results = {};\n    var pendings = [];\n\n    for (var i = 0, il = types.length; i < il; i++) {\n      var type = types[i];\n      var value = this.getDependencies(type);\n\n      value = value.then(\n        function (key, value) {\n          results[key] = value;\n        }.bind(this, type + (type === \"mesh\" ? \"es\" : \"s\"))\n      );\n\n      pendings.push(value);\n    }\n\n    return Promise.all(pendings).then(function () {\n      return results;\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n   * @param {number} bufferIndex\n   * @return {Promise<ArrayBuffer>}\n   */\n  GLTFParser.prototype.loadBuffer = function (bufferIndex) {\n    var bufferDef = this.json.buffers[bufferIndex];\n    var loader = this.fileLoader;\n\n    if (bufferDef.type && bufferDef.type !== \"arraybuffer\") {\n      throw new Error(\n        \"THREE.GLTFLoader: \" + bufferDef.type + \" buffer type is not supported.\"\n      );\n    }\n\n    // If present, GLB container is required to be the first buffer.\n    if (bufferDef.uri === undefined && bufferIndex === 0) {\n      return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);\n    }\n\n    var options = this.options;\n\n    return new Promise(function (resolve, reject) {\n      loader.load(\n        resolveURL(bufferDef.uri, options.path),\n        resolve,\n        undefined,\n        function () {\n          reject(\n            new Error(\n              'THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".'\n            )\n          );\n        }\n      );\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n   * @param {number} bufferViewIndex\n   * @return {Promise<ArrayBuffer>}\n   */\n  GLTFParser.prototype.loadBufferView = function (bufferViewIndex) {\n    var bufferViewDef = this.json.bufferViews[bufferViewIndex];\n\n    return this.getDependency(\"buffer\", bufferViewDef.buffer).then(function (\n      buffer\n    ) {\n      var byteLength = bufferViewDef.byteLength || 0;\n      var byteOffset = bufferViewDef.byteOffset || 0;\n      return buffer.slice(byteOffset, byteOffset + byteLength);\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n   * @param {number} accessorIndex\n   * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}\n   */\n  GLTFParser.prototype.loadAccessor = function (accessorIndex) {\n    var parser = this;\n    var json = this.json;\n\n    var accessorDef = this.json.accessors[accessorIndex];\n\n    if (\n      accessorDef.bufferView === undefined &&\n      accessorDef.sparse === undefined\n    ) {\n      // Ignore empty accessors, which may be used to declare runtime\n      // information about attributes coming from another source (e.g. Draco\n      // compression extension).\n      return null;\n    }\n\n    var pendingBufferViews = [];\n\n    if (accessorDef.bufferView !== undefined) {\n      pendingBufferViews.push(\n        this.getDependency(\"bufferView\", accessorDef.bufferView)\n      );\n    } else {\n      pendingBufferViews.push(null);\n    }\n\n    if (accessorDef.sparse !== undefined) {\n      pendingBufferViews.push(\n        this.getDependency(\"bufferView\", accessorDef.sparse.indices.bufferView)\n      );\n      pendingBufferViews.push(\n        this.getDependency(\"bufferView\", accessorDef.sparse.values.bufferView)\n      );\n    }\n\n    return Promise.all(pendingBufferViews).then(function (bufferViews) {\n      var bufferView = bufferViews[0];\n\n      var itemSize = WEBGL_TYPE_SIZES[accessorDef.type];\n      var TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n\n      // For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n      var elementBytes = TypedArray.BYTES_PER_ELEMENT;\n      var itemBytes = elementBytes * itemSize;\n      var byteOffset = accessorDef.byteOffset || 0;\n      var byteStride = json.bufferViews[accessorDef.bufferView].byteStride;\n      var normalized = accessorDef.normalized === true;\n      var array, bufferAttribute;\n\n      // The buffer is not interleaved if the stride is the item size in bytes.\n      if (byteStride && byteStride !== itemBytes) {\n        var ibCacheKey =\n          \"InterleavedBuffer:\" +\n          accessorDef.bufferView +\n          \":\" +\n          accessorDef.componentType;\n        var ib = parser.cache.get(ibCacheKey);\n\n        if (!ib) {\n          // Use the full buffer if it's interleaved.\n          array = new TypedArray(bufferView);\n\n          // Integer parameters to IB/IBA are in array elements, not bytes.\n          ib = new THREE.InterleavedBuffer(array, byteStride / elementBytes);\n\n          parser.cache.add(ibCacheKey, ib);\n        }\n\n        bufferAttribute = new THREE.InterleavedBufferAttribute(\n          ib,\n          itemSize,\n          byteOffset / elementBytes,\n          normalized\n        );\n      } else {\n        if (bufferView === null) {\n          array = new TypedArray(accessorDef.count * itemSize);\n        } else {\n          array = new TypedArray(\n            bufferView,\n            byteOffset,\n            accessorDef.count * itemSize\n          );\n        }\n\n        bufferAttribute = new THREE.BufferAttribute(\n          array,\n          itemSize,\n          normalized\n        );\n      }\n\n      // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n      if (accessorDef.sparse !== undefined) {\n        var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n        var TypedArrayIndices =\n          WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];\n\n        var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n        var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n\n        var sparseIndices = new TypedArrayIndices(\n          bufferViews[1],\n          byteOffsetIndices,\n          accessorDef.sparse.count * itemSizeIndices\n        );\n        var sparseValues = new TypedArray(\n          bufferViews[2],\n          byteOffsetValues,\n          accessorDef.sparse.count * itemSize\n        );\n\n        if (bufferView !== null) {\n          // Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n          bufferAttribute.setArray(bufferAttribute.array.slice());\n        }\n\n        for (var i = 0, il = sparseIndices.length; i < il; i++) {\n          var index = sparseIndices[i];\n\n          bufferAttribute.setX(index, sparseValues[i * itemSize]);\n          if (itemSize >= 2)\n            bufferAttribute.setY(index, sparseValues[i * itemSize + 1]);\n          if (itemSize >= 3)\n            bufferAttribute.setZ(index, sparseValues[i * itemSize + 2]);\n          if (itemSize >= 4)\n            bufferAttribute.setW(index, sparseValues[i * itemSize + 3]);\n          if (itemSize >= 5)\n            throw new Error(\n              \"THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.\"\n            );\n        }\n      }\n\n      return bufferAttribute;\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n   * @param {number} textureIndex\n   * @return {Promise<THREE.Texture>}\n   */\n  GLTFParser.prototype.loadTexture = function (textureIndex) {\n    var parser = this;\n    var json = this.json;\n    var options = this.options;\n    var textureLoader = this.textureLoader;\n\n    var URL = window.URL || window.webkitURL;\n\n    var textureDef = json.textures[textureIndex];\n\n    var textureExtensions = textureDef.extensions || {};\n\n    var source;\n\n    if (textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]) {\n      source =\n        json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source];\n    } else {\n      source = json.images[textureDef.source];\n    }\n\n    var sourceURI = source.uri;\n    var isObjectURL = false;\n\n    if (source.bufferView !== undefined) {\n      // Load binary image data from bufferView, if provided.\n\n      sourceURI = parser\n        .getDependency(\"bufferView\", source.bufferView)\n        .then(function (bufferView) {\n          isObjectURL = true;\n          var blob = new Blob([bufferView], { type: source.mimeType });\n          sourceURI = URL.createObjectURL(blob);\n          return sourceURI;\n        });\n    }\n\n    return Promise.resolve(sourceURI)\n      .then(function (sourceURI) {\n        // Load Texture resource.\n\n        var loader = THREE.Loader.Handlers.get(sourceURI);\n\n        if (!loader) {\n          loader = textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]\n            ? parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader\n            : textureLoader;\n        }\n\n        return new Promise(function (resolve, reject) {\n          loader.load(\n            resolveURL(sourceURI, options.path),\n            resolve,\n            undefined,\n            reject\n          );\n        });\n      })\n      .then(function (texture) {\n        // Clean up resources and configure Texture.\n\n        if (isObjectURL === true) {\n          URL.revokeObjectURL(sourceURI);\n        }\n\n        texture.flipY = false;\n\n        if (textureDef.name !== undefined) texture.name = textureDef.name;\n\n        var samplers = json.samplers || {};\n        var sampler = samplers[textureDef.sampler] || {};\n\n        texture.magFilter =\n          WEBGL_FILTERS[sampler.magFilter] || THREE.LinearFilter;\n        texture.minFilter =\n          WEBGL_FILTERS[sampler.minFilter] || THREE.LinearMipMapLinearFilter;\n        texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || THREE.RepeatWrapping;\n        texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || THREE.RepeatWrapping;\n\n        return texture;\n      });\n  };\n\n  /**\n   * Asynchronously assigns a texture to the given material parameters.\n   * @param {Object} materialParams\n   * @param {string} textureName\n   * @param {number} textureIndex\n   * @return {Promise}\n   */\n  GLTFParser.prototype.assignTexture = function (\n    materialParams,\n    textureName,\n    textureIndex\n  ) {\n    return this.getDependency(\"texture\", textureIndex).then(function (texture) {\n      materialParams[textureName] = texture;\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n   * @param {number} materialIndex\n   * @return {Promise<THREE.Material>}\n   */\n  GLTFParser.prototype.loadMaterial = function (materialIndex) {\n    var parser = this;\n    var json = this.json;\n    var extensions = this.extensions;\n    var materialDef = this.json.materials[materialIndex];\n\n    var materialType;\n    var materialParams = {};\n    var materialExtensions = materialDef.extensions || {};\n\n    var pending = [];\n\n    if (materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {\n      var sgExtension =\n        extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];\n      materialType = sgExtension.getMaterialType(materialDef);\n      pending.push(\n        sgExtension.extendParams(materialParams, materialDef, parser)\n      );\n    } else if (materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]) {\n      var kmuExtension = extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];\n      materialType = kmuExtension.getMaterialType(materialDef);\n      pending.push(\n        kmuExtension.extendParams(materialParams, materialDef, parser)\n      );\n    } else {\n      // Specification:\n      // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n      materialType = THREE.MeshStandardMaterial;\n\n      var metallicRoughness = materialDef.pbrMetallicRoughness || {};\n\n      materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n      materialParams.opacity = 1.0;\n\n      if (Array.isArray(metallicRoughness.baseColorFactor)) {\n        var array = metallicRoughness.baseColorFactor;\n\n        materialParams.color.fromArray(array);\n        materialParams.opacity = array[3];\n      }\n\n      if (metallicRoughness.baseColorTexture !== undefined) {\n        pending.push(\n          parser.assignTexture(\n            materialParams,\n            \"map\",\n            metallicRoughness.baseColorTexture.index\n          )\n        );\n      }\n\n      materialParams.metalness =\n        metallicRoughness.metallicFactor !== undefined\n          ? metallicRoughness.metallicFactor\n          : 1.0;\n      materialParams.roughness =\n        metallicRoughness.roughnessFactor !== undefined\n          ? metallicRoughness.roughnessFactor\n          : 1.0;\n\n      if (metallicRoughness.metallicRoughnessTexture !== undefined) {\n        var textureIndex = metallicRoughness.metallicRoughnessTexture.index;\n        pending.push(\n          parser.assignTexture(materialParams, \"metalnessMap\", textureIndex)\n        );\n        pending.push(\n          parser.assignTexture(materialParams, \"roughnessMap\", textureIndex)\n        );\n      }\n    }\n\n    if (materialDef.doubleSided === true) {\n      materialParams.side = THREE.DoubleSide;\n    }\n\n    var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n    if (alphaMode === ALPHA_MODES.BLEND) {\n      materialParams.transparent = true;\n    } else {\n      materialParams.transparent = false;\n\n      if (alphaMode === ALPHA_MODES.MASK) {\n        materialParams.alphaTest =\n          materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n      }\n    }\n\n    if (\n      materialDef.normalTexture !== undefined &&\n      materialType !== THREE.MeshBasicMaterial\n    ) {\n      pending.push(\n        parser.assignTexture(\n          materialParams,\n          \"normalMap\",\n          materialDef.normalTexture.index\n        )\n      );\n\n      materialParams.normalScale = new THREE.Vector2(1, 1);\n\n      if (materialDef.normalTexture.scale !== undefined) {\n        materialParams.normalScale.set(\n          materialDef.normalTexture.scale,\n          materialDef.normalTexture.scale\n        );\n      }\n    }\n\n    if (\n      materialDef.occlusionTexture !== undefined &&\n      materialType !== THREE.MeshBasicMaterial\n    ) {\n      pending.push(\n        parser.assignTexture(\n          materialParams,\n          \"aoMap\",\n          materialDef.occlusionTexture.index\n        )\n      );\n\n      if (materialDef.occlusionTexture.strength !== undefined) {\n        materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n      }\n    }\n\n    if (\n      materialDef.emissiveFactor !== undefined &&\n      materialType !== THREE.MeshBasicMaterial\n    ) {\n      materialParams.emissive = new THREE.Color().fromArray(\n        materialDef.emissiveFactor\n      );\n    }\n\n    if (\n      materialDef.emissiveTexture !== undefined &&\n      materialType !== THREE.MeshBasicMaterial\n    ) {\n      pending.push(\n        parser.assignTexture(\n          materialParams,\n          \"emissiveMap\",\n          materialDef.emissiveTexture.index\n        )\n      );\n    }\n\n    return Promise.all(pending).then(function () {\n      var material;\n\n      if (materialType === THREE.ShaderMaterial) {\n        material =\n          extensions[\n            EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS\n          ].createMaterial(materialParams);\n      } else {\n        material = new materialType(materialParams);\n      }\n\n      if (materialDef.name !== undefined) material.name = materialDef.name;\n\n      // Normal map textures use OpenGL conventions:\n      // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#materialnormaltexture\n      if (material.normalScale) {\n        material.normalScale.y = -material.normalScale.y;\n      }\n\n      // baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.\n      if (material.map) material.map.encoding = THREE.sRGBEncoding;\n      if (material.emissiveMap)\n        material.emissiveMap.encoding = THREE.sRGBEncoding;\n      if (material.specularMap)\n        material.specularMap.encoding = THREE.sRGBEncoding;\n\n      assignExtrasToUserData(material, materialDef);\n\n      if (materialDef.extensions)\n        addUnknownExtensionsToUserData(extensions, material, materialDef);\n\n      return material;\n    });\n  };\n\n  /**\n   * @param  {THREE.BufferGeometry} geometry\n   * @param  {GLTF.Primitive} primitiveDef\n   * @param  {Array<THREE.BufferAttribute>} accessors\n   */\n  function addPrimitiveAttributes(geometry, primitiveDef, accessors) {\n    var attributes = primitiveDef.attributes;\n\n    for (var gltfAttributeName in attributes) {\n      var threeAttributeName = ATTRIBUTES[gltfAttributeName];\n      var bufferAttribute = accessors[attributes[gltfAttributeName]];\n\n      // Skip attributes already provided by e.g. Draco extension.\n      if (!threeAttributeName) continue;\n      if (threeAttributeName in geometry.attributes) continue;\n\n      geometry.addAttribute(threeAttributeName, bufferAttribute);\n    }\n\n    if (primitiveDef.indices !== undefined && !geometry.index) {\n      geometry.setIndex(accessors[primitiveDef.indices]);\n    }\n\n    if (primitiveDef.targets !== undefined) {\n      addMorphTargets(geometry, primitiveDef.targets, accessors);\n    }\n\n    assignExtrasToUserData(geometry, primitiveDef);\n  }\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n   *\n   * Creates BufferGeometries from primitives.\n   * If we can build a single BufferGeometry with .groups from multiple primitives, returns one BufferGeometry.\n   * Otherwise, returns BufferGeometries without .groups as many as primitives.\n   *\n   * @param {Array<Object>} primitives\n   * @return {Promise<Array<THREE.BufferGeometry>>}\n   */\n  GLTFParser.prototype.loadGeometries = function (primitives) {\n    var parser = this;\n    var extensions = this.extensions;\n    var cache = this.primitiveCache;\n\n    var isMultiPass = isMultiPassGeometry(primitives);\n    var originalPrimitives;\n\n    if (isMultiPass) {\n      originalPrimitives = primitives; // save original primitives and use later\n\n      // We build a single BufferGeometry with .groups from multiple primitives\n      // because all primitives share the same attributes/morph/mode and have indices.\n\n      primitives = [primitives[0]];\n\n      // Sets .groups and combined indices to a geometry later in this method.\n    }\n\n    return this.getDependencies(\"accessor\").then(function (accessors) {\n      var pending = [];\n\n      for (var i = 0, il = primitives.length; i < il; i++) {\n        var primitive = primitives[i];\n\n        // See if we've already created this geometry\n        var cached = getCachedGeometry(cache, primitive);\n\n        if (cached) {\n          // Use the cached geometry if it exists\n          pending.push(cached);\n        } else if (\n          primitive.extensions &&\n          primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]\n        ) {\n          // Use DRACO geometry if available\n          var geometryPromise = extensions[\n            EXTENSIONS.KHR_DRACO_MESH_COMPRESSION\n          ]\n            .decodePrimitive(primitive, parser)\n            .then(function (geometry) {\n              addPrimitiveAttributes(geometry, primitive, accessors);\n\n              return geometry;\n            });\n\n          cache.push({ primitive: primitive, promise: geometryPromise });\n\n          pending.push(geometryPromise);\n        } else {\n          // Otherwise create a new geometry\n          var geometry = new THREE.BufferGeometry();\n\n          addPrimitiveAttributes(geometry, primitive, accessors);\n\n          var geometryPromise = Promise.resolve(geometry);\n\n          // Cache this geometry\n          cache.push({ primitive: primitive, promise: geometryPromise });\n\n          pending.push(geometryPromise);\n        }\n      }\n\n      return Promise.all(pending).then(function (geometries) {\n        if (isMultiPass) {\n          var baseGeometry = geometries[0];\n\n          // See if we've already created this combined geometry\n          var cache = parser.multiPassGeometryCache;\n          var cached = getCachedMultiPassGeometry(\n            cache,\n            baseGeometry,\n            originalPrimitives\n          );\n\n          if (cached !== null) return [cached.geometry];\n\n          // Cloning geometry because of index override.\n          // Attributes can be reused so cloning by myself here.\n          var geometry = new THREE.BufferGeometry();\n\n          geometry.name = baseGeometry.name;\n          geometry.userData = baseGeometry.userData;\n\n          for (var key in baseGeometry.attributes)\n            geometry.addAttribute(key, baseGeometry.attributes[key]);\n          for (var key in baseGeometry.morphAttributes)\n            geometry.morphAttributes[key] = baseGeometry.morphAttributes[key];\n\n          var indices = [];\n          var offset = 0;\n\n          for (var i = 0, il = originalPrimitives.length; i < il; i++) {\n            var accessor = accessors[originalPrimitives[i].indices];\n\n            for (var j = 0, jl = accessor.count; j < jl; j++)\n              indices.push(accessor.array[j]);\n\n            geometry.addGroup(offset, accessor.count, i);\n\n            offset += accessor.count;\n          }\n\n          geometry.setIndex(indices);\n\n          cache.push({\n            geometry: geometry,\n            baseGeometry: baseGeometry,\n            primitives: originalPrimitives,\n          });\n\n          return [geometry];\n        } else if (\n          geometries.length > 1 &&\n          THREE.BufferGeometryUtils !== undefined\n        ) {\n          // Tries to merge geometries with BufferGeometryUtils if possible\n\n          for (var i = 1, il = primitives.length; i < il; i++) {\n            // can't merge if draw mode is different\n            if (primitives[0].mode !== primitives[i].mode) return geometries;\n          }\n\n          // See if we've already created this combined geometry\n          var cache = parser.multiplePrimitivesCache;\n          var cached = getCachedCombinedGeometry(cache, geometries);\n\n          if (cached) {\n            if (cached.geometry !== null) return [cached.geometry];\n          } else {\n            var geometry = THREE.BufferGeometryUtils.mergeBufferGeometries(\n              geometries,\n              true\n            );\n\n            cache.push({ geometry: geometry, baseGeometries: geometries });\n\n            if (geometry !== null) return [geometry];\n          }\n        }\n\n        return geometries;\n      });\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n   * @param {number} meshIndex\n   * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}\n   */\n  GLTFParser.prototype.loadMesh = function (meshIndex) {\n    var scope = this;\n    var json = this.json;\n    var extensions = this.extensions;\n\n    var meshDef = this.json.meshes[meshIndex];\n\n    return this.getMultiDependencies([\"accessor\", \"material\"]).then(function (\n      dependencies\n    ) {\n      var primitives = meshDef.primitives;\n      var originalMaterials = [];\n\n      for (var i = 0, il = primitives.length; i < il; i++) {\n        originalMaterials[i] =\n          primitives[i].material === undefined\n            ? createDefaultMaterial()\n            : dependencies.materials[primitives[i].material];\n      }\n\n      return scope.loadGeometries(primitives).then(function (geometries) {\n        var isMultiMaterial =\n          geometries.length === 1 && geometries[0].groups.length > 0;\n\n        var meshes = [];\n\n        for (var i = 0, il = geometries.length; i < il; i++) {\n          var geometry = geometries[i];\n          var primitive = primitives[i];\n\n          // 1. create Mesh\n\n          var mesh;\n\n          var material = isMultiMaterial\n            ? originalMaterials\n            : originalMaterials[i];\n\n          if (\n            primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||\n            primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||\n            primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||\n            primitive.mode === undefined\n          ) {\n            // .isSkinnedMesh isn't in glTF spec. See .markDefs()\n            mesh =\n              meshDef.isSkinnedMesh === true\n                ? new THREE.SkinnedMesh(geometry, material)\n                : new THREE.Mesh(geometry, material);\n\n            if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP) {\n              mesh.drawMode = THREE.TriangleStripDrawMode;\n            } else if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN) {\n              mesh.drawMode = THREE.TriangleFanDrawMode;\n            }\n          } else if (primitive.mode === WEBGL_CONSTANTS.LINES) {\n            mesh = new THREE.LineSegments(geometry, material);\n          } else if (primitive.mode === WEBGL_CONSTANTS.LINE_STRIP) {\n            mesh = new THREE.Line(geometry, material);\n          } else if (primitive.mode === WEBGL_CONSTANTS.LINE_LOOP) {\n            mesh = new THREE.LineLoop(geometry, material);\n          } else if (primitive.mode === WEBGL_CONSTANTS.POINTS) {\n            mesh = new THREE.Points(geometry, material);\n          } else {\n            throw new Error(\n              \"THREE.GLTFLoader: Primitive mode unsupported: \" + primitive.mode\n            );\n          }\n\n          if (Object.keys(mesh.geometry.morphAttributes).length > 0) {\n            updateMorphTargets(mesh, meshDef);\n          }\n\n          mesh.name = meshDef.name || \"mesh_\" + meshIndex;\n\n          if (geometries.length > 1) mesh.name += \"_\" + i;\n\n          assignExtrasToUserData(mesh, meshDef);\n\n          meshes.push(mesh);\n\n          // 2. update Material depending on Mesh and BufferGeometry\n\n          var materials = isMultiMaterial ? mesh.material : [mesh.material];\n\n          var useVertexColors = geometry.attributes.color !== undefined;\n          var useFlatShading = geometry.attributes.normal === undefined;\n          var useSkinning = mesh.isSkinnedMesh === true;\n          var useMorphTargets =\n            Object.keys(geometry.morphAttributes).length > 0;\n          var useMorphNormals =\n            useMorphTargets && geometry.morphAttributes.normal !== undefined;\n\n          for (var j = 0, jl = materials.length; j < jl; j++) {\n            var material = materials[j];\n\n            if (mesh.isPoints) {\n              var cacheKey = \"PointsMaterial:\" + material.uuid;\n\n              var pointsMaterial = scope.cache.get(cacheKey);\n\n              if (!pointsMaterial) {\n                pointsMaterial = new THREE.PointsMaterial();\n                THREE.Material.prototype.copy.call(pointsMaterial, material);\n                pointsMaterial.color.copy(material.color);\n                pointsMaterial.map = material.map;\n                pointsMaterial.lights = false; // PointsMaterial doesn't support lights yet\n\n                scope.cache.add(cacheKey, pointsMaterial);\n              }\n\n              material = pointsMaterial;\n            } else if (mesh.isLine) {\n              var cacheKey = \"LineBasicMaterial:\" + material.uuid;\n\n              var lineMaterial = scope.cache.get(cacheKey);\n\n              if (!lineMaterial) {\n                lineMaterial = new THREE.LineBasicMaterial();\n                THREE.Material.prototype.copy.call(lineMaterial, material);\n                lineMaterial.color.copy(material.color);\n                lineMaterial.lights = false; // LineBasicMaterial doesn't support lights yet\n\n                scope.cache.add(cacheKey, lineMaterial);\n              }\n\n              material = lineMaterial;\n            }\n\n            // Clone the material if it will be modified\n            if (\n              useVertexColors ||\n              useFlatShading ||\n              useSkinning ||\n              useMorphTargets\n            ) {\n              var cacheKey = \"ClonedMaterial:\" + material.uuid + \":\";\n\n              if (material.isGLTFSpecularGlossinessMaterial)\n                cacheKey += \"specular-glossiness:\";\n              if (useSkinning) cacheKey += \"skinning:\";\n              if (useVertexColors) cacheKey += \"vertex-colors:\";\n              if (useFlatShading) cacheKey += \"flat-shading:\";\n              if (useMorphTargets) cacheKey += \"morph-targets:\";\n              if (useMorphNormals) cacheKey += \"morph-normals:\";\n\n              var cachedMaterial = scope.cache.get(cacheKey);\n\n              if (!cachedMaterial) {\n                cachedMaterial = material.isGLTFSpecularGlossinessMaterial\n                  ? extensions[\n                      EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS\n                    ].cloneMaterial(material)\n                  : material.clone();\n\n                if (useSkinning) cachedMaterial.skinning = true;\n                if (useVertexColors)\n                  cachedMaterial.vertexColors = THREE.VertexColors;\n                if (useFlatShading) cachedMaterial.flatShading = true;\n                if (useMorphTargets) cachedMaterial.morphTargets = true;\n                if (useMorphNormals) cachedMaterial.morphNormals = true;\n\n                scope.cache.add(cacheKey, cachedMaterial);\n              }\n\n              material = cachedMaterial;\n            }\n\n            materials[j] = material;\n\n            // workarounds for mesh and geometry\n\n            if (\n              material.aoMap &&\n              geometry.attributes.uv2 === undefined &&\n              geometry.attributes.uv !== undefined\n            ) {\n              console.log(\n                \"THREE.GLTFLoader: Duplicating UVs to support aoMap.\"\n              );\n              geometry.addAttribute(\n                \"uv2\",\n                new THREE.BufferAttribute(geometry.attributes.uv.array, 2)\n              );\n            }\n\n            if (material.isGLTFSpecularGlossinessMaterial) {\n              // for GLTFSpecularGlossinessMaterial(ShaderMaterial) uniforms runtime update\n              mesh.onBeforeRender =\n                extensions[\n                  EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS\n                ].refreshUniforms;\n            }\n          }\n\n          mesh.material = isMultiMaterial ? materials : materials[0];\n        }\n\n        if (meshes.length === 1) {\n          return meshes[0];\n        }\n\n        var group = new THREE.Group();\n\n        for (var i = 0, il = meshes.length; i < il; i++) {\n          group.add(meshes[i]);\n        }\n\n        return group;\n      });\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n   * @param {number} cameraIndex\n   * @return {Promise<THREE.Camera>}\n   */\n  GLTFParser.prototype.loadCamera = function (cameraIndex) {\n    var camera;\n    var cameraDef = this.json.cameras[cameraIndex];\n    var params = cameraDef[cameraDef.type];\n\n    if (!params) {\n      console.warn(\"THREE.GLTFLoader: Missing camera parameters.\");\n      return;\n    }\n\n    if (cameraDef.type === \"perspective\") {\n      camera = new THREE.PerspectiveCamera(\n        THREE.Math.radToDeg(params.yfov),\n        params.aspectRatio || 1,\n        params.znear || 1,\n        params.zfar || 2e6\n      );\n    } else if (cameraDef.type === \"orthographic\") {\n      camera = new THREE.OrthographicCamera(\n        params.xmag / -2,\n        params.xmag / 2,\n        params.ymag / 2,\n        params.ymag / -2,\n        params.znear,\n        params.zfar\n      );\n    }\n\n    if (cameraDef.name !== undefined) camera.name = cameraDef.name;\n\n    assignExtrasToUserData(camera, cameraDef);\n\n    return Promise.resolve(camera);\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n   * @param {number} skinIndex\n   * @return {Promise<Object>}\n   */\n  GLTFParser.prototype.loadSkin = function (skinIndex) {\n    var skinDef = this.json.skins[skinIndex];\n\n    var skinEntry = { joints: skinDef.joints };\n\n    if (skinDef.inverseBindMatrices === undefined) {\n      return Promise.resolve(skinEntry);\n    }\n\n    return this.getDependency(\"accessor\", skinDef.inverseBindMatrices).then(\n      function (accessor) {\n        skinEntry.inverseBindMatrices = accessor;\n\n        return skinEntry;\n      }\n    );\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n   * @param {number} animationIndex\n   * @return {Promise<THREE.AnimationClip>}\n   */\n  GLTFParser.prototype.loadAnimation = function (animationIndex) {\n    var json = this.json;\n\n    var animationDef = this.json.animations[animationIndex];\n\n    return this.getMultiDependencies([\"accessor\", \"node\"]).then(function (\n      dependencies\n    ) {\n      var tracks = [];\n\n      for (var i = 0, il = animationDef.channels.length; i < il; i++) {\n        var channel = animationDef.channels[i];\n        var sampler = animationDef.samplers[channel.sampler];\n\n        if (sampler) {\n          var target = channel.target;\n          var name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.\n          var input =\n            animationDef.parameters !== undefined\n              ? animationDef.parameters[sampler.input]\n              : sampler.input;\n          var output =\n            animationDef.parameters !== undefined\n              ? animationDef.parameters[sampler.output]\n              : sampler.output;\n\n          var inputAccessor = dependencies.accessors[input];\n          var outputAccessor = dependencies.accessors[output];\n\n          var node = dependencies.nodes[name];\n\n          if (node) {\n            node.updateMatrix();\n            node.matrixAutoUpdate = true;\n\n            var TypedKeyframeTrack;\n\n            switch (PATH_PROPERTIES[target.path]) {\n              case PATH_PROPERTIES.weights:\n                TypedKeyframeTrack = THREE.NumberKeyframeTrack;\n                break;\n\n              case PATH_PROPERTIES.rotation:\n                TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n                break;\n\n              case PATH_PROPERTIES.position:\n              case PATH_PROPERTIES.scale:\n              default:\n                TypedKeyframeTrack = THREE.VectorKeyframeTrack;\n                break;\n            }\n\n            var targetName = node.name ? node.name : node.uuid;\n\n            var interpolation =\n              sampler.interpolation !== undefined\n                ? INTERPOLATION[sampler.interpolation]\n                : THREE.InterpolateLinear;\n\n            var targetNames = [];\n\n            if (PATH_PROPERTIES[target.path] === PATH_PROPERTIES.weights) {\n              // node can be THREE.Group here but\n              // PATH_PROPERTIES.weights(morphTargetInfluences) should be\n              // the property of a mesh object under group.\n\n              node.traverse(function (object) {\n                if (object.isMesh === true && object.morphTargetInfluences) {\n                  targetNames.push(object.name ? object.name : object.uuid);\n                }\n              });\n            } else {\n              targetNames.push(targetName);\n            }\n\n            // KeyframeTrack.optimize() will modify given 'times' and 'values'\n            // buffers before creating a truncated copy to keep. Because buffers may\n            // be reused by other tracks, make copies here.\n            for (var j = 0, jl = targetNames.length; j < jl; j++) {\n              var track = new TypedKeyframeTrack(\n                targetNames[j] + \".\" + PATH_PROPERTIES[target.path],\n                THREE.AnimationUtils.arraySlice(inputAccessor.array, 0),\n                THREE.AnimationUtils.arraySlice(outputAccessor.array, 0),\n                interpolation\n              );\n\n              // Here is the trick to enable custom interpolation.\n              // Overrides .createInterpolant in a factory method which creates custom interpolation.\n              if (sampler.interpolation === \"CUBICSPLINE\") {\n                track.createInterpolant =\n                  function InterpolantFactoryMethodGLTFCubicSpline(result) {\n                    // A CUBICSPLINE keyframe in glTF has three output values for each input value,\n                    // representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n                    // must be divided by three to get the interpolant's sampleSize argument.\n\n                    return new GLTFCubicSplineInterpolant(\n                      this.times,\n                      this.values,\n                      this.getValueSize() / 3,\n                      result\n                    );\n                  };\n\n                // Workaround, provide an alternate way to know if the interpolant type is cubis spline to track.\n                // track.getInterpolation() doesn't return valid value for custom interpolant.\n                track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n              }\n\n              tracks.push(track);\n            }\n          }\n        }\n      }\n\n      var name =\n        animationDef.name !== undefined\n          ? animationDef.name\n          : \"animation_\" + animationIndex;\n\n      return new THREE.AnimationClip(name, undefined, tracks);\n    });\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n   * @param {number} nodeIndex\n   * @return {Promise<THREE.Object3D>}\n   */\n  GLTFParser.prototype.loadNode = function (nodeIndex) {\n    var json = this.json;\n    var extensions = this.extensions;\n\n    var meshReferences = this.json.meshReferences;\n    var meshUses = this.json.meshUses;\n\n    var nodeDef = this.json.nodes[nodeIndex];\n\n    return this.getMultiDependencies([\"mesh\", \"skin\", \"camera\", \"light\"]).then(\n      function (dependencies) {\n        var node;\n\n        // .isBone isn't in glTF spec. See .markDefs\n        if (nodeDef.isBone === true) {\n          node = new THREE.Bone();\n        } else if (nodeDef.mesh !== undefined) {\n          var mesh = dependencies.meshes[nodeDef.mesh];\n\n          if (meshReferences[nodeDef.mesh] > 1) {\n            var instanceNum = meshUses[nodeDef.mesh]++;\n\n            node = mesh.clone();\n            node.name += \"_instance_\" + instanceNum;\n\n            // onBeforeRender copy for Specular-Glossiness\n            node.onBeforeRender = mesh.onBeforeRender;\n\n            for (var i = 0, il = node.children.length; i < il; i++) {\n              node.children[i].name += \"_instance_\" + instanceNum;\n              node.children[i].onBeforeRender = mesh.children[i].onBeforeRender;\n            }\n          } else {\n            node = mesh;\n          }\n        } else if (nodeDef.camera !== undefined) {\n          node = dependencies.cameras[nodeDef.camera];\n        } else if (\n          nodeDef.extensions &&\n          nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] &&\n          nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light !== undefined\n        ) {\n          var lights = extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].lights;\n          node =\n            lights[nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light];\n        } else {\n          node = new THREE.Object3D();\n        }\n\n        if (nodeDef.name !== undefined) {\n          node.name = THREE.PropertyBinding.sanitizeNodeName(nodeDef.name);\n        }\n\n        assignExtrasToUserData(node, nodeDef);\n\n        if (nodeDef.extensions)\n          addUnknownExtensionsToUserData(extensions, node, nodeDef);\n\n        if (nodeDef.matrix !== undefined) {\n          var matrix = new THREE.Matrix4();\n          matrix.fromArray(nodeDef.matrix);\n          node.applyMatrix(matrix);\n        } else {\n          if (nodeDef.translation !== undefined) {\n            node.position.fromArray(nodeDef.translation);\n          }\n\n          if (nodeDef.rotation !== undefined) {\n            node.quaternion.fromArray(nodeDef.rotation);\n          }\n\n          if (nodeDef.scale !== undefined) {\n            node.scale.fromArray(nodeDef.scale);\n          }\n        }\n\n        return node;\n      }\n    );\n  };\n\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n   * @param {number} sceneIndex\n   * @return {Promise<THREE.Scene>}\n   */\n  GLTFParser.prototype.loadScene = (function () {\n    // scene node hierachy builder\n\n    function buildNodeHierachy(nodeId, parentObject, json, allNodes, skins) {\n      var node = allNodes[nodeId];\n      var nodeDef = json.nodes[nodeId];\n\n      // build skeleton here as well\n\n      if (nodeDef.skin !== undefined) {\n        var meshes = node.isGroup === true ? node.children : [node];\n\n        for (var i = 0, il = meshes.length; i < il; i++) {\n          var mesh = meshes[i];\n          var skinEntry = skins[nodeDef.skin];\n\n          var bones = [];\n          var boneInverses = [];\n\n          for (var j = 0, jl = skinEntry.joints.length; j < jl; j++) {\n            var jointId = skinEntry.joints[j];\n            var jointNode = allNodes[jointId];\n\n            if (jointNode) {\n              bones.push(jointNode);\n\n              var mat = new THREE.Matrix4();\n\n              if (skinEntry.inverseBindMatrices !== undefined) {\n                mat.fromArray(skinEntry.inverseBindMatrices.array, j * 16);\n              }\n\n              boneInverses.push(mat);\n            } else {\n              console.warn(\n                'THREE.GLTFLoader: Joint \"%s\" could not be found.',\n                jointId\n              );\n            }\n          }\n\n          mesh.bind(new THREE.Skeleton(bones, boneInverses), mesh.matrixWorld);\n        }\n      }\n\n      // build node hierachy\n\n      parentObject.add(node);\n\n      if (nodeDef.children) {\n        var children = nodeDef.children;\n\n        for (var i = 0, il = children.length; i < il; i++) {\n          var child = children[i];\n          buildNodeHierachy(child, node, json, allNodes, skins);\n        }\n      }\n    }\n\n    return function loadScene(sceneIndex) {\n      var json = this.json;\n      var extensions = this.extensions;\n      var sceneDef = this.json.scenes[sceneIndex];\n\n      return this.getMultiDependencies([\"node\", \"skin\"]).then(function (\n        dependencies\n      ) {\n        var scene = new THREE.Scene();\n        if (sceneDef.name !== undefined) scene.name = sceneDef.name;\n\n        assignExtrasToUserData(scene, sceneDef);\n\n        if (sceneDef.extensions)\n          addUnknownExtensionsToUserData(extensions, scene, sceneDef);\n\n        var nodeIds = sceneDef.nodes || [];\n\n        for (var i = 0, il = nodeIds.length; i < il; i++) {\n          buildNodeHierachy(\n            nodeIds[i],\n            scene,\n            json,\n            dependencies.nodes,\n            dependencies.skins\n          );\n        }\n\n        return scene;\n      });\n    };\n  })();\n\n  return GLTFLoader;\n})();\n",
    "/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\nTHREE.MTLLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nTHREE.MTLLoader.prototype = {\n  constructor: THREE.MTLLoader,\n\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setTexturePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setPath and/or setTexturePath explicitly prior to load.\n   */\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n\n    var loader = new THREE.FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.load(\n      url,\n      function (text) {\n        onLoad(scope.parse(text));\n      },\n      onProgress,\n      onError\n    );\n  },\n\n  /**\n   * Set base path for resolving references.\n   * If set this path will be prepended to each loaded and found reference.\n   *\n   * @see setTexturePath\n   * @param {String} path\n   * @return {THREE.MTLLoader}\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n  setPath: function (path) {\n    this.path = path;\n    return this;\n  },\n\n  /**\n   * Set base path for resolving texture references.\n   * If set this path will be prepended found texture reference.\n   * If not set and setPath is, it will be used as texture base path.\n   *\n   * @see setPath\n   * @param {String} path\n   * @return {THREE.MTLLoader}\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.setTexturePath( 'assets/textures/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n  setTexturePath: function (path) {\n    this.texturePath = path;\n    return this;\n  },\n\n  setBaseUrl: function (path) {\n    console.warn(\n      \"THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.\"\n    );\n\n    return this.setTexturePath(path);\n  },\n\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n    return this;\n  },\n\n  setMaterialOptions: function (value) {\n    this.materialOptions = value;\n    return this;\n  },\n\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {THREE.MTLLoader.MaterialCreator}\n   *\n   * @see setPath setTexturePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setPath and/or setTexturePath explicitly prior to parse.\n   */\n  parse: function (text) {\n    var lines = text.split(\"\\n\");\n    var info = {};\n    var delimiter_pattern = /\\s+/;\n    var materialsInfo = {};\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === \"#\") {\n        // Blank line or comment ignore\n        continue;\n      }\n\n      var pos = line.indexOf(\" \");\n\n      var key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n\n      var value = pos >= 0 ? line.substring(pos + 1) : \"\";\n      value = value.trim();\n\n      if (key === \"newmtl\") {\n        // New material\n\n        info = { name: value };\n        materialsInfo[value] = info;\n      } else if (info) {\n        if (key === \"ka\" || key === \"kd\" || key === \"ks\") {\n          var ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    var materialCreator = new THREE.MTLLoader.MaterialCreator(\n      this.texturePath || this.path,\n      this.materialOptions\n    );\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  },\n};\n\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nTHREE.MTLLoader.MaterialCreator = function (baseUrl, options) {\n  this.baseUrl = baseUrl || \"\";\n  this.options = options;\n  this.materialsInfo = {};\n  this.materials = {};\n  this.materialsArray = [];\n  this.nameLookup = {};\n\n  this.side =\n    this.options && this.options.side ? this.options.side : THREE.FrontSide;\n  this.wrap =\n    this.options && this.options.wrap\n      ? this.options.wrap\n      : THREE.RepeatWrapping;\n};\n\nTHREE.MTLLoader.MaterialCreator.prototype = {\n  constructor: THREE.MTLLoader.MaterialCreator,\n\n  crossOrigin: \"anonymous\",\n\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n    return this;\n  },\n\n  setManager: function (value) {\n    this.manager = value;\n  },\n\n  setMaterials: function (materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  },\n\n  convert: function (materialsInfo) {\n    if (!this.options) return materialsInfo;\n\n    var converted = {};\n\n    for (var mn in materialsInfo) {\n      // Convert materials info into normalized form based on options\n\n      var mat = materialsInfo[mn];\n\n      var covmat = {};\n\n      converted[mn] = covmat;\n\n      for (var prop in mat) {\n        var save = true;\n        var value = mat[prop];\n        var lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case \"kd\":\n          case \"ka\":\n          case \"ks\":\n            // Diffuse color (color under white light) using RGB values\n\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                // ignore\n\n                save = false;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  },\n\n  preload: function () {\n    for (var mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  },\n\n  getIndex: function (materialName) {\n    return this.nameLookup[materialName];\n  },\n\n  getAsArray: function () {\n    var index = 0;\n\n    for (var mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  },\n\n  create: function (materialName) {\n    if (this.materials[materialName] === undefined) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  },\n\n  createMaterial_: function (materialName) {\n    // Create material\n\n    var scope = this;\n    var mat = this.materialsInfo[materialName];\n    var params = {\n      name: materialName,\n      side: this.side,\n    };\n\n    function resolveURL(baseUrl, url) {\n      if (typeof url !== \"string\" || url === \"\") return \"\";\n\n      // Absolute URL\n      if (/^https?:\\/\\//i.test(url)) return url;\n\n      return baseUrl + url;\n    }\n\n    function setMapForType(mapType, value) {\n      if (params[mapType]) return; // Keep the first encountered texture\n\n      var texParams = scope.getTextureParams(value, params);\n      var map = scope.loadTexture(resolveURL(scope.baseUrl, texParams.url));\n\n      map.repeat.copy(texParams.scale);\n      map.offset.copy(texParams.offset);\n\n      map.wrapS = scope.wrap;\n      map.wrapT = scope.wrap;\n\n      params[mapType] = map;\n    }\n\n    for (var prop in mat) {\n      var value = mat[prop];\n      var n;\n\n      if (value === \"\") continue;\n\n      switch (prop.toLowerCase()) {\n        // Ns is material specular exponent\n\n        case \"kd\":\n          // Diffuse color (color under white light) using RGB values\n\n          params.color = new THREE.Color().fromArray(value);\n\n          break;\n\n        case \"ks\":\n          // Specular color (color when light is reflected from shiny surface) using RGB values\n          params.specular = new THREE.Color().fromArray(value);\n\n          break;\n\n        case \"map_kd\":\n          // Diffuse texture map\n\n          setMapForType(\"map\", value);\n\n          break;\n\n        case \"map_ks\":\n          // Specular map\n\n          setMapForType(\"specularMap\", value);\n\n          break;\n\n        case \"norm\":\n          setMapForType(\"normalMap\", value);\n\n          break;\n\n        case \"map_bump\":\n        case \"bump\":\n          // Bump texture map\n\n          setMapForType(\"bumpMap\", value);\n\n          break;\n\n        case \"ns\":\n          // The specular exponent (defines the focus of the specular highlight)\n          // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n          params.shininess = parseFloat(value);\n\n          break;\n\n        case \"d\":\n          n = parseFloat(value);\n\n          if (n < 1) {\n            params.opacity = n;\n            params.transparent = true;\n          }\n\n          break;\n\n        case \"tr\":\n          n = parseFloat(value);\n\n          if (this.options && this.options.invertTrProperty) n = 1 - n;\n\n          if (n > 0) {\n            params.opacity = 1 - n;\n            params.transparent = true;\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n    return this.materials[materialName];\n  },\n\n  getTextureParams: function (value, matParams) {\n    var texParams = {\n      scale: new THREE.Vector2(1, 1),\n      offset: new THREE.Vector2(0, 0),\n    };\n\n    var items = value.split(/\\s+/);\n    var pos;\n\n    pos = items.indexOf(\"-bm\");\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf(\"-s\");\n\n    if (pos >= 0) {\n      texParams.scale.set(\n        parseFloat(items[pos + 1]),\n        parseFloat(items[pos + 2])\n      );\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    pos = items.indexOf(\"-o\");\n\n    if (pos >= 0) {\n      texParams.offset.set(\n        parseFloat(items[pos + 1]),\n        parseFloat(items[pos + 2])\n      );\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    texParams.url = items.join(\" \").trim();\n    return texParams;\n  },\n\n  loadTexture: function (url, mapping, onLoad, onProgress, onError) {\n    var texture;\n    var loader = THREE.Loader.Handlers.get(url);\n    var manager =\n      this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n\n    if (loader === null) {\n      loader = new THREE.TextureLoader(manager);\n    }\n\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    texture = loader.load(url, onLoad, onProgress, onError);\n\n    if (mapping !== undefined) texture.mapping = mapping;\n\n    return texture;\n  },\n};\n",
    "/**\n * @author dmarcos / https://github.com/dmarcos\n * @author mrdoob / http://mrdoob.com\n *\n * WebVR Spec: http://mozvr.github.io/webvr-spec/webvr.html\n *\n * Firefox: http://mozvr.com/downloads/\n * Chromium: https://webvr.info/get-chrome\n *\n */\n\nTHREE.MainRenderer = function (renderer, onError) {\n  this.isPresenting = false;\n\n  var scope = this;\n\n  var rendererSize = renderer.getSize();\n  var rendererUpdateStyle = false;\n  var rendererPixelRatio = renderer.getPixelRatio();\n\n  this.setSize = function (width, height, updateStyle) {\n    rendererSize = { width: width, height: height };\n    rendererUpdateStyle = updateStyle;\n\n    renderer.setPixelRatio(rendererPixelRatio);\n    renderer.setSize(width, height, updateStyle);\n  };\n\n  renderer.autoClear = false;\n  renderer.autoClearColor = false;\n\n  this.requestAnimationFrame = function (f) {\n    var f = (scope.f = f || scope.f);\n\n    if (!f) {\n      return;\n    }\n\n    return window.requestAnimationFrame(f);\n  };\n\n  this.cancelAnimationFrame = function (h) {\n    var f = scope.f;\n\n    scope.f = undefined;\n\n    window.cancelAnimationFrame(h);\n\n    return f;\n  };\n\n  this.render = function (scene, camera, renderTarget, forceClear, cameraData) {\n    var size = renderer.getSize();\n    if (\n      cameraData &&\n      cameraData.viewport &&\n      cameraData.viewportPosition != null &&\n      !cameraData.fullscreen\n    ) {\n      var x,\n        y,\n        width = size.width / cameraData.viewport,\n        height = cameraData.aspect\n          ? width / cameraData.aspect\n          : size.height / cameraData.viewport;\n      switch (cameraData.viewportPosition) {\n        case 0: // Top left\n          x = 0;\n          y = 0;\n          break;\n        case 1: // Top right\n          x = size.width - width;\n          y = 0;\n          break;\n        case 2: // Bottom right\n          x = size.width - width;\n          y = size.height - height;\n          break;\n        case 3: // Bottom left\n          x = 0;\n          y = size.height - height;\n          break;\n\n        default:\n          break;\n      }\n      renderer.setViewport(x, y, width, height);\n    } else {\n      if (cameraData.aspect) {\n        if (size.width > size.height) {\n          renderer.setViewport(\n            -(size.height * cameraData.aspect - size.width) / 2.0,\n            0,\n            size.height * cameraData.aspect,\n            size.height\n          );\n        } else {\n          renderer.setViewport(\n            0,\n            -(size.width / cameraData.aspect - size.height) / 2.0,\n            size.width,\n            size.width / cameraData.aspect\n          );\n        }\n      } else {\n        renderer.setViewport(0, 0, size.width, size.height);\n      }\n    }\n\n    renderer.render(scene, camera, renderTarget, forceClear);\n  };\n\n  this.getDrawingBufferSize = function () {\n    if (this.isPresentig) {\n      this.resize();\n    }\n    return renderer.getDrawingBufferSize();\n  };\n\n  this.getClearColor = function () {\n    return renderer.getClearColor();\n  };\n\n  this.getClearAlpha = function () {\n    return renderer.getClearAlpha();\n  };\n\n  this.setClearColor = function (color) {\n    return renderer.setClearColor(color);\n  };\n};\n",
    "/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.OBJLoader = (function () {\n  // o object_name | g group_name\n  var object_pattern = /^[og]\\s*(.+)?/;\n  // mtllib file_reference\n  var material_library_pattern = /^mtllib /;\n  // usemtl material_name\n  var material_use_pattern = /^usemtl /;\n\n  function ParserState() {\n    var state = {\n      objects: [],\n      object: {},\n\n      vertices: [],\n      normals: [],\n      colors: [],\n      uvs: [],\n\n      materialLibraries: [],\n\n      startObject: function (name, fromDeclaration) {\n        // If the current object (initial from reset) is not from a g/o declaration in the parsed\n        // file. We need to use it for the first parsed g/o to keep things in sync.\n        if (this.object && this.object.fromDeclaration === false) {\n          this.object.name = name;\n          this.object.fromDeclaration = fromDeclaration !== false;\n          return;\n        }\n\n        var previousMaterial =\n          this.object && typeof this.object.currentMaterial === \"function\"\n            ? this.object.currentMaterial()\n            : undefined;\n\n        if (this.object && typeof this.object._finalize === \"function\") {\n          this.object._finalize(true);\n        }\n\n        this.object = {\n          name: name || \"\",\n          fromDeclaration: fromDeclaration !== false,\n\n          geometry: {\n            vertices: [],\n            normals: [],\n            colors: [],\n            uvs: [],\n          },\n          materials: [],\n          smooth: true,\n\n          startMaterial: function (name, libraries) {\n            var previous = this._finalize(false);\n\n            // New usemtl declaration overwrites an inherited material, except if faces were declared\n            // after the material, then it must be preserved for proper MultiMaterial continuation.\n            if (previous && (previous.inherited || previous.groupCount <= 0)) {\n              this.materials.splice(previous.index, 1);\n            }\n\n            var material = {\n              index: this.materials.length,\n              name: name || \"\",\n              mtllib:\n                Array.isArray(libraries) && libraries.length > 0\n                  ? libraries[libraries.length - 1]\n                  : \"\",\n              smooth: previous !== undefined ? previous.smooth : this.smooth,\n              groupStart: previous !== undefined ? previous.groupEnd : 0,\n              groupEnd: -1,\n              groupCount: -1,\n              inherited: false,\n\n              clone: function (index) {\n                var cloned = {\n                  index: typeof index === \"number\" ? index : this.index,\n                  name: this.name,\n                  mtllib: this.mtllib,\n                  smooth: this.smooth,\n                  groupStart: 0,\n                  groupEnd: -1,\n                  groupCount: -1,\n                  inherited: false,\n                };\n                cloned.clone = this.clone.bind(cloned);\n                return cloned;\n              },\n            };\n\n            this.materials.push(material);\n\n            return material;\n          },\n\n          currentMaterial: function () {\n            if (this.materials.length > 0) {\n              return this.materials[this.materials.length - 1];\n            }\n\n            return undefined;\n          },\n\n          _finalize: function (end) {\n            var lastMultiMaterial = this.currentMaterial();\n            if (lastMultiMaterial && lastMultiMaterial.groupEnd === -1) {\n              lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n              lastMultiMaterial.groupCount =\n                lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n              lastMultiMaterial.inherited = false;\n            }\n\n            // Ignore objects tail materials if no face declarations followed them before a new o/g started.\n            if (end && this.materials.length > 1) {\n              for (var mi = this.materials.length - 1; mi >= 0; mi--) {\n                if (this.materials[mi].groupCount <= 0) {\n                  this.materials.splice(mi, 1);\n                }\n              }\n            }\n\n            // Guarantee at least one empty material, this makes the creation later more straight forward.\n            if (end && this.materials.length === 0) {\n              this.materials.push({\n                name: \"\",\n                smooth: this.smooth,\n              });\n            }\n\n            return lastMultiMaterial;\n          },\n        };\n\n        // Inherit previous objects material.\n        // Spec tells us that a declared material must be set to all objects until a new material is declared.\n        // If a usemtl declaration is encountered while this new object is being parsed, it will\n        // overwrite the inherited material. Exception being that there was already face declarations\n        // to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n        if (\n          previousMaterial &&\n          previousMaterial.name &&\n          typeof previousMaterial.clone === \"function\"\n        ) {\n          var declared = previousMaterial.clone(0);\n          declared.inherited = true;\n          this.object.materials.push(declared);\n        }\n\n        this.objects.push(this.object);\n      },\n\n      finalize: function () {\n        if (this.object && typeof this.object._finalize === \"function\") {\n          this.object._finalize(true);\n        }\n      },\n\n      parseVertexIndex: function (value, len) {\n        var index = parseInt(value, 10);\n        return (index >= 0 ? index - 1 : index + len / 3) * 3;\n      },\n\n      parseNormalIndex: function (value, len) {\n        var index = parseInt(value, 10);\n        return (index >= 0 ? index - 1 : index + len / 3) * 3;\n      },\n\n      parseUVIndex: function (value, len) {\n        var index = parseInt(value, 10);\n        return (index >= 0 ? index - 1 : index + len / 2) * 2;\n      },\n\n      addVertex: function (a, b, c) {\n        var src = this.vertices;\n        var dst = this.object.geometry.vertices;\n\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n        dst.push(src[b + 0], src[b + 1], src[b + 2]);\n        dst.push(src[c + 0], src[c + 1], src[c + 2]);\n      },\n\n      addVertexPoint: function (a) {\n        var src = this.vertices;\n        var dst = this.object.geometry.vertices;\n\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      },\n\n      addVertexLine: function (a) {\n        var src = this.vertices;\n        var dst = this.object.geometry.vertices;\n\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n      },\n\n      addNormal: function (a, b, c) {\n        var src = this.normals;\n        var dst = this.object.geometry.normals;\n\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n        dst.push(src[b + 0], src[b + 1], src[b + 2]);\n        dst.push(src[c + 0], src[c + 1], src[c + 2]);\n      },\n\n      addColor: function (a, b, c) {\n        var src = this.colors;\n        var dst = this.object.geometry.colors;\n\n        dst.push(src[a + 0], src[a + 1], src[a + 2]);\n        dst.push(src[b + 0], src[b + 1], src[b + 2]);\n        dst.push(src[c + 0], src[c + 1], src[c + 2]);\n      },\n\n      addUV: function (a, b, c) {\n        var src = this.uvs;\n        var dst = this.object.geometry.uvs;\n\n        dst.push(src[a + 0], src[a + 1]);\n        dst.push(src[b + 0], src[b + 1]);\n        dst.push(src[c + 0], src[c + 1]);\n      },\n\n      addUVLine: function (a) {\n        var src = this.uvs;\n        var dst = this.object.geometry.uvs;\n\n        dst.push(src[a + 0], src[a + 1]);\n      },\n\n      addFace: function (a, b, c, ua, ub, uc, na, nb, nc) {\n        var vLen = this.vertices.length;\n\n        var ia = this.parseVertexIndex(a, vLen);\n        var ib = this.parseVertexIndex(b, vLen);\n        var ic = this.parseVertexIndex(c, vLen);\n\n        this.addVertex(ia, ib, ic);\n\n        if (ua !== undefined && ua !== \"\") {\n          var uvLen = this.uvs.length;\n          ia = this.parseUVIndex(ua, uvLen);\n          ib = this.parseUVIndex(ub, uvLen);\n          ic = this.parseUVIndex(uc, uvLen);\n          this.addUV(ia, ib, ic);\n        }\n\n        if (na !== undefined && na !== \"\") {\n          // Normals are many times the same. If so, skip function call and parseInt.\n          var nLen = this.normals.length;\n          ia = this.parseNormalIndex(na, nLen);\n\n          ib = na === nb ? ia : this.parseNormalIndex(nb, nLen);\n          ic = na === nc ? ia : this.parseNormalIndex(nc, nLen);\n\n          this.addNormal(ia, ib, ic);\n        }\n\n        if (this.colors.length > 0) {\n          this.addColor(ia, ib, ic);\n        }\n      },\n\n      addPointGeometry: function (vertices) {\n        this.object.geometry.type = \"Points\";\n\n        var vLen = this.vertices.length;\n\n        for (var vi = 0, l = vertices.length; vi < l; vi++) {\n          this.addVertexPoint(this.parseVertexIndex(vertices[vi], vLen));\n        }\n      },\n\n      addLineGeometry: function (vertices, uvs) {\n        this.object.geometry.type = \"Line\";\n\n        var vLen = this.vertices.length;\n        var uvLen = this.uvs.length;\n\n        for (var vi = 0, l = vertices.length; vi < l; vi++) {\n          this.addVertexLine(this.parseVertexIndex(vertices[vi], vLen));\n        }\n\n        for (var uvi = 0, l = uvs.length; uvi < l; uvi++) {\n          this.addUVLine(this.parseUVIndex(uvs[uvi], uvLen));\n        }\n      },\n    };\n\n    state.startObject(\"\", false);\n\n    return state;\n  }\n\n  //\n\n  function OBJLoader(manager) {\n    this.manager =\n      manager !== undefined ? manager : THREE.DefaultLoadingManager;\n\n    this.materials = null;\n  }\n\n  OBJLoader.prototype = {\n    constructor: OBJLoader,\n\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n\n      var loader = new THREE.FileLoader(scope.manager);\n      loader.setPath(this.path);\n      loader.load(\n        url,\n        function (text) {\n          onLoad(scope.parse(text));\n        },\n        onProgress,\n        onError\n      );\n    },\n\n    setPath: function (value) {\n      this.path = value;\n\n      return this;\n    },\n\n    setMaterials: function (materials) {\n      this.materials = materials;\n\n      return this;\n    },\n\n    parse: function (text) {\n      console.time(\"OBJLoader\");\n\n      var state = new ParserState();\n\n      if (text.indexOf(\"\\r\\n\") !== -1) {\n        // This is faster than String.split with regex that splits on both\n        text = text.replace(/\\r\\n/g, \"\\n\");\n      }\n\n      if (text.indexOf(\"\\\\\\n\") !== -1) {\n        // join lines separated by a line continuation character (\\)\n        text = text.replace(/\\\\\\n/g, \"\");\n      }\n\n      var lines = text.split(\"\\n\");\n      var line = \"\",\n        lineFirstChar = \"\";\n      var lineLength = 0;\n      var result = [];\n\n      // Faster to just trim left side of the line. Use if available.\n      var trimLeft = typeof \"\".trimLeft === \"function\";\n\n      for (var i = 0, l = lines.length; i < l; i++) {\n        line = lines[i];\n\n        line = trimLeft ? line.trimLeft() : line.trim();\n\n        lineLength = line.length;\n\n        if (lineLength === 0) continue;\n\n        lineFirstChar = line.charAt(0);\n\n        // @todo invoke passed in handler if any\n        if (lineFirstChar === \"#\") continue;\n\n        if (lineFirstChar === \"v\") {\n          var data = line.split(/\\s+/);\n\n          switch (data[0]) {\n            case \"v\":\n              state.vertices.push(\n                parseFloat(data[1]),\n                parseFloat(data[2]),\n                parseFloat(data[3])\n              );\n              if (data.length === 8) {\n                state.colors.push(\n                  parseFloat(data[4]),\n                  parseFloat(data[5]),\n                  parseFloat(data[6])\n                );\n              }\n              break;\n            case \"vn\":\n              state.normals.push(\n                parseFloat(data[1]),\n                parseFloat(data[2]),\n                parseFloat(data[3])\n              );\n              break;\n            case \"vt\":\n              state.uvs.push(parseFloat(data[1]), parseFloat(data[2]));\n              break;\n          }\n        } else if (lineFirstChar === \"f\") {\n          var lineData = line.substr(1).trim();\n          var vertexData = lineData.split(/\\s+/);\n          var faceVertices = [];\n\n          // Parse the face vertex data into an easy to work with format\n\n          for (var j = 0, jl = vertexData.length; j < jl; j++) {\n            var vertex = vertexData[j];\n\n            if (vertex.length > 0) {\n              var vertexParts = vertex.split(\"/\");\n              faceVertices.push(vertexParts);\n            }\n          }\n\n          // Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n          var v1 = faceVertices[0];\n\n          for (var j = 1, jl = faceVertices.length - 1; j < jl; j++) {\n            var v2 = faceVertices[j];\n            var v3 = faceVertices[j + 1];\n\n            state.addFace(\n              v1[0],\n              v2[0],\n              v3[0],\n              v1[1],\n              v2[1],\n              v3[1],\n              v1[2],\n              v2[2],\n              v3[2]\n            );\n          }\n        } else if (lineFirstChar === \"l\") {\n          var lineParts = line.substring(1).trim().split(\" \");\n          var lineVertices = [],\n            lineUVs = [];\n\n          if (line.indexOf(\"/\") === -1) {\n            lineVertices = lineParts;\n          } else {\n            for (var li = 0, llen = lineParts.length; li < llen; li++) {\n              var parts = lineParts[li].split(\"/\");\n\n              if (parts[0] !== \"\") lineVertices.push(parts[0]);\n              if (parts[1] !== \"\") lineUVs.push(parts[1]);\n            }\n          }\n          state.addLineGeometry(lineVertices, lineUVs);\n        } else if (lineFirstChar === \"p\") {\n          var lineData = line.substr(1).trim();\n          var pointData = lineData.split(\" \");\n\n          state.addPointGeometry(pointData);\n        } else if ((result = object_pattern.exec(line)) !== null) {\n          // o object_name\n          // or\n          // g group_name\n\n          // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n          // var name = result[ 0 ].substr( 1 ).trim();\n          var name = (\" \" + result[0].substr(1).trim()).substr(1);\n\n          state.startObject(name);\n        } else if (material_use_pattern.test(line)) {\n          // material\n\n          state.object.startMaterial(\n            line.substring(7).trim(),\n            state.materialLibraries\n          );\n        } else if (material_library_pattern.test(line)) {\n          // mtl file\n\n          state.materialLibraries.push(line.substring(7).trim());\n        } else if (lineFirstChar === \"s\") {\n          result = line.split(\" \");\n\n          // smooth shading\n\n          // @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n          // but does not define a usemtl for each face set.\n          // This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n          // This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n          // where explicit usemtl defines geometry groups.\n          // Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n          /*\n           * http://paulbourke.net/dataformats/obj/\n           * or\n           * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n           *\n           * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n           * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n           * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n           * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n           * than 0.\"\n           */\n          if (result.length > 1) {\n            var value = result[1].trim().toLowerCase();\n            state.object.smooth = value !== \"0\" && value !== \"off\";\n          } else {\n            // ZBrush can produce \"s\" lines #11707\n            state.object.smooth = true;\n          }\n          var material = state.object.currentMaterial();\n          if (material) material.smooth = state.object.smooth;\n        } else {\n          // Handle null terminated files without exception\n          if (line === \"\\0\") continue;\n\n          throw new Error('THREE.OBJLoader: Unexpected line: \"' + line + '\"');\n        }\n      }\n\n      state.finalize();\n\n      var container = new THREE.Group();\n      container.materialLibraries = [].concat(state.materialLibraries);\n\n      for (var i = 0, l = state.objects.length; i < l; i++) {\n        var object = state.objects[i];\n        var geometry = object.geometry;\n        var materials = object.materials;\n        var isLine = geometry.type === \"Line\";\n        var isPoints = geometry.type === \"Points\";\n        var hasVertexColors = false;\n\n        // Skip o/g line declarations that did not follow with any faces\n        if (geometry.vertices.length === 0) continue;\n\n        var buffergeometry = new THREE.BufferGeometry();\n\n        buffergeometry.addAttribute(\n          \"position\",\n          new THREE.Float32BufferAttribute(geometry.vertices, 3)\n        );\n\n        if (geometry.normals.length > 0) {\n          buffergeometry.addAttribute(\n            \"normal\",\n            new THREE.Float32BufferAttribute(geometry.normals, 3)\n          );\n        } else {\n          buffergeometry.computeVertexNormals();\n        }\n\n        if (geometry.colors.length > 0) {\n          hasVertexColors = true;\n          buffergeometry.addAttribute(\n            \"color\",\n            new THREE.Float32BufferAttribute(geometry.colors, 3)\n          );\n        }\n\n        if (geometry.uvs.length > 0) {\n          buffergeometry.addAttribute(\n            \"uv\",\n            new THREE.Float32BufferAttribute(geometry.uvs, 2)\n          );\n        }\n\n        // Create materials\n\n        var createdMaterials = [];\n\n        for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n          var sourceMaterial = materials[mi];\n          var material = undefined;\n\n          if (this.materials !== null) {\n            material = this.materials.create(sourceMaterial.name);\n\n            // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n            if (\n              isLine &&\n              material &&\n              !(material instanceof THREE.LineBasicMaterial)\n            ) {\n              var materialLine = new THREE.LineBasicMaterial();\n              materialLine.copy(material);\n              materialLine.lights = false; // TOFIX\n              material = materialLine;\n            } else if (\n              isPoints &&\n              material &&\n              !(material instanceof THREE.PointsMaterial)\n            ) {\n              var materialPoints = new THREE.PointsMaterial({\n                size: 10,\n                sizeAttenuation: false,\n              });\n              materialLine.copy(material);\n              material = materialPoints;\n            }\n          }\n\n          if (!material) {\n            if (isLine) {\n              material = new THREE.LineBasicMaterial();\n            } else if (isPoints) {\n              material = new THREE.PointsMaterial({\n                size: 1,\n                sizeAttenuation: false,\n              });\n            } else {\n              material = new THREE.MeshPhongMaterial();\n            }\n\n            material.name = sourceMaterial.name;\n          }\n\n          material.flatShading = sourceMaterial.smooth ? false : true;\n          material.vertexColors = hasVertexColors\n            ? THREE.VertexColors\n            : THREE.NoColors;\n\n          createdMaterials.push(material);\n        }\n\n        // Create mesh\n\n        var mesh;\n\n        if (createdMaterials.length > 1) {\n          for (var mi = 0, miLen = materials.length; mi < miLen; mi++) {\n            var sourceMaterial = materials[mi];\n            buffergeometry.addGroup(\n              sourceMaterial.groupStart,\n              sourceMaterial.groupCount,\n              mi\n            );\n          }\n\n          if (isLine) {\n            mesh = new THREE.LineSegments(buffergeometry, createdMaterials);\n          } else if (isPoints) {\n            mesh = new THREE.Points(buffergeometry, createdMaterials);\n          } else {\n            mesh = new THREE.Mesh(buffergeometry, createdMaterials);\n          }\n        } else {\n          if (isLine) {\n            mesh = new THREE.LineSegments(buffergeometry, createdMaterials[0]);\n          } else if (isPoints) {\n            mesh = new THREE.Points(buffergeometry, createdMaterials[0]);\n          } else {\n            mesh = new THREE.Mesh(buffergeometry, createdMaterials[0]);\n          }\n        }\n\n        mesh.name = object.name;\n\n        container.add(mesh);\n      }\n\n      console.timeEnd(\"OBJLoader\");\n\n      return container;\n    },\n  };\n\n  return OBJLoader;\n})();\n",
    "/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\nTHREE.CopyShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    opacity: { value: 1.0 },\n  },\n\n  vertexShader: [\n    \"varying vec2 vUv;\",\n\n    \"void main() {\",\n\n    \"vUv = uv;\",\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n    \"}\",\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"uniform float opacity;\",\n\n    \"uniform sampler2D tDiffuse;\",\n\n    \"varying vec2 vUv;\",\n\n    \"void main() {\",\n\n    \"vec4 texel = texture2D( tDiffuse, vUv );\",\n    \"gl_FragColor = opacity * texel;\",\n\n    \"}\",\n  ].join(\"\\n\"),\n};\n",
    "/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.EffectComposer = function (renderer, renderTarget, effect) {\n  this.renderer = renderer;\n\n  window.addEventListener(\"vrdisplaypresentchange\", this.resize.bind(this));\n\n  this.effect = effect;\n\n  if (renderTarget === undefined) {\n    var parameters = {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      format: THREE.RGBAFormat,\n      stencilBuffer: true,\n    };\n\n    var size = renderer.getDrawingBufferSize();\n    renderTarget = new THREE.WebGLRenderTarget(\n      size.width,\n      size.height,\n      parameters\n    );\n    renderTarget.texture.name = \"EffectComposer.rt1\";\n  }\n\n  this.renderTarget1 = renderTarget;\n  this.renderTarget2 = renderTarget.clone();\n  this.renderTarget2.texture.name = \"EffectComposer.rt2\";\n\n  this.writeBuffer = this.renderTarget1;\n  this.readBuffer = this.renderTarget2;\n\n  this.passes = [];\n\n  // dependencies\n\n  if (THREE.CopyShader === undefined) {\n    console.error(\"THREE.EffectComposer relies on THREE.CopyShader\");\n  }\n\n  if (THREE.ShaderPass === undefined) {\n    console.error(\"THREE.EffectComposer relies on THREE.ShaderPass\");\n  }\n\n  this.copyPass = new THREE.ShaderPass(THREE.CopyShader);\n};\n\nObject.assign(THREE.EffectComposer.prototype, {\n  swapBuffers: function () {\n    var tmp = this.readBuffer;\n    this.readBuffer = this.writeBuffer;\n    this.writeBuffer = tmp;\n  },\n\n  addPass: function (pass) {\n    this.passes.push(pass);\n    var size = this.renderer.getDrawingBufferSize();\n    pass.setSize(size.width, size.height);\n  },\n\n  insertPass: function (pass, index) {\n    this.passes.splice(index, 0, pass);\n  },\n\n  render: function (delta, object, camera, renderTarget, someBool, cameraData) {\n    var maskActive = false;\n\n    var pass,\n      i,\n      il = this.passes.length;\n\n    this.renderer.setRenderTarget(this.readBuffer);\n    this.renderer.clear();\n\n    for (i = 0; i < il; i++) {\n      pass = this.passes[i];\n\n      // if (i != 0) return;\n      // pass.renderToScreen = true;\n\n      if (pass.enabled === false) continue;\n\n      // if (pass.renderToScreen) {\n      //   pass.render( this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive );\n      // } else {\n      pass.render(\n        this.effect,\n        this.writeBuffer,\n        this.readBuffer,\n        delta,\n        maskActive,\n        object,\n        camera,\n        renderTarget,\n        someBool,\n        cameraData\n      );\n      // }\n\n      // if (pass.needsSwap) {\n      //   if (maskActive) {\n      //     var context = this.renderer.context;\n\n      //     context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n\n      //     this.copyPass.render(\n      //       this.renderer,\n      //       this.writeBuffer,\n      //       this.readBuffer,\n      //       delta\n      //     );\n\n      //     context.stencilFunc(context.EQUAL, 1, 0xffffffff);\n      //   }\n\n      //   this.swapBuffers();\n      // }\n\n      // if (THREE.MaskPass !== undefined) {\n      //   if (pass instanceof THREE.MaskPass) {\n      //     maskActive = true;\n      //   } else if (pass instanceof THREE.ClearMaskPass) {\n      //     maskActive = false;\n      //   }\n      // }\n    }\n  },\n\n  reset: function (renderTarget) {\n    if (renderTarget === undefined) {\n      var size = this.renderer.getDrawingBufferSize();\n\n      renderTarget = this.renderTarget1.clone();\n      renderTarget.setSize(size.width, size.height);\n    }\n\n    this.renderTarget1.dispose();\n    this.renderTarget2.dispose();\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n  },\n\n  setSize: function (width, height) {\n    this.renderTarget1.setSize(width, height);\n    this.renderTarget2.setSize(width, height);\n\n    for (var i = 0; i < this.passes.length; i++) {\n      this.passes[i].setSize(width, height);\n    }\n  },\n\n  resize: function () {\n    var rendererSize = this.renderer.getDrawingBufferSize();\n    this.setSize(rendererSize.width, rendererSize.height);\n  },\n});\n\nTHREE.Pass = function () {\n  // if set to true, the pass is processed by the composer\n  this.enabled = true;\n\n  // if set to true, the pass indicates to swap read and write buffer after rendering\n  this.needsSwap = true;\n\n  // if set to true, the pass clears its buffer before rendering\n  this.clear = false;\n\n  // if set to true, the result of the pass is rendered to screen\n  this.renderToScreen = false;\n};\n\nObject.assign(THREE.Pass.prototype, {\n  setSize: function (width, height) {},\n\n  render: function (renderer, writeBuffer, readBuffer, delta, maskActive) {\n    console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n  },\n});\n",
    "/**\n * @author bhouston / http://clara.io/\n *\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nTHREE.LuminosityHighPassShader = {\n  shaderID: \"luminosityHighPass\",\n\n  uniforms: {\n    tDiffuse: { type: \"t\", value: null },\n    luminosityThreshold: { type: \"f\", value: 1.0 },\n    smoothWidth: { type: \"f\", value: 1.0 },\n    defaultColor: { type: \"c\", value: new THREE.Color(0x000000) },\n    defaultOpacity: { type: \"f\", value: 0.0 },\n  },\n\n  vertexShader: [\n    \"varying vec2 vUv;\",\n\n    \"void main() {\",\n\n    \"vUv = uv;\",\n\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n    \"}\",\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform vec3 defaultColor;\",\n    \"uniform float defaultOpacity;\",\n    \"uniform float luminosityThreshold;\",\n    \"uniform float smoothWidth;\",\n\n    \"varying vec2 vUv;\",\n\n    \"void main() {\",\n\n    \"vec4 texel = texture2D( tDiffuse, vUv );\",\n\n    \"vec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n    \"float v = dot( texel.xyz, luma );\",\n\n    \"vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\n\n    \"float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\n\n    \"gl_FragColor = mix( outputColor, texel, alpha );\",\n\n    \"}\",\n  ].join(\"\\n\"),\n};\n",
    "/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.RenderPass = function (\n  scene,\n  camera,\n  overrideMaterial,\n  clearColor,\n  clearAlpha\n) {\n  THREE.Pass.call(this);\n\n  this.scene = scene;\n  this.camera = camera;\n\n  this.overrideMaterial = overrideMaterial;\n\n  this.clearColor = clearColor;\n  this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 0;\n\n  this.clear = true;\n  this.clearDepth = false;\n  this.needsSwap = false;\n};\n\nTHREE.RenderPass.prototype = Object.assign(\n  Object.create(THREE.Pass.prototype),\n  {\n    constructor: THREE.RenderPass,\n\n    render: function (\n      renderer,\n      writeBuffer,\n      readBuffer,\n      delta,\n      maskActive,\n      object,\n      camera,\n      renderTarget,\n      someBool,\n      cameraData\n    ) {\n      // var oldAutoClear = renderer.autoClear;\n      // renderer.autoClear = true;\n\n      // this.scene.overrideMaterial = this.overrideMaterial;\n\n      // var oldClearColor, oldClearAlpha;\n\n      // if ( this.clearColor ) {\n\n      //   oldClearColor = renderer.getClearColor().getHex();\n      //   oldClearAlpha = renderer.getClearAlpha();\n\n      //   renderer.setClearColor( this.clearColor, this.clearAlpha );\n\n      // }\n\n      // if ( this.clearDepth ) {\n\n      //   renderer.clearDepth();\n\n      // }\n\n      renderer.render(object, camera, readBuffer, true, cameraData);\n\n      // if ( this.clearColor ) {\n\n      //   renderer.setClearColor( oldClearColor, oldClearAlpha );\n\n      // }\n\n      // this.scene.overrideMaterial = null;\n      // renderer.autoClear = oldAutoClear;\n    },\n  }\n);\n",
    "\"use strict\";\n\n/**\n * Screen-space ambient occlusion pass.\n *\n * Has the following parameters\n *  - radius\n *    - Ambient occlusion shadow radius (numeric value).\n *  - onlyAO\n *    - Display only ambient occlusion result (boolean value).\n *  - aoClamp\n *    - Ambient occlusion clamp (numeric value).\n *  - lumInfluence\n *    - Pixel luminosity influence in AO calculation (numeric value).\n *\n * To output to screen set renderToScreens true\n *\n * @author alteredq / http://alteredqualia.com/\n * @author tentone\n * @class SSAOPass\n */\nTHREE.SSAOPass = function (scene, camera, width, height) {\n  if (THREE.SSAOShader === undefined) {\n    console.warn(\"THREE.SSAOPass depends on THREE.SSAOShader\");\n    return new THREE.ShaderPass();\n  }\n\n  THREE.ShaderPass.call(this, THREE.SSAOShader);\n\n  this.width = width !== undefined ? width : 512;\n  this.height = height !== undefined ? height : 256;\n\n  this.renderToScreen = false;\n\n  this.camera2 = camera;\n  this.scene2 = scene;\n\n  //Depth material\n  this.depthMaterial = new THREE.MeshDepthMaterial();\n  this.depthMaterial.depthPacking = THREE.RGBADepthPacking;\n  this.depthMaterial.blending = THREE.NoBlending;\n\n  //Depth render target\n  this.depthRenderTarget = new THREE.WebGLRenderTarget(\n    this.width,\n    this.height,\n    { minFilter: THREE.LinearFilter, magFilter: THREE.LinearFilter }\n  );\n  //this.depthRenderTarget.texture.name = 'SSAOShader.rt';\n\n  //Shader uniforms\n  this.uniforms[\"tDepth\"].value = this.depthRenderTarget.texture;\n  this.uniforms[\"size\"].value.set(this.width, this.height);\n  this.uniforms[\"cameraNear\"].value = this.camera2.near;\n  this.uniforms[\"cameraFar\"].value = this.camera2.far;\n\n  this.uniforms[\"radius\"].value = 4;\n  this.uniforms[\"onlyAO\"].value = false;\n  this.uniforms[\"aoClamp\"].value = 0.25;\n  this.uniforms[\"lumInfluence\"].value = 0.7;\n\n  //Setters and getters for uniforms\n  var self = this;\n  Object.defineProperties(this, {\n    radius: {\n      get: function () {\n        return this.uniforms[\"radius\"].value;\n      },\n      set: function (value) {\n        this.uniforms[\"radius\"].value = value;\n      },\n    },\n\n    onlyAO: {\n      get: function () {\n        return this.uniforms[\"onlyAO\"].value;\n      },\n      set: function (value) {\n        this.uniforms[\"onlyAO\"].value = value;\n      },\n    },\n\n    aoClamp: {\n      get: function () {\n        return this.uniforms[\"aoClamp\"].value;\n      },\n      set: function (value) {\n        this.uniforms[\"aoClamp\"].value = value;\n      },\n    },\n\n    lumInfluence: {\n      get: function () {\n        return this.uniforms[\"lumInfluence\"].value;\n      },\n      set: function (value) {\n        this.uniforms[\"lumInfluence\"].value = value;\n      },\n    },\n  });\n};\n\nTHREE.SSAOPass.prototype = Object.create(THREE.ShaderPass.prototype);\n\n/**\n * Render using this pass.\n *\n * @method render\n * @param {WebGLRenderer} renderer\n * @param {WebGLRenderTarget} writeBuffer Buffer to write output.\n * @param {WebGLRenderTarget} readBuffer Input buffer.\n * @param {Number} delta Delta time in milliseconds.\n * @param {Boolean} maskActive Not used in this pass.\n */\nTHREE.SSAOPass.prototype.render = function (\n  renderer,\n  writeBuffer,\n  readBuffer,\n  delta,\n  maskActive\n) {\n  //Render depth into depthRenderTarget\n  this.scene2.overrideMaterial = this.depthMaterial;\n\n  renderer.render(this.scene2, this.camera2, this.depthRenderTarget, true);\n\n  this.scene2.overrideMaterial = null;\n\n  //SSAO shaderPass\n  THREE.ShaderPass.prototype.render.call(\n    this,\n    renderer,\n    writeBuffer,\n    readBuffer,\n    delta,\n    maskActive\n  );\n};\n\n/**\n * Change scene to be renderer by this render pass.\n *\n * @method setScene\n * @param {Scene} scene\n */\nTHREE.SSAOPass.prototype.setScene = function (scene) {\n  this.scene2 = scene;\n};\n\n/**\n * Set camera used by this render pass.\n *\n * @method setCamera\n * @param {Camera} camera\n */\nTHREE.SSAOPass.prototype.setCamera = function (camera) {\n  this.camera2 = camera;\n\n  this.uniforms[\"cameraNear\"].value = this.camera2.near;\n  this.uniforms[\"cameraFar\"].value = this.camera2.far;\n};\n\n/**\n * Set resolution of this render pass.\n *\n * @method setSize\n * @param {Number} width\n * @param {Number} height\n */\nTHREE.SSAOPass.prototype.setSize = function (width, height) {\n  this.width = width;\n  this.height = height;\n\n  this.uniforms[\"size\"].value.set(this.width, this.height);\n  this.depthRenderTarget.setSize(this.width, this.height);\n};\n",
    "/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Screen-space ambient occlusion shader\n * - ported from\n *   SSAO GLSL shader v1.2\n *   assembled by Martins Upitis (martinsh) (http://devlog-martinsh.blogspot.com)\n *   original technique is made by ArKano22 (http://www.gamedev.net/topic/550699-ssao-no-halo-artifacts/)\n * - modifications\n * - modified to use RGBA packed depth texture (use clear color 1,1,1,1 for depth pass)\n * - refactoring and optimizations\n */\n\nTHREE.SSAOShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    tDepth: { value: null },\n    size: { value: new THREE.Vector2(512, 512) },\n    cameraNear: { value: 1 },\n    cameraFar: { value: 100 },\n    radius: { value: 32 },\n    onlyAO: { value: 0 },\n    aoClamp: { value: 0.25 },\n    lumInfluence: { value: 0.7 },\n  },\n\n  vertexShader: [\n    \"varying vec2 vUv;\",\n\n    \"void main() {\",\n\n    \"vUv = uv;\",\n\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n    \"}\",\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"uniform float cameraNear;\",\n    \"uniform float cameraFar;\",\n    \"#ifdef USE_LOGDEPTHBUF\",\n    \"uniform float logDepthBufFC;\",\n    \"#endif\",\n\n    \"uniform float radius;\", // ao radius\n    \"uniform bool onlyAO;\", // use only ambient occlusion pass?\n\n    \"uniform vec2 size;\", // texture width, height\n    \"uniform float aoClamp;\", // depth clamp - reduces haloing at screen edges\n\n    \"uniform float lumInfluence;\", // how much luminance affects occlusion\n\n    \"uniform sampler2D tDiffuse;\",\n    \"uniform sampler2D tDepth;\",\n\n    \"varying vec2 vUv;\",\n\n    // \"#define PI 3.14159265\",\n    \"#define DL 2.399963229728653\", // PI * ( 3.0 - sqrt( 5.0 ) )\n    \"#define EULER 2.718281828459045\",\n\n    // user variables\n\n    \"const int samples = 64;\", // ao sample count\n\n    \"const bool useNoise = true;\", // use noise instead of pattern for sample dithering\n    \"const float noiseAmount = 0.0004;\", // dithering amount\n\n    \"const float diffArea = 0.4;\", // self-shadowing reduction\n    \"const float gDisplace = 0.4;\", // gauss bell center\n\n    // RGBA depth\n\n    \"#include <packing>\",\n\n    // generating noise / pattern texture for dithering\n\n    \"vec2 rand( const vec2 coord ) {\",\n\n    \"vec2 noise;\",\n\n    \"if ( useNoise ) {\",\n\n    \"float nx = dot ( coord, vec2( 12.9898, 78.233 ) );\",\n    \"float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );\",\n\n    \"noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );\",\n\n    \"} else {\",\n\n    \"float ff = fract( 1.0 - coord.s * ( size.x / 2.0 ) );\",\n    \"float gg = fract( coord.t * ( size.y / 2.0 ) );\",\n\n    \"noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;\",\n\n    \"}\",\n\n    \"return ( noise * 2.0  - 1.0 ) * noiseAmount;\",\n\n    \"}\",\n\n    \"float readDepth( const in vec2 coord ) {\",\n\n    \"float cameraFarPlusNear = cameraFar + cameraNear;\",\n    \"float cameraFarMinusNear = cameraFar - cameraNear;\",\n    \"float cameraCoef = 2.0 * cameraNear;\",\n\n    \"#ifdef USE_LOGDEPTHBUF\",\n\n    \"float logz = unpackRGBAToDepth( texture2D( tDepth, coord ) );\",\n    \"float w = pow(2.0, (logz / logDepthBufFC)) - 1.0;\",\n    \"float z = (logz / w) + 1.0;\",\n\n    \"#else\",\n\n    \"float z = unpackRGBAToDepth( texture2D( tDepth, coord ) );\",\n\n    \"#endif\",\n\n    \"return cameraCoef / ( cameraFarPlusNear - z * cameraFarMinusNear );\",\n\n    \"}\",\n\n    \"float compareDepths( const in float depth1, const in float depth2, inout int far ) {\",\n\n    \"float garea = 8.0;\", // gauss bell width\n    \"float diff = ( depth1 - depth2 ) * 100.0;\", // depth difference (0-100)\n\n    // reduce left bell width to avoid self-shadowing\n\n    \"if ( diff < gDisplace ) {\",\n\n    \"garea = diffArea;\",\n\n    \"} else {\",\n\n    \"far = 1;\",\n\n    \"}\",\n\n    \"float dd = diff - gDisplace;\",\n    \"float gauss = pow( EULER, -2.0 * ( dd * dd ) / ( garea * garea ) );\",\n    \"return gauss;\",\n\n    \"}\",\n\n    \"float calcAO( float depth, float dw, float dh ) {\",\n\n    \"vec2 vv = vec2( dw, dh );\",\n\n    \"vec2 coord1 = vUv + radius * vv;\",\n    \"vec2 coord2 = vUv - radius * vv;\",\n\n    \"float temp1 = 0.0;\",\n    \"float temp2 = 0.0;\",\n\n    \"int far = 0;\",\n    \"temp1 = compareDepths( depth, readDepth( coord1 ), far );\",\n\n    // DEPTH EXTRAPOLATION\n\n    \"if ( far > 0 ) {\",\n\n    \"temp2 = compareDepths( readDepth( coord2 ), depth, far );\",\n    \"temp1 += ( 1.0 - temp1 ) * temp2;\",\n\n    \"}\",\n\n    \"return temp1;\",\n\n    \"}\",\n\n    \"void main() {\",\n\n    \"vec2 noise = rand( vUv );\",\n    \"float depth = readDepth( vUv );\",\n\n    \"float tt = clamp( depth, aoClamp, 1.0 );\",\n\n    \"float w = ( 1.0 / size.x ) / tt + ( noise.x * ( 1.0 - noise.x ) );\",\n    \"float h = ( 1.0 / size.y ) / tt + ( noise.y * ( 1.0 - noise.y ) );\",\n\n    \"float ao = 0.0;\",\n\n    \"float dz = 1.0 / float( samples );\",\n    \"float l = 0.0;\",\n    \"float z = 1.0 - dz / 2.0;\",\n\n    \"for ( int i = 0; i <= samples; i ++ ) {\",\n\n    \"float r = sqrt( 1.0 - z );\",\n\n    \"float pw = cos( l ) * r;\",\n    \"float ph = sin( l ) * r;\",\n    \"ao += calcAO( depth, pw * w, ph * h );\",\n    \"z = z - dz;\",\n    \"l = l + DL;\",\n\n    \"}\",\n\n    \"ao /= float( samples );\",\n    \"ao = 1.0 - ao;\",\n\n    \"vec3 color = texture2D( tDiffuse, vUv ).rgb;\",\n\n    \"vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );\",\n    \"float lum = dot( color.rgb, lumcoeff );\",\n    \"vec3 luminance = vec3( lum );\",\n\n    \"vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\", // mix( color * ao, white, luminance )\n\n    \"if ( onlyAO ) {\",\n\n    \"final = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\", // ambient occlusion only\n\n    \"}\",\n\n    \"gl_FragColor = vec4( final, 1.0 );\",\n\n    \"}\",\n  ].join(\"\\n\"),\n};\n",
    "/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Sepia tone shader\n * based on glfx.js sepia shader\n * https://github.com/evanw/glfx.js\n */\n\nTHREE.SepiaShader = {\n  uniforms: {\n    tDiffuse: { value: null },\n    amount: { value: 1.0 },\n  },\n\n  vertexShader: [\n    \"varying vec2 vUv;\",\n\n    \"void main() {\",\n\n    \"vUv = uv;\",\n    \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n    \"}\",\n  ].join(\"\\n\"),\n\n  fragmentShader: [\n    \"uniform float amount;\",\n\n    \"uniform sampler2D tDiffuse;\",\n\n    \"varying vec2 vUv;\",\n\n    \"void main() {\",\n\n    \"vec4 color = texture2D( tDiffuse, vUv );\",\n    \"vec3 c = color.rgb;\",\n\n    \"color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\",\n    \"color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\",\n    \"color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\",\n\n    \"gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\",\n\n    \"}\",\n  ].join(\"\\n\"),\n};\n",
    "/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nTHREE.ShaderPass = function (shader, textureID) {\n  THREE.Pass.call(this);\n\n  this.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n\n  if (shader instanceof THREE.ShaderMaterial) {\n    this.uniforms = shader.uniforms;\n\n    this.material = shader;\n  } else if (shader) {\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n\n    this.material = new THREE.ShaderMaterial({\n      defines: Object.assign({}, shader.defines),\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n    });\n  }\n\n  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new THREE.Scene();\n\n  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n  this.scene.add(this.quad);\n};\n\nTHREE.ShaderPass.prototype = Object.assign(\n  Object.create(THREE.Pass.prototype),\n  {\n    constructor: THREE.ShaderPass,\n\n    render: function (renderer, writeBuffer, readBuffer, delta, maskActive) {\n      if (this.uniforms[this.textureID]) {\n        this.uniforms[this.textureID].value = readBuffer.texture;\n      }\n\n      this.quad.material = this.material;\n\n      if (this.renderToScreen) {\n        renderer.render(this.scene, this.camera);\n      } else {\n        renderer.render(this.scene, this.camera, writeBuffer, this.clear);\n      }\n    },\n  }\n);\n",
    "/**\n * @author spidersharma / http://eduperiment.com/\n *\n * Inspired from Unreal Engine\n * https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nTHREE.UnrealBloomPass = function (resolution, strength, radius, threshold) {\n  THREE.Pass.call(this);\n\n  this.strength = strength !== undefined ? strength : 1;\n  this.radius = radius;\n  this.threshold = threshold;\n  this.resolution =\n    resolution !== undefined\n      ? new THREE.Vector2(resolution.x, resolution.y)\n      : new THREE.Vector2(256, 256);\n\n  // render targets\n  var pars = {\n    minFilter: THREE.LinearFilter,\n    magFilter: THREE.LinearFilter,\n    format: THREE.RGBAFormat,\n  };\n  this.renderTargetsHorizontal = [];\n  this.renderTargetsVertical = [];\n  this.nMips = 5;\n  var resx = Math.round(this.resolution.x / 2);\n  var resy = Math.round(this.resolution.y / 2);\n\n  this.renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n  this.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n  this.renderTargetBright.texture.generateMipmaps = false;\n\n  for (var i = 0; i < this.nMips; i++) {\n    var renderTarget = new THREE.WebGLRenderTarget(resx, resy, pars);\n\n    renderTarget.texture.name = \"UnrealBloomPass.h\" + i;\n    renderTarget.texture.generateMipmaps = false;\n\n    this.renderTargetsHorizontal.push(renderTarget);\n\n    var renderTarget = new THREE.WebGLRenderTarget(resx, resy, pars);\n\n    renderTarget.texture.name = \"UnrealBloomPass.v\" + i;\n    renderTarget.texture.generateMipmaps = false;\n\n    this.renderTargetsVertical.push(renderTarget);\n\n    resx = Math.round(resx / 2);\n\n    resy = Math.round(resy / 2);\n  }\n\n  // luminosity high pass material\n\n  if (THREE.LuminosityHighPassShader === undefined)\n    console.error(\n      \"THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader\"\n    );\n\n  var highPassShader = THREE.LuminosityHighPassShader;\n  this.highPassUniforms = THREE.UniformsUtils.clone(highPassShader.uniforms);\n\n  this.highPassUniforms[\"luminosityThreshold\"].value = threshold;\n  this.highPassUniforms[\"smoothWidth\"].value = 0.01;\n\n  this.materialHighPassFilter = new THREE.ShaderMaterial({\n    uniforms: this.highPassUniforms,\n    vertexShader: highPassShader.vertexShader,\n    fragmentShader: highPassShader.fragmentShader,\n    defines: {},\n  });\n\n  // Gaussian Blur Materials\n  this.separableBlurMaterials = [];\n  var kernelSizeArray = [3, 5, 7, 9, 11];\n  var resx = Math.round(this.resolution.x / 2);\n  var resy = Math.round(this.resolution.y / 2);\n\n  for (var i = 0; i < this.nMips; i++) {\n    this.separableBlurMaterials.push(\n      this.getSeperableBlurMaterial(kernelSizeArray[i])\n    );\n\n    this.separableBlurMaterials[i].uniforms[\"texSize\"].value =\n      new THREE.Vector2(resx, resy);\n\n    resx = Math.round(resx / 2);\n\n    resy = Math.round(resy / 2);\n  }\n\n  // Composite material\n  this.compositeMaterial = this.getCompositeMaterial(this.nMips);\n  this.compositeMaterial.uniforms[\"blurTexture1\"].value =\n    this.renderTargetsVertical[0].texture;\n  this.compositeMaterial.uniforms[\"blurTexture2\"].value =\n    this.renderTargetsVertical[1].texture;\n  this.compositeMaterial.uniforms[\"blurTexture3\"].value =\n    this.renderTargetsVertical[2].texture;\n  this.compositeMaterial.uniforms[\"blurTexture4\"].value =\n    this.renderTargetsVertical[3].texture;\n  this.compositeMaterial.uniforms[\"blurTexture5\"].value =\n    this.renderTargetsVertical[4].texture;\n  this.compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n  this.compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n  this.compositeMaterial.needsUpdate = true;\n\n  var bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];\n  this.compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n  this.bloomTintColors = [\n    new THREE.Vector3(1, 1, 1),\n    new THREE.Vector3(1, 1, 1),\n    new THREE.Vector3(1, 1, 1),\n    new THREE.Vector3(1, 1, 1),\n    new THREE.Vector3(1, 1, 1),\n  ];\n  this.compositeMaterial.uniforms[\"bloomTintColors\"].value =\n    this.bloomTintColors;\n\n  // copy material\n  if (THREE.CopyShader === undefined) {\n    console.error(\"THREE.BloomPass relies on THREE.CopyShader\");\n  }\n\n  var copyShader = THREE.CopyShader;\n\n  this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms[\"opacity\"].value = 1.0;\n\n  this.materialCopy = new THREE.ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: THREE.AdditiveBlending,\n    depthTest: false,\n    depthWrite: false,\n    transparent: true,\n  });\n\n  this.enabled = true;\n  this.needsSwap = false;\n\n  this.oldClearColor = new THREE.Color();\n  this.oldClearAlpha = 1;\n\n  this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  this.scene = new THREE.Scene();\n\n  this.basic = new THREE.MeshBasicMaterial();\n\n  this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n  this.quad.frustumCulled = false; // Avoid getting clipped\n  this.scene.add(this.quad);\n};\n\nTHREE.UnrealBloomPass.prototype = Object.assign(\n  Object.create(THREE.Pass.prototype),\n  {\n    constructor: THREE.UnrealBloomPass,\n\n    dispose: function () {\n      for (var i = 0; i < this.renderTargetsHorizontal.length; i++) {\n        this.renderTargetsHorizontal[i].dispose();\n      }\n\n      for (var i = 0; i < this.renderTargetsVertical.length; i++) {\n        this.renderTargetsVertical[i].dispose();\n      }\n\n      this.renderTargetBright.dispose();\n    },\n\n    setSize: function (width, height) {\n      var resx = Math.round(width / 2);\n      var resy = Math.round(height / 2);\n\n      this.renderTargetBright.setSize(resx, resy);\n\n      for (var i = 0; i < this.nMips; i++) {\n        this.renderTargetsHorizontal[i].setSize(resx, resy);\n        this.renderTargetsVertical[i].setSize(resx, resy);\n\n        this.separableBlurMaterials[i].uniforms[\"texSize\"].value =\n          new THREE.Vector2(resx, resy);\n\n        resx = Math.round(resx / 2);\n        resy = Math.round(resy / 2);\n      }\n    },\n\n    render: function (\n      renderer,\n      writeBuffer,\n      readBuffer,\n      delta,\n      maskActive,\n      object,\n      camera,\n      renderTarget,\n      someBool,\n      cameraData\n    ) {\n      this.oldClearColor.copy(renderer.getClearColor());\n      this.oldClearAlpha = renderer.getClearAlpha();\n      var oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n\n      renderer.setClearColor(new THREE.Color(0, 0, 0), 0);\n\n      if (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST);\n\n      // Render input to screen\n\n      if (this.renderToScreen) {\n        this.quad.material = this.basic;\n        this.basic.map = readBuffer.texture;\n\n        renderer.render(this.scene, this.camera, undefined, true);\n      }\n\n      // 1. Extract Bright Areas\n\n      this.highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n      this.highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n      this.quad.material = this.materialHighPassFilter;\n\n      renderer.render(this.scene, this.camera, this.renderTargetBright, true);\n\n      // 2. Blur All the mips progressively\n\n      var inputRenderTarget = this.renderTargetBright;\n\n      for (var i = 0; i < this.nMips; i++) {\n        this.quad.material = this.separableBlurMaterials[i];\n\n        this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value =\n          inputRenderTarget.texture;\n        this.separableBlurMaterials[i].uniforms[\"direction\"].value =\n          THREE.UnrealBloomPass.BlurDirectionX;\n        renderer.render(\n          this.scene,\n          this.camera,\n          this.renderTargetsHorizontal[i],\n          true\n        );\n\n        this.separableBlurMaterials[i].uniforms[\"colorTexture\"].value =\n          this.renderTargetsHorizontal[i].texture;\n        this.separableBlurMaterials[i].uniforms[\"direction\"].value =\n          THREE.UnrealBloomPass.BlurDirectionY;\n        renderer.render(\n          this.scene,\n          this.camera,\n          this.renderTargetsVertical[i],\n          true\n        );\n\n        inputRenderTarget = this.renderTargetsVertical[i];\n      }\n\n      // Composite All the mips\n\n      this.quad.material = this.compositeMaterial;\n      this.compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n      this.compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n      this.compositeMaterial.uniforms[\"bloomTintColors\"].value =\n        this.bloomTintColors;\n\n      renderer.render(\n        this.scene,\n        this.camera,\n        this.renderTargetsHorizontal[0],\n        true\n      );\n\n      // Blend it additively over the input texture\n\n      this.quad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value =\n        this.renderTargetsHorizontal[0].texture;\n\n      if (maskActive) renderer.context.enable(renderer.context.STENCIL_TEST);\n\n      if (this.renderToScreen) {\n        renderer.render(this.scene, this.camera, undefined, false);\n      } else {\n        renderer.render(this.scene, this.camera, readBuffer, false);\n      }\n\n      // Restore renderer settings\n\n      renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    },\n\n    getSeperableBlurMaterial: function (kernelRadius) {\n      return new THREE.ShaderMaterial({\n        defines: {\n          KERNEL_RADIUS: kernelRadius,\n          SIGMA: kernelRadius,\n        },\n\n        uniforms: {\n          colorTexture: { value: null },\n          texSize: { value: new THREE.Vector2(0.5, 0.5) },\n          direction: { value: new THREE.Vector2(0.5, 0.5) },\n        },\n\n        vertexShader:\n          \"varying vec2 vUv;\\n\\\n        void main() {\\n\\\n          vUv = uv;\\n\\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n        }\",\n\n        fragmentShader:\n          \"#include <common>\\\n        varying vec2 vUv;\\n\\\n        uniform sampler2D colorTexture;\\n\\\n        uniform vec2 texSize;\\\n        uniform vec2 direction;\\\n        \\\n        float gaussianPdf(in float x, in float sigma) {\\\n          return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n        }\\\n        void main() {\\n\\\n          vec2 invSize = 1.0 / texSize;\\\n          float fSigma = float(SIGMA);\\\n          float weightSum = gaussianPdf(0.0, fSigma);\\\n          vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n          for( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n            float x = float(i);\\\n            float w = gaussianPdf(x, fSigma);\\\n            vec2 uvOffset = direction * invSize * x;\\\n            vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\n            vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\n            diffuseSum += (sample1 + sample2) * w;\\\n            weightSum += 2.0 * w;\\\n          }\\\n          gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\n        }\",\n      });\n    },\n\n    getCompositeMaterial: function (nMips) {\n      return new THREE.ShaderMaterial({\n        defines: {\n          NUM_MIPS: nMips,\n        },\n\n        uniforms: {\n          blurTexture1: { value: null },\n          blurTexture2: { value: null },\n          blurTexture3: { value: null },\n          blurTexture4: { value: null },\n          blurTexture5: { value: null },\n          dirtTexture: { value: null },\n          bloomStrength: { value: 1.0 },\n          bloomFactors: { value: null },\n          bloomTintColors: { value: null },\n          bloomRadius: { value: 0.0 },\n        },\n\n        vertexShader:\n          \"varying vec2 vUv;\\n\\\n        void main() {\\n\\\n          vUv = uv;\\n\\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n        }\",\n\n        fragmentShader:\n          \"varying vec2 vUv;\\\n        uniform sampler2D blurTexture1;\\\n        uniform sampler2D blurTexture2;\\\n        uniform sampler2D blurTexture3;\\\n        uniform sampler2D blurTexture4;\\\n        uniform sampler2D blurTexture5;\\\n        uniform sampler2D dirtTexture;\\\n        uniform float bloomStrength;\\\n        uniform float bloomRadius;\\\n        uniform float bloomFactors[NUM_MIPS];\\\n        uniform vec3 bloomTintColors[NUM_MIPS];\\\n        \\\n        float lerpBloomFactor(const in float factor) { \\\n          float mirrorFactor = 1.2 - factor;\\\n          return mix(factor, mirrorFactor, bloomRadius);\\\n        }\\\n        \\\n        void main() {\\\n          gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n                           lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n                           lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n                           lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n                           lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n        }\",\n      });\n    },\n  }\n);\n\nTHREE.UnrealBloomPass.BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nTHREE.UnrealBloomPass.BlurDirectionY = new THREE.Vector2(0.0, 1.0);\n",
    "window.glStats = function () {\n  var _rS = null;\n\n  var _totalDrawArraysCalls = 0,\n    _totalDrawElementsCalls = 0,\n    _totalUseProgramCalls = 0,\n    _totalFaces = 0,\n    _totalVertices = 0,\n    _totalPoints = 0,\n    _totalBindTexures = 0;\n\n  function _h(f, c) {\n    return function () {\n      c.apply(this, arguments);\n      f.apply(this, arguments);\n    };\n  }\n\n  WebGLRenderingContext.prototype.drawArrays = _h(\n    WebGLRenderingContext.prototype.drawArrays,\n    function () {\n      _totalDrawArraysCalls++;\n      if (arguments[0] == this.POINTS) _totalPoints += arguments[2];\n      else _totalVertices += arguments[2];\n    }\n  );\n\n  WebGLRenderingContext.prototype.drawElements = _h(\n    WebGLRenderingContext.prototype.drawElements,\n    function () {\n      _totalDrawElementsCalls++;\n      _totalFaces += arguments[1] / 3;\n      _totalVertices += arguments[1];\n    }\n  );\n\n  WebGLRenderingContext.prototype.useProgram = _h(\n    WebGLRenderingContext.prototype.useProgram,\n    function () {\n      _totalUseProgramCalls++;\n    }\n  );\n\n  WebGLRenderingContext.prototype.bindTexture = _h(\n    WebGLRenderingContext.prototype.bindTexture,\n    function () {\n      _totalBindTexures++;\n    }\n  );\n\n  var _values = {\n    allcalls: {\n      over: 3000,\n      caption: \"Calls (hook)\",\n    },\n    drawelements: {\n      caption: \"drawElements (hook)\",\n    },\n    drawarrays: {\n      caption: \"drawArrays (hook)\",\n    },\n  };\n\n  var _groups = [\n    {\n      caption: \"WebGL\",\n      values: [\n        \"allcalls\",\n        \"drawelements\",\n        \"drawarrays\",\n        \"useprogram\",\n        \"bindtexture\",\n        \"glfaces\",\n        \"glvertices\",\n        \"glpoints\",\n      ],\n    },\n  ];\n\n  var _fractions = [\n    {\n      base: \"allcalls\",\n      steps: [\"drawelements\", \"drawarrays\"],\n    },\n  ];\n\n  function _update() {\n    _rS(\"allcalls\").set(_totalDrawArraysCalls + _totalDrawElementsCalls);\n    _rS(\"drawElements\").set(_totalDrawElementsCalls);\n    _rS(\"drawArrays\").set(_totalDrawArraysCalls);\n    _rS(\"bindTexture\").set(_totalBindTexures);\n    _rS(\"useProgram\").set(_totalUseProgramCalls);\n    _rS(\"glfaces\").set(_totalFaces);\n    _rS(\"glvertices\").set(_totalVertices);\n    _rS(\"glpoints\").set(_totalPoints);\n  }\n\n  function _start() {\n    _totalDrawArraysCalls = 0;\n    _totalDrawElementsCalls = 0;\n    _totalUseProgramCalls = 0;\n    _totalFaces = 0;\n    _totalVertices = 0;\n    _totalPoints = 0;\n    _totalBindTexures = 0;\n  }\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions,\n  };\n};\n\nwindow.threeStats = function (renderer) {\n  var _rS = null;\n\n  var _values = {\n    \"renderer.info.memory.geometries\": {\n      caption: \"Geometries\",\n    },\n    \"renderer.info.memory.textures\": {\n      caption: \"Textures\",\n    },\n    \"renderer.info.programs\": {\n      caption: \"Programs\",\n    },\n    \"renderer.info.render.calls\": {\n      caption: \"Calls\",\n    },\n    \"renderer.info.render.triangles\": {\n      caption: \"Triangles\",\n      over: 1000,\n    },\n    \"renderer.info.render.points\": {\n      caption: \"Points\",\n    },\n  };\n\n  var _groups = [\n    {\n      caption: \"Three.js - Memory\",\n      values: [\n        \"renderer.info.memory.geometries\",\n        \"renderer.info.programs\",\n        \"renderer.info.memory.textures\",\n      ],\n    },\n    {\n      caption: \"Three.js - Render\",\n      values: [\n        \"renderer.info.render.calls\",\n        \"renderer.info.render.triangles\",\n        \"renderer.info.render.points\",\n      ],\n    },\n  ];\n\n  var _fractions = [];\n\n  function _update() {\n    _rS(\"renderer.info.memory.geometries\").set(renderer.info.memory.geometries);\n    _rS(\"renderer.info.programs\").set(renderer.info.programs.length);\n    _rS(\"renderer.info.memory.textures\").set(renderer.info.memory.textures);\n    _rS(\"renderer.info.render.calls\").set(renderer.info.render.calls);\n    _rS(\"renderer.info.render.triangles\").set(renderer.info.render.triangles);\n    _rS(\"renderer.info.render.points\").set(renderer.info.render.points);\n  }\n\n  function _start() {}\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions,\n  };\n};\n\n/*\n *   From https://github.com/paulirish/memory-stats.js\n */\n\nwindow.BrowserStats = function () {\n  var _rS = null;\n\n  var _usedJSHeapSize = 0,\n    _totalJSHeapSize = 0;\n\n  if (window.performance && !performance.memory) {\n    performance.memory = {\n      usedJSHeapSize: 0,\n      totalJSHeapSize: 0,\n    };\n  }\n\n  if (performance.memory.totalJSHeapSize === 0) {\n    console.warn(\n      \"totalJSHeapSize === 0... performance.memory is only available in Chrome .\"\n    );\n  }\n\n  var _values = {\n    memory: {\n      caption: \"Used Memory\",\n      average: true,\n      avgMs: 1000,\n      over: 22,\n    },\n    total: {\n      caption: \"Total Memory\",\n    },\n  };\n\n  var _groups = [\n    {\n      caption: \"Browser\",\n      values: [\"memory\", \"total\"],\n    },\n  ];\n\n  var _fractions = [\n    {\n      base: \"total\",\n      steps: [\"memory\"],\n    },\n  ];\n\n  var log1024 = Math.log(1024);\n\n  function _size(v) {\n    var precision = 100; //Math.pow(10, 2);\n    var i = Math.floor(Math.log(v) / log1024);\n    return Math.round((v * precision) / Math.pow(1024, i)) / precision; // + ' ' + sizes[i];\n  }\n\n  function _update() {\n    _usedJSHeapSize = _size(performance.memory.usedJSHeapSize);\n    _totalJSHeapSize = _size(performance.memory.totalJSHeapSize);\n\n    _rS(\"memory\").set(_usedJSHeapSize);\n    _rS(\"total\").set(_totalJSHeapSize);\n  }\n\n  function _start() {\n    _usedJSHeapSize = 0;\n  }\n\n  function _end() {}\n\n  function _attach(r) {\n    _rS = r;\n  }\n\n  return {\n    update: _update,\n    start: _start,\n    end: _end,\n    attach: _attach,\n    values: _values,\n    groups: _groups,\n    fractions: _fractions,\n  };\n};\n\nif (typeof module === \"object\") {\n  module.exports = {\n    glStats: window.glStats,\n    threeStats: window.threeStats,\n    BrowserStats: window.BrowserStats,\n  };\n}\n",
    "// performance.now() polyfill from https://gist.github.com/paulirish/5438650\n\"use strict\";\n\n(function () {\n  if (\"performance\" in window == false) {\n    window.performance = {};\n  }\n\n  var performance = window.performance;\n\n  if (\"now\" in performance == false) {\n    var nowOffset = Date.now();\n\n    if (performance.timing && performance.timing.navigationStart) {\n      nowOffset = performance.timing.navigationStart;\n    }\n\n    performance.now = function now() {\n      return Date.now() - nowOffset;\n    };\n  }\n\n  if (!performance.mark) {\n    performance.mark = function () {};\n  }\n\n  if (!performance.measure) {\n    performance.measure = function () {};\n  }\n})();\n\nwindow.rStats = function rStats(settings) {\n  function iterateKeys(array, callback) {\n    var keys = Object.keys(array);\n    for (var j = 0, l = keys.length; j < l; j++) {\n      callback(keys[j]);\n    }\n  }\n\n  function importCSS(url) {\n    var element = document.createElement(\"link\");\n    element.href = url;\n    element.rel = \"stylesheet\";\n    element.type = \"text/css\";\n    document.getElementsByTagName(\"head\")[0].appendChild(element);\n  }\n\n  var _settings = settings || {};\n  var _colours = _settings.colours || [\n    \"#850700\",\n    \"#c74900\",\n    \"#fcb300\",\n    \"#284280\",\n    \"#4c7c0c\",\n  ];\n\n  var _cssFont =\n    \"https://fonts.googleapis.com/css?family=Roboto+Condensed:400,700,300\";\n  var _cssRStats = (_settings.CSSPath ? _settings.CSSPath : \"\") + \"rStats.css\";\n\n  var _css = _settings.css || [_cssFont, _cssRStats];\n  _css.forEach(function (uri) {\n    importCSS(uri);\n  });\n\n  if (!_settings.values) _settings.values = {};\n\n  var _base,\n    _div,\n    _elHeight = 10,\n    _elWidth = 200;\n  var _perfCounters = {};\n\n  function Graph(_dom, _id, _defArg) {\n    var _def = _defArg || {};\n    var _canvas = document.createElement(\"canvas\"),\n      _ctx = _canvas.getContext(\"2d\"),\n      _max = 0,\n      _current = 0;\n\n    var c = _def.color ? _def.color : \"#666666\";\n\n    var _dotCanvas = document.createElement(\"canvas\"),\n      _dotCtx = _dotCanvas.getContext(\"2d\");\n    _dotCanvas.width = 1;\n    _dotCanvas.height = 2 * _elHeight;\n    _dotCtx.fillStyle = \"#444444\";\n    _dotCtx.fillRect(0, 0, 1, 2 * _elHeight);\n    _dotCtx.fillStyle = c;\n    _dotCtx.fillRect(0, _elHeight, 1, _elHeight);\n    _dotCtx.fillStyle = \"#ffffff\";\n    _dotCtx.globalAlpha = 0.5;\n    _dotCtx.fillRect(0, _elHeight, 1, 1);\n    _dotCtx.globalAlpha = 1;\n\n    var _alarmCanvas = document.createElement(\"canvas\"),\n      _alarmCtx = _alarmCanvas.getContext(\"2d\");\n    _alarmCanvas.width = 1;\n    _alarmCanvas.height = 2 * _elHeight;\n    _alarmCtx.fillStyle = \"#444444\";\n    _alarmCtx.fillRect(0, 0, 1, 2 * _elHeight);\n    _alarmCtx.fillStyle = \"#b70000\";\n    _alarmCtx.fillRect(0, _elHeight, 1, _elHeight);\n    _alarmCtx.globalAlpha = 0.5;\n    _alarmCtx.fillStyle = \"#ffffff\";\n    _alarmCtx.fillRect(0, _elHeight, 1, 1);\n    _alarmCtx.globalAlpha = 1;\n\n    function _init() {\n      _canvas.width = _elWidth;\n      _canvas.height = _elHeight;\n      _canvas.style.width = _canvas.width + \"px\";\n      _canvas.style.height = _canvas.height + \"px\";\n      _canvas.className = \"rs-canvas\";\n      _dom.appendChild(_canvas);\n\n      _ctx.fillStyle = \"#444444\";\n      _ctx.fillRect(0, 0, _canvas.width, _canvas.height);\n    }\n\n    function _draw(v, alarm) {\n      _current += (v - _current) * 0.1;\n      _max *= 0.99;\n      if (_current > _max) _max = _current;\n      _ctx.drawImage(\n        _canvas,\n        1,\n        0,\n        _canvas.width - 1,\n        _canvas.height,\n        0,\n        0,\n        _canvas.width - 1,\n        _canvas.height\n      );\n      if (alarm) {\n        _ctx.drawImage(\n          _alarmCanvas,\n          _canvas.width - 1,\n          _canvas.height - (_current * _canvas.height) / _max - _elHeight\n        );\n      } else {\n        _ctx.drawImage(\n          _dotCanvas,\n          _canvas.width - 1,\n          _canvas.height - (_current * _canvas.height) / _max - _elHeight\n        );\n      }\n    }\n\n    _init();\n\n    return {\n      draw: _draw,\n    };\n  }\n\n  function StackGraph(_dom, _num) {\n    var _canvas = document.createElement(\"canvas\"),\n      _ctx = _canvas.getContext(\"2d\");\n\n    function _init() {\n      _canvas.width = _elWidth;\n      _canvas.height = _elHeight * _num;\n      _canvas.style.width = _canvas.width + \"px\";\n      _canvas.style.height = _canvas.height + \"px\";\n      _canvas.className = \"rs-canvas\";\n      _dom.appendChild(_canvas);\n\n      _ctx.fillStyle = \"#444444\";\n      _ctx.fillRect(0, 0, _canvas.width, _canvas.height);\n    }\n\n    function _draw(v) {\n      _ctx.drawImage(\n        _canvas,\n        1,\n        0,\n        _canvas.width - 1,\n        _canvas.height,\n        0,\n        0,\n        _canvas.width - 1,\n        _canvas.height\n      );\n      var th = 0;\n      iterateKeys(v, function (j) {\n        var h = v[j] * _canvas.height;\n        _ctx.fillStyle = _colours[j];\n        _ctx.fillRect(_canvas.width - 1, th, 1, h);\n        th += h;\n      });\n    }\n\n    _init();\n\n    return {\n      draw: _draw,\n    };\n  }\n\n  function PerfCounter(id, group) {\n    var _id = id,\n      _time,\n      _value = 0,\n      _total = 0,\n      _averageValue = 0,\n      _accumValue = 0,\n      _accumStart = performance.now(),\n      _accumSamples = 0,\n      _dom = document.createElement(\"div\"),\n      _spanId = document.createElement(\"span\"),\n      _spanValue = document.createElement(\"div\"),\n      _spanValueText = document.createTextNode(\"\"),\n      _def = _settings ? _settings.values[_id.toLowerCase()] : null,\n      _graph = new Graph(_dom, _id, _def),\n      _started = false;\n\n    _spanId.className = \"rs-counter-id\";\n    _spanId.textContent = _def && _def.caption ? _def.caption : _id;\n\n    _spanValue.className = \"rs-counter-value\";\n    _spanValue.appendChild(_spanValueText);\n\n    _dom.appendChild(_spanId);\n    _dom.appendChild(_spanValue);\n    if (group) group.div.appendChild(_dom);\n    else _div.appendChild(_dom);\n\n    _time = performance.now();\n\n    function _average(v) {\n      if (_def && _def.average) {\n        _accumValue += v;\n        _accumSamples++;\n        var t = performance.now();\n        if (t - _accumStart >= (_def.avgMs || 1000)) {\n          _averageValue = _accumValue / _accumSamples;\n          _accumValue = 0;\n          _accumStart = t;\n          _accumSamples = 0;\n        }\n      }\n    }\n\n    function _start() {\n      _time = performance.now();\n      if (_settings.userTimingAPI) performance.mark(_id + \"-start\");\n      _started = true;\n    }\n\n    function _end() {\n      _value = performance.now() - _time;\n      if (_settings.userTimingAPI) {\n        performance.mark(_id + \"-end\");\n        if (_started) {\n          performance.measure(_id, _id + \"-start\", _id + \"-end\");\n        }\n      }\n      _average(_value);\n    }\n\n    function _tick() {\n      _end();\n      _start();\n    }\n\n    function _draw() {\n      var v = _def && _def.average ? _averageValue : _value;\n      _spanValueText.nodeValue = Math.round(v * 100) / 100;\n      var a =\n        _def &&\n        ((_def.below && _value < _def.below) ||\n          (_def.over && _value > _def.over));\n      _graph.draw(_value, a);\n      _dom.className = a ? \"rs-counter-base alarm\" : \"rs-counter-base\";\n    }\n\n    function _frame() {\n      var t = performance.now();\n      var e = t - _time;\n      _total++;\n      if (e > 1000) {\n        if (_def && _def.interpolate === false) {\n          _value = _total;\n        } else {\n          _value = (_total * 1000) / e;\n        }\n        _total = 0;\n        _time = t;\n        _average(_value);\n      }\n    }\n\n    function _set(v) {\n      _value = v;\n      _average(_value);\n    }\n\n    return {\n      set: _set,\n      start: _start,\n      tick: _tick,\n      end: _end,\n      frame: _frame,\n      value: function () {\n        return _value;\n      },\n      draw: _draw,\n    };\n  }\n\n  function sample() {\n    var _value = 0;\n\n    function _set(v) {\n      _value = v;\n    }\n\n    return {\n      set: _set,\n      value: function () {\n        return _value;\n      },\n    };\n  }\n\n  function _perf(idArg) {\n    var id = idArg.toLowerCase();\n    if (id === undefined) id = \"default\";\n    if (_perfCounters[id]) return _perfCounters[id];\n\n    var group = null;\n    if (_settings && _settings.groups) {\n      iterateKeys(_settings.groups, function (j) {\n        var g = _settings.groups[parseInt(j, 10)];\n        if (!group && g.values.indexOf(id.toLowerCase()) !== -1) {\n          group = g;\n        }\n      });\n    }\n\n    var p = new PerfCounter(id, group);\n    _perfCounters[id] = p;\n    return p;\n  }\n\n  function _init() {\n    if (_settings.plugins) {\n      if (!_settings.values) _settings.values = {};\n      if (!_settings.groups) _settings.groups = [];\n      if (!_settings.fractions) _settings.fractions = [];\n      for (var j = 0; j < _settings.plugins.length; j++) {\n        _settings.plugins[j].attach(_perf);\n        iterateKeys(_settings.plugins[j].values, function (k) {\n          _settings.values[k] = _settings.plugins[j].values[k];\n        });\n        _settings.groups = _settings.groups.concat(_settings.plugins[j].groups);\n        _settings.fractions = _settings.fractions.concat(\n          _settings.plugins[j].fractions\n        );\n      }\n    } else {\n      _settings.plugins = {};\n    }\n\n    _base = document.createElement(\"div\");\n    _base.className = \"rs-base\";\n    _div = document.createElement(\"div\");\n    _div.className = \"rs-container\";\n    _div.style.height = \"auto\";\n    _base.appendChild(_div);\n    document.body.appendChild(_base);\n\n    if (!_settings) return;\n\n    if (_settings.groups) {\n      iterateKeys(_settings.groups, function (j) {\n        var g = _settings.groups[parseInt(j, 10)];\n        var div = document.createElement(\"div\");\n        div.className = \"rs-group\";\n        g.div = div;\n        var h1 = document.createElement(\"h1\");\n        h1.textContent = g.caption;\n        h1.addEventListener(\n          \"click\",\n          function (e) {\n            this.classList.toggle(\"hidden\");\n            e.preventDefault();\n          }.bind(div)\n        );\n        _div.appendChild(h1);\n        _div.appendChild(div);\n      });\n    }\n\n    if (_settings.fractions) {\n      iterateKeys(_settings.fractions, function (j) {\n        var f = _settings.fractions[parseInt(j, 10)];\n        var div = document.createElement(\"div\");\n        div.className = \"rs-fraction\";\n        var legend = document.createElement(\"div\");\n        legend.className = \"rs-legend\";\n\n        var h = 0;\n        iterateKeys(_settings.fractions[j].steps, function (k) {\n          var p = document.createElement(\"p\");\n          p.textContent = _settings.fractions[j].steps[k];\n          p.style.color = _colours[h];\n          legend.appendChild(p);\n          h++;\n        });\n        div.appendChild(legend);\n        div.style.height = h * _elHeight + \"px\";\n        f.div = div;\n        var graph = new StackGraph(div, h);\n        f.graph = graph;\n        _div.appendChild(div);\n      });\n    }\n  }\n\n  function _update() {\n    iterateKeys(_settings.plugins, function (j) {\n      _settings.plugins[j].update();\n    });\n\n    iterateKeys(_perfCounters, function (j) {\n      _perfCounters[j].draw();\n    });\n\n    if (_settings && _settings.fractions) {\n      iterateKeys(_settings.fractions, function (j) {\n        var f = _settings.fractions[parseInt(j, 10)];\n        var v = [];\n        var base = _perfCounters[f.base.toLowerCase()];\n        if (base) {\n          base = base.value();\n          iterateKeys(_settings.fractions[j].steps, function (k) {\n            var s = _settings.fractions[j].steps[parseInt(k, 10)].toLowerCase();\n            var val = _perfCounters[s];\n            if (val) {\n              v.push(val.value() / base);\n            }\n          });\n        }\n        f.graph.draw(v);\n      });\n    }\n\n    /*if( _height != _div.clientHeight ) {\n            _height = _div.clientHeight;\n            _base.style.height = _height + 2 * _elHeight + 'px';\n        console.log( _base.clientHeight );\n        }*/\n  }\n\n  _init();\n\n  return function (id) {\n    if (id) return _perf(id);\n    return {\n      element: _base,\n      update: _update,\n    };\n  };\n};\n\nif (typeof module === \"object\") {\n  module.exports = window.rStats;\n}\n",
    "(function (global, factory) {\n  typeof exports === \"object\" && typeof module !== \"undefined\"\n    ? factory(exports)\n    : typeof define === \"function\" && define.amd\n    ? define([\"exports\"], factory)\n    : factory((global.THREE = {}));\n})(this, function (exports) {\n  \"use strict\";\n\n  // Polyfills\n\n  if (Number.EPSILON === undefined) {\n    Number.EPSILON = Math.pow(2, -52);\n  }\n\n  if (Number.isInteger === undefined) {\n    // Missing in IE\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n    Number.isInteger = function (value) {\n      return (\n        typeof value === \"number\" &&\n        isFinite(value) &&\n        Math.floor(value) === value\n      );\n    };\n  }\n\n  //\n\n  if (Math.sign === undefined) {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n    Math.sign = function (x) {\n      return x < 0 ? -1 : x > 0 ? 1 : +x;\n    };\n  }\n\n  if (\"name\" in Function.prototype === false) {\n    // Missing in IE\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n    Object.defineProperty(Function.prototype, \"name\", {\n      get: function () {\n        return this.toString().match(/^\\s*function\\s*([^\\(\\s]*)/)[1];\n      },\n    });\n  }\n\n  if (Object.assign === undefined) {\n    // Missing in IE\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n    (function () {\n      Object.assign = function (target) {\n        if (target === undefined || target === null) {\n          throw new TypeError(\"Cannot convert undefined or null to object\");\n        }\n\n        var output = Object(target);\n\n        for (var index = 1; index < arguments.length; index++) {\n          var source = arguments[index];\n\n          if (source !== undefined && source !== null) {\n            for (var nextKey in source) {\n              if (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n                output[nextKey] = source[nextKey];\n              }\n            }\n          }\n        }\n\n        return output;\n      };\n    })();\n  }\n\n  /**\n   * https://github.com/mrdoob/eventdispatcher.js/\n   */\n\n  function EventDispatcher() {}\n\n  Object.assign(EventDispatcher.prototype, {\n    addEventListener: function (type, listener) {\n      if (this._listeners === undefined) this._listeners = {};\n\n      var listeners = this._listeners;\n\n      if (listeners[type] === undefined) {\n        listeners[type] = [];\n      }\n\n      if (listeners[type].indexOf(listener) === -1) {\n        listeners[type].push(listener);\n      }\n    },\n\n    hasEventListener: function (type, listener) {\n      if (this._listeners === undefined) return false;\n\n      var listeners = this._listeners;\n\n      return (\n        listeners[type] !== undefined &&\n        listeners[type].indexOf(listener) !== -1\n      );\n    },\n\n    removeEventListener: function (type, listener) {\n      if (this._listeners === undefined) return;\n\n      var listeners = this._listeners;\n      var listenerArray = listeners[type];\n\n      if (listenerArray !== undefined) {\n        var index = listenerArray.indexOf(listener);\n\n        if (index !== -1) {\n          listenerArray.splice(index, 1);\n        }\n      }\n    },\n\n    dispatchEvent: function (event) {\n      if (this._listeners === undefined) return;\n\n      var listeners = this._listeners;\n      var listenerArray = listeners[event.type];\n\n      if (listenerArray !== undefined) {\n        event.target = this;\n\n        var array = listenerArray.slice(0);\n\n        for (var i = 0, l = array.length; i < l; i++) {\n          array[i].call(this, event);\n        }\n      }\n    },\n  });\n\n  var REVISION = \"95\";\n  var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n  var CullFaceNone = 0;\n  var CullFaceBack = 1;\n  var CullFaceFront = 2;\n  var CullFaceFrontBack = 3;\n  var FrontFaceDirectionCW = 0;\n  var FrontFaceDirectionCCW = 1;\n  var BasicShadowMap = 0;\n  var PCFShadowMap = 1;\n  var PCFSoftShadowMap = 2;\n  var FrontSide = 0;\n  var BackSide = 1;\n  var DoubleSide = 2;\n  var FlatShading = 1;\n  var SmoothShading = 2;\n  var NoColors = 0;\n  var FaceColors = 1;\n  var VertexColors = 2;\n  var NoBlending = 0;\n  var NormalBlending = 1;\n  var AdditiveBlending = 2;\n  var SubtractiveBlending = 3;\n  var MultiplyBlending = 4;\n  var CustomBlending = 5;\n  var AddEquation = 100;\n  var SubtractEquation = 101;\n  var ReverseSubtractEquation = 102;\n  var MinEquation = 103;\n  var MaxEquation = 104;\n  var ZeroFactor = 200;\n  var OneFactor = 201;\n  var SrcColorFactor = 202;\n  var OneMinusSrcColorFactor = 203;\n  var SrcAlphaFactor = 204;\n  var OneMinusSrcAlphaFactor = 205;\n  var DstAlphaFactor = 206;\n  var OneMinusDstAlphaFactor = 207;\n  var DstColorFactor = 208;\n  var OneMinusDstColorFactor = 209;\n  var SrcAlphaSaturateFactor = 210;\n  var NeverDepth = 0;\n  var AlwaysDepth = 1;\n  var LessDepth = 2;\n  var LessEqualDepth = 3;\n  var EqualDepth = 4;\n  var GreaterEqualDepth = 5;\n  var GreaterDepth = 6;\n  var NotEqualDepth = 7;\n  var MultiplyOperation = 0;\n  var MixOperation = 1;\n  var AddOperation = 2;\n  var NoToneMapping = 0;\n  var LinearToneMapping = 1;\n  var ReinhardToneMapping = 2;\n  var Uncharted2ToneMapping = 3;\n  var CineonToneMapping = 4;\n  var UVMapping = 300;\n  var CubeReflectionMapping = 301;\n  var CubeRefractionMapping = 302;\n  var EquirectangularReflectionMapping = 303;\n  var EquirectangularRefractionMapping = 304;\n  var SphericalReflectionMapping = 305;\n  var CubeUVReflectionMapping = 306;\n  var CubeUVRefractionMapping = 307;\n  var RepeatWrapping = 1000;\n  var ClampToEdgeWrapping = 1001;\n  var MirroredRepeatWrapping = 1002;\n  var NearestFilter = 1003;\n  var NearestMipMapNearestFilter = 1004;\n  var NearestMipMapLinearFilter = 1005;\n  var LinearFilter = 1006;\n  var LinearMipMapNearestFilter = 1007;\n  var LinearMipMapLinearFilter = 1008;\n  var UnsignedByteType = 1009;\n  var ByteType = 1010;\n  var ShortType = 1011;\n  var UnsignedShortType = 1012;\n  var IntType = 1013;\n  var UnsignedIntType = 1014;\n  var FloatType = 1015;\n  var HalfFloatType = 1016;\n  var UnsignedShort4444Type = 1017;\n  var UnsignedShort5551Type = 1018;\n  var UnsignedShort565Type = 1019;\n  var UnsignedInt248Type = 1020;\n  var AlphaFormat = 1021;\n  var RGBFormat = 1022;\n  var RGBAFormat = 1023;\n  var LuminanceFormat = 1024;\n  var LuminanceAlphaFormat = 1025;\n  var RGBEFormat = RGBAFormat;\n  var DepthFormat = 1026;\n  var DepthStencilFormat = 1027;\n  var RGB_S3TC_DXT1_Format = 33776;\n  var RGBA_S3TC_DXT1_Format = 33777;\n  var RGBA_S3TC_DXT3_Format = 33778;\n  var RGBA_S3TC_DXT5_Format = 33779;\n  var RGB_PVRTC_4BPPV1_Format = 35840;\n  var RGB_PVRTC_2BPPV1_Format = 35841;\n  var RGBA_PVRTC_4BPPV1_Format = 35842;\n  var RGBA_PVRTC_2BPPV1_Format = 35843;\n  var RGB_ETC1_Format = 36196;\n  var RGBA_ASTC_4x4_Format = 37808;\n  var RGBA_ASTC_5x4_Format = 37809;\n  var RGBA_ASTC_5x5_Format = 37810;\n  var RGBA_ASTC_6x5_Format = 37811;\n  var RGBA_ASTC_6x6_Format = 37812;\n  var RGBA_ASTC_8x5_Format = 37813;\n  var RGBA_ASTC_8x6_Format = 37814;\n  var RGBA_ASTC_8x8_Format = 37815;\n  var RGBA_ASTC_10x5_Format = 37816;\n  var RGBA_ASTC_10x6_Format = 37817;\n  var RGBA_ASTC_10x8_Format = 37818;\n  var RGBA_ASTC_10x10_Format = 37819;\n  var RGBA_ASTC_12x10_Format = 37820;\n  var RGBA_ASTC_12x12_Format = 37821;\n  var LoopOnce = 2200;\n  var LoopRepeat = 2201;\n  var LoopPingPong = 2202;\n  var InterpolateDiscrete = 2300;\n  var InterpolateLinear = 2301;\n  var InterpolateSmooth = 2302;\n  var ZeroCurvatureEnding = 2400;\n  var ZeroSlopeEnding = 2401;\n  var WrapAroundEnding = 2402;\n  var TrianglesDrawMode = 0;\n  var TriangleStripDrawMode = 1;\n  var TriangleFanDrawMode = 2;\n  var LinearEncoding = 3000;\n  var sRGBEncoding = 3001;\n  var GammaEncoding = 3007;\n  var RGBEEncoding = 3002;\n  var LogLuvEncoding = 3003;\n  var RGBM7Encoding = 3004;\n  var RGBM16Encoding = 3005;\n  var RGBDEncoding = 3006;\n  var BasicDepthPacking = 3200;\n  var RGBADepthPacking = 3201;\n  var TangentSpaceNormalMap = 0;\n  var ObjectSpaceNormalMap = 1;\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  var _Math = {\n    DEG2RAD: Math.PI / 180,\n    RAD2DEG: 180 / Math.PI,\n\n    generateUUID: (function () {\n      // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n      var lut = [];\n\n      for (var i = 0; i < 256; i++) {\n        lut[i] = (i < 16 ? \"0\" : \"\") + i.toString(16);\n      }\n\n      return function generateUUID() {\n        var d0 = (Math.random() * 0xffffffff) | 0;\n        var d1 = (Math.random() * 0xffffffff) | 0;\n        var d2 = (Math.random() * 0xffffffff) | 0;\n        var d3 = (Math.random() * 0xffffffff) | 0;\n        var uuid =\n          lut[d0 & 0xff] +\n          lut[(d0 >> 8) & 0xff] +\n          lut[(d0 >> 16) & 0xff] +\n          lut[(d0 >> 24) & 0xff] +\n          \"-\" +\n          lut[d1 & 0xff] +\n          lut[(d1 >> 8) & 0xff] +\n          \"-\" +\n          lut[((d1 >> 16) & 0x0f) | 0x40] +\n          lut[(d1 >> 24) & 0xff] +\n          \"-\" +\n          lut[(d2 & 0x3f) | 0x80] +\n          lut[(d2 >> 8) & 0xff] +\n          \"-\" +\n          lut[(d2 >> 16) & 0xff] +\n          lut[(d2 >> 24) & 0xff] +\n          lut[d3 & 0xff] +\n          lut[(d3 >> 8) & 0xff] +\n          lut[(d3 >> 16) & 0xff] +\n          lut[(d3 >> 24) & 0xff];\n\n        // .toUpperCase() here flattens concatenated strings to save heap memory space.\n        return uuid.toUpperCase();\n      };\n    })(),\n\n    clamp: function (value, min, max) {\n      return Math.max(min, Math.min(max, value));\n    },\n\n    // compute euclidian modulo of m % n\n    // https://en.wikipedia.org/wiki/Modulo_operation\n\n    euclideanModulo: function (n, m) {\n      return ((n % m) + m) % m;\n    },\n\n    // Linear mapping from range <a1, a2> to range <b1, b2>\n\n    mapLinear: function (x, a1, a2, b1, b2) {\n      return b1 + ((x - a1) * (b2 - b1)) / (a2 - a1);\n    },\n\n    // https://en.wikipedia.org/wiki/Linear_interpolation\n\n    lerp: function (x, y, t) {\n      return (1 - t) * x + t * y;\n    },\n\n    // http://en.wikipedia.org/wiki/Smoothstep\n\n    smoothstep: function (x, min, max) {\n      if (x <= min) return 0;\n      if (x >= max) return 1;\n\n      x = (x - min) / (max - min);\n\n      return x * x * (3 - 2 * x);\n    },\n\n    smootherstep: function (x, min, max) {\n      if (x <= min) return 0;\n      if (x >= max) return 1;\n\n      x = (x - min) / (max - min);\n\n      return x * x * x * (x * (x * 6 - 15) + 10);\n    },\n\n    // Random integer from <low, high> interval\n\n    randInt: function (low, high) {\n      return low + Math.floor(Math.random() * (high - low + 1));\n    },\n\n    // Random float from <low, high> interval\n\n    randFloat: function (low, high) {\n      return low + Math.random() * (high - low);\n    },\n\n    // Random float from <-range/2, range/2> interval\n\n    randFloatSpread: function (range) {\n      return range * (0.5 - Math.random());\n    },\n\n    degToRad: function (degrees) {\n      return degrees * _Math.DEG2RAD;\n    },\n\n    radToDeg: function (radians) {\n      return radians * _Math.RAD2DEG;\n    },\n\n    isPowerOfTwo: function (value) {\n      return (value & (value - 1)) === 0 && value !== 0;\n    },\n\n    ceilPowerOfTwo: function (value) {\n      return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n    },\n\n    floorPowerOfTwo: function (value) {\n      return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n    },\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author philogb / http://blog.thejit.org/\n   * @author egraether / http://egraether.com/\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   */\n\n  function Vector2(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  Object.defineProperties(Vector2.prototype, {\n    width: {\n      get: function () {\n        return this.x;\n      },\n\n      set: function (value) {\n        this.x = value;\n      },\n    },\n\n    height: {\n      get: function () {\n        return this.y;\n      },\n\n      set: function (value) {\n        this.y = value;\n      },\n    },\n  });\n\n  Object.assign(Vector2.prototype, {\n    isVector2: true,\n\n    set: function (x, y) {\n      this.x = x;\n      this.y = y;\n\n      return this;\n    },\n\n    setScalar: function (scalar) {\n      this.x = scalar;\n      this.y = scalar;\n\n      return this;\n    },\n\n    setX: function (x) {\n      this.x = x;\n\n      return this;\n    },\n\n    setY: function (y) {\n      this.y = y;\n\n      return this;\n    },\n\n    setComponent: function (index, value) {\n      switch (index) {\n        case 0:\n          this.x = value;\n          break;\n        case 1:\n          this.y = value;\n          break;\n        default:\n          throw new Error(\"index is out of range: \" + index);\n      }\n\n      return this;\n    },\n\n    getComponent: function (index) {\n      switch (index) {\n        case 0:\n          return this.x;\n        case 1:\n          return this.y;\n        default:\n          throw new Error(\"index is out of range: \" + index);\n      }\n    },\n\n    clone: function () {\n      return new this.constructor(this.x, this.y);\n    },\n\n    copy: function (v) {\n      this.x = v.x;\n      this.y = v.y;\n\n      return this;\n    },\n\n    add: function (v, w) {\n      if (w !== undefined) {\n        console.warn(\n          \"THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"\n        );\n        return this.addVectors(v, w);\n      }\n\n      this.x += v.x;\n      this.y += v.y;\n\n      return this;\n    },\n\n    addScalar: function (s) {\n      this.x += s;\n      this.y += s;\n\n      return this;\n    },\n\n    addVectors: function (a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n\n      return this;\n    },\n\n    addScaledVector: function (v, s) {\n      this.x += v.x * s;\n      this.y += v.y * s;\n\n      return this;\n    },\n\n    sub: function (v, w) {\n      if (w !== undefined) {\n        console.warn(\n          \"THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"\n        );\n        return this.subVectors(v, w);\n      }\n\n      this.x -= v.x;\n      this.y -= v.y;\n\n      return this;\n    },\n\n    subScalar: function (s) {\n      this.x -= s;\n      this.y -= s;\n\n      return this;\n    },\n\n    subVectors: function (a, b) {\n      this.x = a.x - b.x;\n      this.y = a.y - b.y;\n\n      return this;\n    },\n\n    multiply: function (v) {\n      this.x *= v.x;\n      this.y *= v.y;\n\n      return this;\n    },\n\n    multiplyScalar: function (scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n\n      return this;\n    },\n\n    divide: function (v) {\n      this.x /= v.x;\n      this.y /= v.y;\n\n      return this;\n    },\n\n    divideScalar: function (scalar) {\n      return this.multiplyScalar(1 / scalar);\n    },\n\n    applyMatrix3: function (m) {\n      var x = this.x,\n        y = this.y;\n      var e = m.elements;\n\n      this.x = e[0] * x + e[3] * y + e[6];\n      this.y = e[1] * x + e[4] * y + e[7];\n\n      return this;\n    },\n\n    min: function (v) {\n      this.x = Math.min(this.x, v.x);\n      this.y = Math.min(this.y, v.y);\n\n      return this;\n    },\n\n    max: function (v) {\n      this.x = Math.max(this.x, v.x);\n      this.y = Math.max(this.y, v.y);\n\n      return this;\n    },\n\n    clamp: function (min, max) {\n      // assumes min < max, componentwise\n\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\n\n      return this;\n    },\n\n    clampScalar: (function () {\n      var min = new Vector2();\n      var max = new Vector2();\n\n      return function clampScalar(minVal, maxVal) {\n        min.set(minVal, minVal);\n        max.set(maxVal, maxVal);\n\n        return this.clamp(min, max);\n      };\n    })(),\n\n    clampLength: function (min, max) {\n      var length = this.length();\n\n      return this.divideScalar(length || 1).multiplyScalar(\n        Math.max(min, Math.min(max, length))\n      );\n    },\n\n    floor: function () {\n      this.x = Math.floor(this.x);\n      this.y = Math.floor(this.y);\n\n      return this;\n    },\n\n    ceil: function () {\n      this.x = Math.ceil(this.x);\n      this.y = Math.ceil(this.y);\n\n      return this;\n    },\n\n    round: function () {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n\n      return this;\n    },\n\n    roundToZero: function () {\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\n      return this;\n    },\n\n    negate: function () {\n      this.x = -this.x;\n      this.y = -this.y;\n\n      return this;\n    },\n\n    dot: function (v) {\n      return this.x * v.x + this.y * v.y;\n    },\n\n    cross: function (v) {\n      return this.x * v.y - this.y * v.x;\n    },\n\n    lengthSq: function () {\n      return this.x * this.x + this.y * this.y;\n    },\n\n    length: function () {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    manhattanLength: function () {\n      return Math.abs(this.x) + Math.abs(this.y);\n    },\n\n    normalize: function () {\n      return this.divideScalar(this.length() || 1);\n    },\n\n    angle: function () {\n      // computes the angle in radians with respect to the positive x-axis\n\n      var angle = Math.atan2(this.y, this.x);\n\n      if (angle < 0) angle += 2 * Math.PI;\n\n      return angle;\n    },\n\n    distanceTo: function (v) {\n      return Math.sqrt(this.distanceToSquared(v));\n    },\n\n    distanceToSquared: function (v) {\n      var dx = this.x - v.x,\n        dy = this.y - v.y;\n      return dx * dx + dy * dy;\n    },\n\n    manhattanDistanceTo: function (v) {\n      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n    },\n\n    setLength: function (length) {\n      return this.normalize().multiplyScalar(length);\n    },\n\n    lerp: function (v, alpha) {\n      this.x += (v.x - this.x) * alpha;\n      this.y += (v.y - this.y) * alpha;\n\n      return this;\n    },\n\n    lerpVectors: function (v1, v2, alpha) {\n      return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n    },\n\n    equals: function (v) {\n      return v.x === this.x && v.y === this.y;\n    },\n\n    fromArray: function (array, offset) {\n      if (offset === undefined) offset = 0;\n\n      this.x = array[offset];\n      this.y = array[offset + 1];\n\n      return this;\n    },\n\n    toArray: function (array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n\n      array[offset] = this.x;\n      array[offset + 1] = this.y;\n\n      return array;\n    },\n\n    fromBufferAttribute: function (attribute, index, offset) {\n      if (offset !== undefined) {\n        console.warn(\n          \"THREE.Vector2: offset has been removed from .fromBufferAttribute().\"\n        );\n      }\n\n      this.x = attribute.getX(index);\n      this.y = attribute.getY(index);\n\n      return this;\n    },\n\n    rotateAround: function (center, angle) {\n      var c = Math.cos(angle),\n        s = Math.sin(angle);\n\n      var x = this.x - center.x;\n      var y = this.y - center.y;\n\n      this.x = x * c - y * s + center.x;\n      this.y = x * s + y * c + center.y;\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author supereggbert / http://www.paulbrunt.co.uk/\n   * @author philogb / http://blog.thejit.org/\n   * @author jordi_ros / http://plattsoft.com\n   * @author D1plo1d / http://github.com/D1plo1d\n   * @author alteredq / http://alteredqualia.com/\n   * @author mikael emtinger / http://gomo.se/\n   * @author timknip / http://www.floorplanner.com/\n   * @author bhouston / http://clara.io\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function Matrix4() {\n    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n    if (arguments.length > 0) {\n      console.error(\n        \"THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.\"\n      );\n    }\n  }\n\n  Object.assign(Matrix4.prototype, {\n    isMatrix4: true,\n\n    set: function (\n      n11,\n      n12,\n      n13,\n      n14,\n      n21,\n      n22,\n      n23,\n      n24,\n      n31,\n      n32,\n      n33,\n      n34,\n      n41,\n      n42,\n      n43,\n      n44\n    ) {\n      var te = this.elements;\n\n      te[0] = n11;\n      te[4] = n12;\n      te[8] = n13;\n      te[12] = n14;\n      te[1] = n21;\n      te[5] = n22;\n      te[9] = n23;\n      te[13] = n24;\n      te[2] = n31;\n      te[6] = n32;\n      te[10] = n33;\n      te[14] = n34;\n      te[3] = n41;\n      te[7] = n42;\n      te[11] = n43;\n      te[15] = n44;\n\n      return this;\n    },\n\n    identity: function () {\n      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\n      return this;\n    },\n\n    clone: function () {\n      return new Matrix4().fromArray(this.elements);\n    },\n\n    copy: function (m) {\n      var te = this.elements;\n      var me = m.elements;\n\n      te[0] = me[0];\n      te[1] = me[1];\n      te[2] = me[2];\n      te[3] = me[3];\n      te[4] = me[4];\n      te[5] = me[5];\n      te[6] = me[6];\n      te[7] = me[7];\n      te[8] = me[8];\n      te[9] = me[9];\n      te[10] = me[10];\n      te[11] = me[11];\n      te[12] = me[12];\n      te[13] = me[13];\n      te[14] = me[14];\n      te[15] = me[15];\n\n      return this;\n    },\n\n    copyPosition: function (m) {\n      var te = this.elements,\n        me = m.elements;\n\n      te[12] = me[12];\n      te[13] = me[13];\n      te[14] = me[14];\n\n      return this;\n    },\n\n    extractBasis: function (xAxis, yAxis, zAxis) {\n      xAxis.setFromMatrixColumn(this, 0);\n      yAxis.setFromMatrixColumn(this, 1);\n      zAxis.setFromMatrixColumn(this, 2);\n\n      return this;\n    },\n\n    makeBasis: function (xAxis, yAxis, zAxis) {\n      this.set(\n        xAxis.x,\n        yAxis.x,\n        zAxis.x,\n        0,\n        xAxis.y,\n        yAxis.y,\n        zAxis.y,\n        0,\n        xAxis.z,\n        yAxis.z,\n        zAxis.z,\n        0,\n        0,\n        0,\n        0,\n        1\n      );\n\n      return this;\n    },\n\n    extractRotation: (function () {\n      var v1 = new Vector3();\n\n      return function extractRotation(m) {\n        // this method does not support reflection matrices\n\n        var te = this.elements;\n        var me = m.elements;\n\n        var scaleX = 1 / v1.setFromMatrixColumn(m, 0).length();\n        var scaleY = 1 / v1.setFromMatrixColumn(m, 1).length();\n        var scaleZ = 1 / v1.setFromMatrixColumn(m, 2).length();\n\n        te[0] = me[0] * scaleX;\n        te[1] = me[1] * scaleX;\n        te[2] = me[2] * scaleX;\n        te[3] = 0;\n\n        te[4] = me[4] * scaleY;\n        te[5] = me[5] * scaleY;\n        te[6] = me[6] * scaleY;\n        te[7] = 0;\n\n        te[8] = me[8] * scaleZ;\n        te[9] = me[9] * scaleZ;\n        te[10] = me[10] * scaleZ;\n        te[11] = 0;\n\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n\n        return this;\n      };\n    })(),\n\n    makeRotationFromEuler: function (euler) {\n      if (!(euler && euler.isEuler)) {\n        console.error(\n          \"THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.\"\n        );\n      }\n\n      var te = this.elements;\n\n      var x = euler.x,\n        y = euler.y,\n        z = euler.z;\n      var a = Math.cos(x),\n        b = Math.sin(x);\n      var c = Math.cos(y),\n        d = Math.sin(y);\n      var e = Math.cos(z),\n        f = Math.sin(z);\n\n      if (euler.order === \"XYZ\") {\n        var ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n      } else if (euler.order === \"YXZ\") {\n        var ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n      } else if (euler.order === \"ZXY\") {\n        var ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n      } else if (euler.order === \"ZYX\") {\n        var ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n      } else if (euler.order === \"YZX\") {\n        var ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n      } else if (euler.order === \"XZY\") {\n        var ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n      }\n\n      // bottom row\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = 0;\n\n      // last column\n      te[12] = 0;\n      te[13] = 0;\n      te[14] = 0;\n      te[15] = 1;\n\n      return this;\n    },\n\n    makeRotationFromQuaternion: (function () {\n      var zero = new Vector3(0, 0, 0);\n      var one = new Vector3(1, 1, 1);\n\n      return function makeRotationFromQuaternion(q) {\n        return this.compose(zero, q, one);\n      };\n    })(),\n\n    lookAt: (function () {\n      var x = new Vector3();\n      var y = new Vector3();\n      var z = new Vector3();\n\n      return function lookAt(eye, target, up) {\n        var te = this.elements;\n\n        z.subVectors(eye, target);\n\n        if (z.lengthSq() === 0) {\n          // eye and target are in the same position\n\n          z.z = 1;\n        }\n\n        z.normalize();\n        x.crossVectors(up, z);\n\n        if (x.lengthSq() === 0) {\n          // up and z are parallel\n\n          if (Math.abs(up.z) === 1) {\n            z.x += 0.0001;\n          } else {\n            z.z += 0.0001;\n          }\n\n          z.normalize();\n          x.crossVectors(up, z);\n        }\n\n        x.normalize();\n        y.crossVectors(z, x);\n\n        te[0] = x.x;\n        te[4] = y.x;\n        te[8] = z.x;\n        te[1] = x.y;\n        te[5] = y.y;\n        te[9] = z.y;\n        te[2] = x.z;\n        te[6] = y.z;\n        te[10] = z.z;\n\n        return this;\n      };\n    })(),\n\n    multiply: function (m, n) {\n      if (n !== undefined) {\n        console.warn(\n          \"THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.\"\n        );\n        return this.multiplyMatrices(m, n);\n      }\n\n      return this.multiplyMatrices(this, m);\n    },\n\n    premultiply: function (m) {\n      return this.multiplyMatrices(m, this);\n    },\n\n    multiplyMatrices: function (a, b) {\n      var ae = a.elements;\n      var be = b.elements;\n      var te = this.elements;\n\n      var a11 = ae[0],\n        a12 = ae[4],\n        a13 = ae[8],\n        a14 = ae[12];\n      var a21 = ae[1],\n        a22 = ae[5],\n        a23 = ae[9],\n        a24 = ae[13];\n      var a31 = ae[2],\n        a32 = ae[6],\n        a33 = ae[10],\n        a34 = ae[14];\n      var a41 = ae[3],\n        a42 = ae[7],\n        a43 = ae[11],\n        a44 = ae[15];\n\n      var b11 = be[0],\n        b12 = be[4],\n        b13 = be[8],\n        b14 = be[12];\n      var b21 = be[1],\n        b22 = be[5],\n        b23 = be[9],\n        b24 = be[13];\n      var b31 = be[2],\n        b32 = be[6],\n        b33 = be[10],\n        b34 = be[14];\n      var b41 = be[3],\n        b42 = be[7],\n        b43 = be[11],\n        b44 = be[15];\n\n      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n      return this;\n    },\n\n    multiplyScalar: function (s) {\n      var te = this.elements;\n\n      te[0] *= s;\n      te[4] *= s;\n      te[8] *= s;\n      te[12] *= s;\n      te[1] *= s;\n      te[5] *= s;\n      te[9] *= s;\n      te[13] *= s;\n      te[2] *= s;\n      te[6] *= s;\n      te[10] *= s;\n      te[14] *= s;\n      te[3] *= s;\n      te[7] *= s;\n      te[11] *= s;\n      te[15] *= s;\n\n      return this;\n    },\n\n    applyToBufferAttribute: (function () {\n      var v1 = new Vector3();\n\n      return function applyToBufferAttribute(attribute) {\n        for (var i = 0, l = attribute.count; i < l; i++) {\n          v1.x = attribute.getX(i);\n          v1.y = attribute.getY(i);\n          v1.z = attribute.getZ(i);\n\n          v1.applyMatrix4(this);\n\n          attribute.setXYZ(i, v1.x, v1.y, v1.z);\n        }\n\n        return attribute;\n      };\n    })(),\n\n    determinant: function () {\n      var te = this.elements;\n\n      var n11 = te[0],\n        n12 = te[4],\n        n13 = te[8],\n        n14 = te[12];\n      var n21 = te[1],\n        n22 = te[5],\n        n23 = te[9],\n        n24 = te[13];\n      var n31 = te[2],\n        n32 = te[6],\n        n33 = te[10],\n        n34 = te[14];\n      var n41 = te[3],\n        n42 = te[7],\n        n43 = te[11],\n        n44 = te[15];\n\n      //TODO: make this more efficient\n      //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n      return (\n        n41 *\n          (+n14 * n23 * n32 -\n            n13 * n24 * n32 -\n            n14 * n22 * n33 +\n            n12 * n24 * n33 +\n            n13 * n22 * n34 -\n            n12 * n23 * n34) +\n        n42 *\n          (+n11 * n23 * n34 -\n            n11 * n24 * n33 +\n            n14 * n21 * n33 -\n            n13 * n21 * n34 +\n            n13 * n24 * n31 -\n            n14 * n23 * n31) +\n        n43 *\n          (+n11 * n24 * n32 -\n            n11 * n22 * n34 -\n            n14 * n21 * n32 +\n            n12 * n21 * n34 +\n            n14 * n22 * n31 -\n            n12 * n24 * n31) +\n        n44 *\n          (-n13 * n22 * n31 -\n            n11 * n23 * n32 +\n            n11 * n22 * n33 +\n            n13 * n21 * n32 -\n            n12 * n21 * n33 +\n            n12 * n23 * n31)\n      );\n    },\n\n    transpose: function () {\n      var te = this.elements;\n      var tmp;\n\n      tmp = te[1];\n      te[1] = te[4];\n      te[4] = tmp;\n      tmp = te[2];\n      te[2] = te[8];\n      te[8] = tmp;\n      tmp = te[6];\n      te[6] = te[9];\n      te[9] = tmp;\n\n      tmp = te[3];\n      te[3] = te[12];\n      te[12] = tmp;\n      tmp = te[7];\n      te[7] = te[13];\n      te[13] = tmp;\n      tmp = te[11];\n      te[11] = te[14];\n      te[14] = tmp;\n\n      return this;\n    },\n\n    setPosition: function (v) {\n      var te = this.elements;\n\n      te[12] = v.x;\n      te[13] = v.y;\n      te[14] = v.z;\n\n      return this;\n    },\n\n    getInverse: function (m, throwOnDegenerate) {\n      // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n      var te = this.elements,\n        me = m.elements,\n        n11 = me[0],\n        n21 = me[1],\n        n31 = me[2],\n        n41 = me[3],\n        n12 = me[4],\n        n22 = me[5],\n        n32 = me[6],\n        n42 = me[7],\n        n13 = me[8],\n        n23 = me[9],\n        n33 = me[10],\n        n43 = me[11],\n        n14 = me[12],\n        n24 = me[13],\n        n34 = me[14],\n        n44 = me[15],\n        t11 =\n          n23 * n34 * n42 -\n          n24 * n33 * n42 +\n          n24 * n32 * n43 -\n          n22 * n34 * n43 -\n          n23 * n32 * n44 +\n          n22 * n33 * n44,\n        t12 =\n          n14 * n33 * n42 -\n          n13 * n34 * n42 -\n          n14 * n32 * n43 +\n          n12 * n34 * n43 +\n          n13 * n32 * n44 -\n          n12 * n33 * n44,\n        t13 =\n          n13 * n24 * n42 -\n          n14 * n23 * n42 +\n          n14 * n22 * n43 -\n          n12 * n24 * n43 -\n          n13 * n22 * n44 +\n          n12 * n23 * n44,\n        t14 =\n          n14 * n23 * n32 -\n          n13 * n24 * n32 -\n          n14 * n22 * n33 +\n          n12 * n24 * n33 +\n          n13 * n22 * n34 -\n          n12 * n23 * n34;\n\n      var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n      if (det === 0) {\n        var msg =\n          \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\n\n        if (throwOnDegenerate === true) {\n          throw new Error(msg);\n        } else {\n          console.warn(msg);\n        }\n\n        return this.identity();\n      }\n\n      var detInv = 1 / det;\n\n      te[0] = t11 * detInv;\n      te[1] =\n        (n24 * n33 * n41 -\n          n23 * n34 * n41 -\n          n24 * n31 * n43 +\n          n21 * n34 * n43 +\n          n23 * n31 * n44 -\n          n21 * n33 * n44) *\n        detInv;\n      te[2] =\n        (n22 * n34 * n41 -\n          n24 * n32 * n41 +\n          n24 * n31 * n42 -\n          n21 * n34 * n42 -\n          n22 * n31 * n44 +\n          n21 * n32 * n44) *\n        detInv;\n      te[3] =\n        (n23 * n32 * n41 -\n          n22 * n33 * n41 -\n          n23 * n31 * n42 +\n          n21 * n33 * n42 +\n          n22 * n31 * n43 -\n          n21 * n32 * n43) *\n        detInv;\n\n      te[4] = t12 * detInv;\n      te[5] =\n        (n13 * n34 * n41 -\n          n14 * n33 * n41 +\n          n14 * n31 * n43 -\n          n11 * n34 * n43 -\n          n13 * n31 * n44 +\n          n11 * n33 * n44) *\n        detInv;\n      te[6] =\n        (n14 * n32 * n41 -\n          n12 * n34 * n41 -\n          n14 * n31 * n42 +\n          n11 * n34 * n42 +\n          n12 * n31 * n44 -\n          n11 * n32 * n44) *\n        detInv;\n      te[7] =\n        (n12 * n33 * n41 -\n          n13 * n32 * n41 +\n          n13 * n31 * n42 -\n          n11 * n33 * n42 -\n          n12 * n31 * n43 +\n          n11 * n32 * n43) *\n        detInv;\n\n      te[8] = t13 * detInv;\n      te[9] =\n        (n14 * n23 * n41 -\n          n13 * n24 * n41 -\n          n14 * n21 * n43 +\n          n11 * n24 * n43 +\n          n13 * n21 * n44 -\n          n11 * n23 * n44) *\n        detInv;\n      te[10] =\n        (n12 * n24 * n41 -\n          n14 * n22 * n41 +\n          n14 * n21 * n42 -\n          n11 * n24 * n42 -\n          n12 * n21 * n44 +\n          n11 * n22 * n44) *\n        detInv;\n      te[11] =\n        (n13 * n22 * n41 -\n          n12 * n23 * n41 -\n          n13 * n21 * n42 +\n          n11 * n23 * n42 +\n          n12 * n21 * n43 -\n          n11 * n22 * n43) *\n        detInv;\n\n      te[12] = t14 * detInv;\n      te[13] =\n        (n13 * n24 * n31 -\n          n14 * n23 * n31 +\n          n14 * n21 * n33 -\n          n11 * n24 * n33 -\n          n13 * n21 * n34 +\n          n11 * n23 * n34) *\n        detInv;\n      te[14] =\n        (n14 * n22 * n31 -\n          n12 * n24 * n31 -\n          n14 * n21 * n32 +\n          n11 * n24 * n32 +\n          n12 * n21 * n34 -\n          n11 * n22 * n34) *\n        detInv;\n      te[15] =\n        (n12 * n23 * n31 -\n          n13 * n22 * n31 +\n          n13 * n21 * n32 -\n          n11 * n23 * n32 -\n          n12 * n21 * n33 +\n          n11 * n22 * n33) *\n        detInv;\n\n      return this;\n    },\n\n    scale: function (v) {\n      var te = this.elements;\n      var x = v.x,\n        y = v.y,\n        z = v.z;\n\n      te[0] *= x;\n      te[4] *= y;\n      te[8] *= z;\n      te[1] *= x;\n      te[5] *= y;\n      te[9] *= z;\n      te[2] *= x;\n      te[6] *= y;\n      te[10] *= z;\n      te[3] *= x;\n      te[7] *= y;\n      te[11] *= z;\n\n      return this;\n    },\n\n    getMaxScaleOnAxis: function () {\n      var te = this.elements;\n\n      var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n      var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n      var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\n      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n    },\n\n    makeTranslation: function (x, y, z) {\n      this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\n      return this;\n    },\n\n    makeRotationX: function (theta) {\n      var c = Math.cos(theta),\n        s = Math.sin(theta);\n\n      this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\n      return this;\n    },\n\n    makeRotationY: function (theta) {\n      var c = Math.cos(theta),\n        s = Math.sin(theta);\n\n      this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\n      return this;\n    },\n\n    makeRotationZ: function (theta) {\n      var c = Math.cos(theta),\n        s = Math.sin(theta);\n\n      this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\n      return this;\n    },\n\n    makeRotationAxis: function (axis, angle) {\n      // Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n      var c = Math.cos(angle);\n      var s = Math.sin(angle);\n      var t = 1 - c;\n      var x = axis.x,\n        y = axis.y,\n        z = axis.z;\n      var tx = t * x,\n        ty = t * y;\n\n      this.set(\n        tx * x + c,\n        tx * y - s * z,\n        tx * z + s * y,\n        0,\n        tx * y + s * z,\n        ty * y + c,\n        ty * z - s * x,\n        0,\n        tx * z - s * y,\n        ty * z + s * x,\n        t * z * z + c,\n        0,\n        0,\n        0,\n        0,\n        1\n      );\n\n      return this;\n    },\n\n    makeScale: function (x, y, z) {\n      this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\n      return this;\n    },\n\n    makeShear: function (x, y, z) {\n      this.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n\n      return this;\n    },\n\n    compose: function (position, quaternion, scale) {\n      var te = this.elements;\n\n      var x = quaternion._x,\n        y = quaternion._y,\n        z = quaternion._z,\n        w = quaternion._w;\n      var x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n      var xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n      var yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n      var wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n      var sx = scale.x,\n        sy = scale.y,\n        sz = scale.z;\n\n      te[0] = (1 - (yy + zz)) * sx;\n      te[1] = (xy + wz) * sx;\n      te[2] = (xz - wy) * sx;\n      te[3] = 0;\n\n      te[4] = (xy - wz) * sy;\n      te[5] = (1 - (xx + zz)) * sy;\n      te[6] = (yz + wx) * sy;\n      te[7] = 0;\n\n      te[8] = (xz + wy) * sz;\n      te[9] = (yz - wx) * sz;\n      te[10] = (1 - (xx + yy)) * sz;\n      te[11] = 0;\n\n      te[12] = position.x;\n      te[13] = position.y;\n      te[14] = position.z;\n      te[15] = 1;\n\n      return this;\n    },\n\n    decompose: (function () {\n      var vector = new Vector3();\n      var matrix = new Matrix4();\n\n      return function decompose(position, quaternion, scale) {\n        var te = this.elements;\n\n        var sx = vector.set(te[0], te[1], te[2]).length();\n        var sy = vector.set(te[4], te[5], te[6]).length();\n        var sz = vector.set(te[8], te[9], te[10]).length();\n\n        // if determine is negative, we need to invert one scale\n        var det = this.determinant();\n        if (det < 0) sx = -sx;\n\n        position.x = te[12];\n        position.y = te[13];\n        position.z = te[14];\n\n        // scale the rotation part\n        matrix.copy(this);\n\n        var invSX = 1 / sx;\n        var invSY = 1 / sy;\n        var invSZ = 1 / sz;\n\n        matrix.elements[0] *= invSX;\n        matrix.elements[1] *= invSX;\n        matrix.elements[2] *= invSX;\n\n        matrix.elements[4] *= invSY;\n        matrix.elements[5] *= invSY;\n        matrix.elements[6] *= invSY;\n\n        matrix.elements[8] *= invSZ;\n        matrix.elements[9] *= invSZ;\n        matrix.elements[10] *= invSZ;\n\n        quaternion.setFromRotationMatrix(matrix);\n\n        scale.x = sx;\n        scale.y = sy;\n        scale.z = sz;\n\n        return this;\n      };\n    })(),\n\n    makePerspective: function (left, right, top, bottom, near, far) {\n      if (far === undefined) {\n        console.warn(\n          \"THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.\"\n        );\n      }\n\n      var te = this.elements;\n      var x = (2 * near) / (right - left);\n      var y = (2 * near) / (top - bottom);\n\n      var a = (right + left) / (right - left);\n      var b = (top + bottom) / (top - bottom);\n      var c = -(far + near) / (far - near);\n      var d = (-2 * far * near) / (far - near);\n\n      te[0] = x;\n      te[4] = 0;\n      te[8] = a;\n      te[12] = 0;\n      te[1] = 0;\n      te[5] = y;\n      te[9] = b;\n      te[13] = 0;\n      te[2] = 0;\n      te[6] = 0;\n      te[10] = c;\n      te[14] = d;\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = -1;\n      te[15] = 0;\n\n      return this;\n    },\n\n    makeOrthographic: function (left, right, top, bottom, near, far) {\n      var te = this.elements;\n      var w = 1.0 / (right - left);\n      var h = 1.0 / (top - bottom);\n      var p = 1.0 / (far - near);\n\n      var x = (right + left) * w;\n      var y = (top + bottom) * h;\n      var z = (far + near) * p;\n\n      te[0] = 2 * w;\n      te[4] = 0;\n      te[8] = 0;\n      te[12] = -x;\n      te[1] = 0;\n      te[5] = 2 * h;\n      te[9] = 0;\n      te[13] = -y;\n      te[2] = 0;\n      te[6] = 0;\n      te[10] = -2 * p;\n      te[14] = -z;\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = 0;\n      te[15] = 1;\n\n      return this;\n    },\n\n    equals: function (matrix) {\n      var te = this.elements;\n      var me = matrix.elements;\n\n      for (var i = 0; i < 16; i++) {\n        if (te[i] !== me[i]) return false;\n      }\n\n      return true;\n    },\n\n    fromArray: function (array, offset) {\n      if (offset === undefined) offset = 0;\n\n      for (var i = 0; i < 16; i++) {\n        this.elements[i] = array[i + offset];\n      }\n\n      return this;\n    },\n\n    toArray: function (array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n\n      var te = this.elements;\n\n      array[offset] = te[0];\n      array[offset + 1] = te[1];\n      array[offset + 2] = te[2];\n      array[offset + 3] = te[3];\n\n      array[offset + 4] = te[4];\n      array[offset + 5] = te[5];\n      array[offset + 6] = te[6];\n      array[offset + 7] = te[7];\n\n      array[offset + 8] = te[8];\n      array[offset + 9] = te[9];\n      array[offset + 10] = te[10];\n      array[offset + 11] = te[11];\n\n      array[offset + 12] = te[12];\n      array[offset + 13] = te[13];\n      array[offset + 14] = te[14];\n      array[offset + 15] = te[15];\n\n      return array;\n    },\n  });\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author WestLangley / http://github.com/WestLangley\n   * @author bhouston / http://clara.io\n   */\n\n  function Quaternion(x, y, z, w) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this._z = z || 0;\n    this._w = w !== undefined ? w : 1;\n  }\n\n  Object.assign(Quaternion, {\n    slerp: function (qa, qb, qm, t) {\n      return qm.copy(qa).slerp(qb, t);\n    },\n\n    slerpFlat: function (\n      dst,\n      dstOffset,\n      src0,\n      srcOffset0,\n      src1,\n      srcOffset1,\n      t\n    ) {\n      // fuzz-free, array-based Quaternion SLERP operation\n\n      var x0 = src0[srcOffset0 + 0],\n        y0 = src0[srcOffset0 + 1],\n        z0 = src0[srcOffset0 + 2],\n        w0 = src0[srcOffset0 + 3],\n        x1 = src1[srcOffset1 + 0],\n        y1 = src1[srcOffset1 + 1],\n        z1 = src1[srcOffset1 + 2],\n        w1 = src1[srcOffset1 + 3];\n\n      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n        var s = 1 - t,\n          cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n          dir = cos >= 0 ? 1 : -1,\n          sqrSin = 1 - cos * cos;\n\n        // Skip the Slerp for tiny steps to avoid numeric problems:\n        if (sqrSin > Number.EPSILON) {\n          var sin = Math.sqrt(sqrSin),\n            len = Math.atan2(sin, cos * dir);\n\n          s = Math.sin(s * len) / sin;\n          t = Math.sin(t * len) / sin;\n        }\n\n        var tDir = t * dir;\n\n        x0 = x0 * s + x1 * tDir;\n        y0 = y0 * s + y1 * tDir;\n        z0 = z0 * s + z1 * tDir;\n        w0 = w0 * s + w1 * tDir;\n\n        // Normalize in case we just did a lerp:\n        if (s === 1 - t) {\n          var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\n          x0 *= f;\n          y0 *= f;\n          z0 *= f;\n          w0 *= f;\n        }\n      }\n\n      dst[dstOffset] = x0;\n      dst[dstOffset + 1] = y0;\n      dst[dstOffset + 2] = z0;\n      dst[dstOffset + 3] = w0;\n    },\n  });\n\n  Object.defineProperties(Quaternion.prototype, {\n    x: {\n      get: function () {\n        return this._x;\n      },\n\n      set: function (value) {\n        this._x = value;\n        this.onChangeCallback();\n      },\n    },\n\n    y: {\n      get: function () {\n        return this._y;\n      },\n\n      set: function (value) {\n        this._y = value;\n        this.onChangeCallback();\n      },\n    },\n\n    z: {\n      get: function () {\n        return this._z;\n      },\n\n      set: function (value) {\n        this._z = value;\n        this.onChangeCallback();\n      },\n    },\n\n    w: {\n      get: function () {\n        return this._w;\n      },\n\n      set: function (value) {\n        this._w = value;\n        this.onChangeCallback();\n      },\n    },\n  });\n\n  Object.assign(Quaternion.prototype, {\n    set: function (x, y, z, w) {\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      this._w = w;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor(this._x, this._y, this._z, this._w);\n    },\n\n    copy: function (quaternion) {\n      this._x = quaternion.x;\n      this._y = quaternion.y;\n      this._z = quaternion.z;\n      this._w = quaternion.w;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setFromEuler: function (euler, update) {\n      if (!(euler && euler.isEuler)) {\n        throw new Error(\n          \"THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.\"\n        );\n      }\n\n      var x = euler._x,\n        y = euler._y,\n        z = euler._z,\n        order = euler.order;\n\n      // http://www.mathworks.com/matlabcentral/fileexchange/\n      // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n      //\tcontent/SpinCalc.m\n\n      var cos = Math.cos;\n      var sin = Math.sin;\n\n      var c1 = cos(x / 2);\n      var c2 = cos(y / 2);\n      var c3 = cos(z / 2);\n\n      var s1 = sin(x / 2);\n      var s2 = sin(y / 2);\n      var s3 = sin(z / 2);\n\n      if (order === \"XYZ\") {\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n      } else if (order === \"YXZ\") {\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n      } else if (order === \"ZXY\") {\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n      } else if (order === \"ZYX\") {\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n      } else if (order === \"YZX\") {\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n      } else if (order === \"XZY\") {\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n      }\n\n      if (update !== false) this.onChangeCallback();\n\n      return this;\n    },\n\n    setFromAxisAngle: function (axis, angle) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n      // assumes axis is normalized\n\n      var halfAngle = angle / 2,\n        s = Math.sin(halfAngle);\n\n      this._x = axis.x * s;\n      this._y = axis.y * s;\n      this._z = axis.z * s;\n      this._w = Math.cos(halfAngle);\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setFromRotationMatrix: function (m) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n      var te = m.elements,\n        m11 = te[0],\n        m12 = te[4],\n        m13 = te[8],\n        m21 = te[1],\n        m22 = te[5],\n        m23 = te[9],\n        m31 = te[2],\n        m32 = te[6],\n        m33 = te[10],\n        trace = m11 + m22 + m33,\n        s;\n\n      if (trace > 0) {\n        s = 0.5 / Math.sqrt(trace + 1.0);\n\n        this._w = 0.25 / s;\n        this._x = (m32 - m23) * s;\n        this._y = (m13 - m31) * s;\n        this._z = (m21 - m12) * s;\n      } else if (m11 > m22 && m11 > m33) {\n        s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n        this._w = (m32 - m23) / s;\n        this._x = 0.25 * s;\n        this._y = (m12 + m21) / s;\n        this._z = (m13 + m31) / s;\n      } else if (m22 > m33) {\n        s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n        this._w = (m13 - m31) / s;\n        this._x = (m12 + m21) / s;\n        this._y = 0.25 * s;\n        this._z = (m23 + m32) / s;\n      } else {\n        s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n        this._w = (m21 - m12) / s;\n        this._x = (m13 + m31) / s;\n        this._y = (m23 + m32) / s;\n        this._z = 0.25 * s;\n      }\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setFromUnitVectors: (function () {\n      // assumes direction vectors vFrom and vTo are normalized\n\n      var v1 = new Vector3();\n      var r;\n\n      var EPS = 0.000001;\n\n      return function setFromUnitVectors(vFrom, vTo) {\n        if (v1 === undefined) v1 = new Vector3();\n\n        r = vFrom.dot(vTo) + 1;\n\n        if (r < EPS) {\n          r = 0;\n\n          if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n            v1.set(-vFrom.y, vFrom.x, 0);\n          } else {\n            v1.set(0, -vFrom.z, vFrom.y);\n          }\n        } else {\n          v1.crossVectors(vFrom, vTo);\n        }\n\n        this._x = v1.x;\n        this._y = v1.y;\n        this._z = v1.z;\n        this._w = r;\n\n        return this.normalize();\n      };\n    })(),\n\n    angleTo: function (q) {\n      return 2 * Math.acos(Math.abs(_Math.clamp(this.dot(q), -1, 1)));\n    },\n\n    rotateTowards: function (q, step) {\n      var angle = this.angleTo(q);\n\n      if (angle === 0) return this;\n\n      var t = Math.min(1, step / angle);\n\n      this.slerp(q, t);\n\n      return this;\n    },\n\n    inverse: function () {\n      // quaternion is assumed to have unit length\n\n      return this.conjugate();\n    },\n\n    conjugate: function () {\n      this._x *= -1;\n      this._y *= -1;\n      this._z *= -1;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    dot: function (v) {\n      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n    },\n\n    lengthSq: function () {\n      return (\n        this._x * this._x +\n        this._y * this._y +\n        this._z * this._z +\n        this._w * this._w\n      );\n    },\n\n    length: function () {\n      return Math.sqrt(\n        this._x * this._x +\n          this._y * this._y +\n          this._z * this._z +\n          this._w * this._w\n      );\n    },\n\n    normalize: function () {\n      var l = this.length();\n\n      if (l === 0) {\n        this._x = 0;\n        this._y = 0;\n        this._z = 0;\n        this._w = 1;\n      } else {\n        l = 1 / l;\n\n        this._x = this._x * l;\n        this._y = this._y * l;\n        this._z = this._z * l;\n        this._w = this._w * l;\n      }\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    multiply: function (q, p) {\n      if (p !== undefined) {\n        console.warn(\n          \"THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.\"\n        );\n        return this.multiplyQuaternions(q, p);\n      }\n\n      return this.multiplyQuaternions(this, q);\n    },\n\n    premultiply: function (q) {\n      return this.multiplyQuaternions(q, this);\n    },\n\n    multiplyQuaternions: function (a, b) {\n      // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n      var qax = a._x,\n        qay = a._y,\n        qaz = a._z,\n        qaw = a._w;\n      var qbx = b._x,\n        qby = b._y,\n        qbz = b._z,\n        qbw = b._w;\n\n      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    slerp: function (qb, t) {\n      if (t === 0) return this;\n      if (t === 1) return this.copy(qb);\n\n      var x = this._x,\n        y = this._y,\n        z = this._z,\n        w = this._w;\n\n      // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n      var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n      if (cosHalfTheta < 0) {\n        this._w = -qb._w;\n        this._x = -qb._x;\n        this._y = -qb._y;\n        this._z = -qb._z;\n\n        cosHalfTheta = -cosHalfTheta;\n      } else {\n        this.copy(qb);\n      }\n\n      if (cosHalfTheta >= 1.0) {\n        this._w = w;\n        this._x = x;\n        this._y = y;\n        this._z = z;\n\n        return this;\n      }\n\n      var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n      if (sqrSinHalfTheta <= Number.EPSILON) {\n        var s = 1 - t;\n        this._w = s * w + t * this._w;\n        this._x = s * x + t * this._x;\n        this._y = s * y + t * this._y;\n        this._z = s * z + t * this._z;\n\n        return this.normalize();\n      }\n\n      var sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n      var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n      var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n        ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\n      this._w = w * ratioA + this._w * ratioB;\n      this._x = x * ratioA + this._x * ratioB;\n      this._y = y * ratioA + this._y * ratioB;\n      this._z = z * ratioA + this._z * ratioB;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    equals: function (quaternion) {\n      return (\n        quaternion._x === this._x &&\n        quaternion._y === this._y &&\n        quaternion._z === this._z &&\n        quaternion._w === this._w\n      );\n    },\n\n    fromArray: function (array, offset) {\n      if (offset === undefined) offset = 0;\n\n      this._x = array[offset];\n      this._y = array[offset + 1];\n      this._z = array[offset + 2];\n      this._w = array[offset + 3];\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    toArray: function (array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n\n      array[offset] = this._x;\n      array[offset + 1] = this._y;\n      array[offset + 2] = this._z;\n      array[offset + 3] = this._w;\n\n      return array;\n    },\n\n    onChange: function (callback) {\n      this.onChangeCallback = callback;\n\n      return this;\n    },\n\n    onChangeCallback: function () {},\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author kile / http://kile.stravaganza.org/\n   * @author philogb / http://blog.thejit.org/\n   * @author mikael emtinger / http://gomo.se/\n   * @author egraether / http://egraether.com/\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function Vector3(x, y, z) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this._z = z || 0;\n  }\n\n  Object.defineProperties(Vector3.prototype, {\n    x: {\n      get: function () {\n        return this._x;\n      },\n\n      set: function (value) {\n        this._x = value;\n        this.onChangeCallback();\n      },\n    },\n\n    y: {\n      get: function () {\n        return this._y;\n      },\n\n      set: function (value) {\n        this._y = value;\n        this.onChangeCallback();\n      },\n    },\n\n    z: {\n      get: function () {\n        return this._z;\n      },\n\n      set: function (value) {\n        this._z = value;\n        this.onChangeCallback();\n      },\n    },\n  });\n\n  Object.assign(Vector3.prototype, {\n    isVector3: true,\n\n    set: function (x, y, z) {\n      this._x = x;\n      this._y = y;\n      this._z = z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setScalar: function (scalar) {\n      this._x = scalar;\n      this._y = scalar;\n      this._z = scalar;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setX: function (x) {\n      this._x = x;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setY: function (y) {\n      this._y = y;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setZ: function (z) {\n      this._z = z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setComponent: function (index, value) {\n      switch (index) {\n        case 0:\n          this._x = value;\n          break;\n        case 1:\n          this._y = value;\n          break;\n        case 2:\n          this._z = value;\n          break;\n        default:\n          throw new Error(\"index is out of range: \" + index);\n      }\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    getComponent: function (index) {\n      switch (index) {\n        case 0:\n          return this._x;\n        case 1:\n          return this._y;\n        case 2:\n          return this._z;\n        default:\n          throw new Error(\"index is out of range: \" + index);\n      }\n    },\n\n    clone: function () {\n      return new this.constructor(this._x, this._y, this._z);\n    },\n\n    copy: function (v) {\n      this._x = v.x;\n      this._y = v.y;\n      this._z = v.z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    add: function (v, w) {\n      if (w !== undefined) {\n        console.warn(\n          \"THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"\n        );\n        return this.addVectors(v, w);\n      }\n\n      this._x += v.x;\n      this._y += v.y;\n      this._z += v.z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    addScalar: function (s) {\n      this._x += s;\n      this._y += s;\n      this._z += s;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    addVectors: function (a, b) {\n      this._x = a.x + b.x;\n      this._y = a.y + b.y;\n      this._z = a.z + b.z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    addScaledVector: function (v, s) {\n      this._x += v.x * s;\n      this._y += v.y * s;\n      this._z += v.z * s;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    sub: function (v, w) {\n      if (w !== undefined) {\n        console.warn(\n          \"THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"\n        );\n        return this.subVectors(v, w);\n      }\n\n      this._x -= v.x;\n      this._y -= v.y;\n      this._z -= v.z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    subScalar: function (s) {\n      this._x -= s;\n      this._y -= s;\n      this._z -= s;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    subVectors: function (a, b) {\n      this._x = a.x - b.x;\n      this._y = a.y - b.y;\n      this._z = a.z - b.z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    multiply: function (v, w) {\n      if (w !== undefined) {\n        console.warn(\n          \"THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.\"\n        );\n        return this.multiplyVectors(v, w);\n      }\n\n      this._x *= v.x;\n      this._y *= v.y;\n      this._z *= v.z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    multiplyScalar: function (scalar) {\n      this._x *= scalar;\n      this._y *= scalar;\n      this._z *= scalar;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    multiplyVectors: function (a, b) {\n      this._x = a.x * b.x;\n      this._y = a.y * b.y;\n      this._z = a.z * b.z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    applyEuler: (function () {\n      var quaternion = new Quaternion();\n\n      return function applyEuler(euler) {\n        if (!(euler && euler.isEuler)) {\n          console.error(\n            \"THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.\"\n          );\n        }\n\n        return this.applyQuaternion(quaternion.setFromEuler(euler));\n      };\n    })(),\n\n    applyAxisAngle: (function () {\n      var quaternion = new Quaternion();\n\n      return function applyAxisAngle(axis, angle) {\n        return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));\n      };\n    })(),\n\n    applyMatrix3: function (m) {\n      var x = this._x,\n        y = this._y,\n        z = this._z;\n      var e = m.elements;\n\n      this._x = e[0] * x + e[3] * y + e[6] * z;\n      this._y = e[1] * x + e[4] * y + e[7] * z;\n      this._z = e[2] * x + e[5] * y + e[8] * z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    applyMatrix4: function (m) {\n      var x = this._x,\n        y = this._y,\n        z = this._z;\n      var e = m.elements;\n\n      var w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\n      this._x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n      this._y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n      this._z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    applyQuaternion: function (q) {\n      var x = this._x,\n        y = this._y,\n        z = this._z;\n      var qx = q.x,\n        qy = q.y,\n        qz = q.z,\n        qw = q.w;\n\n      // calculate quat * vector\n\n      var ix = qw * x + qy * z - qz * y;\n      var iy = qw * y + qz * x - qx * z;\n      var iz = qw * z + qx * y - qy * x;\n      var iw = -qx * x - qy * y - qz * z;\n\n      // calculate result * inverse quat\n\n      this._x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n      this._y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n      this._z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    project: (function () {\n      var matrix = new Matrix4();\n\n      return function project(camera) {\n        matrix.multiplyMatrices(\n          camera.projectionMatrix,\n          matrix.getInverse(camera.matrixWorld)\n        );\n        return this.applyMatrix4(matrix);\n      };\n    })(),\n\n    unproject: (function () {\n      var matrix = new Matrix4();\n\n      return function unproject(camera) {\n        matrix.multiplyMatrices(\n          camera.matrixWorld,\n          matrix.getInverse(camera.projectionMatrix)\n        );\n        return this.applyMatrix4(matrix);\n      };\n    })(),\n\n    transformDirection: function (m) {\n      // input: THREE.Matrix4 affine matrix\n      // vector interpreted as a direction\n\n      var x = this._x,\n        y = this._y,\n        z = this._z;\n      var e = m.elements;\n\n      this._x = e[0] * x + e[4] * y + e[8] * z;\n      this._y = e[1] * x + e[5] * y + e[9] * z;\n      this._z = e[2] * x + e[6] * y + e[10] * z;\n\n      return this.normalize();\n    },\n\n    divide: function (v) {\n      this._x /= v.x;\n      this._y /= v.y;\n      this._z /= v.z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    divideScalar: function (scalar) {\n      return this.multiplyScalar(1 / scalar);\n    },\n\n    min: function (v) {\n      this._x = Math.min(this._x, v.x);\n      this._y = Math.min(this._y, v.y);\n      this._z = Math.min(this._z, v.z);\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    max: function (v) {\n      this._x = Math.max(this._x, v.x);\n      this._y = Math.max(this._y, v.y);\n      this._z = Math.max(this._z, v.z);\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    clamp: function (min, max) {\n      // assumes min < max, componentwise\n\n      this._x = Math.max(min.x, Math.min(max.x, this._x));\n      this._y = Math.max(min.y, Math.min(max.y, this._y));\n      this._z = Math.max(min.z, Math.min(max.z, this._z));\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    clampScalar: (function () {\n      var min = new Vector3();\n      var max = new Vector3();\n\n      return function clampScalar(minVal, maxVal) {\n        min.set(minVal, minVal, minVal);\n        max.set(maxVal, maxVal, maxVal);\n\n        return this.clamp(min, max);\n      };\n    })(),\n\n    clampLength: function (min, max) {\n      var length = this.length();\n\n      return this.divideScalar(length || 1).multiplyScalar(\n        Math.max(min, Math.min(max, length))\n      );\n    },\n\n    floor: function () {\n      this._x = Math.floor(this._x);\n      this._y = Math.floor(this._y);\n      this._z = Math.floor(this._z);\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    ceil: function () {\n      this._x = Math.ceil(this._x);\n      this._y = Math.ceil(this._y);\n      this._z = Math.ceil(this._z);\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    round: function () {\n      this._x = Math.round(this._x);\n      this._y = Math.round(this._y);\n      this._z = Math.round(this._z);\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    roundToZero: function () {\n      this._x = this._x < 0 ? Math.ceil(this._x) : Math.floor(this._x);\n      this._y = this._y < 0 ? Math.ceil(this._y) : Math.floor(this._y);\n      this._z = this._z < 0 ? Math.ceil(this._z) : Math.floor(this._z);\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    negate: function () {\n      this._x = -this._x;\n      this._y = -this._y;\n      this._z = -this._z;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    dot: function (v) {\n      return this._x * v.x + this._y * v.y + this._z * v.z;\n    },\n\n    // TODO lengthSquared?\n\n    lengthSq: function () {\n      return this._x * this._x + this._y * this._y + this._z * this._z;\n    },\n\n    length: function () {\n      return Math.sqrt(\n        this._x * this._x + this._y * this._y + this._z * this._z\n      );\n    },\n\n    manhattanLength: function () {\n      return Math.abs(this._x) + Math.abs(this._y) + Math.abs(this._z);\n    },\n\n    normalize: function () {\n      return this.divideScalar(this.length() || 1);\n    },\n\n    setLength: function (length) {\n      return this.normalize().multiplyScalar(length);\n    },\n\n    lerp: function (v, alpha) {\n      this._x += (v.x - this._x) * alpha;\n      this._y += (v.y - this._y) * alpha;\n      this._z += (v.z - this._z) * alpha;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    lerpVectors: function (v1, v2, alpha) {\n      return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n    },\n\n    cross: function (v, w) {\n      if (w !== undefined) {\n        console.warn(\n          \"THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.\"\n        );\n        return this.crossVectors(v, w);\n      }\n\n      return this.crossVectors(this, v);\n    },\n\n    crossVectors: function (a, b) {\n      var ax = a.x,\n        ay = a.y,\n        az = a.z;\n      var bx = b.x,\n        by = b.y,\n        bz = b.z;\n\n      this._x = ay * bz - az * by;\n      this._y = az * bx - ax * bz;\n      this._z = ax * by - ay * bx;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    projectOnVector: function (vector) {\n      var scalar = vector.dot(this) / vector.lengthSq();\n\n      return this.copy(vector).multiplyScalar(scalar);\n    },\n\n    projectOnPlane: (function () {\n      var v1 = new Vector3();\n\n      return function projectOnPlane(planeNormal) {\n        v1.copy(this).projectOnVector(planeNormal);\n\n        return this.sub(v1);\n      };\n    })(),\n\n    reflect: (function () {\n      // reflect incident vector off plane orthogonal to normal\n      // normal is assumed to have unit length\n\n      var v1 = new Vector3();\n\n      return function reflect(normal) {\n        return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));\n      };\n    })(),\n\n    angleTo: function (v) {\n      var theta = this.dot(v) / Math.sqrt(this.lengthSq() * v.lengthSq());\n\n      // clamp, to handle numerical problems\n\n      return Math.acos(_Math.clamp(theta, -1, 1));\n    },\n\n    distanceTo: function (v) {\n      return Math.sqrt(this.distanceToSquared(v));\n    },\n\n    distanceToSquared: function (v) {\n      var dx = this._x - v.x,\n        dy = this._y - v.y,\n        dz = this._z - v.z;\n\n      return dx * dx + dy * dy + dz * dz;\n    },\n\n    manhattanDistanceTo: function (v) {\n      return (\n        Math.abs(this._x - v.x) +\n        Math.abs(this._y - v.y) +\n        Math.abs(this._z - v.z)\n      );\n    },\n\n    setFromSpherical: function (s) {\n      var sinPhiRadius = Math.sin(s.phi) * s.radius;\n\n      this._x = sinPhiRadius * Math.sin(s.theta);\n      this._y = Math.cos(s.phi) * s.radius;\n      this._z = sinPhiRadius * Math.cos(s.theta);\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setFromCylindrical: function (c) {\n      this._x = c.radius * Math.sin(c.theta);\n      this._y = c.y;\n      this._z = c.radius * Math.cos(c.theta);\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setFromMatrixPosition: function (m) {\n      var e = m.elements;\n\n      this._x = e[12];\n      this._y = e[13];\n      this._z = e[14];\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setFromMatrixScale: function (m) {\n      var sx = this.setFromMatrixColumn(m, 0).length();\n      var sy = this.setFromMatrixColumn(m, 1).length();\n      var sz = this.setFromMatrixColumn(m, 2).length();\n\n      this._x = sx;\n      this._y = sy;\n      this._z = sz;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setFromMatrixColumn: function (m, index) {\n      return this.fromArray(m.elements, index * 4);\n    },\n\n    equals: function (v) {\n      return v.x === this._x && v.y === this._y && v.z === this._z;\n    },\n\n    fromArray: function (array, offset) {\n      if (offset === undefined) offset = 0;\n\n      this._x = array[offset];\n      this._y = array[offset + 1];\n      this._z = array[offset + 2];\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    toArray: function (array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n\n      array[offset] = this._x;\n      array[offset + 1] = this._y;\n      array[offset + 2] = this._z;\n\n      return array;\n    },\n\n    fromBufferAttribute: function (attribute, index, offset) {\n      if (offset !== undefined) {\n        console.warn(\n          \"THREE.Vector3: offset has been removed from .fromBufferAttribute().\"\n        );\n      }\n\n      this._x = attribute.getX(index);\n      this._y = attribute.getY(index);\n      this._z = attribute.getZ(index);\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    onChange: function (callback) {\n      this.onChangeCallback = callback;\n\n      return this;\n    },\n\n    onChangeCallback: function () {},\n  });\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author WestLangley / http://github.com/WestLangley\n   * @author bhouston / http://clara.io\n   * @author tschw\n   */\n\n  function Matrix3() {\n    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n    if (arguments.length > 0) {\n      console.error(\n        \"THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.\"\n      );\n    }\n  }\n\n  Object.assign(Matrix3.prototype, {\n    isMatrix3: true,\n\n    set: function (n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n      var te = this.elements;\n\n      te[0] = n11;\n      te[1] = n21;\n      te[2] = n31;\n      te[3] = n12;\n      te[4] = n22;\n      te[5] = n32;\n      te[6] = n13;\n      te[7] = n23;\n      te[8] = n33;\n\n      return this;\n    },\n\n    identity: function () {\n      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor().fromArray(this.elements);\n    },\n\n    copy: function (m) {\n      var te = this.elements;\n      var me = m.elements;\n\n      te[0] = me[0];\n      te[1] = me[1];\n      te[2] = me[2];\n      te[3] = me[3];\n      te[4] = me[4];\n      te[5] = me[5];\n      te[6] = me[6];\n      te[7] = me[7];\n      te[8] = me[8];\n\n      return this;\n    },\n\n    setFromMatrix4: function (m) {\n      var me = m.elements;\n\n      this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\n      return this;\n    },\n\n    applyToBufferAttribute: (function () {\n      var v1 = new Vector3();\n\n      return function applyToBufferAttribute(attribute) {\n        for (var i = 0, l = attribute.count; i < l; i++) {\n          v1.x = attribute.getX(i);\n          v1.y = attribute.getY(i);\n          v1.z = attribute.getZ(i);\n\n          v1.applyMatrix3(this);\n\n          attribute.setXYZ(i, v1.x, v1.y, v1.z);\n        }\n\n        return attribute;\n      };\n    })(),\n\n    multiply: function (m) {\n      return this.multiplyMatrices(this, m);\n    },\n\n    premultiply: function (m) {\n      return this.multiplyMatrices(m, this);\n    },\n\n    multiplyMatrices: function (a, b) {\n      var ae = a.elements;\n      var be = b.elements;\n      var te = this.elements;\n\n      var a11 = ae[0],\n        a12 = ae[3],\n        a13 = ae[6];\n      var a21 = ae[1],\n        a22 = ae[4],\n        a23 = ae[7];\n      var a31 = ae[2],\n        a32 = ae[5],\n        a33 = ae[8];\n\n      var b11 = be[0],\n        b12 = be[3],\n        b13 = be[6];\n      var b21 = be[1],\n        b22 = be[4],\n        b23 = be[7];\n      var b31 = be[2],\n        b32 = be[5],\n        b33 = be[8];\n\n      te[0] = a11 * b11 + a12 * b21 + a13 * b31;\n      te[3] = a11 * b12 + a12 * b22 + a13 * b32;\n      te[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\n      te[1] = a21 * b11 + a22 * b21 + a23 * b31;\n      te[4] = a21 * b12 + a22 * b22 + a23 * b32;\n      te[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\n      te[2] = a31 * b11 + a32 * b21 + a33 * b31;\n      te[5] = a31 * b12 + a32 * b22 + a33 * b32;\n      te[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\n      return this;\n    },\n\n    multiplyScalar: function (s) {\n      var te = this.elements;\n\n      te[0] *= s;\n      te[3] *= s;\n      te[6] *= s;\n      te[1] *= s;\n      te[4] *= s;\n      te[7] *= s;\n      te[2] *= s;\n      te[5] *= s;\n      te[8] *= s;\n\n      return this;\n    },\n\n    determinant: function () {\n      var te = this.elements;\n\n      var a = te[0],\n        b = te[1],\n        c = te[2],\n        d = te[3],\n        e = te[4],\n        f = te[5],\n        g = te[6],\n        h = te[7],\n        i = te[8];\n\n      return (\n        a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g\n      );\n    },\n\n    getInverse: function (matrix, throwOnDegenerate) {\n      if (matrix && matrix.isMatrix4) {\n        console.error(\n          \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\"\n        );\n      }\n\n      var me = matrix.elements,\n        te = this.elements,\n        n11 = me[0],\n        n21 = me[1],\n        n31 = me[2],\n        n12 = me[3],\n        n22 = me[4],\n        n32 = me[5],\n        n13 = me[6],\n        n23 = me[7],\n        n33 = me[8],\n        t11 = n33 * n22 - n32 * n23,\n        t12 = n32 * n13 - n33 * n12,\n        t13 = n23 * n12 - n22 * n13,\n        det = n11 * t11 + n21 * t12 + n31 * t13;\n\n      if (det === 0) {\n        var msg =\n          \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\n\n        if (throwOnDegenerate === true) {\n          throw new Error(msg);\n        } else {\n          console.warn(msg);\n        }\n\n        return this.identity();\n      }\n\n      var detInv = 1 / det;\n\n      te[0] = t11 * detInv;\n      te[1] = (n31 * n23 - n33 * n21) * detInv;\n      te[2] = (n32 * n21 - n31 * n22) * detInv;\n\n      te[3] = t12 * detInv;\n      te[4] = (n33 * n11 - n31 * n13) * detInv;\n      te[5] = (n31 * n12 - n32 * n11) * detInv;\n\n      te[6] = t13 * detInv;\n      te[7] = (n21 * n13 - n23 * n11) * detInv;\n      te[8] = (n22 * n11 - n21 * n12) * detInv;\n\n      return this;\n    },\n\n    transpose: function () {\n      var tmp,\n        m = this.elements;\n\n      tmp = m[1];\n      m[1] = m[3];\n      m[3] = tmp;\n      tmp = m[2];\n      m[2] = m[6];\n      m[6] = tmp;\n      tmp = m[5];\n      m[5] = m[7];\n      m[7] = tmp;\n\n      return this;\n    },\n\n    getNormalMatrix: function (matrix4) {\n      return this.setFromMatrix4(matrix4).getInverse(this).transpose();\n    },\n\n    transposeIntoArray: function (r) {\n      var m = this.elements;\n\n      r[0] = m[0];\n      r[1] = m[3];\n      r[2] = m[6];\n      r[3] = m[1];\n      r[4] = m[4];\n      r[5] = m[7];\n      r[6] = m[2];\n      r[7] = m[5];\n      r[8] = m[8];\n\n      return this;\n    },\n\n    setUvTransform: function (tx, ty, sx, sy, rotation, cx, cy) {\n      var c = Math.cos(rotation);\n      var s = Math.sin(rotation);\n\n      this.set(\n        sx * c,\n        sx * s,\n        -sx * (c * cx + s * cy) + cx + tx,\n        -sy * s,\n        sy * c,\n        -sy * (-s * cx + c * cy) + cy + ty,\n        0,\n        0,\n        1\n      );\n    },\n\n    scale: function (sx, sy) {\n      var te = this.elements;\n\n      te[0] *= sx;\n      te[3] *= sx;\n      te[6] *= sx;\n      te[1] *= sy;\n      te[4] *= sy;\n      te[7] *= sy;\n\n      return this;\n    },\n\n    rotate: function (theta) {\n      var c = Math.cos(theta);\n      var s = Math.sin(theta);\n\n      var te = this.elements;\n\n      var a11 = te[0],\n        a12 = te[3],\n        a13 = te[6];\n      var a21 = te[1],\n        a22 = te[4],\n        a23 = te[7];\n\n      te[0] = c * a11 + s * a21;\n      te[3] = c * a12 + s * a22;\n      te[6] = c * a13 + s * a23;\n\n      te[1] = -s * a11 + c * a21;\n      te[4] = -s * a12 + c * a22;\n      te[7] = -s * a13 + c * a23;\n\n      return this;\n    },\n\n    translate: function (tx, ty) {\n      var te = this.elements;\n\n      te[0] += tx * te[2];\n      te[3] += tx * te[5];\n      te[6] += tx * te[8];\n      te[1] += ty * te[2];\n      te[4] += ty * te[5];\n      te[7] += ty * te[8];\n\n      return this;\n    },\n\n    equals: function (matrix) {\n      var te = this.elements;\n      var me = matrix.elements;\n\n      for (var i = 0; i < 9; i++) {\n        if (te[i] !== me[i]) return false;\n      }\n\n      return true;\n    },\n\n    fromArray: function (array, offset) {\n      if (offset === undefined) offset = 0;\n\n      for (var i = 0; i < 9; i++) {\n        this.elements[i] = array[i + offset];\n      }\n\n      return this;\n    },\n\n    toArray: function (array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n\n      var te = this.elements;\n\n      array[offset] = te[0];\n      array[offset + 1] = te[1];\n      array[offset + 2] = te[2];\n\n      array[offset + 3] = te[3];\n      array[offset + 4] = te[4];\n      array[offset + 5] = te[5];\n\n      array[offset + 6] = te[6];\n      array[offset + 7] = te[7];\n      array[offset + 8] = te[8];\n\n      return array;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author szimek / https://github.com/szimek/\n   */\n\n  var ImageUtils = {\n    getDataURL: function (image) {\n      var canvas;\n\n      if (image instanceof HTMLCanvasElement) {\n        canvas = image;\n      } else {\n        if (typeof OffscreenCanvas !== \"undefined\") {\n          canvas = new OffscreenCanvas(image.width, image.height);\n        } else {\n          canvas = document.createElementNS(\n            \"http://www.w3.org/1999/xhtml\",\n            \"canvas\"\n          );\n          canvas.width = image.width;\n          canvas.height = image.height;\n        }\n\n        var context = canvas.getContext(\"2d\");\n\n        if (image instanceof ImageData) {\n          context.putImageData(image, 0, 0);\n        } else {\n          context.drawImage(image, 0, 0, image.width, image.height);\n        }\n      }\n\n      if (canvas.width > 2048 || canvas.height > 2048) {\n        return canvas.toDataURL(\"image/jpeg\", 0.6);\n      } else {\n        return canvas.toDataURL(\"image/png\");\n      }\n    },\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author szimek / https://github.com/szimek/\n   */\n\n  var textureId = 0;\n\n  function Texture(\n    image,\n    mapping,\n    wrapS,\n    wrapT,\n    magFilter,\n    minFilter,\n    format,\n    type,\n    anisotropy,\n    encoding\n  ) {\n    Object.defineProperty(this, \"id\", { value: textureId++ });\n\n    this.uuid = _Math.generateUUID();\n\n    this.name = \"\";\n\n    this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\n    this.mipmaps = [];\n\n    this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\n\n    this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\n    this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\n\n    this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n    this.minFilter =\n      minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;\n\n    this.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n\n    this.format = format !== undefined ? format : RGBAFormat;\n    this.type = type !== undefined ? type : UnsignedByteType;\n\n    this.offset = new Vector2(0, 0);\n    this.repeat = new Vector2(1, 1);\n    this.center = new Vector2(0, 0);\n    this.rotation = 0;\n\n    this.matrixAutoUpdate = true;\n    this.matrix = new Matrix3();\n\n    this.generateMipmaps = true;\n    this.premultiplyAlpha = false;\n    this.flipY = true;\n    this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n    // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n    //\n    // Also changing the encoding after already used by a Material will not automatically make the Material\n    // update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n    this.encoding = encoding !== undefined ? encoding : LinearEncoding;\n\n    this.version = 0;\n    this.onUpdate = null;\n  }\n\n  Texture.DEFAULT_IMAGE = undefined;\n  Texture.DEFAULT_MAPPING = UVMapping;\n\n  Texture.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: Texture,\n\n    isTexture: true,\n\n    updateMatrix: function () {\n      this.matrix.setUvTransform(\n        this.offset.x,\n        this.offset.y,\n        this.repeat.x,\n        this.repeat.y,\n        this.rotation,\n        this.center.x,\n        this.center.y\n      );\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (source) {\n      this.name = source.name;\n\n      this.image = source.image;\n      this.mipmaps = source.mipmaps.slice(0);\n\n      this.mapping = source.mapping;\n\n      this.wrapS = source.wrapS;\n      this.wrapT = source.wrapT;\n\n      this.magFilter = source.magFilter;\n      this.minFilter = source.minFilter;\n\n      this.anisotropy = source.anisotropy;\n\n      this.format = source.format;\n      this.type = source.type;\n\n      this.offset.copy(source.offset);\n      this.repeat.copy(source.repeat);\n      this.center.copy(source.center);\n      this.rotation = source.rotation;\n\n      this.matrixAutoUpdate = source.matrixAutoUpdate;\n      this.matrix.copy(source.matrix);\n\n      this.generateMipmaps = source.generateMipmaps;\n      this.premultiplyAlpha = source.premultiplyAlpha;\n      this.flipY = source.flipY;\n      this.unpackAlignment = source.unpackAlignment;\n      this.encoding = source.encoding;\n\n      return this;\n    },\n\n    toJSON: function (meta) {\n      var isRootObject = meta === undefined || typeof meta === \"string\";\n\n      if (!isRootObject && meta.textures[this.uuid] !== undefined) {\n        return meta.textures[this.uuid];\n      }\n\n      var output = {\n        metadata: {\n          version: 4.5,\n          type: \"Texture\",\n          generator: \"Texture.toJSON\",\n        },\n\n        uuid: this.uuid,\n        name: this.name,\n\n        mapping: this.mapping,\n\n        repeat: [this.repeat.x, this.repeat.y],\n        offset: [this.offset.x, this.offset.y],\n        center: [this.center.x, this.center.y],\n        rotation: this.rotation,\n\n        wrap: [this.wrapS, this.wrapT],\n\n        format: this.format,\n        minFilter: this.minFilter,\n        magFilter: this.magFilter,\n        anisotropy: this.anisotropy,\n\n        flipY: this.flipY,\n      };\n\n      if (this.image !== undefined) {\n        // TODO: Move to THREE.Image\n\n        var image = this.image;\n\n        if (image.uuid === undefined) {\n          image.uuid = _Math.generateUUID(); // UGH\n        }\n\n        if (!isRootObject && meta.images[image.uuid] === undefined) {\n          var url;\n\n          if (Array.isArray(image)) {\n            // process array of images e.g. CubeTexture\n\n            url = [];\n\n            for (var i = 0, l = image.length; i < l; i++) {\n              url.push(ImageUtils.getDataURL(image[i]));\n            }\n          } else {\n            // process single image\n\n            url = ImageUtils.getDataURL(image);\n          }\n\n          meta.images[image.uuid] = {\n            uuid: image.uuid,\n            url: url,\n          };\n        }\n\n        output.image = image.uuid;\n      }\n\n      if (!isRootObject) {\n        meta.textures[this.uuid] = output;\n      }\n\n      return output;\n    },\n\n    dispose: function () {\n      this.dispatchEvent({ type: \"dispose\" });\n    },\n\n    transformUv: function (uv) {\n      if (this.mapping !== UVMapping) return;\n\n      uv.applyMatrix3(this.matrix);\n\n      if (uv.x < 0 || uv.x > 1) {\n        switch (this.wrapS) {\n          case RepeatWrapping:\n            uv.x = uv.x - Math.floor(uv.x);\n            break;\n\n          case ClampToEdgeWrapping:\n            uv.x = uv.x < 0 ? 0 : 1;\n            break;\n\n          case MirroredRepeatWrapping:\n            if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n              uv.x = Math.ceil(uv.x) - uv.x;\n            } else {\n              uv.x = uv.x - Math.floor(uv.x);\n            }\n            break;\n        }\n      }\n\n      if (uv.y < 0 || uv.y > 1) {\n        switch (this.wrapT) {\n          case RepeatWrapping:\n            uv.y = uv.y - Math.floor(uv.y);\n            break;\n\n          case ClampToEdgeWrapping:\n            uv.y = uv.y < 0 ? 0 : 1;\n            break;\n\n          case MirroredRepeatWrapping:\n            if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n              uv.y = Math.ceil(uv.y) - uv.y;\n            } else {\n              uv.y = uv.y - Math.floor(uv.y);\n            }\n            break;\n        }\n      }\n\n      if (this.flipY) {\n        uv.y = 1 - uv.y;\n      }\n    },\n  });\n\n  Object.defineProperty(Texture.prototype, \"needsUpdate\", {\n    set: function (value) {\n      if (value === true) this.version++;\n    },\n  });\n\n  /**\n   * @author supereggbert / http://www.paulbrunt.co.uk/\n   * @author philogb / http://blog.thejit.org/\n   * @author mikael emtinger / http://gomo.se/\n   * @author egraether / http://egraether.com/\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function Vector4(x, y, z, w) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n    this.w = w !== undefined ? w : 1;\n  }\n\n  Object.assign(Vector4.prototype, {\n    isVector4: true,\n\n    set: function (x, y, z, w) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n\n      return this;\n    },\n\n    setScalar: function (scalar) {\n      this.x = scalar;\n      this.y = scalar;\n      this.z = scalar;\n      this.w = scalar;\n\n      return this;\n    },\n\n    setX: function (x) {\n      this.x = x;\n\n      return this;\n    },\n\n    setY: function (y) {\n      this.y = y;\n\n      return this;\n    },\n\n    setZ: function (z) {\n      this.z = z;\n\n      return this;\n    },\n\n    setW: function (w) {\n      this.w = w;\n\n      return this;\n    },\n\n    setComponent: function (index, value) {\n      switch (index) {\n        case 0:\n          this.x = value;\n          break;\n        case 1:\n          this.y = value;\n          break;\n        case 2:\n          this.z = value;\n          break;\n        case 3:\n          this.w = value;\n          break;\n        default:\n          throw new Error(\"index is out of range: \" + index);\n      }\n\n      return this;\n    },\n\n    getComponent: function (index) {\n      switch (index) {\n        case 0:\n          return this.x;\n        case 1:\n          return this.y;\n        case 2:\n          return this.z;\n        case 3:\n          return this.w;\n        default:\n          throw new Error(\"index is out of range: \" + index);\n      }\n    },\n\n    clone: function () {\n      return new this.constructor(this.x, this.y, this.z, this.w);\n    },\n\n    copy: function (v) {\n      this.x = v.x;\n      this.y = v.y;\n      this.z = v.z;\n      this.w = v.w !== undefined ? v.w : 1;\n\n      return this;\n    },\n\n    add: function (v, w) {\n      if (w !== undefined) {\n        console.warn(\n          \"THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"\n        );\n        return this.addVectors(v, w);\n      }\n\n      this.x += v.x;\n      this.y += v.y;\n      this.z += v.z;\n      this.w += v.w;\n\n      return this;\n    },\n\n    addScalar: function (s) {\n      this.x += s;\n      this.y += s;\n      this.z += s;\n      this.w += s;\n\n      return this;\n    },\n\n    addVectors: function (a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n      this.z = a.z + b.z;\n      this.w = a.w + b.w;\n\n      return this;\n    },\n\n    addScaledVector: function (v, s) {\n      this.x += v.x * s;\n      this.y += v.y * s;\n      this.z += v.z * s;\n      this.w += v.w * s;\n\n      return this;\n    },\n\n    sub: function (v, w) {\n      if (w !== undefined) {\n        console.warn(\n          \"THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"\n        );\n        return this.subVectors(v, w);\n      }\n\n      this.x -= v.x;\n      this.y -= v.y;\n      this.z -= v.z;\n      this.w -= v.w;\n\n      return this;\n    },\n\n    subScalar: function (s) {\n      this.x -= s;\n      this.y -= s;\n      this.z -= s;\n      this.w -= s;\n\n      return this;\n    },\n\n    subVectors: function (a, b) {\n      this.x = a.x - b.x;\n      this.y = a.y - b.y;\n      this.z = a.z - b.z;\n      this.w = a.w - b.w;\n\n      return this;\n    },\n\n    multiplyScalar: function (scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      this.z *= scalar;\n      this.w *= scalar;\n\n      return this;\n    },\n\n    applyMatrix4: function (m) {\n      var x = this.x,\n        y = this.y,\n        z = this.z,\n        w = this.w;\n      var e = m.elements;\n\n      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\n      return this;\n    },\n\n    divideScalar: function (scalar) {\n      return this.multiplyScalar(1 / scalar);\n    },\n\n    setAxisAngleFromQuaternion: function (q) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n      // q is assumed to be normalized\n\n      this.w = 2 * Math.acos(q.w);\n\n      var s = Math.sqrt(1 - q.w * q.w);\n\n      if (s < 0.0001) {\n        this.x = 1;\n        this.y = 0;\n        this.z = 0;\n      } else {\n        this.x = q.x / s;\n        this.y = q.y / s;\n        this.z = q.z / s;\n      }\n\n      return this;\n    },\n\n    setAxisAngleFromRotationMatrix: function (m) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n      var angle,\n        x,\n        y,\n        z, // variables for result\n        epsilon = 0.01, // margin to allow for rounding errors\n        epsilon2 = 0.1, // margin to distinguish between 0 and 180 degrees\n        te = m.elements,\n        m11 = te[0],\n        m12 = te[4],\n        m13 = te[8],\n        m21 = te[1],\n        m22 = te[5],\n        m23 = te[9],\n        m31 = te[2],\n        m32 = te[6],\n        m33 = te[10];\n\n      if (\n        Math.abs(m12 - m21) < epsilon &&\n        Math.abs(m13 - m31) < epsilon &&\n        Math.abs(m23 - m32) < epsilon\n      ) {\n        // singularity found\n        // first check for identity matrix which must have +1 for all terms\n        // in leading diagonal and zero in other terms\n\n        if (\n          Math.abs(m12 + m21) < epsilon2 &&\n          Math.abs(m13 + m31) < epsilon2 &&\n          Math.abs(m23 + m32) < epsilon2 &&\n          Math.abs(m11 + m22 + m33 - 3) < epsilon2\n        ) {\n          // this singularity is identity matrix so angle = 0\n\n          this.set(1, 0, 0, 0);\n\n          return this; // zero angle, arbitrary axis\n        }\n\n        // otherwise this singularity is angle = 180\n\n        angle = Math.PI;\n\n        var xx = (m11 + 1) / 2;\n        var yy = (m22 + 1) / 2;\n        var zz = (m33 + 1) / 2;\n        var xy = (m12 + m21) / 4;\n        var xz = (m13 + m31) / 4;\n        var yz = (m23 + m32) / 4;\n\n        if (xx > yy && xx > zz) {\n          // m11 is the largest diagonal term\n\n          if (xx < epsilon) {\n            x = 0;\n            y = 0.707106781;\n            z = 0.707106781;\n          } else {\n            x = Math.sqrt(xx);\n            y = xy / x;\n            z = xz / x;\n          }\n        } else if (yy > zz) {\n          // m22 is the largest diagonal term\n\n          if (yy < epsilon) {\n            x = 0.707106781;\n            y = 0;\n            z = 0.707106781;\n          } else {\n            y = Math.sqrt(yy);\n            x = xy / y;\n            z = yz / y;\n          }\n        } else {\n          // m33 is the largest diagonal term so base result on this\n\n          if (zz < epsilon) {\n            x = 0.707106781;\n            y = 0.707106781;\n            z = 0;\n          } else {\n            z = Math.sqrt(zz);\n            x = xz / z;\n            y = yz / z;\n          }\n        }\n\n        this.set(x, y, z, angle);\n\n        return this; // return 180 deg rotation\n      }\n\n      // as we have reached here there are no singularities so we can handle normally\n\n      var s = Math.sqrt(\n        (m32 - m23) * (m32 - m23) +\n          (m13 - m31) * (m13 - m31) +\n          (m21 - m12) * (m21 - m12)\n      ); // used to normalize\n\n      if (Math.abs(s) < 0.001) s = 1;\n\n      // prevent divide by zero, should not happen if matrix is orthogonal and should be\n      // caught by singularity test above, but I've left it in just in case\n\n      this.x = (m32 - m23) / s;\n      this.y = (m13 - m31) / s;\n      this.z = (m21 - m12) / s;\n      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\n      return this;\n    },\n\n    min: function (v) {\n      this.x = Math.min(this.x, v.x);\n      this.y = Math.min(this.y, v.y);\n      this.z = Math.min(this.z, v.z);\n      this.w = Math.min(this.w, v.w);\n\n      return this;\n    },\n\n    max: function (v) {\n      this.x = Math.max(this.x, v.x);\n      this.y = Math.max(this.y, v.y);\n      this.z = Math.max(this.z, v.z);\n      this.w = Math.max(this.w, v.w);\n\n      return this;\n    },\n\n    clamp: function (min, max) {\n      // assumes min < max, componentwise\n\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\n      this.z = Math.max(min.z, Math.min(max.z, this.z));\n      this.w = Math.max(min.w, Math.min(max.w, this.w));\n\n      return this;\n    },\n\n    clampScalar: (function () {\n      var min, max;\n\n      return function clampScalar(minVal, maxVal) {\n        if (min === undefined) {\n          min = new Vector4();\n          max = new Vector4();\n        }\n\n        min.set(minVal, minVal, minVal, minVal);\n        max.set(maxVal, maxVal, maxVal, maxVal);\n\n        return this.clamp(min, max);\n      };\n    })(),\n\n    clampLength: function (min, max) {\n      var length = this.length();\n\n      return this.divideScalar(length || 1).multiplyScalar(\n        Math.max(min, Math.min(max, length))\n      );\n    },\n\n    floor: function () {\n      this.x = Math.floor(this.x);\n      this.y = Math.floor(this.y);\n      this.z = Math.floor(this.z);\n      this.w = Math.floor(this.w);\n\n      return this;\n    },\n\n    ceil: function () {\n      this.x = Math.ceil(this.x);\n      this.y = Math.ceil(this.y);\n      this.z = Math.ceil(this.z);\n      this.w = Math.ceil(this.w);\n\n      return this;\n    },\n\n    round: function () {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      this.z = Math.round(this.z);\n      this.w = Math.round(this.w);\n\n      return this;\n    },\n\n    roundToZero: function () {\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n      this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\n      return this;\n    },\n\n    negate: function () {\n      this.x = -this.x;\n      this.y = -this.y;\n      this.z = -this.z;\n      this.w = -this.w;\n\n      return this;\n    },\n\n    dot: function (v) {\n      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    },\n\n    lengthSq: function () {\n      return (\n        this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w\n      );\n    },\n\n    length: function () {\n      return Math.sqrt(\n        this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w\n      );\n    },\n\n    manhattanLength: function () {\n      return (\n        Math.abs(this.x) +\n        Math.abs(this.y) +\n        Math.abs(this.z) +\n        Math.abs(this.w)\n      );\n    },\n\n    normalize: function () {\n      return this.divideScalar(this.length() || 1);\n    },\n\n    setLength: function (length) {\n      return this.normalize().multiplyScalar(length);\n    },\n\n    lerp: function (v, alpha) {\n      this.x += (v.x - this.x) * alpha;\n      this.y += (v.y - this.y) * alpha;\n      this.z += (v.z - this.z) * alpha;\n      this.w += (v.w - this.w) * alpha;\n\n      return this;\n    },\n\n    lerpVectors: function (v1, v2, alpha) {\n      return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n    },\n\n    equals: function (v) {\n      return (\n        v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w\n      );\n    },\n\n    fromArray: function (array, offset) {\n      if (offset === undefined) offset = 0;\n\n      this.x = array[offset];\n      this.y = array[offset + 1];\n      this.z = array[offset + 2];\n      this.w = array[offset + 3];\n\n      return this;\n    },\n\n    toArray: function (array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n\n      array[offset] = this.x;\n      array[offset + 1] = this.y;\n      array[offset + 2] = this.z;\n      array[offset + 3] = this.w;\n\n      return array;\n    },\n\n    fromBufferAttribute: function (attribute, index, offset) {\n      if (offset !== undefined) {\n        console.warn(\n          \"THREE.Vector4: offset has been removed from .fromBufferAttribute().\"\n        );\n      }\n\n      this.x = attribute.getX(index);\n      this.y = attribute.getY(index);\n      this.z = attribute.getZ(index);\n      this.w = attribute.getW(index);\n\n      return this;\n    },\n  });\n\n  /**\n   * @author szimek / https://github.com/szimek/\n   * @author alteredq / http://alteredqualia.com/\n   * @author Marius Kintel / https://github.com/kintel\n   */\n\n  /*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n  function WebGLRenderTarget(width, height, options) {\n    this.width = width;\n    this.height = height;\n\n    this.scissor = new Vector4(0, 0, width, height);\n    this.scissorTest = false;\n\n    this.viewport = new Vector4(0, 0, width, height);\n\n    options = options || {};\n\n    if (options.minFilter === undefined) options.minFilter = LinearFilter;\n\n    this.texture = new Texture(\n      undefined,\n      undefined,\n      options.wrapS,\n      options.wrapT,\n      options.magFilter,\n      options.minFilter,\n      options.format,\n      options.type,\n      options.anisotropy,\n      options.encoding\n    );\n\n    this.texture.generateMipmaps =\n      options.generateMipmaps !== undefined ? options.generateMipmaps : true;\n\n    this.depthBuffer =\n      options.depthBuffer !== undefined ? options.depthBuffer : true;\n    this.stencilBuffer =\n      options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n    this.depthTexture =\n      options.depthTexture !== undefined ? options.depthTexture : null;\n  }\n\n  WebGLRenderTarget.prototype = Object.assign(\n    Object.create(EventDispatcher.prototype),\n    {\n      constructor: WebGLRenderTarget,\n\n      isWebGLRenderTarget: true,\n\n      setSize: function (width, height) {\n        if (this.width !== width || this.height !== height) {\n          this.width = width;\n          this.height = height;\n\n          this.dispose();\n        }\n\n        this.viewport.set(0, 0, width, height);\n        this.scissor.set(0, 0, width, height);\n      },\n\n      clone: function () {\n        return new this.constructor().copy(this);\n      },\n\n      copy: function (source) {\n        this.width = source.width;\n        this.height = source.height;\n\n        this.viewport.copy(source.viewport);\n\n        this.texture = source.texture.clone();\n\n        this.depthBuffer = source.depthBuffer;\n        this.stencilBuffer = source.stencilBuffer;\n        this.depthTexture = source.depthTexture;\n\n        return this;\n      },\n\n      dispose: function () {\n        this.dispatchEvent({ type: \"dispose\" });\n      },\n    }\n  );\n\n  /**\n   * @author alteredq / http://alteredqualia.com\n   */\n\n  function WebGLRenderTargetCube(width, height, options) {\n    WebGLRenderTarget.call(this, width, height, options);\n\n    this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n    this.activeMipMapLevel = 0;\n  }\n\n  WebGLRenderTargetCube.prototype = Object.create(WebGLRenderTarget.prototype);\n  WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\n\n  WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function DataTexture(\n    data,\n    width,\n    height,\n    format,\n    type,\n    mapping,\n    wrapS,\n    wrapT,\n    magFilter,\n    minFilter,\n    anisotropy,\n    encoding\n  ) {\n    Texture.call(\n      this,\n      null,\n      mapping,\n      wrapS,\n      wrapT,\n      magFilter,\n      minFilter,\n      format,\n      type,\n      anisotropy,\n      encoding\n    );\n\n    this.image = { data: data, width: width, height: height };\n\n    this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    this.generateMipmaps = false;\n    this.flipY = false;\n    this.unpackAlignment = 1;\n  }\n\n  DataTexture.prototype = Object.create(Texture.prototype);\n  DataTexture.prototype.constructor = DataTexture;\n\n  DataTexture.prototype.isDataTexture = true;\n\n  /**\n   * @author bhouston / http://clara.io\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function Box3(min, max) {\n    this.min =\n      min !== undefined ? min : new Vector3(+Infinity, +Infinity, +Infinity);\n    this.max =\n      max !== undefined ? max : new Vector3(-Infinity, -Infinity, -Infinity);\n  }\n\n  Object.assign(Box3.prototype, {\n    isBox3: true,\n\n    set: function (min, max) {\n      this.min.copy(min);\n      this.max.copy(max);\n\n      return this;\n    },\n\n    setFromArray: function (array) {\n      var minX = +Infinity;\n      var minY = +Infinity;\n      var minZ = +Infinity;\n\n      var maxX = -Infinity;\n      var maxY = -Infinity;\n      var maxZ = -Infinity;\n\n      for (var i = 0, l = array.length; i < l; i += 3) {\n        var x = array[i];\n        var y = array[i + 1];\n        var z = array[i + 2];\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (z < minZ) minZ = z;\n\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        if (z > maxZ) maxZ = z;\n      }\n\n      this.min.set(minX, minY, minZ);\n      this.max.set(maxX, maxY, maxZ);\n\n      return this;\n    },\n\n    setFromBufferAttribute: function (attribute) {\n      var minX = +Infinity;\n      var minY = +Infinity;\n      var minZ = +Infinity;\n\n      var maxX = -Infinity;\n      var maxY = -Infinity;\n      var maxZ = -Infinity;\n\n      for (var i = 0, l = attribute.count; i < l; i++) {\n        var x = attribute.getX(i);\n        var y = attribute.getY(i);\n        var z = attribute.getZ(i);\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (z < minZ) minZ = z;\n\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        if (z > maxZ) maxZ = z;\n      }\n\n      this.min.set(minX, minY, minZ);\n      this.max.set(maxX, maxY, maxZ);\n\n      return this;\n    },\n\n    setFromPoints: function (points) {\n      this.makeEmpty();\n\n      for (var i = 0, il = points.length; i < il; i++) {\n        this.expandByPoint(points[i]);\n      }\n\n      return this;\n    },\n\n    setFromCenterAndSize: (function () {\n      var v1 = new Vector3();\n\n      return function setFromCenterAndSize(center, size) {\n        var halfSize = v1.copy(size).multiplyScalar(0.5);\n\n        this.min.copy(center).sub(halfSize);\n        this.max.copy(center).add(halfSize);\n\n        return this;\n      };\n    })(),\n\n    setFromObject: function (object) {\n      this.makeEmpty();\n\n      return this.expandByObject(object);\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (box) {\n      this.min.copy(box.min);\n      this.max.copy(box.max);\n\n      return this;\n    },\n\n    makeEmpty: function () {\n      this.min.x = this.min.y = this.min.z = +Infinity;\n      this.max.x = this.max.y = this.max.z = -Infinity;\n\n      return this;\n    },\n\n    isEmpty: function () {\n      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n      return (\n        this.max.x < this.min.x ||\n        this.max.y < this.min.y ||\n        this.max.z < this.min.z\n      );\n    },\n\n    getCenter: function (target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Box3: .getCenter() target is now required\");\n        target = new Vector3();\n      }\n\n      return this.isEmpty()\n        ? target.set(0, 0, 0)\n        : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n    },\n\n    getSize: function (target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Box3: .getSize() target is now required\");\n        target = new Vector3();\n      }\n\n      return this.isEmpty()\n        ? target.set(0, 0, 0)\n        : target.subVectors(this.max, this.min);\n    },\n\n    expandByPoint: function (point) {\n      this.min.min(point);\n      this.max.max(point);\n\n      return this;\n    },\n\n    expandByVector: function (vector) {\n      this.min.sub(vector);\n      this.max.add(vector);\n\n      return this;\n    },\n\n    expandByScalar: function (scalar) {\n      this.min.addScalar(-scalar);\n      this.max.addScalar(scalar);\n\n      return this;\n    },\n\n    expandByObject: (function () {\n      // Computes the world-axis-aligned bounding box of an object (including its children),\n      // accounting for both the object's, and children's, world transforms\n\n      var scope, i, l;\n\n      var v1 = new Vector3();\n\n      function traverse(node) {\n        var geometry = node.geometry;\n\n        if (geometry !== undefined) {\n          if (geometry.isGeometry) {\n            var vertices = geometry.vertices;\n\n            for (i = 0, l = vertices.length; i < l; i++) {\n              v1.copy(vertices[i]);\n              v1.applyMatrix4(node.matrixWorld);\n\n              scope.expandByPoint(v1);\n            }\n          } else if (geometry.isBufferGeometry) {\n            var attribute = geometry.attributes.position;\n\n            if (attribute !== undefined) {\n              for (i = 0, l = attribute.count; i < l; i++) {\n                v1.fromBufferAttribute(attribute, i).applyMatrix4(\n                  node.matrixWorld\n                );\n\n                scope.expandByPoint(v1);\n              }\n            }\n          }\n        }\n      }\n\n      return function expandByObject(object) {\n        scope = this;\n\n        object.updateMatrixWorld(true);\n\n        object.traverse(traverse);\n\n        return this;\n      };\n    })(),\n\n    containsPoint: function (point) {\n      return point.x < this.min.x ||\n        point.x > this.max.x ||\n        point.y < this.min.y ||\n        point.y > this.max.y ||\n        point.z < this.min.z ||\n        point.z > this.max.z\n        ? false\n        : true;\n    },\n\n    containsBox: function (box) {\n      return (\n        this.min.x <= box.min.x &&\n        box.max.x <= this.max.x &&\n        this.min.y <= box.min.y &&\n        box.max.y <= this.max.y &&\n        this.min.z <= box.min.z &&\n        box.max.z <= this.max.z\n      );\n    },\n\n    getParameter: function (point, target) {\n      // This can potentially have a divide by zero if the box\n      // has a size dimension of 0.\n\n      if (target === undefined) {\n        console.warn(\"THREE.Box3: .getParameter() target is now required\");\n        target = new Vector3();\n      }\n\n      return target.set(\n        (point.x - this.min.x) / (this.max.x - this.min.x),\n        (point.y - this.min.y) / (this.max.y - this.min.y),\n        (point.z - this.min.z) / (this.max.z - this.min.z)\n      );\n    },\n\n    intersectsBox: function (box) {\n      // using 6 splitting planes to rule out intersections.\n      return box.max.x < this.min.x ||\n        box.min.x > this.max.x ||\n        box.max.y < this.min.y ||\n        box.min.y > this.max.y ||\n        box.max.z < this.min.z ||\n        box.min.z > this.max.z\n        ? false\n        : true;\n    },\n\n    intersectsSphere: (function () {\n      var closestPoint = new Vector3();\n\n      return function intersectsSphere(sphere) {\n        // Find the point on the AABB closest to the sphere center.\n        this.clampPoint(sphere.center, closestPoint);\n\n        // If that point is inside the sphere, the AABB and sphere intersect.\n        return (\n          closestPoint.distanceToSquared(sphere.center) <=\n          sphere.radius * sphere.radius\n        );\n      };\n    })(),\n\n    intersectsPlane: function (plane) {\n      // We compute the minimum and maximum dot product values. If those values\n      // are on the same side (back or front) of the plane, then there is no intersection.\n\n      var min, max;\n\n      if (plane.normal.x > 0) {\n        min = plane.normal.x * this.min.x;\n        max = plane.normal.x * this.max.x;\n      } else {\n        min = plane.normal.x * this.max.x;\n        max = plane.normal.x * this.min.x;\n      }\n\n      if (plane.normal.y > 0) {\n        min += plane.normal.y * this.min.y;\n        max += plane.normal.y * this.max.y;\n      } else {\n        min += plane.normal.y * this.max.y;\n        max += plane.normal.y * this.min.y;\n      }\n\n      if (plane.normal.z > 0) {\n        min += plane.normal.z * this.min.z;\n        max += plane.normal.z * this.max.z;\n      } else {\n        min += plane.normal.z * this.max.z;\n        max += plane.normal.z * this.min.z;\n      }\n\n      return min <= plane.constant && max >= plane.constant;\n    },\n\n    intersectsTriangle: (function () {\n      // triangle centered vertices\n      var v0 = new Vector3();\n      var v1 = new Vector3();\n      var v2 = new Vector3();\n\n      // triangle edge vectors\n      var f0 = new Vector3();\n      var f1 = new Vector3();\n      var f2 = new Vector3();\n\n      var testAxis = new Vector3();\n\n      var center = new Vector3();\n      var extents = new Vector3();\n\n      var triangleNormal = new Vector3();\n\n      function satForAxes(axes) {\n        var i, j;\n\n        for (i = 0, j = axes.length - 3; i <= j; i += 3) {\n          testAxis.fromArray(axes, i);\n          // project the aabb onto the seperating axis\n          var r =\n            extents.x * Math.abs(testAxis.x) +\n            extents.y * Math.abs(testAxis.y) +\n            extents.z * Math.abs(testAxis.z);\n          // project all 3 vertices of the triangle onto the seperating axis\n          var p0 = v0.dot(testAxis);\n          var p1 = v1.dot(testAxis);\n          var p2 = v2.dot(testAxis);\n          // actual test, basically see if either of the most extreme of the triangle points intersects r\n          if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n            // points of the projected triangle are outside the projected half-length of the aabb\n            // the axis is seperating and we can exit\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      return function intersectsTriangle(triangle) {\n        if (this.isEmpty()) {\n          return false;\n        }\n\n        // compute box center and extents\n        this.getCenter(center);\n        extents.subVectors(this.max, center);\n\n        // translate triangle to aabb origin\n        v0.subVectors(triangle.a, center);\n        v1.subVectors(triangle.b, center);\n        v2.subVectors(triangle.c, center);\n\n        // compute edge vectors for triangle\n        f0.subVectors(v1, v0);\n        f1.subVectors(v2, v1);\n        f2.subVectors(v0, v2);\n\n        // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n        // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n        // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n        var axes = [\n          0,\n          -f0.z,\n          f0.y,\n          0,\n          -f1.z,\n          f1.y,\n          0,\n          -f2.z,\n          f2.y,\n          f0.z,\n          0,\n          -f0.x,\n          f1.z,\n          0,\n          -f1.x,\n          f2.z,\n          0,\n          -f2.x,\n          -f0.y,\n          f0.x,\n          0,\n          -f1.y,\n          f1.x,\n          0,\n          -f2.y,\n          f2.x,\n          0,\n        ];\n        if (!satForAxes(axes)) {\n          return false;\n        }\n\n        // test 3 face normals from the aabb\n        axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n        if (!satForAxes(axes)) {\n          return false;\n        }\n\n        // finally testing the face normal of the triangle\n        // use already existing triangle edge vectors here\n        triangleNormal.crossVectors(f0, f1);\n        axes = [triangleNormal.x, triangleNormal.y, triangleNormal.z];\n        return satForAxes(axes);\n      };\n    })(),\n\n    clampPoint: function (point, target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Box3: .clampPoint() target is now required\");\n        target = new Vector3();\n      }\n\n      return target.copy(point).clamp(this.min, this.max);\n    },\n\n    distanceToPoint: (function () {\n      var v1 = new Vector3();\n\n      return function distanceToPoint(point) {\n        var clampedPoint = v1.copy(point).clamp(this.min, this.max);\n        return clampedPoint.sub(point).length();\n      };\n    })(),\n\n    getBoundingSphere: (function () {\n      var v1 = new Vector3();\n\n      return function getBoundingSphere(target) {\n        if (target === undefined) {\n          console.warn(\n            \"THREE.Box3: .getBoundingSphere() target is now required\"\n          );\n          target = new Sphere();\n        }\n\n        this.getCenter(target.center);\n\n        target.radius = this.getSize(v1).length() * 0.5;\n\n        return target;\n      };\n    })(),\n\n    intersect: function (box) {\n      this.min.max(box.min);\n      this.max.min(box.max);\n\n      // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n      if (this.isEmpty()) this.makeEmpty();\n\n      return this;\n    },\n\n    union: function (box) {\n      this.min.min(box.min);\n      this.max.max(box.max);\n\n      return this;\n    },\n\n    applyMatrix4: function (matrix) {\n      // transform of empty box is an empty box.\n      if (this.isEmpty()) return this;\n\n      var m = matrix.elements;\n\n      var xax = m[0] * this.min.x,\n        xay = m[1] * this.min.x,\n        xaz = m[2] * this.min.x;\n      var xbx = m[0] * this.max.x,\n        xby = m[1] * this.max.x,\n        xbz = m[2] * this.max.x;\n      var yax = m[4] * this.min.y,\n        yay = m[5] * this.min.y,\n        yaz = m[6] * this.min.y;\n      var ybx = m[4] * this.max.y,\n        yby = m[5] * this.max.y,\n        ybz = m[6] * this.max.y;\n      var zax = m[8] * this.min.z,\n        zay = m[9] * this.min.z,\n        zaz = m[10] * this.min.z;\n      var zbx = m[8] * this.max.z,\n        zby = m[9] * this.max.z,\n        zbz = m[10] * this.max.z;\n\n      this.min.x =\n        Math.min(xax, xbx) + Math.min(yax, ybx) + Math.min(zax, zbx) + m[12];\n      this.min.y =\n        Math.min(xay, xby) + Math.min(yay, yby) + Math.min(zay, zby) + m[13];\n      this.min.z =\n        Math.min(xaz, xbz) + Math.min(yaz, ybz) + Math.min(zaz, zbz) + m[14];\n      this.max.x =\n        Math.max(xax, xbx) + Math.max(yax, ybx) + Math.max(zax, zbx) + m[12];\n      this.max.y =\n        Math.max(xay, xby) + Math.max(yay, yby) + Math.max(zay, zby) + m[13];\n      this.max.z =\n        Math.max(xaz, xbz) + Math.max(yaz, ybz) + Math.max(zaz, zbz) + m[14];\n\n      return this;\n    },\n\n    translate: function (offset) {\n      this.min.add(offset);\n      this.max.add(offset);\n\n      return this;\n    },\n\n    equals: function (box) {\n      return box.min.equals(this.min) && box.max.equals(this.max);\n    },\n  });\n\n  /**\n   * @author bhouston / http://clara.io\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function Sphere(center, radius) {\n    this.center = center !== undefined ? center : new Vector3();\n    this.radius = radius !== undefined ? radius : 0;\n  }\n\n  Object.assign(Sphere.prototype, {\n    set: function (center, radius) {\n      this.center.copy(center);\n      this.radius = radius;\n\n      return this;\n    },\n\n    setFromPoints: (function () {\n      var box = new Box3();\n\n      return function setFromPoints(points, optionalCenter) {\n        var center = this.center;\n\n        if (optionalCenter !== undefined) {\n          center.copy(optionalCenter);\n        } else {\n          box.setFromPoints(points).getCenter(center);\n        }\n\n        var maxRadiusSq = 0;\n\n        for (var i = 0, il = points.length; i < il; i++) {\n          maxRadiusSq = Math.max(\n            maxRadiusSq,\n            center.distanceToSquared(points[i])\n          );\n        }\n\n        this.radius = Math.sqrt(maxRadiusSq);\n\n        return this;\n      };\n    })(),\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (sphere) {\n      this.center.copy(sphere.center);\n      this.radius = sphere.radius;\n\n      return this;\n    },\n\n    empty: function () {\n      return this.radius <= 0;\n    },\n\n    containsPoint: function (point) {\n      return point.distanceToSquared(this.center) <= this.radius * this.radius;\n    },\n\n    distanceToPoint: function (point) {\n      return point.distanceTo(this.center) - this.radius;\n    },\n\n    intersectsSphere: function (sphere) {\n      var radiusSum = this.radius + sphere.radius;\n\n      return (\n        sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum\n      );\n    },\n\n    intersectsBox: function (box) {\n      return box.intersectsSphere(this);\n    },\n\n    intersectsPlane: function (plane) {\n      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n    },\n\n    clampPoint: function (point, target) {\n      var deltaLengthSq = this.center.distanceToSquared(point);\n\n      if (target === undefined) {\n        console.warn(\"THREE.Sphere: .clampPoint() target is now required\");\n        target = new Vector3();\n      }\n\n      target.copy(point);\n\n      if (deltaLengthSq > this.radius * this.radius) {\n        target.sub(this.center).normalize();\n        target.multiplyScalar(this.radius).add(this.center);\n      }\n\n      return target;\n    },\n\n    getBoundingBox: function (target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Sphere: .getBoundingBox() target is now required\");\n        target = new Box3();\n      }\n\n      target.set(this.center, this.center);\n      target.expandByScalar(this.radius);\n\n      return target;\n    },\n\n    applyMatrix4: function (matrix) {\n      this.center.applyMatrix4(matrix);\n      this.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n      return this;\n    },\n\n    translate: function (offset) {\n      this.center.add(offset);\n\n      return this;\n    },\n\n    equals: function (sphere) {\n      return sphere.center.equals(this.center) && sphere.radius === this.radius;\n    },\n  });\n\n  /**\n   * @author bhouston / http://clara.io\n   */\n\n  function Plane(normal, constant) {\n    // normal is assumed to be normalized\n\n    this.normal = normal !== undefined ? normal : new Vector3(1, 0, 0);\n    this.constant = constant !== undefined ? constant : 0;\n  }\n\n  Object.assign(Plane.prototype, {\n    set: function (normal, constant) {\n      this.normal.copy(normal);\n      this.constant = constant;\n\n      return this;\n    },\n\n    setComponents: function (x, y, z, w) {\n      this.normal.set(x, y, z);\n      this.constant = w;\n\n      return this;\n    },\n\n    setFromNormalAndCoplanarPoint: function (normal, point) {\n      this.normal.copy(normal);\n      this.constant = -point.dot(this.normal);\n\n      return this;\n    },\n\n    setFromCoplanarPoints: (function () {\n      var v1 = new Vector3();\n      var v2 = new Vector3();\n\n      return function setFromCoplanarPoints(a, b, c) {\n        var normal = v1.subVectors(c, b).cross(v2.subVectors(a, b)).normalize();\n\n        // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n        this.setFromNormalAndCoplanarPoint(normal, a);\n\n        return this;\n      };\n    })(),\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (plane) {\n      this.normal.copy(plane.normal);\n      this.constant = plane.constant;\n\n      return this;\n    },\n\n    normalize: function () {\n      // Note: will lead to a divide by zero if the plane is invalid.\n\n      var inverseNormalLength = 1.0 / this.normal.length();\n      this.normal.multiplyScalar(inverseNormalLength);\n      this.constant *= inverseNormalLength;\n\n      return this;\n    },\n\n    negate: function () {\n      this.constant *= -1;\n      this.normal.negate();\n\n      return this;\n    },\n\n    distanceToPoint: function (point) {\n      return this.normal.dot(point) + this.constant;\n    },\n\n    distanceToSphere: function (sphere) {\n      return this.distanceToPoint(sphere.center) - sphere.radius;\n    },\n\n    projectPoint: function (point, target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Plane: .projectPoint() target is now required\");\n        target = new Vector3();\n      }\n\n      return target\n        .copy(this.normal)\n        .multiplyScalar(-this.distanceToPoint(point))\n        .add(point);\n    },\n\n    intersectLine: (function () {\n      var v1 = new Vector3();\n\n      return function intersectLine(line, target) {\n        if (target === undefined) {\n          console.warn(\"THREE.Plane: .intersectLine() target is now required\");\n          target = new Vector3();\n        }\n\n        var direction = line.delta(v1);\n\n        var denominator = this.normal.dot(direction);\n\n        if (denominator === 0) {\n          // line is coplanar, return origin\n          if (this.distanceToPoint(line.start) === 0) {\n            return target.copy(line.start);\n          }\n\n          // Unsure if this is the correct method to handle this case.\n          return undefined;\n        }\n\n        var t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n        if (t < 0 || t > 1) {\n          return undefined;\n        }\n\n        return target.copy(direction).multiplyScalar(t).add(line.start);\n      };\n    })(),\n\n    intersectsLine: function (line) {\n      // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n      var startSign = this.distanceToPoint(line.start);\n      var endSign = this.distanceToPoint(line.end);\n\n      return (startSign < 0 && endSign > 0) || (endSign < 0 && startSign > 0);\n    },\n\n    intersectsBox: function (box) {\n      return box.intersectsPlane(this);\n    },\n\n    intersectsSphere: function (sphere) {\n      return sphere.intersectsPlane(this);\n    },\n\n    coplanarPoint: function (target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Plane: .coplanarPoint() target is now required\");\n        target = new Vector3();\n      }\n\n      return target.copy(this.normal).multiplyScalar(-this.constant);\n    },\n\n    applyMatrix4: (function () {\n      var v1 = new Vector3();\n      var m1 = new Matrix3();\n\n      return function applyMatrix4(matrix, optionalNormalMatrix) {\n        var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix(matrix);\n\n        var referencePoint = this.coplanarPoint(v1).applyMatrix4(matrix);\n\n        var normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\n        this.constant = -referencePoint.dot(normal);\n\n        return this;\n      };\n    })(),\n\n    translate: function (offset) {\n      this.constant -= offset.dot(this.normal);\n\n      return this;\n    },\n\n    equals: function (plane) {\n      return (\n        plane.normal.equals(this.normal) && plane.constant === this.constant\n      );\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author bhouston / http://clara.io\n   */\n\n  function Frustum(p0, p1, p2, p3, p4, p5) {\n    this.planes = [\n      p0 !== undefined ? p0 : new Plane(),\n      p1 !== undefined ? p1 : new Plane(),\n      p2 !== undefined ? p2 : new Plane(),\n      p3 !== undefined ? p3 : new Plane(),\n      p4 !== undefined ? p4 : new Plane(),\n      p5 !== undefined ? p5 : new Plane(),\n    ];\n  }\n\n  Object.assign(Frustum.prototype, {\n    set: function (p0, p1, p2, p3, p4, p5) {\n      var planes = this.planes;\n\n      planes[0].copy(p0);\n      planes[1].copy(p1);\n      planes[2].copy(p2);\n      planes[3].copy(p3);\n      planes[4].copy(p4);\n      planes[5].copy(p5);\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (frustum) {\n      var planes = this.planes;\n\n      for (var i = 0; i < 6; i++) {\n        planes[i].copy(frustum.planes[i]);\n      }\n\n      return this;\n    },\n\n    setFromMatrix: function (m) {\n      var planes = this.planes;\n      var me = m.elements;\n      var me0 = me[0],\n        me1 = me[1],\n        me2 = me[2],\n        me3 = me[3];\n      var me4 = me[4],\n        me5 = me[5],\n        me6 = me[6],\n        me7 = me[7];\n      var me8 = me[8],\n        me9 = me[9],\n        me10 = me[10],\n        me11 = me[11];\n      var me12 = me[12],\n        me13 = me[13],\n        me14 = me[14],\n        me15 = me[15];\n\n      planes[0]\n        .setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12)\n        .normalize();\n      planes[1]\n        .setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12)\n        .normalize();\n      planes[2]\n        .setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13)\n        .normalize();\n      planes[3]\n        .setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13)\n        .normalize();\n      planes[4]\n        .setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14)\n        .normalize();\n      planes[5]\n        .setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14)\n        .normalize();\n\n      return this;\n    },\n\n    intersectsObject: (function () {\n      var sphere = new Sphere();\n\n      return function intersectsObject(object) {\n        var geometry = object.geometry;\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n        sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n        return this.intersectsSphere(sphere);\n      };\n    })(),\n\n    intersectsSprite: (function () {\n      var sphere = new Sphere();\n\n      return function intersectsSprite(sprite) {\n        sphere.center.set(0, 0, 0);\n        sphere.radius = 0.7071067811865476;\n        sphere.applyMatrix4(sprite.matrixWorld);\n\n        return this.intersectsSphere(sphere);\n      };\n    })(),\n\n    intersectsSphere: function (sphere) {\n      var planes = this.planes;\n      var center = sphere.center;\n      var negRadius = -sphere.radius;\n\n      for (var i = 0; i < 6; i++) {\n        var distance = planes[i].distanceToPoint(center);\n\n        if (distance < negRadius) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    intersectsBox: (function () {\n      var p = new Vector3();\n\n      return function intersectsBox(box) {\n        var planes = this.planes;\n\n        for (var i = 0; i < 6; i++) {\n          var plane = planes[i];\n\n          // corner at max distance\n\n          p.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n          p.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n          p.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n          if (plane.distanceToPoint(p) < 0) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n    })(),\n\n    containsPoint: function (point) {\n      var planes = this.planes;\n\n      for (var i = 0; i < 6; i++) {\n        if (planes[i].distanceToPoint(point) < 0) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n  });\n\n  var alphamap_fragment =\n    \"#ifdef USE_ALPHAMAP\\r\\n\\r\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var alphamap_pars_fragment =\n    \"#ifdef USE_ALPHAMAP\\r\\n\\r\\n\\tuniform sampler2D alphaMap;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var alphatest_fragment =\n    \"#ifdef ALPHATEST\\r\\n\\r\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var aomap_fragment =\n    \"#ifdef USE_AOMAP\\r\\n\\r\\n\\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\r\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\r\\n\\r\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\r\\n\\r\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\r\\n\\r\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\r\\n\\r\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var aomap_pars_fragment =\n    \"#ifdef USE_AOMAP\\r\\n\\r\\n\\tuniform sampler2D aoMap;\\r\\n\\tuniform float aoMapIntensity;\\r\\n\\r\\n#endif\";\n\n  var begin_vertex = \"\\r\\nvec3 transformed = vec3( position );\\r\\n\";\n\n  var beginnormal_vertex = \"\\r\\nvec3 objectNormal = vec3( normal );\\r\\n\";\n\n  var bsdfs =\n    'float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\r\\n\\r\\n\\tif( decayExponent > 0.0 ) {\\r\\n\\r\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\r\\n\\r\\n\\t\\t// based upon Frostbite 3 Moving to Physically-based Rendering\\r\\n\\t\\t// page 32, equation 26: E[window1]\\r\\n\\t\\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\r\\n\\t\\t// this is intended to be used on spot and point lights who are represented as luminous intensity\\r\\n\\t\\t// but who must be converted to luminous irradiance for surface lighting calculation\\r\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\r\\n\\t\\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\r\\n\\t\\treturn distanceFalloff * maxDistanceCutoffFactor;\\r\\n\\r\\n#else\\r\\n\\r\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\r\\n\\r\\n#endif\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\treturn 1.0;\\r\\n\\r\\n}\\r\\n\\r\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\r\\n\\r\\n\\treturn RECIPROCAL_PI * diffuseColor;\\r\\n\\r\\n} // validated\\r\\n\\r\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\r\\n\\r\\n\\t// Original approximation by Christophe Schlick \\'94\\r\\n\\t// float fresnel = pow( 1.0 - dotLH, 5.0 );\\r\\n\\r\\n\\t// Optimized variant (presented by Epic at SIGGRAPH \\'13)\\r\\n\\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\\r\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\r\\n\\r\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\r\\n\\r\\n} // validated\\r\\n\\r\\n// Microfacet Models for Refraction through Rough Surfaces - equation (34)\\r\\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\\r\\n// alpha is \"roughness squared\" in Disney’s reparameterization\\r\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\r\\n\\r\\n\\t// geometry term (normalized) = G(l)⋅G(v) / 4(n⋅l)(n⋅v)\\r\\n\\t// also see #12151\\r\\n\\r\\n\\tfloat a2 = pow2( alpha );\\r\\n\\r\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\r\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\r\\n\\r\\n\\treturn 1.0 / ( gl * gv );\\r\\n\\r\\n} // validated\\r\\n\\r\\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\\r\\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\r\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\r\\n\\r\\n\\tfloat a2 = pow2( alpha );\\r\\n\\r\\n\\t// dotNL and dotNV are explicitly swapped. This is not a mistake.\\r\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\r\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\r\\n\\r\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\r\\n\\r\\n}\\r\\n\\r\\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\\r\\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\\r\\n// alpha is \"roughness squared\" in Disney’s reparameterization\\r\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\r\\n\\r\\n\\tfloat a2 = pow2( alpha );\\r\\n\\r\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\\r\\n\\r\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\r\\n\\r\\n}\\r\\n\\r\\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\\r\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\r\\n\\r\\n\\tfloat alpha = pow2( roughness ); // UE4\\'s roughness\\r\\n\\r\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\r\\n\\r\\n\\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\r\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\r\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\r\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\r\\n\\r\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\r\\n\\r\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\r\\n\\r\\n\\tfloat D = D_GGX( alpha, dotNH );\\r\\n\\r\\n\\treturn F * ( G * D );\\r\\n\\r\\n} // validated\\r\\n\\r\\n// Rect Area Light\\r\\n\\r\\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\\r\\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\\r\\n// code: https://github.com/selfshadow/ltc_code/\\r\\n\\r\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\r\\n\\r\\n\\tconst float LUT_SIZE  = 64.0;\\r\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\r\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\r\\n\\r\\n\\tfloat dotNV = saturate( dot( N, V ) );\\r\\n\\r\\n\\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\\r\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\r\\n\\r\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\r\\n\\r\\n\\treturn uv;\\r\\n\\r\\n}\\r\\n\\r\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\r\\n\\r\\n\\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\\r\\n\\t// An approximation of the form factor of a horizon-clipped rectangle.\\r\\n\\r\\n\\tfloat l = length( f );\\r\\n\\r\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\r\\n\\r\\n}\\r\\n\\r\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\r\\n\\r\\n\\tfloat x = dot( v1, v2 );\\r\\n\\r\\n\\tfloat y = abs( x );\\r\\n\\r\\n\\t// rational polynomial approximation to theta / sin( theta ) / 2PI\\r\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\r\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\r\\n\\tfloat v = a / b;\\r\\n\\r\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\r\\n\\r\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\r\\n\\r\\n}\\r\\n\\r\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\r\\n\\r\\n\\t// bail if point is on back side of plane of light\\r\\n\\t// assumes ccw winding order of light vertices\\r\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\r\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\r\\n\\tvec3 lightNormal = cross( v1, v2 );\\r\\n\\r\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\r\\n\\r\\n\\t// construct orthonormal basis around N\\r\\n\\tvec3 T1, T2;\\r\\n\\tT1 = normalize( V - N * dot( V, N ) );\\r\\n\\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\\r\\n\\r\\n\\t// compute transform\\r\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\r\\n\\r\\n\\t// transform rect\\r\\n\\tvec3 coords[ 4 ];\\r\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\r\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\r\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\r\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\r\\n\\r\\n\\t// project rect onto sphere\\r\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\r\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\r\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\r\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\r\\n\\r\\n\\t// calculate vector form factor\\r\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\r\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\r\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\r\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\r\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\r\\n\\r\\n\\t// adjust for horizon clipping\\r\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\r\\n\\r\\n\\r\\n\\r\\n\\treturn vec3( result );\\r\\n\\r\\n}\\r\\n\\r\\n// End Rect Area Light\\r\\n\\r\\n// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\\r\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\r\\n\\r\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\r\\n\\r\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\r\\n\\r\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\r\\n\\r\\n\\tvec4 r = roughness * c0 + c1;\\r\\n\\r\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\r\\n\\r\\n\\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\r\\n\\r\\n\\treturn specularColor * AB.x + AB.y;\\r\\n\\r\\n} // validated\\r\\n\\r\\n\\r\\nfloat G_BlinnPhong_Implicit( ) {\\r\\n\\r\\n\\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\\r\\n\\treturn 0.25;\\r\\n\\r\\n}\\r\\n\\r\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\r\\n\\r\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\r\\n\\r\\n}\\r\\n\\r\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\r\\n\\r\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\r\\n\\r\\n\\t//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\r\\n\\t//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\r\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\r\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\r\\n\\r\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\r\\n\\r\\n\\tfloat G = G_BlinnPhong_Implicit( );\\r\\n\\r\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\r\\n\\r\\n\\treturn F * ( G * D );\\r\\n\\r\\n} // validated\\r\\n\\r\\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\\r\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\r\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\r\\n}\\r\\n\\r\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\r\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\r\\n}\\r\\n';\n\n  var bumpmap_pars_fragment =\n    \"#ifdef USE_BUMPMAP\\r\\n\\r\\n\\tuniform sampler2D bumpMap;\\r\\n\\tuniform float bumpScale;\\r\\n\\r\\n\\t// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\\r\\n\\t// http://api.unrealengine.com/attachments/Engine/Rendering/LightingAndShadows/BumpMappingWithoutTangentSpace/mm_sfgrad_bump.pdf\\r\\n\\r\\n\\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\\r\\n\\r\\n\\tvec2 dHdxy_fwd() {\\r\\n\\r\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\r\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\r\\n\\r\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\r\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\r\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\r\\n\\r\\n\\t\\treturn vec2( dBx, dBy );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\r\\n\\r\\n\\t\\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\\r\\n\\r\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\r\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\r\\n\\t\\tvec3 vN = surf_norm;\\t\\t// normalized\\r\\n\\r\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\r\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\r\\n\\r\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\r\\n\\r\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\r\\n\\r\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\r\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\";\n\n  var clipping_planes_fragment =\n    \"#if NUM_CLIPPING_PLANES > 0\\r\\n\\r\\n\\tvec4 plane;\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\r\\n\\r\\n\\t\\tplane = clippingPlanes[ i ];\\r\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\r\\n\\r\\n\\t\\tbool clipped = true;\\r\\n\\r\\n\\t\\t#pragma unroll_loop\\r\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\r\\n\\r\\n\\t\\t\\tplane = clippingPlanes[ i ];\\r\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif ( clipped ) discard;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var clipping_planes_pars_fragment =\n    \"#if NUM_CLIPPING_PLANES > 0\\r\\n\\r\\n\\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\r\\n\\t\\tvarying vec3 vViewPosition;\\r\\n\\t#endif\\r\\n\\r\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\r\\n\\r\\n#endif\\r\\n\";\n\n  var clipping_planes_pars_vertex =\n    \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\r\\n\\tvarying vec3 vViewPosition;\\r\\n#endif\\r\\n\";\n\n  var clipping_planes_vertex =\n    \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\r\\n\\tvViewPosition = - mvPosition.xyz;\\r\\n#endif\\r\\n\\r\\n\";\n\n  var color_fragment =\n    \"#ifdef USE_COLOR\\r\\n\\r\\n\\tdiffuseColor.rgb *= vColor;\\r\\n\\r\\n#endif\";\n\n  var color_pars_fragment =\n    \"#ifdef USE_COLOR\\r\\n\\r\\n\\tvarying vec3 vColor;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var color_pars_vertex =\n    \"#ifdef USE_COLOR\\r\\n\\r\\n\\tvarying vec3 vColor;\\r\\n\\r\\n#endif\";\n\n  var color_vertex =\n    \"#ifdef USE_COLOR\\r\\n\\r\\n\\tvColor.xyz = color.xyz;\\r\\n\\r\\n#endif\";\n\n  var common =\n    \"#define PI 3.14159265359\\r\\n#define PI2 6.28318530718\\r\\n#define PI_HALF 1.5707963267949\\r\\n#define RECIPROCAL_PI 0.31830988618\\r\\n#define RECIPROCAL_PI2 0.15915494\\r\\n#define LOG2 1.442695\\r\\n#define EPSILON 1e-6\\r\\n\\r\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\r\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\r\\n\\r\\nfloat pow2( const in float x ) { return x*x; }\\r\\nfloat pow3( const in float x ) { return x*x*x; }\\r\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\r\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\r\\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\\r\\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\\r\\nhighp float rand( const in vec2 uv ) {\\r\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\r\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\r\\n\\treturn fract(sin(sn) * c);\\r\\n}\\r\\n\\r\\nstruct IncidentLight {\\r\\n\\tvec3 color;\\r\\n\\tvec3 direction;\\r\\n\\tbool visible;\\r\\n};\\r\\n\\r\\nstruct ReflectedLight {\\r\\n\\tvec3 directDiffuse;\\r\\n\\tvec3 directSpecular;\\r\\n\\tvec3 indirectDiffuse;\\r\\n\\tvec3 indirectSpecular;\\r\\n};\\r\\n\\r\\nstruct GeometricContext {\\r\\n\\tvec3 position;\\r\\n\\tvec3 normal;\\r\\n\\tvec3 viewDir;\\r\\n};\\r\\n\\r\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\r\\n\\r\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\r\\n\\r\\n}\\r\\n\\r\\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\\r\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\r\\n\\r\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\r\\n\\r\\n}\\r\\n\\r\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\r\\n\\r\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\r\\n\\r\\n\\treturn - distance * planeNormal + point;\\r\\n\\r\\n}\\r\\n\\r\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\r\\n\\r\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\r\\n\\r\\n}\\r\\n\\r\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\r\\n\\r\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\r\\n\\r\\n}\\r\\n\\r\\nmat3 transposeMat3( const in mat3 m ) {\\r\\n\\r\\n\\tmat3 tmp;\\r\\n\\r\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\r\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\r\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\r\\n\\r\\n\\treturn tmp;\\r\\n\\r\\n}\\r\\n\\r\\n// https://en.wikipedia.org/wiki/Relative_luminance\\r\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\r\\n\\r\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\r\\n\\r\\n\\treturn dot( weights, color.rgb );\\r\\n\\r\\n}\\r\\n\";\n\n  var cube_uv_reflection_fragment =\n    \"#ifdef ENVMAP_TYPE_CUBE_UV\\r\\n\\r\\n#define cubeUV_textureSize (1024.0)\\r\\n\\r\\nint getFaceFromDirection(vec3 direction) {\\r\\n\\tvec3 absDirection = abs(direction);\\r\\n\\tint face = -1;\\r\\n\\tif( absDirection.x > absDirection.z ) {\\r\\n\\t\\tif(absDirection.x > absDirection.y )\\r\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\r\\n\\t\\telse\\r\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\tif(absDirection.z > absDirection.y )\\r\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\r\\n\\t\\telse\\r\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\r\\n\\t}\\r\\n\\treturn face;\\r\\n}\\r\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\r\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\r\\n\\r\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\r\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\r\\n\\tfloat dxRoughness = dFdx(roughness);\\r\\n\\tfloat dyRoughness = dFdy(roughness);\\r\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\r\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\r\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\r\\n\\t// Clamp the value to the max mip level counts. hard coded to 6 mips\\r\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\r\\n\\tfloat mipLevel = 0.5 * log2(d);\\r\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\r\\n}\\r\\n\\r\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\r\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\r\\n\\r\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\r\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\r\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\r\\n\\r\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\r\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\r\\n\\t// float powScale = exp2(roughnessLevel + mipLevel);\\r\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\r\\n\\t// float scale =  1.0 / exp2(roughnessLevel + 2.0 + mipLevel);\\r\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\r\\n\\t// float mipOffset = 0.75*(1.0 - 1.0/exp2(mipLevel))/exp2(roughnessLevel);\\r\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\r\\n\\r\\n\\tbool bRes = mipLevel == 0.0;\\r\\n\\tscale =  bRes && (scale < a) ? a : scale;\\r\\n\\r\\n\\tvec3 r;\\r\\n\\tvec2 offset;\\r\\n\\tint face = getFaceFromDirection(direction);\\r\\n\\r\\n\\tfloat rcpPowScale = 1.0 / powScale;\\r\\n\\r\\n\\tif( face == 0) {\\r\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\r\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\r\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\r\\n\\t}\\r\\n\\telse if( face == 1) {\\r\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\r\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\r\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\r\\n\\t}\\r\\n\\telse if( face == 2) {\\r\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\r\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\r\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\r\\n\\t}\\r\\n\\telse if( face == 3) {\\r\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\r\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\r\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\r\\n\\t}\\r\\n\\telse if( face == 4) {\\r\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\r\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\r\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\r\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\r\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\r\\n\\t}\\r\\n\\tr = normalize(r);\\r\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\r\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\r\\n\\tvec2 base = offset + vec2( texelOffset );\\r\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\r\\n}\\r\\n\\r\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\r\\n\\r\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\r\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\r\\n\\tfloat r1 = floor(roughnessVal);\\r\\n\\tfloat r2 = r1 + 1.0;\\r\\n\\tfloat t = fract(roughnessVal);\\r\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\r\\n\\tfloat s = mipInfo.y;\\r\\n\\tfloat level0 = mipInfo.x;\\r\\n\\tfloat level1 = level0 + 1.0;\\r\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\r\\n\\r\\n\\t// round to nearest mipmap if we are not interpolating.\\r\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\r\\n\\r\\n\\t// Tri linear interpolation.\\r\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\r\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\r\\n\\r\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\r\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\r\\n\\r\\n\\tvec4 result = mix(color10, color20, t);\\r\\n\\r\\n\\treturn vec4(result.rgb, 1.0);\\r\\n}\\r\\n\\r\\n#endif\\r\\n\";\n\n  var defaultnormal_vertex =\n    \"vec3 transformedNormal = normalMatrix * objectNormal;\\r\\n\\r\\n#ifdef FLIP_SIDED\\r\\n\\r\\n\\ttransformedNormal = - transformedNormal;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var displacementmap_pars_vertex =\n    \"#ifdef USE_DISPLACEMENTMAP\\r\\n\\r\\n\\tuniform sampler2D displacementMap;\\r\\n\\tuniform float displacementScale;\\r\\n\\tuniform float displacementBias;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var displacementmap_vertex =\n    \"#ifdef USE_DISPLACEMENTMAP\\r\\n\\r\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\r\\n\\r\\n#endif\\r\\n\";\n\n  var emissivemap_fragment =\n    \"#ifdef USE_EMISSIVEMAP\\r\\n\\r\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\r\\n\\r\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\r\\n\\r\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var emissivemap_pars_fragment =\n    \"#ifdef USE_EMISSIVEMAP\\r\\n\\r\\n\\tuniform sampler2D emissiveMap;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var encodings_fragment =\n    \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\r\\n\";\n\n  var encodings_pars_fragment =\n    \"// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\\r\\n\\r\\nvec4 LinearToLinear( in vec4 value ) {\\r\\n\\treturn value;\\r\\n}\\r\\n\\r\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\r\\n\\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\r\\n}\\r\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\r\\n\\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\r\\n}\\r\\n\\r\\nvec4 sRGBToLinear( in vec4 value ) {\\r\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\r\\n}\\r\\nvec4 LinearTosRGB( in vec4 value ) {\\r\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\r\\n}\\r\\n\\r\\nvec4 RGBEToLinear( in vec4 value ) {\\r\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\r\\n}\\r\\nvec4 LinearToRGBE( in vec4 value ) {\\r\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\r\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\r\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\r\\n//  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\\r\\n}\\r\\n\\r\\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\\r\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\r\\n\\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\\r\\n}\\r\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\r\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\r\\n\\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\r\\n\\tM            = ceil( M * 255.0 ) / 255.0;\\r\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\r\\n}\\r\\n\\r\\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\\r\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\r\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\r\\n}\\r\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\r\\n\\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\\r\\n\\tfloat D      = max( maxRange / maxRGB, 1.0 );\\r\\n\\tD            = min( floor( D ) / 255.0, 1.0 );\\r\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\r\\n}\\r\\n\\r\\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\\r\\n\\r\\n// M matrix, for encoding\\r\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\r\\nvec4 LinearToLogLuv( in vec4 value )  {\\r\\n\\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\r\\n\\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\r\\n\\tvec4 vResult;\\r\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\r\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\r\\n\\tvResult.w = fract(Le);\\r\\n\\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\r\\n\\treturn vResult;\\r\\n}\\r\\n\\r\\n// Inverse M matrix, for decoding\\r\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\r\\nvec4 LogLuvToLinear( in vec4 value ) {\\r\\n\\tfloat Le = value.z * 255.0 + value.w;\\r\\n\\tvec3 Xp_Y_XYZp;\\r\\n\\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\r\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\r\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\r\\n\\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\r\\n\\treturn vec4( max(vRGB, 0.0), 1.0 );\\r\\n}\\r\\n\";\n\n  var envmap_fragment =\n    \"#ifdef USE_ENVMAP\\r\\n\\r\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\r\\n\\r\\n\\t\\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\r\\n\\r\\n\\t\\t// Transforming Normal Vectors with the Inverse Transformation\\r\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\r\\n\\r\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\r\\n\\r\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\r\\n\\r\\n\\t\\t#else\\r\\n\\r\\n\\t\\t\\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\tvec3 reflectVec = vReflect;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#ifdef ENVMAP_TYPE_CUBE\\r\\n\\r\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\r\\n\\r\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\r\\n\\r\\n\\t\\tvec2 sampleUV;\\r\\n\\r\\n\\t\\treflectVec = normalize( reflectVec );\\r\\n\\r\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\r\\n\\r\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\r\\n\\r\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\r\\n\\r\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\r\\n\\r\\n\\t\\treflectVec = normalize( reflectVec );\\r\\n\\r\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\r\\n\\r\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\tvec4 envColor = vec4( 0.0 );\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\tenvColor = envMapTexelToLinear( envColor );\\r\\n\\r\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\r\\n\\r\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\r\\n\\r\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\r\\n\\r\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\r\\n\\r\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\r\\n\\r\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var envmap_pars_fragment =\n    \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\r\\n\\tuniform float reflectivity;\\r\\n\\tuniform float envMapIntensity;\\r\\n#endif\\r\\n\\r\\n#ifdef USE_ENVMAP\\r\\n\\r\\n\\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\r\\n\\t\\tvarying vec3 vWorldPosition;\\r\\n\\t#endif\\r\\n\\r\\n\\t#ifdef ENVMAP_TYPE_CUBE\\r\\n\\t\\tuniform samplerCube envMap;\\r\\n\\t#else\\r\\n\\t\\tuniform sampler2D envMap;\\r\\n\\t#endif\\r\\n\\tuniform float flipEnvMap;\\r\\n\\tuniform int maxMipLevel;\\r\\n\\r\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\r\\n\\t\\tuniform float refractionRatio;\\r\\n\\t#else\\r\\n\\t\\tvarying vec3 vReflect;\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var envmap_pars_vertex =\n    \"#ifdef USE_ENVMAP\\r\\n\\r\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\r\\n\\t\\tvarying vec3 vWorldPosition;\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\tvarying vec3 vReflect;\\r\\n\\t\\tuniform float refractionRatio;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var envmap_vertex =\n    \"#ifdef USE_ENVMAP\\r\\n\\r\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\r\\n\\r\\n\\t\\tvWorldPosition = worldPosition.xyz;\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\r\\n\\r\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\r\\n\\r\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\r\\n\\r\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\r\\n\\r\\n\\t\\t#else\\r\\n\\r\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var fog_vertex = \"\\r\\n#ifdef USE_FOG\\r\\nfogDepth = -mvPosition.z;\\r\\n#endif\";\n\n  var fog_pars_vertex =\n    \"#ifdef USE_FOG\\r\\n\\r\\n  varying float fogDepth;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var fog_fragment =\n    \"#ifdef USE_FOG\\r\\n\\r\\n\\t#ifdef FOG_EXP2\\r\\n\\r\\n\\t\\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\r\\n\\r\\n#endif\\r\\n\";\n\n  var fog_pars_fragment =\n    \"#ifdef USE_FOG\\r\\n\\r\\n\\tuniform vec3 fogColor;\\r\\n\\tvarying float fogDepth;\\r\\n\\r\\n\\t#ifdef FOG_EXP2\\r\\n\\r\\n\\t\\tuniform float fogDensity;\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\tuniform float fogNear;\\r\\n\\t\\tuniform float fogFar;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var gradientmap_pars_fragment =\n    \"#ifdef TOON\\r\\n\\r\\n\\tuniform sampler2D gradientMap;\\r\\n\\r\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\r\\n\\r\\n\\t\\t// dotNL will be from -1.0 to 1.0\\r\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\r\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\r\\n\\r\\n\\t\\t#ifdef USE_GRADIENTMAP\\r\\n\\r\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\r\\n\\r\\n\\t\\t#else\\r\\n\\r\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\";\n\n  var lightmap_fragment =\n    \"#ifdef USE_LIGHTMAP\\r\\n\\r\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage\\r\\n\\r\\n#endif\\r\\n\";\n\n  var lightmap_pars_fragment =\n    \"#ifdef USE_LIGHTMAP\\r\\n\\r\\n\\tuniform sampler2D lightMap;\\r\\n\\tuniform float lightMapIntensity;\\r\\n\\r\\n#endif\";\n\n  var lights_lambert_vertex =\n    \"vec3 diffuse = vec3( 1.0 );\\r\\n\\r\\nGeometricContext geometry;\\r\\ngeometry.position = mvPosition.xyz;\\r\\ngeometry.normal = normalize( transformedNormal );\\r\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\r\\n\\r\\nGeometricContext backGeometry;\\r\\nbackGeometry.position = geometry.position;\\r\\nbackGeometry.normal = -geometry.normal;\\r\\nbackGeometry.viewDir = geometry.viewDir;\\r\\n\\r\\nvLightFront = vec3( 0.0 );\\r\\n\\r\\n#ifdef DOUBLE_SIDED\\r\\n\\tvLightBack = vec3( 0.0 );\\r\\n#endif\\r\\n\\r\\nIncidentLight directLight;\\r\\nfloat dotNL;\\r\\nvec3 directLightColor_Diffuse;\\r\\n\\r\\n#if NUM_POINT_LIGHTS > 0\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\r\\n\\r\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\r\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\r\\n\\r\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\r\\n\\r\\n\\t\\t#ifdef DOUBLE_SIDED\\r\\n\\r\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\n#if NUM_SPOT_LIGHTS > 0\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\r\\n\\r\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\r\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\r\\n\\r\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\r\\n\\r\\n\\t\\t#ifdef DOUBLE_SIDED\\r\\n\\r\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\r\\n\\r\\n\\t\\t#endif\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\n\\r\\n\\r\\n#if NUM_DIR_LIGHTS > 0\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\r\\n\\r\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\r\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\r\\n\\r\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\r\\n\\r\\n\\t\\t#ifdef DOUBLE_SIDED\\r\\n\\r\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\n#if NUM_HEMI_LIGHTS > 0\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\r\\n\\r\\n\\t\\t#ifdef DOUBLE_SIDED\\r\\n\\r\\n\\t\\t\\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\";\n\n  var lights_pars_begin =\n    \"uniform vec3 ambientLightColor;\\r\\n\\r\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\r\\n\\r\\n\\tvec3 irradiance = ambientLightColor;\\r\\n\\r\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\r\\n\\r\\n\\t\\tirradiance *= PI;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\treturn irradiance;\\r\\n\\r\\n}\\r\\n\\r\\n#if NUM_DIR_LIGHTS > 0\\r\\n\\r\\n\\tstruct DirectionalLight {\\r\\n\\t\\tvec3 direction;\\r\\n\\t\\tvec3 color;\\r\\n\\r\\n\\t\\tint shadow;\\r\\n\\t\\tfloat shadowBias;\\r\\n\\t\\tfloat shadowRadius;\\r\\n\\t\\tvec2 shadowMapSize;\\r\\n\\t};\\r\\n\\r\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\r\\n\\r\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\r\\n\\r\\n\\t\\tdirectLight.color = directionalLight.color;\\r\\n\\t\\tdirectLight.direction = directionalLight.direction;\\r\\n\\t\\tdirectLight.visible = true;\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\n\\r\\n#if NUM_POINT_LIGHTS > 0\\r\\n\\r\\n\\tstruct PointLight {\\r\\n\\t\\tvec3 position;\\r\\n\\t\\tvec3 color;\\r\\n\\t\\tfloat distance;\\r\\n\\t\\tfloat decay;\\r\\n\\r\\n\\t\\tint shadow;\\r\\n\\t\\tfloat shadowBias;\\r\\n\\t\\tfloat shadowRadius;\\r\\n\\t\\tvec2 shadowMapSize;\\r\\n\\t\\tfloat shadowCameraNear;\\r\\n\\t\\tfloat shadowCameraFar;\\r\\n\\t};\\r\\n\\r\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\r\\n\\r\\n\\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\\r\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\r\\n\\r\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\r\\n\\t\\tdirectLight.direction = normalize( lVector );\\r\\n\\r\\n\\t\\tfloat lightDistance = length( lVector );\\r\\n\\r\\n\\t\\tdirectLight.color = pointLight.color;\\r\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\r\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\n\\r\\n#if NUM_SPOT_LIGHTS > 0\\r\\n\\r\\n\\tstruct SpotLight {\\r\\n\\t\\tvec3 position;\\r\\n\\t\\tvec3 direction;\\r\\n\\t\\tvec3 color;\\r\\n\\t\\tfloat distance;\\r\\n\\t\\tfloat decay;\\r\\n\\t\\tfloat coneCos;\\r\\n\\t\\tfloat penumbraCos;\\r\\n\\r\\n\\t\\tint shadow;\\r\\n\\t\\tfloat shadowBias;\\r\\n\\t\\tfloat shadowRadius;\\r\\n\\t\\tvec2 shadowMapSize;\\r\\n\\t};\\r\\n\\r\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\r\\n\\r\\n\\t// directLight is an out parameter as having it as a return value caused compiler errors on some devices\\r\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\r\\n\\r\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\r\\n\\t\\tdirectLight.direction = normalize( lVector );\\r\\n\\r\\n\\t\\tfloat lightDistance = length( lVector );\\r\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\r\\n\\r\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\r\\n\\r\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\r\\n\\r\\n\\t\\t\\tdirectLight.color = spotLight.color;\\r\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\r\\n\\t\\t\\tdirectLight.visible = true;\\r\\n\\r\\n\\t\\t} else {\\r\\n\\r\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\r\\n\\t\\t\\tdirectLight.visible = false;\\r\\n\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\n\\r\\n#if NUM_RECT_AREA_LIGHTS > 0\\r\\n\\r\\n\\tstruct RectAreaLight {\\r\\n\\t\\tvec3 color;\\r\\n\\t\\tvec3 position;\\r\\n\\t\\tvec3 halfWidth;\\r\\n\\t\\tvec3 halfHeight;\\r\\n\\t};\\r\\n\\r\\n\\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\\r\\n\\t// BRDF approximation Texture is 64x64\\r\\n\\tuniform sampler2D ltc_1; // RGBA Float\\r\\n\\tuniform sampler2D ltc_2; // RGBA Float\\r\\n\\r\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\r\\n\\r\\n#endif\\r\\n\\r\\n\\r\\n#if NUM_HEMI_LIGHTS > 0\\r\\n\\r\\n\\tstruct HemisphereLight {\\r\\n\\t\\tvec3 direction;\\r\\n\\t\\tvec3 skyColor;\\r\\n\\t\\tvec3 groundColor;\\r\\n\\t};\\r\\n\\r\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\r\\n\\r\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\r\\n\\r\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\r\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\r\\n\\r\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\r\\n\\r\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\r\\n\\r\\n\\t\\t\\tirradiance *= PI;\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\treturn irradiance;\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\";\n\n  var envmap_physical_pars_fragment =\n    \"#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\r\\n\\r\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\r\\n\\r\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\r\\n\\r\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\r\\n\\r\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\r\\n\\r\\n\\t\\t\\t// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level\\r\\n\\t\\t\\t// of a specular cubemap, or just the default level of a specially created irradiance cubemap.\\r\\n\\r\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\r\\n\\r\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\r\\n\\r\\n\\t\\t\\t#else\\r\\n\\r\\n\\t\\t\\t\\t// force the bias high to get the last LOD level as it is the most blurred.\\r\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\r\\n\\r\\n\\t\\t\\t#endif\\r\\n\\r\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\r\\n\\r\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\r\\n\\r\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\r\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\r\\n\\r\\n\\t\\t#else\\r\\n\\r\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\\r\\n\\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\r\\n\\r\\n\\t\\t//float envMapWidth = pow( 2.0, maxMIPLevelScalar );\\r\\n\\t\\t//float desiredMIPLevel = log2( envMapWidth * sqrt( 3.0 ) ) - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\r\\n\\r\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\r\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\r\\n\\r\\n\\t\\t// clamp to allowable LOD ranges.\\r\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\r\\n\\r\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\r\\n\\r\\n\\t\\t\\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\r\\n\\r\\n\\t\\t#else\\r\\n\\r\\n\\t\\t\\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\r\\n\\r\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\r\\n\\r\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\r\\n\\r\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\r\\n\\r\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\r\\n\\r\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\r\\n\\r\\n\\t\\t\\t#else\\r\\n\\r\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\r\\n\\r\\n\\t\\t\\t#endif\\r\\n\\r\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\r\\n\\r\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\r\\n\\r\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\r\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent ));\\r\\n\\r\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\r\\n\\r\\n\\t\\t\\tvec2 sampleUV;\\r\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\r\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\r\\n\\r\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\r\\n\\r\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\r\\n\\r\\n\\t\\t\\t#else\\r\\n\\r\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\r\\n\\r\\n\\t\\t\\t#endif\\r\\n\\r\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\r\\n\\r\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\r\\n\\r\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\r\\n\\r\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\r\\n\\r\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\r\\n\\r\\n\\t\\t\\t#else\\r\\n\\r\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\r\\n\\r\\n\\t\\t\\t#endif\\r\\n\\r\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\";\n\n  var lights_phong_fragment =\n    \"BlinnPhongMaterial material;\\r\\nmaterial.diffuseColor = diffuseColor.rgb;\\r\\nmaterial.specularColor = specular;\\r\\nmaterial.specularShininess = shininess;\\r\\nmaterial.specularStrength = specularStrength;\\r\\n\";\n\n  var lights_phong_pars_fragment =\n    \"varying vec3 vViewPosition;\\r\\n\\r\\n#ifndef FLAT_SHADED\\r\\n\\r\\n\\tvarying vec3 vNormal;\\r\\n\\r\\n#endif\\r\\n\\r\\n\\r\\nstruct BlinnPhongMaterial {\\r\\n\\r\\n\\tvec3\\tdiffuseColor;\\r\\n\\tvec3\\tspecularColor;\\r\\n\\tfloat\\tspecularShininess;\\r\\n\\tfloat\\tspecularStrength;\\r\\n\\r\\n};\\r\\n\\r\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\r\\n\\r\\n\\t#ifdef TOON\\r\\n\\r\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\r\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\r\\n\\r\\n\\t\\tirradiance *= PI; // punctual light\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\r\\n\\r\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\r\\n\\r\\n}\\r\\n\\r\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\r\\n\\r\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\r\\n\\r\\n}\\r\\n\\r\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\r\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\r\\n\\r\\n#define Material_LightProbeLOD( material )\\t(0)\\r\\n\";\n\n  var lights_physical_fragment =\n    \"PhysicalMaterial material;\\r\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\r\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\r\\n#ifdef STANDARD\\r\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\r\\n#else\\r\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\r\\n\\tmaterial.clearCoat = saturate( clearCoat ); // Burley clearcoat model\\r\\n\\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\r\\n#endif\\r\\n\";\n\n  var lights_physical_pars_fragment =\n    \"struct PhysicalMaterial {\\r\\n\\r\\n\\tvec3\\tdiffuseColor;\\r\\n\\tfloat\\tspecularRoughness;\\r\\n\\tvec3\\tspecularColor;\\r\\n\\r\\n\\t#ifndef STANDARD\\r\\n\\t\\tfloat clearCoat;\\r\\n\\t\\tfloat clearCoatRoughness;\\r\\n\\t#endif\\r\\n\\r\\n};\\r\\n\\r\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\r\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\r\\n\\r\\n// Clear coat directional hemishperical reflectance (this approximation should be improved)\\r\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\r\\n\\r\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\r\\n\\r\\n}\\r\\n\\r\\n#if NUM_RECT_AREA_LIGHTS > 0\\r\\n\\r\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\r\\n\\r\\n\\t\\tvec3 normal = geometry.normal;\\r\\n\\t\\tvec3 viewDir = geometry.viewDir;\\r\\n\\t\\tvec3 position = geometry.position;\\r\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\r\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\r\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\r\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\r\\n\\t\\tfloat roughness = material.specularRoughness;\\r\\n\\r\\n\\t\\tvec3 rectCoords[ 4 ];\\r\\n\\t\\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight; // counterclockwise\\r\\n\\t\\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\\r\\n\\t\\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\\r\\n\\t\\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\\r\\n\\r\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\r\\n\\r\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\r\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\r\\n\\r\\n\\t\\tmat3 mInv = mat3(\\r\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\r\\n\\t\\t\\tvec3(    0, 1,    0 ),\\r\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// LTC Fresnel Approximation by Stephen Hill\\r\\n\\t\\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\\r\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\r\\n\\r\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\r\\n\\r\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\r\\n\\r\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\r\\n\\r\\n\\tvec3 irradiance = dotNL * directLight.color;\\r\\n\\r\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\r\\n\\r\\n\\t\\tirradiance *= PI; // punctual light\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#ifndef STANDARD\\r\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\r\\n\\t#else\\r\\n\\t\\tfloat clearCoatDHR = 0.0;\\r\\n\\t#endif\\r\\n\\r\\n\\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\r\\n\\r\\n\\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\r\\n\\r\\n\\t#ifndef STANDARD\\r\\n\\r\\n\\t\\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n}\\r\\n\\r\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\r\\n\\r\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\r\\n\\r\\n}\\r\\n\\r\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\r\\n\\r\\n\\t#ifndef STANDARD\\r\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\r\\n\\t\\tfloat dotNL = dotNV;\\r\\n\\t\\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\r\\n\\t#else\\r\\n\\t\\tfloat clearCoatDHR = 0.0;\\r\\n\\t#endif\\r\\n\\r\\n\\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\r\\n\\r\\n\\t#ifndef STANDARD\\r\\n\\r\\n\\t\\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n}\\r\\n\\r\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\r\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\r\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\r\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\r\\n\\r\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\r\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\r\\n\\r\\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\\r\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\r\\n\\r\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\r\\n\\r\\n}\\r\\n\";\n\n  var lights_fragment_begin =\n    \"\\r\\n\\r\\nGeometricContext geometry;\\r\\n\\r\\ngeometry.position = - vViewPosition;\\r\\ngeometry.normal = normal;\\r\\ngeometry.viewDir = normalize( vViewPosition );\\r\\n\\r\\nIncidentLight directLight;\\r\\n\\r\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\r\\n\\r\\n\\tPointLight pointLight;\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tpointLight = pointLights[ i ];\\r\\n\\r\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\r\\n\\r\\n\\t\\t#ifdef USE_SHADOWMAP\\r\\n\\t\\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\r\\n\\r\\n\\tSpotLight spotLight;\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tspotLight = spotLights[ i ];\\r\\n\\r\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\r\\n\\r\\n\\t\\t#ifdef USE_SHADOWMAP\\r\\n\\t\\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\r\\n\\r\\n\\tDirectionalLight directionalLight;\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tdirectionalLight = directionalLights[ i ];\\r\\n\\r\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\r\\n\\r\\n\\t\\t#ifdef USE_SHADOWMAP\\r\\n\\t\\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\r\\n\\r\\n\\tRectAreaLight rectAreaLight;\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\r\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\\r\\n#if defined( RE_IndirectDiffuse )\\r\\n\\r\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\r\\n\\r\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\r\\n\\r\\n\\t\\t#pragma unroll_loop\\r\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\\r\\n#if defined( RE_IndirectSpecular )\\r\\n\\r\\n\\tvec3 radiance = vec3( 0.0 );\\r\\n\\tvec3 clearCoatRadiance = vec3( 0.0 );\\r\\n\\r\\n#endif\\r\\n\";\n\n  var lights_fragment_maps =\n    \"#if defined( RE_IndirectDiffuse )\\r\\n\\r\\n\\t#ifdef USE_LIGHTMAP\\r\\n\\r\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\r\\n\\r\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\r\\n\\r\\n\\t\\t\\tlightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\tirradiance += lightMapIrradiance;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\r\\n\\r\\n\\t\\tirradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\\r\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\r\\n\\r\\n\\tradiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\\r\\n\\r\\n\\t#ifndef STANDARD\\r\\n\\t\\tclearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var lights_fragment_end =\n    \"#if defined( RE_IndirectDiffuse )\\r\\n\\r\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\r\\n\\r\\n#endif\\r\\n\\r\\n#if defined( RE_IndirectSpecular )\\r\\n\\r\\n\\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\r\\n\\r\\n#endif\\r\\n\";\n\n  var logdepthbuf_fragment =\n    \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\r\\n\\r\\n\\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\\r\\n\\r\\n#endif\";\n\n  var logdepthbuf_pars_fragment =\n    \"#ifdef USE_LOGDEPTHBUF\\r\\n\\r\\n\\tuniform float logDepthBufFC;\\r\\n\\r\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\r\\n\\r\\n\\t\\tvarying float vFragDepth;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var logdepthbuf_pars_vertex =\n    \"#ifdef USE_LOGDEPTHBUF\\r\\n\\r\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\r\\n\\r\\n\\t\\tvarying float vFragDepth;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\tuniform float logDepthBufFC;\\r\\n\\r\\n#endif\";\n\n  var logdepthbuf_vertex =\n    \"#ifdef USE_LOGDEPTHBUF\\r\\n\\r\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\r\\n\\r\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\r\\n\\r\\n\\t\\tgl_Position.z *= gl_Position.w;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var map_fragment =\n    \"#ifdef USE_MAP\\r\\n\\r\\n\\tvec4 texelColor = texture2D( map, vUv );\\r\\n\\r\\n\\ttexelColor = mapTexelToLinear( texelColor );\\r\\n\\tdiffuseColor *= texelColor;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var map_pars_fragment =\n    \"#ifdef USE_MAP\\r\\n\\r\\n\\tuniform sampler2D map;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var map_particle_fragment =\n    \"#ifdef USE_MAP\\r\\n\\r\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\r\\n\\tvec4 mapTexel = texture2D( map, uv );\\r\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\r\\n\\r\\n#endif\\r\\n\";\n\n  var map_particle_pars_fragment =\n    \"#ifdef USE_MAP\\r\\n\\r\\n\\tuniform mat3 uvTransform;\\r\\n\\tuniform sampler2D map;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var metalnessmap_fragment =\n    \"float metalnessFactor = metalness;\\r\\n\\r\\n#ifdef USE_METALNESSMAP\\r\\n\\r\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\r\\n\\r\\n\\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\r\\n\\tmetalnessFactor *= texelMetalness.b;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var metalnessmap_pars_fragment =\n    \"#ifdef USE_METALNESSMAP\\r\\n\\r\\n\\tuniform sampler2D metalnessMap;\\r\\n\\r\\n#endif\";\n\n  var morphnormal_vertex =\n    \"#ifdef USE_MORPHNORMALS\\r\\n\\r\\n\\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\r\\n\\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\r\\n\\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\r\\n\\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\r\\n\\r\\n#endif\\r\\n\";\n\n  var morphtarget_pars_vertex =\n    \"#ifdef USE_MORPHTARGETS\\r\\n\\r\\n\\t#ifndef USE_MORPHNORMALS\\r\\n\\r\\n\\tuniform float morphTargetInfluences[ 8 ];\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\tuniform float morphTargetInfluences[ 4 ];\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\";\n\n  var morphtarget_vertex =\n    \"#ifdef USE_MORPHTARGETS\\r\\n\\r\\n\\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\r\\n\\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\r\\n\\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\r\\n\\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\r\\n\\r\\n\\t#ifndef USE_MORPHNORMALS\\r\\n\\r\\n\\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\r\\n\\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\r\\n\\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\r\\n\\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var normal_fragment_begin =\n    \"#ifdef FLAT_SHADED\\r\\n\\r\\n\\t// Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\\r\\n\\r\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\r\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\r\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\r\\n\\r\\n#else\\r\\n\\r\\n\\tvec3 normal = normalize( vNormal );\\r\\n\\r\\n\\t#ifdef DOUBLE_SIDED\\r\\n\\r\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var normal_fragment_maps =\n    \"#ifdef USE_NORMALMAP\\r\\n\\r\\n\\t#ifdef OBJECTSPACE_NORMALMAP\\r\\n\\r\\n\\t\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\\r\\n\\r\\n\\t\\t#ifdef FLIP_SIDED\\r\\n\\r\\n\\t\\t\\tnormal = - normal;\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\t#ifdef DOUBLE_SIDED\\r\\n\\r\\n\\t\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\tnormal = normalize( normalMatrix * normal );\\r\\n\\r\\n\\t#else // tangent-space normal map\\r\\n\\r\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#elif defined( USE_BUMPMAP )\\r\\n\\r\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\r\\n\\r\\n#endif\\r\\n\";\n\n  var normalmap_pars_fragment =\n    \"#ifdef USE_NORMALMAP\\r\\n\\r\\n\\tuniform sampler2D normalMap;\\r\\n\\tuniform vec2 normalScale;\\r\\n\\r\\n\\t#ifdef OBJECTSPACE_NORMALMAP\\r\\n\\r\\n\\t\\tuniform mat3 normalMatrix;\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\t// Per-Pixel Tangent Space Normal Mapping\\r\\n\\t\\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\\r\\n\\r\\n\\t\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\r\\n\\r\\n\\t\\t\\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\\r\\n\\r\\n\\t\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\r\\n\\t\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\r\\n\\t\\t\\tvec2 st0 = dFdx( vUv.st );\\r\\n\\t\\t\\tvec2 st1 = dFdy( vUv.st );\\r\\n\\r\\n\\t\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s ); // we do not care about the magnitude\\r\\n\\r\\n\\t\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\r\\n\\t\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\r\\n\\t\\t\\tvec3 N = normalize( surf_norm );\\r\\n\\t\\t\\tmat3 tsn = mat3( S, T, N );\\r\\n\\r\\n\\t\\t\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\r\\n\\r\\n\\t\\t\\tmapN.xy *= normalScale;\\r\\n\\t\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\r\\n\\r\\n\\t\\t\\treturn normalize( tsn * mapN );\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var packing =\n    \"vec3 packNormalToRGB( const in vec3 normal ) {\\r\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\r\\n}\\r\\n\\r\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\r\\n\\treturn 2.0 * rgb.xyz - 1.0;\\r\\n}\\r\\n\\r\\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\\r\\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\\r\\n\\r\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\r\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\r\\n\\r\\nconst float ShiftRight8 = 1. / 256.;\\r\\n\\r\\nvec4 packDepthToRGBA( const in float v ) {\\r\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\r\\n\\tr.yzw -= r.xyz * ShiftRight8; // tidy overflow\\r\\n\\treturn r * PackUpscale;\\r\\n}\\r\\n\\r\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\r\\n\\treturn dot( v, UnpackFactors );\\r\\n}\\r\\n\\r\\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\\r\\n\\r\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\r\\n\\treturn ( viewZ + near ) / ( near - far );\\r\\n}\\r\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\r\\n\\treturn linearClipZ * ( near - far ) - near;\\r\\n}\\r\\n\\r\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\r\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\r\\n}\\r\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\r\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\r\\n}\\r\\n\";\n\n  var premultiplied_alpha_fragment =\n    \"#ifdef PREMULTIPLIED_ALPHA\\r\\n\\r\\n\\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\\r\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var project_vertex =\n    \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\r\\n\\r\\ngl_Position = projectionMatrix * mvPosition;\\r\\n\";\n\n  var dithering_fragment =\n    \"#if defined( DITHERING )\\r\\n\\r\\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\\r\\n\\r\\n#endif\\r\\n\";\n\n  var dithering_pars_fragment =\n    \"#if defined( DITHERING )\\r\\n\\r\\n\\t// based on https://www.shadertoy.com/view/MslGR8\\r\\n\\tvec3 dithering( vec3 color ) {\\r\\n\\t\\t//Calculate grid position\\r\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\r\\n\\r\\n\\t\\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\\r\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\r\\n\\r\\n\\t\\t//modify shift acording to grid position.\\r\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\r\\n\\r\\n\\t\\t//shift the color by dither_shift\\r\\n\\t\\treturn color + dither_shift_RGB;\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\";\n\n  var roughnessmap_fragment =\n    \"float roughnessFactor = roughness;\\r\\n\\r\\n#ifdef USE_ROUGHNESSMAP\\r\\n\\r\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\r\\n\\r\\n\\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\r\\n\\troughnessFactor *= texelRoughness.g;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var roughnessmap_pars_fragment =\n    \"#ifdef USE_ROUGHNESSMAP\\r\\n\\r\\n\\tuniform sampler2D roughnessMap;\\r\\n\\r\\n#endif\";\n\n  var shadowmap_pars_fragment =\n    \"#ifdef USE_SHADOWMAP\\r\\n\\r\\n\\t#if NUM_DIR_LIGHTS > 0\\r\\n\\r\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\r\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#if NUM_SPOT_LIGHTS > 0\\r\\n\\r\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\r\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#if NUM_POINT_LIGHTS > 0\\r\\n\\r\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\r\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\r\\n\\r\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\r\\n\\r\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\r\\n\\r\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\r\\n\\r\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\r\\n\\t\\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\r\\n\\r\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\r\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\r\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\r\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\r\\n\\r\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\r\\n\\r\\n\\t\\tfloat a = mix( lb, lt, f.y );\\r\\n\\t\\tfloat b = mix( rb, rt, f.y );\\r\\n\\t\\tfloat c = mix( a, b, f.x );\\r\\n\\r\\n\\t\\treturn c;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\r\\n\\r\\n\\t\\tfloat shadow = 1.0;\\r\\n\\r\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\r\\n\\t\\tshadowCoord.z += shadowBias;\\r\\n\\r\\n\\t\\t// if ( something && something ) breaks ATI OpenGL shader compiler\\r\\n\\t\\t// if ( all( something, something ) ) using this instead\\r\\n\\r\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\r\\n\\t\\tbool inFrustum = all( inFrustumVec );\\r\\n\\r\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\r\\n\\r\\n\\t\\tbool frustumTest = all( frustumTestVec );\\r\\n\\r\\n\\t\\tif ( frustumTest ) {\\r\\n\\r\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\r\\n\\r\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\r\\n\\r\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\r\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\r\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\r\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\r\\n\\r\\n\\t\\t\\tshadow = (\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\r\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\r\\n\\r\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\r\\n\\r\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\r\\n\\r\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\r\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\r\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\r\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\r\\n\\r\\n\\t\\t\\tshadow = (\\r\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\r\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\r\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\r\\n\\r\\n\\t\\t#else // no percentage-closer filtering:\\r\\n\\r\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn shadow;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\\r\\n\\t// vector suitable for 2D texture mapping. This code uses the following layout for the\\r\\n\\t// 2D texture:\\r\\n\\t//\\r\\n\\t// xzXZ\\r\\n\\t//  y Y\\r\\n\\t//\\r\\n\\t// Y - Positive y direction\\r\\n\\t// y - Negative y direction\\r\\n\\t// X - Positive x direction\\r\\n\\t// x - Negative x direction\\r\\n\\t// Z - Positive z direction\\r\\n\\t// z - Negative z direction\\r\\n\\t//\\r\\n\\t// Source and test bed:\\r\\n\\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\\r\\n\\r\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\r\\n\\r\\n\\t\\t// Number of texels to avoid at the edge of each square\\r\\n\\r\\n\\t\\tvec3 absV = abs( v );\\r\\n\\r\\n\\t\\t// Intersect unit cube\\r\\n\\r\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\r\\n\\t\\tabsV *= scaleToCube;\\r\\n\\r\\n\\t\\t// Apply scale to avoid seams\\r\\n\\r\\n\\t\\t// two texels less per square (one texel will do for NEAREST)\\r\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\r\\n\\r\\n\\t\\t// Unwrap\\r\\n\\r\\n\\t\\t// space: -1 ... 1 range for each square\\r\\n\\t\\t//\\r\\n\\t\\t// #X##\\t\\tdim    := ( 4 , 2 )\\r\\n\\t\\t//  # #\\t\\tcenter := ( 1 , 1 )\\r\\n\\r\\n\\t\\tvec2 planar = v.xy;\\r\\n\\r\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\r\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\r\\n\\r\\n\\t\\tif ( absV.z >= almostOne ) {\\r\\n\\r\\n\\t\\t\\tif ( v.z > 0.0 )\\r\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\r\\n\\r\\n\\t\\t} else if ( absV.x >= almostOne ) {\\r\\n\\r\\n\\t\\t\\tfloat signX = sign( v.x );\\r\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\r\\n\\r\\n\\t\\t} else if ( absV.y >= almostOne ) {\\r\\n\\r\\n\\t\\t\\tfloat signY = sign( v.y );\\r\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\r\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Transform to UV space\\r\\n\\r\\n\\t\\t// scale := 0.5 / dim\\r\\n\\t\\t// translate := ( center + 0.5 ) / dim\\r\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\r\\n\\r\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\r\\n\\r\\n\\t\\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\\r\\n\\t\\t// the vector from the light to the world-space position of the fragment.\\r\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\r\\n\\r\\n\\t\\t// dp = normalized distance from light to fragment position\\r\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\\r\\n\\t\\tdp += shadowBias;\\r\\n\\r\\n\\t\\t// bd3D = base direction 3D\\r\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\r\\n\\r\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\r\\n\\r\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\r\\n\\r\\n\\t\\t\\treturn (\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\r\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\r\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\r\\n\\r\\n\\t\\t#else // no percentage-closer filtering\\r\\n\\r\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\r\\n\\r\\n\\t\\t#endif\\r\\n\\r\\n\\t}\\r\\n\\r\\n#endif\\r\\n\";\n\n  var shadowmap_pars_vertex =\n    \"#ifdef USE_SHADOWMAP\\r\\n\\r\\n\\t#if NUM_DIR_LIGHTS > 0\\r\\n\\r\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\r\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#if NUM_SPOT_LIGHTS > 0\\r\\n\\r\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\r\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#if NUM_POINT_LIGHTS > 0\\r\\n\\r\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\r\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\r\\n\\r\\n#endif\\r\\n\";\n\n  var shadowmap_vertex =\n    \"#ifdef USE_SHADOWMAP\\r\\n\\r\\n\\t#if NUM_DIR_LIGHTS > 0\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#if NUM_SPOT_LIGHTS > 0\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#if NUM_POINT_LIGHTS > 0\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\r\\n\\r\\n#endif\\r\\n\";\n\n  var shadowmask_pars_fragment =\n    \"float getShadowMask() {\\r\\n\\r\\n\\tfloat shadow = 1.0;\\r\\n\\r\\n\\t#ifdef USE_SHADOWMAP\\r\\n\\r\\n\\t#if NUM_DIR_LIGHTS > 0\\r\\n\\r\\n\\tDirectionalLight directionalLight;\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tdirectionalLight = directionalLights[ i ];\\r\\n\\t\\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#if NUM_SPOT_LIGHTS > 0\\r\\n\\r\\n\\tSpotLight spotLight;\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tspotLight = spotLights[ i ];\\r\\n\\t\\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#if NUM_POINT_LIGHTS > 0\\r\\n\\r\\n\\tPointLight pointLight;\\r\\n\\r\\n\\t#pragma unroll_loop\\r\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\r\\n\\r\\n\\t\\tpointLight = pointLights[ i ];\\r\\n\\t\\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\treturn shadow;\\r\\n\\r\\n}\\r\\n\";\n\n  var skinbase_vertex =\n    \"#ifdef USE_SKINNING\\r\\n\\r\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\r\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\r\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\r\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\r\\n\\r\\n#endif\";\n\n  var skinning_pars_vertex =\n    \"#ifdef USE_SKINNING\\r\\n\\r\\n\\tuniform mat4 bindMatrix;\\r\\n\\tuniform mat4 bindMatrixInverse;\\r\\n\\r\\n\\t#ifdef BONE_TEXTURE\\r\\n\\r\\n\\t\\tuniform sampler2D boneTexture;\\r\\n\\t\\tuniform int boneTextureSize;\\r\\n\\r\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\r\\n\\r\\n\\t\\t\\tfloat j = i * 4.0;\\r\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\r\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\r\\n\\r\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\r\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\r\\n\\r\\n\\t\\t\\ty = dy * ( y + 0.5 );\\r\\n\\r\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\r\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\r\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\r\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\r\\n\\r\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\r\\n\\r\\n\\t\\t\\treturn bone;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\r\\n\\r\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\r\\n\\r\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\r\\n\\t\\t\\treturn bone;\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n#endif\\r\\n\";\n\n  var skinning_vertex =\n    \"#ifdef USE_SKINNING\\r\\n\\r\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\r\\n\\r\\n\\tvec4 skinned = vec4( 0.0 );\\r\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\r\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\r\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\r\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\r\\n\\r\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var skinnormal_vertex =\n    \"#ifdef USE_SKINNING\\r\\n\\r\\n\\tmat4 skinMatrix = mat4( 0.0 );\\r\\n\\tskinMatrix += skinWeight.x * boneMatX;\\r\\n\\tskinMatrix += skinWeight.y * boneMatY;\\r\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\r\\n\\tskinMatrix += skinWeight.w * boneMatW;\\r\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\r\\n\\r\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var specularmap_fragment =\n    \"float specularStrength;\\r\\n\\r\\n#ifdef USE_SPECULARMAP\\r\\n\\r\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\r\\n\\tspecularStrength = texelSpecular.r;\\r\\n\\r\\n#else\\r\\n\\r\\n\\tspecularStrength = 1.0;\\r\\n\\r\\n#endif\";\n\n  var specularmap_pars_fragment =\n    \"#ifdef USE_SPECULARMAP\\r\\n\\r\\n\\tuniform sampler2D specularMap;\\r\\n\\r\\n#endif\";\n\n  var tonemapping_fragment =\n    \"#if defined( TONE_MAPPING )\\r\\n\\r\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\r\\n\\r\\n#endif\\r\\n\";\n\n  var tonemapping_pars_fragment =\n    \"#ifndef saturate\\r\\n\\t#define saturate(a) clamp( a, 0.0, 1.0 )\\r\\n#endif\\r\\n\\r\\nuniform float toneMappingExposure;\\r\\nuniform float toneMappingWhitePoint;\\r\\n\\r\\n// exposure only\\r\\nvec3 LinearToneMapping( vec3 color ) {\\r\\n\\r\\n\\treturn toneMappingExposure * color;\\r\\n\\r\\n}\\r\\n\\r\\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\\r\\nvec3 ReinhardToneMapping( vec3 color ) {\\r\\n\\r\\n\\tcolor *= toneMappingExposure;\\r\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\r\\n\\r\\n}\\r\\n\\r\\n// source: http://filmicgames.com/archives/75\\r\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\r\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\r\\n\\r\\n\\t// John Hable's filmic operator from Uncharted 2 video game\\r\\n\\tcolor *= toneMappingExposure;\\r\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\r\\n\\r\\n}\\r\\n\\r\\n// source: http://filmicgames.com/archives/75\\r\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\r\\n\\r\\n\\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\\r\\n\\tcolor *= toneMappingExposure;\\r\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\r\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\r\\n\\r\\n}\\r\\n\";\n\n  var uv_pars_fragment =\n    \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\r\\n\\r\\n\\tvarying vec2 vUv;\\r\\n\\r\\n#endif\";\n\n  var uv_pars_vertex =\n    \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\r\\n\\r\\n\\tvarying vec2 vUv;\\r\\n\\tuniform mat3 uvTransform;\\r\\n\\r\\n#endif\\r\\n\";\n\n  var uv_vertex =\n    \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\r\\n\\r\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\r\\n\\r\\n#endif\";\n\n  var uv2_pars_fragment =\n    \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\r\\n\\r\\n\\tvarying vec2 vUv2;\\r\\n\\r\\n#endif\";\n\n  var uv2_pars_vertex =\n    \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\r\\n\\r\\n\\tattribute vec2 uv2;\\r\\n\\tvarying vec2 vUv2;\\r\\n\\r\\n#endif\";\n\n  var uv2_vertex =\n    \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\r\\n\\r\\n\\tvUv2 = uv2;\\r\\n\\r\\n#endif\";\n\n  var worldpos_vertex =\n    \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\r\\n\\r\\n\\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\r\\n\\r\\n#endif\\r\\n\";\n\n  var cube_frag =\n    \"uniform samplerCube tCube;\\r\\nuniform float tFlip;\\r\\nuniform float opacity;\\r\\n\\r\\nvarying vec3 vWorldPosition;\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\r\\n\\tgl_FragColor.a *= opacity;\\r\\n\\r\\n}\\r\\n\";\n\n  var cube_vert =\n    \"varying vec3 vWorldPosition;\\r\\n\\r\\n#include <common>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\r\\n\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\r\\n\\tgl_Position.z = gl_Position.w; // set z to camera.far\\r\\n\\r\\n}\\r\\n\";\n\n  var depth_frag =\n    \"#if DEPTH_PACKING == 3200\\r\\n\\r\\n\\tuniform float opacity;\\r\\n\\r\\n#endif\\r\\n\\r\\n#include <common>\\r\\n#include <packing>\\r\\n#include <uv_pars_fragment>\\r\\n#include <map_pars_fragment>\\r\\n#include <alphamap_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\n#include <clipping_planes_pars_fragment>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <clipping_planes_fragment>\\r\\n\\r\\n\\tvec4 diffuseColor = vec4( 1.0 );\\r\\n\\r\\n\\t#if DEPTH_PACKING == 3200\\r\\n\\r\\n\\t\\tdiffuseColor.a = opacity;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#include <map_fragment>\\r\\n\\t#include <alphamap_fragment>\\r\\n\\t#include <alphatest_fragment>\\r\\n\\r\\n\\t#include <logdepthbuf_fragment>\\r\\n\\r\\n\\t#if DEPTH_PACKING == 3200\\r\\n\\r\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\r\\n\\r\\n\\t#elif DEPTH_PACKING == 3201\\r\\n\\r\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n}\\r\\n\";\n\n  var depth_vert =\n    \"#include <common>\\r\\n#include <uv_pars_vertex>\\r\\n#include <displacementmap_pars_vertex>\\r\\n#include <morphtarget_pars_vertex>\\r\\n#include <skinning_pars_vertex>\\r\\n#include <logdepthbuf_pars_vertex>\\r\\n#include <clipping_planes_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <uv_vertex>\\r\\n\\r\\n\\t#include <skinbase_vertex>\\r\\n\\r\\n\\t#ifdef USE_DISPLACEMENTMAP\\r\\n\\r\\n\\t\\t#include <beginnormal_vertex>\\r\\n\\t\\t#include <morphnormal_vertex>\\r\\n\\t\\t#include <skinnormal_vertex>\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <morphtarget_vertex>\\r\\n\\t#include <skinning_vertex>\\r\\n\\t#include <displacementmap_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\t#include <logdepthbuf_vertex>\\r\\n\\t#include <clipping_planes_vertex>\\r\\n\\r\\n}\\r\\n\";\n\n  var distanceRGBA_frag =\n    \"#define DISTANCE\\r\\n\\r\\nuniform vec3 referencePosition;\\r\\nuniform float nearDistance;\\r\\nuniform float farDistance;\\r\\nvarying vec3 vWorldPosition;\\r\\n\\r\\n#include <common>\\r\\n#include <packing>\\r\\n#include <uv_pars_fragment>\\r\\n#include <map_pars_fragment>\\r\\n#include <alphamap_pars_fragment>\\r\\n#include <clipping_planes_pars_fragment>\\r\\n\\r\\nvoid main () {\\r\\n\\r\\n\\t#include <clipping_planes_fragment>\\r\\n\\r\\n\\tvec4 diffuseColor = vec4( 1.0 );\\r\\n\\r\\n\\t#include <map_fragment>\\r\\n\\t#include <alphamap_fragment>\\r\\n\\t#include <alphatest_fragment>\\r\\n\\r\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\r\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\r\\n\\tdist = saturate( dist ); // clamp to [ 0, 1 ]\\r\\n\\r\\n\\tgl_FragColor = packDepthToRGBA( dist );\\r\\n\\r\\n}\\r\\n\";\n\n  var distanceRGBA_vert =\n    \"#define DISTANCE\\r\\n\\r\\nvarying vec3 vWorldPosition;\\r\\n\\r\\n#include <common>\\r\\n#include <uv_pars_vertex>\\r\\n#include <displacementmap_pars_vertex>\\r\\n#include <morphtarget_pars_vertex>\\r\\n#include <skinning_pars_vertex>\\r\\n#include <clipping_planes_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <uv_vertex>\\r\\n\\r\\n\\t#include <skinbase_vertex>\\r\\n\\r\\n\\t#ifdef USE_DISPLACEMENTMAP\\r\\n\\r\\n\\t\\t#include <beginnormal_vertex>\\r\\n\\t\\t#include <morphnormal_vertex>\\r\\n\\t\\t#include <skinnormal_vertex>\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <morphtarget_vertex>\\r\\n\\t#include <skinning_vertex>\\r\\n\\t#include <displacementmap_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\t#include <worldpos_vertex>\\r\\n\\t#include <clipping_planes_vertex>\\r\\n\\r\\n\\tvWorldPosition = worldPosition.xyz;\\r\\n\\r\\n}\\r\\n\";\n\n  var equirect_frag =\n    \"uniform sampler2D tEquirect;\\r\\n\\r\\nvarying vec3 vWorldPosition;\\r\\n\\r\\n#include <common>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\tvec3 direction = normalize( vWorldPosition );\\r\\n\\r\\n\\tvec2 sampleUV;\\r\\n\\r\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\r\\n\\r\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\r\\n\\r\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\r\\n\\r\\n}\\r\\n\";\n\n  var equirect_vert =\n    \"varying vec3 vWorldPosition;\\r\\n\\r\\n#include <common>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\tvWorldPosition = transformDirection( position, modelMatrix );\\r\\n\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\r\\n}\\r\\n\";\n\n  var linedashed_frag =\n    \"uniform vec3 diffuse;\\r\\nuniform float opacity;\\r\\n\\r\\nuniform float dashSize;\\r\\nuniform float totalSize;\\r\\n\\r\\nvarying float vLineDistance;\\r\\n\\r\\n#include <common>\\r\\n#include <color_pars_fragment>\\r\\n#include <fog_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\n#include <clipping_planes_pars_fragment>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <clipping_planes_fragment>\\r\\n\\r\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\r\\n\\r\\n\\t\\tdiscard;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tvec3 outgoingLight = vec3( 0.0 );\\r\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\r\\n\\r\\n\\t#include <logdepthbuf_fragment>\\r\\n\\t#include <color_fragment>\\r\\n\\r\\n\\toutgoingLight = diffuseColor.rgb; // simple shader\\r\\n\\r\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\r\\n\\r\\n\\t#include <premultiplied_alpha_fragment>\\r\\n\\t#include <tonemapping_fragment>\\r\\n\\t#include <encodings_fragment>\\r\\n\\t#include <fog_fragment>\\r\\n\\r\\n}\\r\\n\";\n\n  var linedashed_vert =\n    \"uniform float scale;\\r\\nattribute float lineDistance;\\r\\n\\r\\nvarying float vLineDistance;\\r\\n\\r\\n#include <common>\\r\\n#include <color_pars_vertex>\\r\\n#include <fog_pars_vertex>\\r\\n#include <logdepthbuf_pars_vertex>\\r\\n#include <clipping_planes_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <color_vertex>\\r\\n\\r\\n\\tvLineDistance = scale * lineDistance;\\r\\n\\r\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\r\\n\\tgl_Position = projectionMatrix * mvPosition;\\r\\n\\r\\n\\t#include <logdepthbuf_vertex>\\r\\n\\t#include <clipping_planes_vertex>\\r\\n\\t#include <fog_vertex>\\r\\n\\r\\n}\\r\\n\";\n\n  var meshbasic_frag =\n    \"uniform vec3 diffuse;\\r\\nuniform float opacity;\\r\\n\\r\\n#ifndef FLAT_SHADED\\r\\n\\r\\n\\tvarying vec3 vNormal;\\r\\n\\r\\n#endif\\r\\n\\r\\n#include <common>\\r\\n#include <color_pars_fragment>\\r\\n#include <uv_pars_fragment>\\r\\n#include <uv2_pars_fragment>\\r\\n#include <map_pars_fragment>\\r\\n#include <alphamap_pars_fragment>\\r\\n#include <aomap_pars_fragment>\\r\\n#include <lightmap_pars_fragment>\\r\\n#include <envmap_pars_fragment>\\r\\n#include <fog_pars_fragment>\\r\\n#include <specularmap_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\n#include <clipping_planes_pars_fragment>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <clipping_planes_fragment>\\r\\n\\r\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\r\\n\\r\\n\\t#include <logdepthbuf_fragment>\\r\\n\\t#include <map_fragment>\\r\\n\\t#include <color_fragment>\\r\\n\\t#include <alphamap_fragment>\\r\\n\\t#include <alphatest_fragment>\\r\\n\\t#include <specularmap_fragment>\\r\\n\\r\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\r\\n\\r\\n\\t// accumulation (baked indirect lighting only)\\r\\n\\t#ifdef USE_LIGHTMAP\\r\\n\\r\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t// modulation\\r\\n\\t#include <aomap_fragment>\\r\\n\\r\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\r\\n\\r\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\r\\n\\r\\n\\t#include <envmap_fragment>\\r\\n\\r\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\r\\n\\r\\n\\t#include <premultiplied_alpha_fragment>\\r\\n\\t#include <tonemapping_fragment>\\r\\n\\t#include <encodings_fragment>\\r\\n\\t#include <fog_fragment>\\r\\n\\r\\n}\\r\\n\";\n\n  var meshbasic_vert =\n    \"#include <common>\\r\\n#include <uv_pars_vertex>\\r\\n#include <uv2_pars_vertex>\\r\\n#include <envmap_pars_vertex>\\r\\n#include <color_pars_vertex>\\r\\n#include <fog_pars_vertex>\\r\\n#include <morphtarget_pars_vertex>\\r\\n#include <skinning_pars_vertex>\\r\\n#include <logdepthbuf_pars_vertex>\\r\\n#include <clipping_planes_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <uv_vertex>\\r\\n\\t#include <uv2_vertex>\\r\\n\\t#include <color_vertex>\\r\\n\\t#include <skinbase_vertex>\\r\\n\\r\\n\\t#ifdef USE_ENVMAP\\r\\n\\r\\n\\t#include <beginnormal_vertex>\\r\\n\\t#include <morphnormal_vertex>\\r\\n\\t#include <skinnormal_vertex>\\r\\n\\t#include <defaultnormal_vertex>\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <morphtarget_vertex>\\r\\n\\t#include <skinning_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\t#include <logdepthbuf_vertex>\\r\\n\\r\\n\\t#include <worldpos_vertex>\\r\\n\\t#include <clipping_planes_vertex>\\r\\n\\t#include <envmap_vertex>\\r\\n\\t#include <fog_vertex>\\r\\n\\r\\n}\\r\\n\";\n\n  var meshlambert_frag =\n    \"uniform vec3 diffuse;\\r\\nuniform vec3 emissive;\\r\\nuniform float opacity;\\r\\n\\r\\nvarying vec3 vLightFront;\\r\\n\\r\\n#ifdef DOUBLE_SIDED\\r\\n\\r\\n\\tvarying vec3 vLightBack;\\r\\n\\r\\n#endif\\r\\n\\r\\n#include <common>\\r\\n#include <packing>\\r\\n#include <dithering_pars_fragment>\\r\\n#include <color_pars_fragment>\\r\\n#include <uv_pars_fragment>\\r\\n#include <uv2_pars_fragment>\\r\\n#include <map_pars_fragment>\\r\\n#include <alphamap_pars_fragment>\\r\\n#include <aomap_pars_fragment>\\r\\n#include <lightmap_pars_fragment>\\r\\n#include <emissivemap_pars_fragment>\\r\\n#include <envmap_pars_fragment>\\r\\n#include <bsdfs>\\r\\n#include <lights_pars_begin>\\r\\n#include <fog_pars_fragment>\\r\\n#include <shadowmap_pars_fragment>\\r\\n#include <shadowmask_pars_fragment>\\r\\n#include <specularmap_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\n#include <clipping_planes_pars_fragment>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <clipping_planes_fragment>\\r\\n\\r\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\r\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\r\\n\\tvec3 totalEmissiveRadiance = emissive;\\r\\n\\r\\n\\t#include <logdepthbuf_fragment>\\r\\n\\t#include <map_fragment>\\r\\n\\t#include <color_fragment>\\r\\n\\t#include <alphamap_fragment>\\r\\n\\t#include <alphatest_fragment>\\r\\n\\t#include <specularmap_fragment>\\r\\n\\t#include <emissivemap_fragment>\\r\\n\\r\\n\\t// accumulation\\r\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\r\\n\\r\\n\\t#include <lightmap_fragment>\\r\\n\\r\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\r\\n\\r\\n\\t#ifdef DOUBLE_SIDED\\r\\n\\r\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\r\\n\\r\\n\\t#else\\r\\n\\r\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\r\\n\\r\\n\\t#endif\\r\\n\\r\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\r\\n\\r\\n\\t// modulation\\r\\n\\t#include <aomap_fragment>\\r\\n\\r\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\r\\n\\r\\n\\t#include <envmap_fragment>\\r\\n\\r\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\r\\n\\r\\n\\t#include <tonemapping_fragment>\\r\\n\\t#include <encodings_fragment>\\r\\n\\t#include <fog_fragment>\\r\\n\\t#include <premultiplied_alpha_fragment>\\r\\n\\t#include <dithering_fragment>\\r\\n\\r\\n}\\r\\n\";\n\n  var meshlambert_vert =\n    \"#define LAMBERT\\r\\n\\r\\nvarying vec3 vLightFront;\\r\\n\\r\\n#ifdef DOUBLE_SIDED\\r\\n\\r\\n\\tvarying vec3 vLightBack;\\r\\n\\r\\n#endif\\r\\n\\r\\n#include <common>\\r\\n#include <uv_pars_vertex>\\r\\n#include <uv2_pars_vertex>\\r\\n#include <envmap_pars_vertex>\\r\\n#include <bsdfs>\\r\\n#include <lights_pars_begin>\\r\\n#include <color_pars_vertex>\\r\\n#include <fog_pars_vertex>\\r\\n#include <morphtarget_pars_vertex>\\r\\n#include <skinning_pars_vertex>\\r\\n#include <shadowmap_pars_vertex>\\r\\n#include <logdepthbuf_pars_vertex>\\r\\n#include <clipping_planes_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <uv_vertex>\\r\\n\\t#include <uv2_vertex>\\r\\n\\t#include <color_vertex>\\r\\n\\r\\n\\t#include <beginnormal_vertex>\\r\\n\\t#include <morphnormal_vertex>\\r\\n\\t#include <skinbase_vertex>\\r\\n\\t#include <skinnormal_vertex>\\r\\n\\t#include <defaultnormal_vertex>\\r\\n\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <morphtarget_vertex>\\r\\n\\t#include <skinning_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\t#include <logdepthbuf_vertex>\\r\\n\\t#include <clipping_planes_vertex>\\r\\n\\r\\n\\t#include <worldpos_vertex>\\r\\n\\t#include <envmap_vertex>\\r\\n\\t#include <lights_lambert_vertex>\\r\\n\\t#include <shadowmap_vertex>\\r\\n\\t#include <fog_vertex>\\r\\n\\r\\n}\\r\\n\";\n\n  var meshphong_frag =\n    \"#define PHONG\\r\\n\\r\\nuniform vec3 diffuse;\\r\\nuniform vec3 emissive;\\r\\nuniform vec3 specular;\\r\\nuniform float shininess;\\r\\nuniform float opacity;\\r\\n\\r\\n#include <common>\\r\\n#include <packing>\\r\\n#include <dithering_pars_fragment>\\r\\n#include <color_pars_fragment>\\r\\n#include <uv_pars_fragment>\\r\\n#include <uv2_pars_fragment>\\r\\n#include <map_pars_fragment>\\r\\n#include <alphamap_pars_fragment>\\r\\n#include <aomap_pars_fragment>\\r\\n#include <lightmap_pars_fragment>\\r\\n#include <emissivemap_pars_fragment>\\r\\n#include <envmap_pars_fragment>\\r\\n#include <gradientmap_pars_fragment>\\r\\n#include <fog_pars_fragment>\\r\\n#include <bsdfs>\\r\\n#include <lights_pars_begin>\\r\\n#include <lights_phong_pars_fragment>\\r\\n#include <shadowmap_pars_fragment>\\r\\n#include <bumpmap_pars_fragment>\\r\\n#include <normalmap_pars_fragment>\\r\\n#include <specularmap_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\n#include <clipping_planes_pars_fragment>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <clipping_planes_fragment>\\r\\n\\r\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\r\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\r\\n\\tvec3 totalEmissiveRadiance = emissive;\\r\\n\\r\\n\\t#include <logdepthbuf_fragment>\\r\\n\\t#include <map_fragment>\\r\\n\\t#include <color_fragment>\\r\\n\\t#include <alphamap_fragment>\\r\\n\\t#include <alphatest_fragment>\\r\\n\\t#include <specularmap_fragment>\\r\\n\\t#include <normal_fragment_begin>\\r\\n\\t#include <normal_fragment_maps>\\r\\n\\t#include <emissivemap_fragment>\\r\\n\\r\\n\\t// accumulation\\r\\n\\t#include <lights_phong_fragment>\\r\\n\\t#include <lights_fragment_begin>\\r\\n\\t#include <lights_fragment_maps>\\r\\n\\t#include <lights_fragment_end>\\r\\n\\r\\n\\t// modulation\\r\\n\\t#include <aomap_fragment>\\r\\n\\r\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\r\\n\\r\\n\\t#include <envmap_fragment>\\r\\n\\r\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\r\\n\\r\\n\\t#include <tonemapping_fragment>\\r\\n\\t#include <encodings_fragment>\\r\\n\\t#include <fog_fragment>\\r\\n\\t#include <premultiplied_alpha_fragment>\\r\\n\\t#include <dithering_fragment>\\r\\n\\r\\n}\\r\\n\";\n\n  var meshphong_vert =\n    \"#define PHONG\\r\\n\\r\\nvarying vec3 vViewPosition;\\r\\n\\r\\n#ifndef FLAT_SHADED\\r\\n\\r\\n\\tvarying vec3 vNormal;\\r\\n\\r\\n#endif\\r\\n\\r\\n#include <common>\\r\\n#include <uv_pars_vertex>\\r\\n#include <uv2_pars_vertex>\\r\\n#include <displacementmap_pars_vertex>\\r\\n#include <envmap_pars_vertex>\\r\\n#include <color_pars_vertex>\\r\\n#include <fog_pars_vertex>\\r\\n#include <morphtarget_pars_vertex>\\r\\n#include <skinning_pars_vertex>\\r\\n#include <shadowmap_pars_vertex>\\r\\n#include <logdepthbuf_pars_vertex>\\r\\n#include <clipping_planes_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <uv_vertex>\\r\\n\\t#include <uv2_vertex>\\r\\n\\t#include <color_vertex>\\r\\n\\r\\n\\t#include <beginnormal_vertex>\\r\\n\\t#include <morphnormal_vertex>\\r\\n\\t#include <skinbase_vertex>\\r\\n\\t#include <skinnormal_vertex>\\r\\n\\t#include <defaultnormal_vertex>\\r\\n\\r\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\r\\n\\r\\n\\tvNormal = normalize( transformedNormal );\\r\\n\\r\\n#endif\\r\\n\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <morphtarget_vertex>\\r\\n\\t#include <skinning_vertex>\\r\\n\\t#include <displacementmap_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\t#include <logdepthbuf_vertex>\\r\\n\\t#include <clipping_planes_vertex>\\r\\n\\r\\n\\tvViewPosition = - mvPosition.xyz;\\r\\n\\r\\n\\t#include <worldpos_vertex>\\r\\n\\t#include <envmap_vertex>\\r\\n\\t#include <shadowmap_vertex>\\r\\n\\t#include <fog_vertex>\\r\\n\\r\\n}\\r\\n\";\n\n  var meshphysical_frag =\n    \"#define PHYSICAL\\r\\n\\r\\nuniform vec3 diffuse;\\r\\nuniform vec3 emissive;\\r\\nuniform float roughness;\\r\\nuniform float metalness;\\r\\nuniform float opacity;\\r\\n\\r\\n#ifndef STANDARD\\r\\n\\tuniform float clearCoat;\\r\\n\\tuniform float clearCoatRoughness;\\r\\n#endif\\r\\n\\r\\nvarying vec3 vViewPosition;\\r\\n\\r\\n#ifndef FLAT_SHADED\\r\\n\\r\\n\\tvarying vec3 vNormal;\\r\\n\\r\\n#endif\\r\\n\\r\\n#include <common>\\r\\n#include <packing>\\r\\n#include <dithering_pars_fragment>\\r\\n#include <color_pars_fragment>\\r\\n#include <uv_pars_fragment>\\r\\n#include <uv2_pars_fragment>\\r\\n#include <map_pars_fragment>\\r\\n#include <alphamap_pars_fragment>\\r\\n#include <aomap_pars_fragment>\\r\\n#include <lightmap_pars_fragment>\\r\\n#include <emissivemap_pars_fragment>\\r\\n#include <bsdfs>\\r\\n#include <cube_uv_reflection_fragment>\\r\\n#include <envmap_pars_fragment>\\r\\n#include <envmap_physical_pars_fragment>\\r\\n#include <fog_pars_fragment>\\r\\n#include <lights_pars_begin>\\r\\n#include <lights_physical_pars_fragment>\\r\\n#include <shadowmap_pars_fragment>\\r\\n#include <bumpmap_pars_fragment>\\r\\n#include <normalmap_pars_fragment>\\r\\n#include <roughnessmap_pars_fragment>\\r\\n#include <metalnessmap_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\n#include <clipping_planes_pars_fragment>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <clipping_planes_fragment>\\r\\n\\r\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\r\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\r\\n\\tvec3 totalEmissiveRadiance = emissive;\\r\\n\\r\\n\\t#include <logdepthbuf_fragment>\\r\\n\\t#include <map_fragment>\\r\\n\\t#include <color_fragment>\\r\\n\\t#include <alphamap_fragment>\\r\\n\\t#include <alphatest_fragment>\\r\\n\\t#include <roughnessmap_fragment>\\r\\n\\t#include <metalnessmap_fragment>\\r\\n\\t#include <normal_fragment_begin>\\r\\n\\t#include <normal_fragment_maps>\\r\\n\\t#include <emissivemap_fragment>\\r\\n\\r\\n\\t// accumulation\\r\\n\\t#include <lights_physical_fragment>\\r\\n\\t#include <lights_fragment_begin>\\r\\n\\t#include <lights_fragment_maps>\\r\\n\\t#include <lights_fragment_end>\\r\\n\\r\\n\\t// modulation\\r\\n\\t#include <aomap_fragment>\\r\\n\\r\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\r\\n\\r\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\r\\n\\r\\n\\t#include <tonemapping_fragment>\\r\\n\\t#include <encodings_fragment>\\r\\n\\t#include <fog_fragment>\\r\\n\\t#include <premultiplied_alpha_fragment>\\r\\n\\t#include <dithering_fragment>\\r\\n\\r\\n}\\r\\n\";\n\n  var meshphysical_vert =\n    \"#define PHYSICAL\\r\\n\\r\\nvarying vec3 vViewPosition;\\r\\n\\r\\n#ifndef FLAT_SHADED\\r\\n\\r\\n\\tvarying vec3 vNormal;\\r\\n\\r\\n#endif\\r\\n\\r\\n#include <common>\\r\\n#include <uv_pars_vertex>\\r\\n#include <uv2_pars_vertex>\\r\\n#include <displacementmap_pars_vertex>\\r\\n#include <color_pars_vertex>\\r\\n#include <fog_pars_vertex>\\r\\n#include <morphtarget_pars_vertex>\\r\\n#include <skinning_pars_vertex>\\r\\n#include <shadowmap_pars_vertex>\\r\\n#include <logdepthbuf_pars_vertex>\\r\\n#include <clipping_planes_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <uv_vertex>\\r\\n\\t#include <uv2_vertex>\\r\\n\\t#include <color_vertex>\\r\\n\\r\\n\\t#include <beginnormal_vertex>\\r\\n\\t#include <morphnormal_vertex>\\r\\n\\t#include <skinbase_vertex>\\r\\n\\t#include <skinnormal_vertex>\\r\\n\\t#include <defaultnormal_vertex>\\r\\n\\r\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\r\\n\\r\\n\\tvNormal = normalize( transformedNormal );\\r\\n\\r\\n#endif\\r\\n\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <morphtarget_vertex>\\r\\n\\t#include <skinning_vertex>\\r\\n\\t#include <displacementmap_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\t#include <logdepthbuf_vertex>\\r\\n\\t#include <clipping_planes_vertex>\\r\\n\\r\\n\\tvViewPosition = - mvPosition.xyz;\\r\\n\\r\\n\\t#include <worldpos_vertex>\\r\\n\\t#include <shadowmap_vertex>\\r\\n\\t#include <fog_vertex>\\r\\n\\r\\n}\\r\\n\";\n\n  var normal_frag =\n    \"#define NORMAL\\r\\n\\r\\nuniform float opacity;\\r\\n\\r\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\r\\n\\r\\n\\tvarying vec3 vViewPosition;\\r\\n\\r\\n#endif\\r\\n\\r\\n#ifndef FLAT_SHADED\\r\\n\\r\\n\\tvarying vec3 vNormal;\\r\\n\\r\\n#endif\\r\\n\\r\\n#include <packing>\\r\\n#include <uv_pars_fragment>\\r\\n#include <bumpmap_pars_fragment>\\r\\n#include <normalmap_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <logdepthbuf_fragment>\\r\\n\\t#include <normal_fragment_begin>\\r\\n\\t#include <normal_fragment_maps>\\r\\n\\r\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\r\\n\\r\\n}\\r\\n\";\n\n  var normal_vert =\n    \"#define NORMAL\\r\\n\\r\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\r\\n\\r\\n\\tvarying vec3 vViewPosition;\\r\\n\\r\\n#endif\\r\\n\\r\\n#ifndef FLAT_SHADED\\r\\n\\r\\n\\tvarying vec3 vNormal;\\r\\n\\r\\n#endif\\r\\n\\r\\n#include <uv_pars_vertex>\\r\\n#include <displacementmap_pars_vertex>\\r\\n#include <morphtarget_pars_vertex>\\r\\n#include <skinning_pars_vertex>\\r\\n#include <logdepthbuf_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <uv_vertex>\\r\\n\\r\\n\\t#include <beginnormal_vertex>\\r\\n\\t#include <morphnormal_vertex>\\r\\n\\t#include <skinbase_vertex>\\r\\n\\t#include <skinnormal_vertex>\\r\\n\\t#include <defaultnormal_vertex>\\r\\n\\r\\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\\r\\n\\r\\n\\tvNormal = normalize( transformedNormal );\\r\\n\\r\\n#endif\\r\\n\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <morphtarget_vertex>\\r\\n\\t#include <skinning_vertex>\\r\\n\\t#include <displacementmap_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\t#include <logdepthbuf_vertex>\\r\\n\\r\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || ( defined( USE_NORMALMAP ) && ! defined( OBJECTSPACE_NORMALMAP ) )\\r\\n\\r\\n\\tvViewPosition = - mvPosition.xyz;\\r\\n\\r\\n#endif\\r\\n\\r\\n}\\r\\n\";\n\n  var points_frag =\n    \"uniform vec3 diffuse;\\r\\nuniform float opacity;\\r\\n\\r\\n#include <common>\\r\\n#include <color_pars_fragment>\\r\\n#include <map_particle_pars_fragment>\\r\\n#include <fog_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\n#include <clipping_planes_pars_fragment>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <clipping_planes_fragment>\\r\\n\\r\\n\\tvec3 outgoingLight = vec3( 0.0 );\\r\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\r\\n\\r\\n\\t#include <logdepthbuf_fragment>\\r\\n\\t#include <map_particle_fragment>\\r\\n\\t#include <color_fragment>\\r\\n\\t#include <alphatest_fragment>\\r\\n\\r\\n\\toutgoingLight = diffuseColor.rgb;\\r\\n\\r\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\r\\n\\r\\n\\t#include <premultiplied_alpha_fragment>\\r\\n\\t#include <tonemapping_fragment>\\r\\n\\t#include <encodings_fragment>\\r\\n\\t#include <fog_fragment>\\r\\n\\r\\n}\\r\\n\";\n\n  var points_vert =\n    \"uniform float size;\\r\\nuniform float scale;\\r\\n\\r\\n#include <common>\\r\\n#include <color_pars_vertex>\\r\\n#include <fog_pars_vertex>\\r\\n#include <morphtarget_pars_vertex>\\r\\n#include <logdepthbuf_pars_vertex>\\r\\n#include <clipping_planes_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <color_vertex>\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <morphtarget_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\r\\n\\t#ifdef USE_SIZEATTENUATION\\r\\n\\t\\tgl_PointSize = size * ( scale / - mvPosition.z );\\r\\n\\t#else\\r\\n\\t\\tgl_PointSize = size;\\r\\n\\t#endif\\r\\n\\r\\n\\t#include <logdepthbuf_vertex>\\r\\n\\t#include <clipping_planes_vertex>\\r\\n\\t#include <worldpos_vertex>\\r\\n\\t#include <fog_vertex>\\r\\n\\r\\n}\\r\\n\";\n\n  var shadow_frag =\n    \"uniform vec3 color;\\r\\nuniform float opacity;\\r\\n\\r\\n#include <common>\\r\\n#include <packing>\\r\\n#include <fog_pars_fragment>\\r\\n#include <bsdfs>\\r\\n#include <lights_pars_begin>\\r\\n#include <shadowmap_pars_fragment>\\r\\n#include <shadowmask_pars_fragment>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\r\\n\\r\\n\\t#include <fog_fragment>\\r\\n\\r\\n}\\r\\n\";\n\n  var shadow_vert =\n    \"#include <fog_pars_vertex>\\r\\n#include <shadowmap_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <begin_vertex>\\r\\n\\t#include <project_vertex>\\r\\n\\t#include <worldpos_vertex>\\r\\n\\t#include <shadowmap_vertex>\\r\\n\\t#include <fog_vertex>\\r\\n\\r\\n}\\r\\n\";\n\n  var sprite_frag =\n    \"uniform vec3 diffuse;\\r\\nuniform float opacity;\\r\\n\\r\\n#include <common>\\r\\n#include <uv_pars_fragment>\\r\\n#include <map_pars_fragment>\\r\\n#include <fog_pars_fragment>\\r\\n#include <logdepthbuf_pars_fragment>\\r\\n#include <clipping_planes_pars_fragment>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <clipping_planes_fragment>\\r\\n\\r\\n\\tvec3 outgoingLight = vec3( 0.0 );\\r\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\r\\n\\r\\n\\t#include <logdepthbuf_fragment>\\r\\n\\t#include <map_fragment>\\r\\n\\t#include <alphatest_fragment>\\r\\n\\r\\n\\toutgoingLight = diffuseColor.rgb;\\r\\n\\r\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\r\\n\\r\\n\\t#include <tonemapping_fragment>\\r\\n\\t#include <encodings_fragment>\\r\\n\\t#include <fog_fragment>\\r\\n\\r\\n}\\r\\n\";\n\n  var sprite_vert =\n    \"uniform float rotation;\\r\\nuniform vec2 center;\\r\\n\\r\\n#include <common>\\r\\n#include <uv_pars_vertex>\\r\\n#include <fog_pars_vertex>\\r\\n#include <logdepthbuf_pars_vertex>\\r\\n#include <clipping_planes_pars_vertex>\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\t#include <uv_vertex>\\r\\n\\r\\n\\tvec2 scale;\\r\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\r\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\r\\n\\r\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\r\\n\\r\\n\\tvec2 rotatedPosition;\\r\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\r\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\r\\n\\r\\n\\tvec4 mvPosition;\\r\\n\\r\\n\\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\r\\n\\tmvPosition.xy += rotatedPosition;\\r\\n\\r\\n\\tgl_Position = projectionMatrix * mvPosition;\\r\\n\\r\\n\\t#include <logdepthbuf_vertex>\\r\\n\\t#include <clipping_planes_vertex>\\r\\n\\t#include <fog_vertex>\\r\\n\\r\\n}\\r\\n\";\n\n  var ShaderChunk = {\n    alphamap_fragment: alphamap_fragment,\n    alphamap_pars_fragment: alphamap_pars_fragment,\n    alphatest_fragment: alphatest_fragment,\n    aomap_fragment: aomap_fragment,\n    aomap_pars_fragment: aomap_pars_fragment,\n    begin_vertex: begin_vertex,\n    beginnormal_vertex: beginnormal_vertex,\n    bsdfs: bsdfs,\n    bumpmap_pars_fragment: bumpmap_pars_fragment,\n    clipping_planes_fragment: clipping_planes_fragment,\n    clipping_planes_pars_fragment: clipping_planes_pars_fragment,\n    clipping_planes_pars_vertex: clipping_planes_pars_vertex,\n    clipping_planes_vertex: clipping_planes_vertex,\n    color_fragment: color_fragment,\n    color_pars_fragment: color_pars_fragment,\n    color_pars_vertex: color_pars_vertex,\n    color_vertex: color_vertex,\n    common: common,\n    cube_uv_reflection_fragment: cube_uv_reflection_fragment,\n    defaultnormal_vertex: defaultnormal_vertex,\n    displacementmap_pars_vertex: displacementmap_pars_vertex,\n    displacementmap_vertex: displacementmap_vertex,\n    emissivemap_fragment: emissivemap_fragment,\n    emissivemap_pars_fragment: emissivemap_pars_fragment,\n    encodings_fragment: encodings_fragment,\n    encodings_pars_fragment: encodings_pars_fragment,\n    envmap_fragment: envmap_fragment,\n    envmap_pars_fragment: envmap_pars_fragment,\n    envmap_pars_vertex: envmap_pars_vertex,\n    envmap_physical_pars_fragment: envmap_physical_pars_fragment,\n    envmap_vertex: envmap_vertex,\n    fog_vertex: fog_vertex,\n    fog_pars_vertex: fog_pars_vertex,\n    fog_fragment: fog_fragment,\n    fog_pars_fragment: fog_pars_fragment,\n    gradientmap_pars_fragment: gradientmap_pars_fragment,\n    lightmap_fragment: lightmap_fragment,\n    lightmap_pars_fragment: lightmap_pars_fragment,\n    lights_lambert_vertex: lights_lambert_vertex,\n    lights_pars_begin: lights_pars_begin,\n    lights_phong_fragment: lights_phong_fragment,\n    lights_phong_pars_fragment: lights_phong_pars_fragment,\n    lights_physical_fragment: lights_physical_fragment,\n    lights_physical_pars_fragment: lights_physical_pars_fragment,\n    lights_fragment_begin: lights_fragment_begin,\n    lights_fragment_maps: lights_fragment_maps,\n    lights_fragment_end: lights_fragment_end,\n    logdepthbuf_fragment: logdepthbuf_fragment,\n    logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n    logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n    logdepthbuf_vertex: logdepthbuf_vertex,\n    map_fragment: map_fragment,\n    map_pars_fragment: map_pars_fragment,\n    map_particle_fragment: map_particle_fragment,\n    map_particle_pars_fragment: map_particle_pars_fragment,\n    metalnessmap_fragment: metalnessmap_fragment,\n    metalnessmap_pars_fragment: metalnessmap_pars_fragment,\n    morphnormal_vertex: morphnormal_vertex,\n    morphtarget_pars_vertex: morphtarget_pars_vertex,\n    morphtarget_vertex: morphtarget_vertex,\n    normal_fragment_begin: normal_fragment_begin,\n    normal_fragment_maps: normal_fragment_maps,\n    normalmap_pars_fragment: normalmap_pars_fragment,\n    packing: packing,\n    premultiplied_alpha_fragment: premultiplied_alpha_fragment,\n    project_vertex: project_vertex,\n    dithering_fragment: dithering_fragment,\n    dithering_pars_fragment: dithering_pars_fragment,\n    roughnessmap_fragment: roughnessmap_fragment,\n    roughnessmap_pars_fragment: roughnessmap_pars_fragment,\n    shadowmap_pars_fragment: shadowmap_pars_fragment,\n    shadowmap_pars_vertex: shadowmap_pars_vertex,\n    shadowmap_vertex: shadowmap_vertex,\n    shadowmask_pars_fragment: shadowmask_pars_fragment,\n    skinbase_vertex: skinbase_vertex,\n    skinning_pars_vertex: skinning_pars_vertex,\n    skinning_vertex: skinning_vertex,\n    skinnormal_vertex: skinnormal_vertex,\n    specularmap_fragment: specularmap_fragment,\n    specularmap_pars_fragment: specularmap_pars_fragment,\n    tonemapping_fragment: tonemapping_fragment,\n    tonemapping_pars_fragment: tonemapping_pars_fragment,\n    uv_pars_fragment: uv_pars_fragment,\n    uv_pars_vertex: uv_pars_vertex,\n    uv_vertex: uv_vertex,\n    uv2_pars_fragment: uv2_pars_fragment,\n    uv2_pars_vertex: uv2_pars_vertex,\n    uv2_vertex: uv2_vertex,\n    worldpos_vertex: worldpos_vertex,\n\n    cube_frag: cube_frag,\n    cube_vert: cube_vert,\n    depth_frag: depth_frag,\n    depth_vert: depth_vert,\n    distanceRGBA_frag: distanceRGBA_frag,\n    distanceRGBA_vert: distanceRGBA_vert,\n    equirect_frag: equirect_frag,\n    equirect_vert: equirect_vert,\n    linedashed_frag: linedashed_frag,\n    linedashed_vert: linedashed_vert,\n    meshbasic_frag: meshbasic_frag,\n    meshbasic_vert: meshbasic_vert,\n    meshlambert_frag: meshlambert_frag,\n    meshlambert_vert: meshlambert_vert,\n    meshphong_frag: meshphong_frag,\n    meshphong_vert: meshphong_vert,\n    meshphysical_frag: meshphysical_frag,\n    meshphysical_vert: meshphysical_vert,\n    normal_frag: normal_frag,\n    normal_vert: normal_vert,\n    points_frag: points_frag,\n    points_vert: points_vert,\n    shadow_frag: shadow_frag,\n    shadow_vert: shadow_vert,\n    sprite_frag: sprite_frag,\n    sprite_vert: sprite_vert,\n  };\n\n  /**\n   * Uniform Utilities\n   */\n\n  var UniformsUtils = {\n    merge: function (uniforms) {\n      var merged = {};\n\n      for (var u = 0; u < uniforms.length; u++) {\n        var tmp = this.clone(uniforms[u]);\n\n        for (var p in tmp) {\n          merged[p] = tmp[p];\n        }\n      }\n\n      return merged;\n    },\n\n    clone: function (uniforms_src) {\n      var uniforms_dst = {};\n\n      for (var u in uniforms_src) {\n        uniforms_dst[u] = {};\n\n        for (var p in uniforms_src[u]) {\n          var parameter_src = uniforms_src[u][p];\n\n          if (\n            parameter_src &&\n            (parameter_src.isColor ||\n              parameter_src.isMatrix3 ||\n              parameter_src.isMatrix4 ||\n              parameter_src.isVector2 ||\n              parameter_src.isVector3 ||\n              parameter_src.isVector4 ||\n              parameter_src.isTexture)\n          ) {\n            uniforms_dst[u][p] = parameter_src.clone();\n          } else if (Array.isArray(parameter_src)) {\n            uniforms_dst[u][p] = parameter_src.slice();\n          } else {\n            uniforms_dst[u][p] = parameter_src;\n          }\n        }\n      }\n\n      return uniforms_dst;\n    },\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  var ColorKeywords = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32,\n  };\n\n  function Color(r, g, b) {\n    if (g === undefined && b === undefined) {\n      // r is THREE.Color, hex or string\n      return this.set(r);\n    }\n\n    return this.setRGB(r, g, b);\n  }\n\n  Object.assign(Color.prototype, {\n    isColor: true,\n\n    r: 1,\n    g: 1,\n    b: 1,\n\n    set: function (value) {\n      if (value && value.isColor) {\n        this.copy(value);\n      } else if (typeof value === \"number\") {\n        this.setHex(value);\n      } else if (typeof value === \"string\") {\n        this.setStyle(value);\n      }\n\n      return this;\n    },\n\n    setScalar: function (scalar) {\n      this.r = scalar;\n      this.g = scalar;\n      this.b = scalar;\n\n      return this;\n    },\n\n    setHex: function (hex) {\n      hex = Math.floor(hex);\n\n      this.r = ((hex >> 16) & 255) / 255;\n      this.g = ((hex >> 8) & 255) / 255;\n      this.b = (hex & 255) / 255;\n\n      return this;\n    },\n\n    setRGB: function (r, g, b) {\n      this.r = r;\n      this.g = g;\n      this.b = b;\n\n      return this;\n    },\n\n    setHSL: (function () {\n      function hue2rgb(p, q, t) {\n        if (t < 0) t += 1;\n        if (t > 1) t -= 1;\n        if (t < 1 / 6) return p + (q - p) * 6 * t;\n        if (t < 1 / 2) return q;\n        if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n        return p;\n      }\n\n      return function setHSL(h, s, l) {\n        // h,s,l ranges are in 0.0 - 1.0\n        h = _Math.euclideanModulo(h, 1);\n        s = _Math.clamp(s, 0, 1);\n        l = _Math.clamp(l, 0, 1);\n\n        if (s === 0) {\n          this.r = this.g = this.b = l;\n        } else {\n          var p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n          var q = 2 * l - p;\n\n          this.r = hue2rgb(q, p, h + 1 / 3);\n          this.g = hue2rgb(q, p, h);\n          this.b = hue2rgb(q, p, h - 1 / 3);\n        }\n\n        return this;\n      };\n    })(),\n\n    setStyle: function (style) {\n      function handleAlpha(string) {\n        if (string === undefined) return;\n\n        if (parseFloat(string) < 1) {\n          console.warn(\n            \"THREE.Color: Alpha component of \" + style + \" will be ignored.\"\n          );\n        }\n      }\n\n      var m;\n\n      if ((m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style))) {\n        // rgb / hsl\n\n        var color;\n        var name = m[1];\n        var components = m[2];\n\n        switch (name) {\n          case \"rgb\":\n          case \"rgba\":\n            if (\n              (color =\n                /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(\n                  components\n                ))\n            ) {\n              // rgb(255,0,0) rgba(255,0,0,0.5)\n              this.r = Math.min(255, parseInt(color[1], 10)) / 255;\n              this.g = Math.min(255, parseInt(color[2], 10)) / 255;\n              this.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\n              handleAlpha(color[5]);\n\n              return this;\n            }\n\n            if (\n              (color =\n                /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(\n                  components\n                ))\n            ) {\n              // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n              this.r = Math.min(100, parseInt(color[1], 10)) / 100;\n              this.g = Math.min(100, parseInt(color[2], 10)) / 100;\n              this.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\n              handleAlpha(color[5]);\n\n              return this;\n            }\n\n            break;\n\n          case \"hsl\":\n          case \"hsla\":\n            if (\n              (color =\n                /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(\n                  components\n                ))\n            ) {\n              // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n              var h = parseFloat(color[1]) / 360;\n              var s = parseInt(color[2], 10) / 100;\n              var l = parseInt(color[3], 10) / 100;\n\n              handleAlpha(color[5]);\n\n              return this.setHSL(h, s, l);\n            }\n\n            break;\n        }\n      } else if ((m = /^\\#([A-Fa-f0-9]+)$/.exec(style))) {\n        // hex color\n\n        var hex = m[1];\n        var size = hex.length;\n\n        if (size === 3) {\n          // #ff0\n          this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n          this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n          this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\n          return this;\n        } else if (size === 6) {\n          // #ff0000\n          this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n          this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n          this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\n          return this;\n        }\n      }\n\n      if (style && style.length > 0) {\n        // color keywords\n        var hex = ColorKeywords[style];\n\n        if (hex !== undefined) {\n          // red\n          this.setHex(hex);\n        } else {\n          // unknown color\n          console.warn(\"THREE.Color: Unknown color \" + style);\n        }\n      }\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor(this.r, this.g, this.b);\n    },\n\n    copy: function (color) {\n      this.r = color.r;\n      this.g = color.g;\n      this.b = color.b;\n\n      return this;\n    },\n\n    copyGammaToLinear: function (color, gammaFactor) {\n      if (gammaFactor === undefined) gammaFactor = 2.0;\n\n      this.r = Math.pow(color.r, gammaFactor);\n      this.g = Math.pow(color.g, gammaFactor);\n      this.b = Math.pow(color.b, gammaFactor);\n\n      return this;\n    },\n\n    copyLinearToGamma: function (color, gammaFactor) {\n      if (gammaFactor === undefined) gammaFactor = 2.0;\n\n      var safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\n      this.r = Math.pow(color.r, safeInverse);\n      this.g = Math.pow(color.g, safeInverse);\n      this.b = Math.pow(color.b, safeInverse);\n\n      return this;\n    },\n\n    convertGammaToLinear: function (gammaFactor) {\n      this.copyGammaToLinear(this, gammaFactor);\n\n      return this;\n    },\n\n    convertLinearToGamma: function (gammaFactor) {\n      this.copyLinearToGamma(this, gammaFactor);\n\n      return this;\n    },\n\n    copySRGBToLinear: (function () {\n      function SRGBToLinear(c) {\n        return c < 0.04045\n          ? c * 0.0773993808\n          : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n      }\n\n      return function copySRGBToLinear(color) {\n        this.r = SRGBToLinear(color.r);\n        this.g = SRGBToLinear(color.g);\n        this.b = SRGBToLinear(color.b);\n\n        return this;\n      };\n    })(),\n\n    copyLinearToSRGB: (function () {\n      function LinearToSRGB(c) {\n        return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n      }\n\n      return function copyLinearToSRGB(color) {\n        this.r = LinearToSRGB(color.r);\n        this.g = LinearToSRGB(color.g);\n        this.b = LinearToSRGB(color.b);\n\n        return this;\n      };\n    })(),\n\n    convertSRGBToLinear: function () {\n      this.copySRGBToLinear(this);\n\n      return this;\n    },\n\n    convertLinearToSRGB: function () {\n      this.copyLinearToSRGB(this);\n\n      return this;\n    },\n\n    getHex: function () {\n      return (\n        ((this.r * 255) << 16) ^ ((this.g * 255) << 8) ^ ((this.b * 255) << 0)\n      );\n    },\n\n    getHexString: function () {\n      return (\"000000\" + this.getHex().toString(16)).slice(-6);\n    },\n\n    getHSL: function (target) {\n      // h,s,l ranges are in 0.0 - 1.0\n\n      if (target === undefined) {\n        console.warn(\"THREE.Color: .getHSL() target is now required\");\n        target = { h: 0, s: 0, l: 0 };\n      }\n\n      var r = this.r,\n        g = this.g,\n        b = this.b;\n\n      var max = Math.max(r, g, b);\n      var min = Math.min(r, g, b);\n\n      var hue, saturation;\n      var lightness = (min + max) / 2.0;\n\n      if (min === max) {\n        hue = 0;\n        saturation = 0;\n      } else {\n        var delta = max - min;\n\n        saturation =\n          lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n        switch (max) {\n          case r:\n            hue = (g - b) / delta + (g < b ? 6 : 0);\n            break;\n          case g:\n            hue = (b - r) / delta + 2;\n            break;\n          case b:\n            hue = (r - g) / delta + 4;\n            break;\n        }\n\n        hue /= 6;\n      }\n\n      target.h = hue;\n      target.s = saturation;\n      target.l = lightness;\n\n      return target;\n    },\n\n    getStyle: function () {\n      return (\n        \"rgb(\" +\n        ((this.r * 255) | 0) +\n        \",\" +\n        ((this.g * 255) | 0) +\n        \",\" +\n        ((this.b * 255) | 0) +\n        \")\"\n      );\n    },\n\n    offsetHSL: (function () {\n      var hsl = {};\n\n      return function (h, s, l) {\n        this.getHSL(hsl);\n\n        hsl.h += h;\n        hsl.s += s;\n        hsl.l += l;\n\n        this.setHSL(hsl.h, hsl.s, hsl.l);\n\n        return this;\n      };\n    })(),\n\n    add: function (color) {\n      this.r += color.r;\n      this.g += color.g;\n      this.b += color.b;\n\n      return this;\n    },\n\n    addColors: function (color1, color2) {\n      this.r = color1.r + color2.r;\n      this.g = color1.g + color2.g;\n      this.b = color1.b + color2.b;\n\n      return this;\n    },\n\n    addScalar: function (s) {\n      this.r += s;\n      this.g += s;\n      this.b += s;\n\n      return this;\n    },\n\n    sub: function (color) {\n      this.r = Math.max(0, this.r - color.r);\n      this.g = Math.max(0, this.g - color.g);\n      this.b = Math.max(0, this.b - color.b);\n\n      return this;\n    },\n\n    multiply: function (color) {\n      this.r *= color.r;\n      this.g *= color.g;\n      this.b *= color.b;\n\n      return this;\n    },\n\n    multiplyScalar: function (s) {\n      this.r *= s;\n      this.g *= s;\n      this.b *= s;\n\n      return this;\n    },\n\n    lerp: function (color, alpha) {\n      this.r += (color.r - this.r) * alpha;\n      this.g += (color.g - this.g) * alpha;\n      this.b += (color.b - this.b) * alpha;\n\n      return this;\n    },\n\n    equals: function (c) {\n      return c.r === this.r && c.g === this.g && c.b === this.b;\n    },\n\n    fromArray: function (array, offset) {\n      if (offset === undefined) offset = 0;\n\n      this.r = array[offset];\n      this.g = array[offset + 1];\n      this.b = array[offset + 2];\n\n      return this;\n    },\n\n    toArray: function (array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n\n      array[offset] = this.r;\n      array[offset + 1] = this.g;\n      array[offset + 2] = this.b;\n\n      return array;\n    },\n\n    toJSON: function () {\n      return this.getHex();\n    },\n  });\n\n  /**\n   * Uniforms library for shared webgl shaders\n   */\n\n  var UniformsLib = {\n    common: {\n      diffuse: { value: new Color(0xeeeeee) },\n      opacity: { value: 1.0 },\n\n      map: { value: null },\n      uvTransform: { value: new Matrix3() },\n\n      alphaMap: { value: null },\n    },\n\n    specularmap: {\n      specularMap: { value: null },\n    },\n\n    envmap: {\n      envMap: { value: null },\n      flipEnvMap: { value: -1 },\n      reflectivity: { value: 1.0 },\n      refractionRatio: { value: 0.98 },\n      maxMipLevel: { value: 0 },\n    },\n\n    aomap: {\n      aoMap: { value: null },\n      aoMapIntensity: { value: 1 },\n    },\n\n    lightmap: {\n      lightMap: { value: null },\n      lightMapIntensity: { value: 1 },\n    },\n\n    emissivemap: {\n      emissiveMap: { value: null },\n    },\n\n    bumpmap: {\n      bumpMap: { value: null },\n      bumpScale: { value: 1 },\n    },\n\n    normalmap: {\n      normalMap: { value: null },\n      normalScale: { value: new Vector2(1, 1) },\n    },\n\n    displacementmap: {\n      displacementMap: { value: null },\n      displacementScale: { value: 1 },\n      displacementBias: { value: 0 },\n    },\n\n    roughnessmap: {\n      roughnessMap: { value: null },\n    },\n\n    metalnessmap: {\n      metalnessMap: { value: null },\n    },\n\n    gradientmap: {\n      gradientMap: { value: null },\n    },\n\n    fog: {\n      fogDensity: { value: 0.00025 },\n      fogNear: { value: 1 },\n      fogFar: { value: 2000 },\n      fogColor: { value: new Color(0xffffff) },\n    },\n\n    lights: {\n      ambientLightColor: { value: [] },\n\n      directionalLights: {\n        value: [],\n        properties: {\n          direction: {},\n          color: {},\n\n          shadow: {},\n          shadowBias: {},\n          shadowRadius: {},\n          shadowMapSize: {},\n        },\n      },\n\n      directionalShadowMap: { value: [] },\n      directionalShadowMatrix: { value: [] },\n\n      spotLights: {\n        value: [],\n        properties: {\n          color: {},\n          position: {},\n          direction: {},\n          distance: {},\n          coneCos: {},\n          penumbraCos: {},\n          decay: {},\n\n          shadow: {},\n          shadowBias: {},\n          shadowRadius: {},\n          shadowMapSize: {},\n        },\n      },\n\n      spotShadowMap: { value: [] },\n      spotShadowMatrix: { value: [] },\n\n      pointLights: {\n        value: [],\n        properties: {\n          color: {},\n          position: {},\n          decay: {},\n          distance: {},\n\n          shadow: {},\n          shadowBias: {},\n          shadowRadius: {},\n          shadowMapSize: {},\n          shadowCameraNear: {},\n          shadowCameraFar: {},\n        },\n      },\n\n      pointShadowMap: { value: [] },\n      pointShadowMatrix: { value: [] },\n\n      hemisphereLights: {\n        value: [],\n        properties: {\n          direction: {},\n          skyColor: {},\n          groundColor: {},\n        },\n      },\n\n      // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n      rectAreaLights: {\n        value: [],\n        properties: {\n          color: {},\n          position: {},\n          width: {},\n          height: {},\n        },\n      },\n    },\n\n    points: {\n      diffuse: { value: new Color(0xeeeeee) },\n      opacity: { value: 1.0 },\n      size: { value: 1.0 },\n      scale: { value: 1.0 },\n      map: { value: null },\n      uvTransform: { value: new Matrix3() },\n    },\n\n    sprite: {\n      diffuse: { value: new Color(0xeeeeee) },\n      opacity: { value: 1.0 },\n      center: { value: new Vector2(0.5, 0.5) },\n      rotation: { value: 0.0 },\n      map: { value: null },\n      uvTransform: { value: new Matrix3() },\n    },\n  };\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   * @author mikael emtinger / http://gomo.se/\n   */\n\n  var ShaderLib = {\n    basic: {\n      uniforms: UniformsUtils.merge([\n        UniformsLib.common,\n        UniformsLib.specularmap,\n        UniformsLib.envmap,\n        UniformsLib.aomap,\n        UniformsLib.lightmap,\n        UniformsLib.fog,\n      ]),\n\n      vertexShader: ShaderChunk.meshbasic_vert,\n      fragmentShader: ShaderChunk.meshbasic_frag,\n    },\n\n    lambert: {\n      uniforms: UniformsUtils.merge([\n        UniformsLib.common,\n        UniformsLib.specularmap,\n        UniformsLib.envmap,\n        UniformsLib.aomap,\n        UniformsLib.lightmap,\n        UniformsLib.emissivemap,\n        UniformsLib.fog,\n        UniformsLib.lights,\n        {\n          emissive: { value: new Color(0x000000) },\n        },\n      ]),\n\n      vertexShader: ShaderChunk.meshlambert_vert,\n      fragmentShader: ShaderChunk.meshlambert_frag,\n    },\n\n    phong: {\n      uniforms: UniformsUtils.merge([\n        UniformsLib.common,\n        UniformsLib.specularmap,\n        UniformsLib.envmap,\n        UniformsLib.aomap,\n        UniformsLib.lightmap,\n        UniformsLib.emissivemap,\n        UniformsLib.bumpmap,\n        UniformsLib.normalmap,\n        UniformsLib.displacementmap,\n        UniformsLib.gradientmap,\n        UniformsLib.fog,\n        UniformsLib.lights,\n        {\n          emissive: { value: new Color(0x000000) },\n          specular: { value: new Color(0x111111) },\n          shininess: { value: 30 },\n        },\n      ]),\n\n      vertexShader: ShaderChunk.meshphong_vert,\n      fragmentShader: ShaderChunk.meshphong_frag,\n    },\n\n    standard: {\n      uniforms: UniformsUtils.merge([\n        UniformsLib.common,\n        UniformsLib.envmap,\n        UniformsLib.aomap,\n        UniformsLib.lightmap,\n        UniformsLib.emissivemap,\n        UniformsLib.bumpmap,\n        UniformsLib.normalmap,\n        UniformsLib.displacementmap,\n        UniformsLib.roughnessmap,\n        UniformsLib.metalnessmap,\n        UniformsLib.fog,\n        UniformsLib.lights,\n        {\n          emissive: { value: new Color(0x000000) },\n          roughness: { value: 0.5 },\n          metalness: { value: 0.5 },\n          envMapIntensity: { value: 1 }, // temporary\n        },\n      ]),\n\n      vertexShader: ShaderChunk.meshphysical_vert,\n      fragmentShader: ShaderChunk.meshphysical_frag,\n    },\n\n    points: {\n      uniforms: UniformsUtils.merge([UniformsLib.points, UniformsLib.fog]),\n\n      vertexShader: ShaderChunk.points_vert,\n      fragmentShader: ShaderChunk.points_frag,\n    },\n\n    dashed: {\n      uniforms: UniformsUtils.merge([\n        UniformsLib.common,\n        UniformsLib.fog,\n        {\n          scale: { value: 1 },\n          dashSize: { value: 1 },\n          totalSize: { value: 2 },\n        },\n      ]),\n\n      vertexShader: ShaderChunk.linedashed_vert,\n      fragmentShader: ShaderChunk.linedashed_frag,\n    },\n\n    depth: {\n      uniforms: UniformsUtils.merge([\n        UniformsLib.common,\n        UniformsLib.displacementmap,\n      ]),\n\n      vertexShader: ShaderChunk.depth_vert,\n      fragmentShader: ShaderChunk.depth_frag,\n    },\n\n    normal: {\n      uniforms: UniformsUtils.merge([\n        UniformsLib.common,\n        UniformsLib.bumpmap,\n        UniformsLib.normalmap,\n        UniformsLib.displacementmap,\n        {\n          opacity: { value: 1.0 },\n        },\n      ]),\n\n      vertexShader: ShaderChunk.normal_vert,\n      fragmentShader: ShaderChunk.normal_frag,\n    },\n\n    sprite: {\n      uniforms: UniformsUtils.merge([UniformsLib.sprite, UniformsLib.fog]),\n\n      vertexShader: ShaderChunk.sprite_vert,\n      fragmentShader: ShaderChunk.sprite_frag,\n    },\n\n    /* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\n    cube: {\n      uniforms: {\n        tCube: { value: null },\n        tFlip: { value: -1 },\n        opacity: { value: 1.0 },\n      },\n\n      vertexShader: ShaderChunk.cube_vert,\n      fragmentShader: ShaderChunk.cube_frag,\n    },\n\n    equirect: {\n      uniforms: {\n        tEquirect: { value: null },\n      },\n\n      vertexShader: ShaderChunk.equirect_vert,\n      fragmentShader: ShaderChunk.equirect_frag,\n    },\n\n    distanceRGBA: {\n      uniforms: UniformsUtils.merge([\n        UniformsLib.common,\n        UniformsLib.displacementmap,\n        {\n          referencePosition: { value: new Vector3() },\n          nearDistance: { value: 1 },\n          farDistance: { value: 1000 },\n        },\n      ]),\n\n      vertexShader: ShaderChunk.distanceRGBA_vert,\n      fragmentShader: ShaderChunk.distanceRGBA_frag,\n    },\n\n    shadow: {\n      uniforms: UniformsUtils.merge([\n        UniformsLib.lights,\n        UniformsLib.fog,\n        {\n          color: { value: new Color(0x00000) },\n          opacity: { value: 1.0 },\n        },\n      ]),\n\n      vertexShader: ShaderChunk.shadow_vert,\n      fragmentShader: ShaderChunk.shadow_frag,\n    },\n  };\n\n  ShaderLib.physical = {\n    uniforms: UniformsUtils.merge([\n      ShaderLib.standard.uniforms,\n      {\n        clearCoat: { value: 0 },\n        clearCoatRoughness: { value: 0 },\n      },\n    ]),\n\n    vertexShader: ShaderChunk.meshphysical_vert,\n    fragmentShader: ShaderChunk.meshphysical_frag,\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLAnimation() {\n    var context = null;\n    var isAnimating = false;\n    var animationLoop = null;\n\n    function onAnimationFrame(time, frame) {\n      if (isAnimating === false) return;\n\n      animationLoop(time, frame);\n\n      context.requestAnimationFrame(onAnimationFrame);\n    }\n\n    return {\n      start: function () {\n        if (isAnimating === true) return;\n        if (animationLoop === null) return;\n\n        context.requestAnimationFrame(onAnimationFrame);\n\n        isAnimating = true;\n      },\n\n      stop: function () {\n        isAnimating = false;\n      },\n\n      setAnimationLoop: function (callback) {\n        animationLoop = callback;\n      },\n\n      setContext: function (value) {\n        context = value;\n      },\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLAttributes(gl) {\n    var buffers = new WeakMap();\n\n    function createBuffer(attribute, bufferType) {\n      var array = attribute.array;\n      var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n\n      var buffer = gl.createBuffer();\n\n      gl.bindBuffer(bufferType, buffer);\n      gl.bufferData(bufferType, array, usage);\n\n      attribute.onUploadCallback();\n\n      var type = gl.FLOAT;\n\n      if (array instanceof Float32Array) {\n        type = gl.FLOAT;\n      } else if (array instanceof Float64Array) {\n        console.warn(\n          \"THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.\"\n        );\n      } else if (array instanceof Uint16Array) {\n        type = gl.UNSIGNED_SHORT;\n      } else if (array instanceof Int16Array) {\n        type = gl.SHORT;\n      } else if (array instanceof Uint32Array) {\n        type = gl.UNSIGNED_INT;\n      } else if (array instanceof Int32Array) {\n        type = gl.INT;\n      } else if (array instanceof Int8Array) {\n        type = gl.BYTE;\n      } else if (array instanceof Uint8Array) {\n        type = gl.UNSIGNED_BYTE;\n      }\n\n      return {\n        buffer: buffer,\n        type: type,\n        bytesPerElement: array.BYTES_PER_ELEMENT,\n        version: attribute.version,\n      };\n    }\n\n    function updateBuffer(buffer, attribute, bufferType) {\n      var array = attribute.array;\n      var updateRange = attribute.updateRange;\n\n      gl.bindBuffer(bufferType, buffer);\n\n      if (attribute.dynamic === false) {\n        gl.bufferData(bufferType, array, gl.STATIC_DRAW);\n      } else if (updateRange.count === -1) {\n        // Not using update ranges\n\n        gl.bufferSubData(bufferType, 0, array);\n      } else if (updateRange.count === 0) {\n        console.error(\n          \"THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.\"\n        );\n      } else {\n        gl.bufferSubData(\n          bufferType,\n          updateRange.offset * array.BYTES_PER_ELEMENT,\n          array.subarray(\n            updateRange.offset,\n            updateRange.offset + updateRange.count\n          )\n        );\n\n        updateRange.count = -1; // reset range\n      }\n    }\n\n    //\n\n    function get(attribute) {\n      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\n      return buffers.get(attribute);\n    }\n\n    function remove(attribute) {\n      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\n      var data = buffers.get(attribute);\n\n      if (data) {\n        gl.deleteBuffer(data.buffer);\n\n        buffers.delete(attribute);\n      }\n    }\n\n    function update(attribute, bufferType) {\n      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\n      var data = buffers.get(attribute);\n\n      if (data === undefined) {\n        buffers.set(attribute, createBuffer(attribute, bufferType));\n      } else if (data.version < attribute.version) {\n        updateBuffer(data.buffer, attribute, bufferType);\n\n        data.version = attribute.version;\n      }\n    }\n\n    return {\n      get: get,\n      remove: remove,\n      update: update,\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n   * @author bhouston / http://clara.io\n   */\n\n  function Euler(x, y, z, order) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this._z = z || 0;\n    this._order = order || Euler.DefaultOrder;\n  }\n\n  Euler.RotationOrders = [\"XYZ\", \"YZX\", \"ZXY\", \"XZY\", \"YXZ\", \"ZYX\"];\n\n  Euler.DefaultOrder = \"XYZ\";\n\n  Object.defineProperties(Euler.prototype, {\n    x: {\n      get: function () {\n        return this._x;\n      },\n\n      set: function (value) {\n        this._x = value;\n        this.onChangeCallback();\n      },\n    },\n\n    y: {\n      get: function () {\n        return this._y;\n      },\n\n      set: function (value) {\n        this._y = value;\n        this.onChangeCallback();\n      },\n    },\n\n    z: {\n      get: function () {\n        return this._z;\n      },\n\n      set: function (value) {\n        this._z = value;\n        this.onChangeCallback();\n      },\n    },\n\n    order: {\n      get: function () {\n        return this._order;\n      },\n\n      set: function (value) {\n        this._order = value;\n        this.onChangeCallback();\n      },\n    },\n  });\n\n  Object.assign(Euler.prototype, {\n    isEuler: true,\n\n    set: function (x, y, z, order) {\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      this._order = order || this._order;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor(this._x, this._y, this._z, this._order);\n    },\n\n    copy: function (euler) {\n      this._x = euler._x;\n      this._y = euler._y;\n      this._z = euler._z;\n      this._order = euler._order;\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    setFromRotationMatrix: function (m, order, update) {\n      var clamp = _Math.clamp;\n\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n      var te = m.elements;\n      var m11 = te[0],\n        m12 = te[4],\n        m13 = te[8];\n      var m21 = te[1],\n        m22 = te[5],\n        m23 = te[9];\n      var m31 = te[2],\n        m32 = te[6],\n        m33 = te[10];\n\n      order = order || this._order;\n\n      if (order === \"XYZ\") {\n        this._y = Math.asin(clamp(m13, -1, 1));\n\n        if (Math.abs(m13) < 0.99999) {\n          this._x = Math.atan2(-m23, m33);\n          this._z = Math.atan2(-m12, m11);\n        } else {\n          this._x = Math.atan2(m32, m22);\n          this._z = 0;\n        }\n      } else if (order === \"YXZ\") {\n        this._x = Math.asin(-clamp(m23, -1, 1));\n\n        if (Math.abs(m23) < 0.99999) {\n          this._y = Math.atan2(m13, m33);\n          this._z = Math.atan2(m21, m22);\n        } else {\n          this._y = Math.atan2(-m31, m11);\n          this._z = 0;\n        }\n      } else if (order === \"ZXY\") {\n        this._x = Math.asin(clamp(m32, -1, 1));\n\n        if (Math.abs(m32) < 0.99999) {\n          this._y = Math.atan2(-m31, m33);\n          this._z = Math.atan2(-m12, m22);\n        } else {\n          this._y = 0;\n          this._z = Math.atan2(m21, m11);\n        }\n      } else if (order === \"ZYX\") {\n        this._y = Math.asin(-clamp(m31, -1, 1));\n\n        if (Math.abs(m31) < 0.99999) {\n          this._x = Math.atan2(m32, m33);\n          this._z = Math.atan2(m21, m11);\n        } else {\n          this._x = 0;\n          this._z = Math.atan2(-m12, m22);\n        }\n      } else if (order === \"YZX\") {\n        this._z = Math.asin(clamp(m21, -1, 1));\n\n        if (Math.abs(m21) < 0.99999) {\n          this._x = Math.atan2(-m23, m22);\n          this._y = Math.atan2(-m31, m11);\n        } else {\n          this._x = 0;\n          this._y = Math.atan2(m13, m33);\n        }\n      } else if (order === \"XZY\") {\n        this._z = Math.asin(-clamp(m12, -1, 1));\n\n        if (Math.abs(m12) < 0.99999) {\n          this._x = Math.atan2(m32, m22);\n          this._y = Math.atan2(m13, m11);\n        } else {\n          this._x = Math.atan2(-m23, m33);\n          this._y = 0;\n        }\n      } else {\n        console.warn(\n          \"THREE.Euler: .setFromRotationMatrix() given unsupported order: \" +\n            order\n        );\n      }\n\n      this._order = order;\n\n      if (update !== false) this.onChangeCallback();\n\n      return this;\n    },\n\n    setFromQuaternion: (function () {\n      var matrix = new Matrix4();\n\n      return function setFromQuaternion(q, order, update) {\n        matrix.makeRotationFromQuaternion(q);\n\n        return this.setFromRotationMatrix(matrix, order, update);\n      };\n    })(),\n\n    setFromVector3: function (v, order) {\n      return this.set(v.x, v.y, v.z, order || this._order);\n    },\n\n    reorder: (function () {\n      // WARNING: this discards revolution information -bhouston\n\n      var q = new Quaternion();\n\n      return function reorder(newOrder) {\n        q.setFromEuler(this);\n\n        return this.setFromQuaternion(q, newOrder);\n      };\n    })(),\n\n    equals: function (euler) {\n      return (\n        euler._x === this._x &&\n        euler._y === this._y &&\n        euler._z === this._z &&\n        euler._order === this._order\n      );\n    },\n\n    fromArray: function (array) {\n      this._x = array[0];\n      this._y = array[1];\n      this._z = array[2];\n      if (array[3] !== undefined) this._order = array[3];\n\n      this.onChangeCallback();\n\n      return this;\n    },\n\n    toArray: function (array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n\n      array[offset] = this._x;\n      array[offset + 1] = this._y;\n      array[offset + 2] = this._z;\n      array[offset + 3] = this._order;\n\n      return array;\n    },\n\n    toVector3: function (optionalResult) {\n      if (optionalResult) {\n        return optionalResult.set(this._x, this._y, this._z);\n      } else {\n        return new Vector3(this._x, this._y, this._z);\n      }\n    },\n\n    onChange: function (callback) {\n      this.onChangeCallback = callback;\n\n      return this;\n    },\n\n    onChangeCallback: function () {},\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function Layers() {\n    this.mask = 1 | 0;\n  }\n\n  Object.assign(Layers.prototype, {\n    set: function (channel) {\n      this.mask = (1 << channel) | 0;\n    },\n\n    enable: function (channel) {\n      this.mask |= (1 << channel) | 0;\n    },\n\n    toggle: function (channel) {\n      this.mask ^= (1 << channel) | 0;\n    },\n\n    disable: function (channel) {\n      this.mask &= ~((1 << channel) | 0);\n    },\n\n    test: function (layers) {\n      return (this.mask & layers.mask) !== 0;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author WestLangley / http://github.com/WestLangley\n   * @author elephantatwork / www.elephantatwork.ch\n   */\n\n  var object3DId = 0;\n\n  function Object3D() {\n    Object.defineProperty(this, \"id\", { value: object3DId++ });\n\n    this.uuid = _Math.generateUUID();\n\n    this.name = \"\";\n    this.type = \"Object3D\";\n\n    this.parent = null;\n    this.children = [];\n\n    this.up = Object3D.DefaultUp.clone();\n\n    var position = new Vector3();\n    var rotation = new Euler();\n    var quaternion = new Quaternion();\n    var scale = new Vector3(1, 1, 1);\n\n    var scope = this;\n\n    function onRotationChange() {\n      quaternion.setFromEuler(rotation, false);\n      Object3D.UpdateList.push(scope);\n      scope.matrixNeedsUpdate = true;\n    }\n\n    function onQuaternionChange() {\n      rotation.setFromQuaternion(quaternion, undefined, false);\n      Object3D.UpdateList.push(scope);\n      scope.matrixNeedsUpdate = true;\n    }\n\n    function onPositionChange() {\n      Object3D.UpdateList.push(scope);\n      scope.matrixNeedsUpdate = true;\n    }\n\n    function onScaleChange() {\n      Object3D.UpdateList.push(scope);\n      scope.matrixNeedsUpdate = true;\n    }\n\n    rotation.onChange(onRotationChange);\n    quaternion.onChange(onQuaternionChange);\n    position.onChange(onPositionChange);\n    scale.onChange(onScaleChange);\n\n    Object.defineProperties(this, {\n      position: {\n        enumerable: true,\n        value: position,\n      },\n      rotation: {\n        enumerable: true,\n        value: rotation,\n      },\n      quaternion: {\n        enumerable: true,\n        value: quaternion,\n      },\n      scale: {\n        enumerable: true,\n        value: scale,\n      },\n      modelViewMatrix: {\n        value: new Matrix4(),\n      },\n      normalMatrix: {\n        value: new Matrix3(),\n      },\n    });\n\n    this.matrix = new Matrix4();\n    this.matrixWorld = new Matrix4();\n\n    this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n    this.matrixNeedsUpdate = false;\n    this.matrixWorldNeedsUpdate = false;\n\n    this.layers = new Layers();\n    this.visible = true;\n\n    this.castShadow = false;\n    this.receiveShadow = false;\n\n    this.frustumCulled = true;\n    this.renderOrder = 0;\n\n    this.userData = {};\n  }\n\n  Object3D.UpdateList = [];\n  Object3D.DefaultUp = new Vector3(0, 1, 0);\n  Object3D.DefaultMatrixAutoUpdate = true;\n\n  Object3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: Object3D,\n\n    isObject3D: true,\n\n    onBeforeRender: function () {},\n    onAfterRender: function () {},\n\n    applyMatrix: function (matrix) {\n      this.matrix.multiplyMatrices(matrix, this.matrix);\n\n      this.matrix.decompose(this.position, this.quaternion, this.scale);\n    },\n\n    applyQuaternion: function (q) {\n      this.quaternion.premultiply(q);\n\n      return this;\n    },\n\n    setRotationFromAxisAngle: function (axis, angle) {\n      // assumes axis is normalized\n\n      this.quaternion.setFromAxisAngle(axis, angle);\n    },\n\n    setRotationFromEuler: function (euler) {\n      this.quaternion.setFromEuler(euler, true);\n    },\n\n    setRotationFromMatrix: function (m) {\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n      this.quaternion.setFromRotationMatrix(m);\n    },\n\n    setRotationFromQuaternion: function (q) {\n      // assumes q is normalized\n\n      this.quaternion.copy(q);\n    },\n\n    rotateOnAxis: (function () {\n      // rotate object on axis in object space\n      // axis is assumed to be normalized\n\n      var q1 = new Quaternion();\n\n      return function rotateOnAxis(axis, angle) {\n        q1.setFromAxisAngle(axis, angle);\n\n        this.quaternion.multiply(q1);\n\n        return this;\n      };\n    })(),\n\n    rotateOnWorldAxis: (function () {\n      // rotate object on axis in world space\n      // axis is assumed to be normalized\n      // method assumes no rotated parent\n\n      var q1 = new Quaternion();\n\n      return function rotateOnWorldAxis(axis, angle) {\n        q1.setFromAxisAngle(axis, angle);\n\n        this.quaternion.premultiply(q1);\n\n        return this;\n      };\n    })(),\n\n    rotateX: (function () {\n      var v1 = new Vector3(1, 0, 0);\n\n      return function rotateX(angle) {\n        return this.rotateOnAxis(v1, angle);\n      };\n    })(),\n\n    rotateY: (function () {\n      var v1 = new Vector3(0, 1, 0);\n\n      return function rotateY(angle) {\n        return this.rotateOnAxis(v1, angle);\n      };\n    })(),\n\n    rotateZ: (function () {\n      var v1 = new Vector3(0, 0, 1);\n\n      return function rotateZ(angle) {\n        return this.rotateOnAxis(v1, angle);\n      };\n    })(),\n\n    translateOnAxis: (function () {\n      // translate object by distance along axis in object space\n      // axis is assumed to be normalized\n\n      var v1 = new Vector3();\n\n      return function translateOnAxis(axis, distance) {\n        v1.copy(axis).applyQuaternion(this.quaternion);\n\n        this.position.add(v1.multiplyScalar(distance));\n\n        return this;\n      };\n    })(),\n\n    translateX: (function () {\n      var v1 = new Vector3(1, 0, 0);\n\n      return function translateX(distance) {\n        return this.translateOnAxis(v1, distance);\n      };\n    })(),\n\n    translateY: (function () {\n      var v1 = new Vector3(0, 1, 0);\n\n      return function translateY(distance) {\n        return this.translateOnAxis(v1, distance);\n      };\n    })(),\n\n    translateZ: (function () {\n      var v1 = new Vector3(0, 0, 1);\n\n      return function translateZ(distance) {\n        return this.translateOnAxis(v1, distance);\n      };\n    })(),\n\n    localToWorld: function (vector) {\n      return vector.applyMatrix4(this.matrixWorld);\n    },\n\n    worldToLocal: (function () {\n      var m1 = new Matrix4();\n\n      return function worldToLocal(vector) {\n        return vector.applyMatrix4(m1.getInverse(this.matrixWorld));\n      };\n    })(),\n\n    lookAt: (function () {\n      // This method does not support objects with rotated and/or translated parent(s)\n\n      var m1 = new Matrix4();\n      var vector = new Vector3();\n\n      return function lookAt(x, y, z) {\n        if (x.isVector3) {\n          vector.copy(x);\n        } else {\n          vector.set(x, y, z);\n        }\n\n        if (this.isCamera) {\n          m1.lookAt(this.position, vector, this.up);\n        } else {\n          m1.lookAt(vector, this.position, this.up);\n        }\n\n        this.quaternion.setFromRotationMatrix(m1);\n      };\n    })(),\n\n    add: function (object) {\n      if (arguments.length > 1) {\n        for (var i = 0; i < arguments.length; i++) {\n          this.add(arguments[i]);\n        }\n\n        return this;\n      }\n\n      if (object === this) {\n        console.error(\n          \"THREE.Object3D.add: object can't be added as a child of itself.\",\n          object\n        );\n        return this;\n      }\n\n      if (object && object.isObject3D) {\n        if (object.parent !== null) {\n          object.parent.remove(object);\n        }\n\n        object.parent = this;\n        object.dispatchEvent({ type: \"added\" });\n\n        this.children.push(object);\n      } else {\n        console.error(\n          \"THREE.Object3D.add: object not an instance of THREE.Object3D.\",\n          object\n        );\n      }\n\n      return this;\n    },\n\n    remove: function (object) {\n      if (arguments.length > 1) {\n        for (var i = 0; i < arguments.length; i++) {\n          this.remove(arguments[i]);\n        }\n\n        return this;\n      }\n\n      var index = this.children.indexOf(object);\n\n      if (index !== -1) {\n        object.parent = null;\n\n        object.dispatchEvent({ type: \"removed\" });\n\n        this.children.splice(index, 1);\n      }\n\n      return this;\n    },\n\n    getObjectById: function (id) {\n      return this.getObjectByProperty(\"id\", id);\n    },\n\n    getObjectByName: function (name) {\n      return this.getObjectByProperty(\"name\", name);\n    },\n\n    getObjectByProperty: function (name, value) {\n      if (this[name] === value) return this;\n\n      for (var i = 0, l = this.children.length; i < l; i++) {\n        var child = this.children[i];\n        var object = child.getObjectByProperty(name, value);\n\n        if (object !== undefined) {\n          return object;\n        }\n      }\n\n      return undefined;\n    },\n\n    getWorldPosition: function (target) {\n      if (target === undefined) {\n        console.warn(\n          \"THREE.Object3D: .getWorldPosition() target is now required\"\n        );\n        target = new Vector3();\n      }\n\n      return target.setFromMatrixPosition(this.matrixWorld);\n    },\n\n    getWorldQuaternion: (function () {\n      var position = new Vector3();\n      var scale = new Vector3();\n\n      return function getWorldQuaternion(target) {\n        if (target === undefined) {\n          console.warn(\n            \"THREE.Object3D: .getWorldQuaternion() target is now required\"\n          );\n          target = new Quaternion();\n        }\n\n        this.matrixWorld.decompose(position, target, scale);\n\n        return target;\n      };\n    })(),\n\n    getWorldScale: (function () {\n      var position = new Vector3();\n      var quaternion = new Quaternion();\n\n      return function getWorldScale(target) {\n        if (target === undefined) {\n          console.warn(\n            \"THREE.Object3D: .getWorldScale() target is now required\"\n          );\n          target = new Vector3();\n        }\n\n        this.matrixWorld.decompose(position, quaternion, target);\n\n        return target;\n      };\n    })(),\n\n    getWorldDirection: (function () {\n      var quaternion = new Quaternion();\n\n      return function getWorldDirection(target) {\n        if (target === undefined) {\n          console.warn(\n            \"THREE.Object3D: .getWorldDirection() target is now required\"\n          );\n          target = new Vector3();\n        }\n\n        this.getWorldQuaternion(quaternion);\n\n        return target.set(0, 0, 1).applyQuaternion(quaternion);\n      };\n    })(),\n\n    raycast: function () {},\n\n    traverse: function (callback) {\n      callback(this);\n\n      var children = this.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].traverse(callback);\n      }\n    },\n\n    traverseVisible: function (callback) {\n      if (this.visible === false) return;\n\n      callback(this);\n\n      var children = this.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].traverseVisible(callback);\n      }\n    },\n\n    traverseAncestors: function (callback) {\n      var parent = this.parent;\n\n      if (parent !== null) {\n        callback(parent);\n\n        parent.traverseAncestors(callback);\n      }\n    },\n\n    updateMatrix: function () {\n      this.matrix.compose(this.position, this.quaternion, this.scale);\n\n      this.matrixNeedsUpdate = false;\n      this.matrixWorldNeedsUpdate = true;\n    },\n\n    updateMatrixWorld: function (force) {\n      if (this.matrixNeedsUpdate && this.matrixAutoUpdate) this.updateMatrix();\n\n      if (this.matrixWorldNeedsUpdate || force) {\n        if (this.parent === null) {\n          this.matrixWorld.copy(this.matrix);\n        } else {\n          this.matrixWorld.multiplyMatrices(\n            this.parent.matrixWorld,\n            this.matrix\n          );\n        }\n\n        this.matrixWorldNeedsUpdate = false;\n\n        force = true;\n      }\n\n      // update children\n\n      var children = this.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].updateMatrixWorld(force);\n      }\n    },\n\n    toJSON: function (meta) {\n      // meta is a string when called from JSON.stringify\n      var isRootObject = meta === undefined || typeof meta === \"string\";\n\n      var output = {};\n\n      // meta is a hash used to collect geometries, materials.\n      // not providing it implies that this is the root object\n      // being serialized.\n      if (isRootObject) {\n        // initialize meta obj\n        meta = {\n          geometries: {},\n          materials: {},\n          textures: {},\n          images: {},\n          shapes: {},\n        };\n\n        output.metadata = {\n          version: 4.5,\n          type: \"Object\",\n          generator: \"Object3D.toJSON\",\n        };\n      }\n\n      // standard Object3D serialization\n\n      var object = {};\n\n      object.uuid = this.uuid;\n      object.type = this.type;\n\n      if (this.name !== \"\") object.name = this.name;\n      if (this.castShadow === true) object.castShadow = true;\n      if (this.receiveShadow === true) object.receiveShadow = true;\n      if (this.visible === false) object.visible = false;\n      if (this.frustumCulled === false) object.frustumCulled = false;\n      if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n      if (JSON.stringify(this.userData) !== \"{}\")\n        object.userData = this.userData;\n      if (this.matrixNeedsUpdate) this.updateMatrix();\n\n      object.layers = this.layers.mask;\n      object.matrix = this.matrix.toArray();\n\n      if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;\n\n      //\n\n      function serialize(library, element) {\n        if (library[element.uuid] === undefined) {\n          library[element.uuid] = element.toJSON(meta);\n        }\n\n        return element.uuid;\n      }\n\n      if (this.isMesh || this.isLine || this.isPoints) {\n        object.geometry = serialize(meta.geometries, this.geometry);\n\n        var parameters = this.geometry.parameters;\n\n        if (parameters !== undefined && parameters.shapes !== undefined) {\n          var shapes = parameters.shapes;\n\n          if (Array.isArray(shapes)) {\n            for (var i = 0, l = shapes.length; i < l; i++) {\n              var shape = shapes[i];\n\n              serialize(meta.shapes, shape);\n            }\n          } else {\n            serialize(meta.shapes, shapes);\n          }\n        }\n      }\n\n      if (this.material !== undefined) {\n        if (Array.isArray(this.material)) {\n          var uuids = [];\n\n          for (var i = 0, l = this.material.length; i < l; i++) {\n            uuids.push(serialize(meta.materials, this.material[i]));\n          }\n\n          object.material = uuids;\n        } else {\n          object.material = serialize(meta.materials, this.material);\n        }\n      }\n\n      //\n\n      if (this.children.length > 0) {\n        object.children = [];\n\n        for (var i = 0; i < this.children.length; i++) {\n          object.children.push(this.children[i].toJSON(meta).object);\n        }\n      }\n\n      if (isRootObject) {\n        var geometries = extractFromCache(meta.geometries);\n        var materials = extractFromCache(meta.materials);\n        var textures = extractFromCache(meta.textures);\n        var images = extractFromCache(meta.images);\n        var shapes = extractFromCache(meta.shapes);\n\n        if (geometries.length > 0) output.geometries = geometries;\n        if (materials.length > 0) output.materials = materials;\n        if (textures.length > 0) output.textures = textures;\n        if (images.length > 0) output.images = images;\n        if (shapes.length > 0) output.shapes = shapes;\n      }\n\n      output.object = object;\n\n      return output;\n\n      // extract data from the cache hash\n      // remove metadata on each item\n      // and return as array\n      function extractFromCache(cache) {\n        var values = [];\n        for (var key in cache) {\n          var data = cache[key];\n          delete data.metadata;\n          values.push(data);\n        }\n        return values;\n      }\n    },\n\n    clone: function (recursive) {\n      return new this.constructor().copy(this, recursive);\n    },\n\n    copy: function (source, recursive) {\n      if (recursive === undefined) recursive = true;\n\n      this.name = source.name;\n\n      this.up.copy(source.up);\n\n      this.position.copy(source.position);\n      this.quaternion.copy(source.quaternion);\n      this.scale.copy(source.scale);\n\n      this.matrix.copy(source.matrix);\n      this.matrixWorld.copy(source.matrixWorld);\n\n      this.matrixAutoUpdate = source.matrixAutoUpdate;\n      this.matrixNeedsUpdate = source.matrixNeedsUpdate;\n      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n      this.layers.mask = source.layers.mask;\n      this.visible = source.visible;\n\n      this.castShadow = source.castShadow;\n      this.receiveShadow = source.receiveShadow;\n\n      this.frustumCulled = source.frustumCulled;\n      this.renderOrder = source.renderOrder;\n\n      this.userData = JSON.parse(JSON.stringify(source.userData));\n\n      if (recursive === true) {\n        for (var i = 0; i < source.children.length; i++) {\n          var child = source.children[i];\n          this.add(child.clone());\n        }\n      }\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author mikael emtinger / http://gomo.se/\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function Camera() {\n    Object3D.call(this);\n\n    this.type = \"Camera\";\n\n    this.matrixWorldInverse = new Matrix4();\n    this.projectionMatrix = new Matrix4();\n  }\n\n  Camera.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Camera,\n\n    isCamera: true,\n\n    copy: function (source, recursive) {\n      Object3D.prototype.copy.call(this, source, recursive);\n\n      this.matrixWorldInverse.copy(source.matrixWorldInverse);\n      this.projectionMatrix.copy(source.projectionMatrix);\n\n      return this;\n    },\n\n    getWorldDirection: (function () {\n      var quaternion = new Quaternion();\n\n      return function getWorldDirection(target) {\n        if (target === undefined) {\n          console.warn(\n            \"THREE.Camera: .getWorldDirection() target is now required\"\n          );\n          target = new Vector3();\n        }\n\n        this.getWorldQuaternion(quaternion);\n\n        return target.set(0, 0, -1).applyQuaternion(quaternion);\n      };\n    })(),\n\n    updateMatrixWorld: function (force) {\n      Object3D.prototype.updateMatrixWorld.call(this, force);\n\n      this.matrixWorldInverse.getInverse(this.matrixWorld);\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n  });\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author arose / http://github.com/arose\n   */\n\n  function OrthographicCamera(left, right, top, bottom, near, far) {\n    Camera.call(this);\n\n    this.type = \"OrthographicCamera\";\n\n    this.zoom = 1;\n    this.view = null;\n\n    this.left = left;\n    this.right = right;\n    this.top = top;\n    this.bottom = bottom;\n\n    this.near = near !== undefined ? near : 0.1;\n    this.far = far !== undefined ? far : 2000;\n\n    this.updateProjectionMatrix();\n  }\n\n  OrthographicCamera.prototype = Object.assign(\n    Object.create(Camera.prototype),\n    {\n      constructor: OrthographicCamera,\n\n      isOrthographicCamera: true,\n\n      copy: function (source, recursive) {\n        Camera.prototype.copy.call(this, source, recursive);\n\n        this.left = source.left;\n        this.right = source.right;\n        this.top = source.top;\n        this.bottom = source.bottom;\n        this.near = source.near;\n        this.far = source.far;\n\n        this.zoom = source.zoom;\n        this.view =\n          source.view === null ? null : Object.assign({}, source.view);\n\n        return this;\n      },\n\n      setViewOffset: function (fullWidth, fullHeight, x, y, width, height) {\n        if (this.view === null) {\n          this.view = {\n            enabled: true,\n            fullWidth: 1,\n            fullHeight: 1,\n            offsetX: 0,\n            offsetY: 0,\n            width: 1,\n            height: 1,\n          };\n        }\n\n        this.view.enabled = true;\n        this.view.fullWidth = fullWidth;\n        this.view.fullHeight = fullHeight;\n        this.view.offsetX = x;\n        this.view.offsetY = y;\n        this.view.width = width;\n        this.view.height = height;\n\n        this.updateProjectionMatrix();\n      },\n\n      clearViewOffset: function () {\n        if (this.view !== null) {\n          this.view.enabled = false;\n        }\n\n        this.updateProjectionMatrix();\n      },\n\n      updateProjectionMatrix: function () {\n        var dx = (this.right - this.left) / (2 * this.zoom);\n        var dy = (this.top - this.bottom) / (2 * this.zoom);\n        var cx = (this.right + this.left) / 2;\n        var cy = (this.top + this.bottom) / 2;\n\n        var left = cx - dx;\n        var right = cx + dx;\n        var top = cy + dy;\n        var bottom = cy - dy;\n\n        if (this.view !== null && this.view.enabled) {\n          var zoomW = this.zoom / (this.view.width / this.view.fullWidth);\n          var zoomH = this.zoom / (this.view.height / this.view.fullHeight);\n          var scaleW = (this.right - this.left) / this.view.width;\n          var scaleH = (this.top - this.bottom) / this.view.height;\n\n          left += scaleW * (this.view.offsetX / zoomW);\n          right = left + scaleW * (this.view.width / zoomW);\n          top -= scaleH * (this.view.offsetY / zoomH);\n          bottom = top - scaleH * (this.view.height / zoomH);\n        }\n\n        this.projectionMatrix.makeOrthographic(\n          left,\n          right,\n          top,\n          bottom,\n          this.near,\n          this.far\n        );\n      },\n\n      toJSON: function (meta) {\n        var data = Object3D.prototype.toJSON.call(this, meta);\n\n        data.object.zoom = this.zoom;\n        data.object.left = this.left;\n        data.object.right = this.right;\n        data.object.top = this.top;\n        data.object.bottom = this.bottom;\n        data.object.near = this.near;\n        data.object.far = this.far;\n\n        if (this.view !== null) data.object.view = Object.assign({}, this.view);\n\n        return data;\n      },\n    }\n  );\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function Face3(a, b, c, normal, color, materialIndex) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n\n    this.normal = normal && normal.isVector3 ? normal : new Vector3();\n    this.vertexNormals = Array.isArray(normal) ? normal : [];\n\n    this.color = color && color.isColor ? color : new Color();\n    this.vertexColors = Array.isArray(color) ? color : [];\n\n    this.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n  }\n\n  Object.assign(Face3.prototype, {\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (source) {\n      this.a = source.a;\n      this.b = source.b;\n      this.c = source.c;\n\n      this.normal.copy(source.normal);\n      this.color.copy(source.color);\n\n      this.materialIndex = source.materialIndex;\n\n      for (var i = 0, il = source.vertexNormals.length; i < il; i++) {\n        this.vertexNormals[i] = source.vertexNormals[i].clone();\n      }\n\n      for (var i = 0, il = source.vertexColors.length; i < il; i++) {\n        this.vertexColors[i] = source.vertexColors[i].clone();\n      }\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author kile / http://kile.stravaganza.org/\n   * @author alteredq / http://alteredqualia.com/\n   * @author mikael emtinger / http://gomo.se/\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * @author bhouston / http://clara.io\n   */\n\n  var geometryId = 0; // Geometry uses even numbers as Id\n\n  function Geometry() {\n    Object.defineProperty(this, \"id\", { value: (geometryId += 2) });\n\n    this.uuid = _Math.generateUUID();\n\n    this.name = \"\";\n    this.type = \"Geometry\";\n\n    this.vertices = [];\n    this.colors = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n\n    this.morphTargets = [];\n    this.morphNormals = [];\n\n    this.skinWeights = [];\n    this.skinIndices = [];\n\n    this.lineDistances = [];\n\n    this.boundingBox = null;\n    this.boundingSphere = null;\n\n    // update flags\n\n    this.elementsNeedUpdate = false;\n    this.verticesNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.lineDistancesNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  }\n\n  Geometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: Geometry,\n\n    isGeometry: true,\n\n    applyMatrix: function (matrix) {\n      var normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\n      for (var i = 0, il = this.vertices.length; i < il; i++) {\n        var vertex = this.vertices[i];\n        vertex.applyMatrix4(matrix);\n      }\n\n      for (var i = 0, il = this.faces.length; i < il; i++) {\n        var face = this.faces[i];\n        face.normal.applyMatrix3(normalMatrix).normalize();\n\n        for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n          face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n        }\n      }\n\n      if (this.boundingBox !== null) {\n        this.computeBoundingBox();\n      }\n\n      if (this.boundingSphere !== null) {\n        this.computeBoundingSphere();\n      }\n\n      this.verticesNeedUpdate = true;\n      this.normalsNeedUpdate = true;\n\n      return this;\n    },\n\n    rotateX: (function () {\n      // rotate geometry around world x-axis\n\n      var m1 = new Matrix4();\n\n      return function rotateX(angle) {\n        m1.makeRotationX(angle);\n\n        this.applyMatrix(m1);\n\n        return this;\n      };\n    })(),\n\n    rotateY: (function () {\n      // rotate geometry around world y-axis\n\n      var m1 = new Matrix4();\n\n      return function rotateY(angle) {\n        m1.makeRotationY(angle);\n\n        this.applyMatrix(m1);\n\n        return this;\n      };\n    })(),\n\n    rotateZ: (function () {\n      // rotate geometry around world z-axis\n\n      var m1 = new Matrix4();\n\n      return function rotateZ(angle) {\n        m1.makeRotationZ(angle);\n\n        this.applyMatrix(m1);\n\n        return this;\n      };\n    })(),\n\n    translate: (function () {\n      // translate geometry\n\n      var m1 = new Matrix4();\n\n      return function translate(x, y, z) {\n        m1.makeTranslation(x, y, z);\n\n        this.applyMatrix(m1);\n\n        return this;\n      };\n    })(),\n\n    scale: (function () {\n      // scale geometry\n\n      var m1 = new Matrix4();\n\n      return function scale(x, y, z) {\n        m1.makeScale(x, y, z);\n\n        this.applyMatrix(m1);\n\n        return this;\n      };\n    })(),\n\n    lookAt: (function () {\n      var obj = new Object3D();\n\n      return function lookAt(vector) {\n        obj.lookAt(vector);\n\n        obj.updateMatrix();\n\n        this.applyMatrix(obj.matrix);\n      };\n    })(),\n\n    fromBufferGeometry: function (geometry) {\n      var scope = this;\n\n      var indices = geometry.index !== null ? geometry.index.array : undefined;\n      var attributes = geometry.attributes;\n\n      var positions = attributes.position.array;\n      var normals =\n        attributes.normal !== undefined ? attributes.normal.array : undefined;\n      var colors =\n        attributes.color !== undefined ? attributes.color.array : undefined;\n      var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n      var uvs2 =\n        attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n\n      if (uvs2 !== undefined) this.faceVertexUvs[1] = [];\n\n      var tempNormals = [];\n      var tempUVs = [];\n      var tempUVs2 = [];\n\n      for (var i = 0, j = 0; i < positions.length; i += 3, j += 2) {\n        scope.vertices.push(\n          new Vector3(positions[i], positions[i + 1], positions[i + 2])\n        );\n\n        if (normals !== undefined) {\n          tempNormals.push(\n            new Vector3(normals[i], normals[i + 1], normals[i + 2])\n          );\n        }\n\n        if (colors !== undefined) {\n          scope.colors.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n        }\n\n        if (uvs !== undefined) {\n          tempUVs.push(new Vector2(uvs[j], uvs[j + 1]));\n        }\n\n        if (uvs2 !== undefined) {\n          tempUVs2.push(new Vector2(uvs2[j], uvs2[j + 1]));\n        }\n      }\n\n      function addFace(a, b, c, materialIndex) {\n        var vertexNormals =\n          normals !== undefined\n            ? [\n                tempNormals[a].clone(),\n                tempNormals[b].clone(),\n                tempNormals[c].clone(),\n              ]\n            : [];\n        var vertexColors =\n          colors !== undefined\n            ? [\n                scope.colors[a].clone(),\n                scope.colors[b].clone(),\n                scope.colors[c].clone(),\n              ]\n            : [];\n\n        var face = new Face3(\n          a,\n          b,\n          c,\n          vertexNormals,\n          vertexColors,\n          materialIndex\n        );\n\n        scope.faces.push(face);\n\n        if (uvs !== undefined) {\n          scope.faceVertexUvs[0].push([\n            tempUVs[a].clone(),\n            tempUVs[b].clone(),\n            tempUVs[c].clone(),\n          ]);\n        }\n\n        if (uvs2 !== undefined) {\n          scope.faceVertexUvs[1].push([\n            tempUVs2[a].clone(),\n            tempUVs2[b].clone(),\n            tempUVs2[c].clone(),\n          ]);\n        }\n      }\n\n      var groups = geometry.groups;\n\n      if (groups.length > 0) {\n        for (var i = 0; i < groups.length; i++) {\n          var group = groups[i];\n\n          var start = group.start;\n          var count = group.count;\n\n          for (var j = start, jl = start + count; j < jl; j += 3) {\n            if (indices !== undefined) {\n              addFace(\n                indices[j],\n                indices[j + 1],\n                indices[j + 2],\n                group.materialIndex\n              );\n            } else {\n              addFace(j, j + 1, j + 2, group.materialIndex);\n            }\n          }\n        }\n      } else {\n        if (indices !== undefined) {\n          for (var i = 0; i < indices.length; i += 3) {\n            addFace(indices[i], indices[i + 1], indices[i + 2]);\n          }\n        } else {\n          for (var i = 0; i < positions.length / 3; i += 3) {\n            addFace(i, i + 1, i + 2);\n          }\n        }\n      }\n\n      this.computeFaceNormals();\n\n      if (geometry.boundingBox !== null) {\n        this.boundingBox = geometry.boundingBox.clone();\n      }\n\n      if (geometry.boundingSphere !== null) {\n        this.boundingSphere = geometry.boundingSphere.clone();\n      }\n\n      return this;\n    },\n\n    center: (function () {\n      var offset = new Vector3();\n\n      return function center() {\n        this.computeBoundingBox();\n\n        this.boundingBox.getCenter(offset).negate();\n\n        this.translate(offset.x, offset.y, offset.z);\n\n        return this;\n      };\n    })(),\n\n    normalize: function () {\n      this.computeBoundingSphere();\n\n      var center = this.boundingSphere.center;\n      var radius = this.boundingSphere.radius;\n\n      var s = radius === 0 ? 1 : 1.0 / radius;\n\n      var matrix = new Matrix4();\n      matrix.set(\n        s,\n        0,\n        0,\n        -s * center.x,\n        0,\n        s,\n        0,\n        -s * center.y,\n        0,\n        0,\n        s,\n        -s * center.z,\n        0,\n        0,\n        0,\n        1\n      );\n\n      this.applyMatrix(matrix);\n\n      return this;\n    },\n\n    computeFaceNormals: function () {\n      var cb = new Vector3(),\n        ab = new Vector3();\n\n      for (var f = 0, fl = this.faces.length; f < fl; f++) {\n        var face = this.faces[f];\n\n        var vA = this.vertices[face.a];\n        var vB = this.vertices[face.b];\n        var vC = this.vertices[face.c];\n\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n\n        cb.normalize();\n\n        face.normal.copy(cb);\n      }\n    },\n\n    computeVertexNormals: function (areaWeighted) {\n      if (areaWeighted === undefined) areaWeighted = true;\n\n      var v, vl, f, fl, face, vertices;\n\n      vertices = new Array(this.vertices.length);\n\n      for (v = 0, vl = this.vertices.length; v < vl; v++) {\n        vertices[v] = new Vector3();\n      }\n\n      if (areaWeighted) {\n        // vertex normals weighted by triangle areas\n        // http://www.iquilezles.org/www/articles/normals/normals.htm\n\n        var vA, vB, vC;\n        var cb = new Vector3(),\n          ab = new Vector3();\n\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n          face = this.faces[f];\n\n          vA = this.vertices[face.a];\n          vB = this.vertices[face.b];\n          vC = this.vertices[face.c];\n\n          cb.subVectors(vC, vB);\n          ab.subVectors(vA, vB);\n          cb.cross(ab);\n\n          vertices[face.a].add(cb);\n          vertices[face.b].add(cb);\n          vertices[face.c].add(cb);\n        }\n      } else {\n        this.computeFaceNormals();\n\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n          face = this.faces[f];\n\n          vertices[face.a].add(face.normal);\n          vertices[face.b].add(face.normal);\n          vertices[face.c].add(face.normal);\n        }\n      }\n\n      for (v = 0, vl = this.vertices.length; v < vl; v++) {\n        vertices[v].normalize();\n      }\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n\n        var vertexNormals = face.vertexNormals;\n\n        if (vertexNormals.length === 3) {\n          vertexNormals[0].copy(vertices[face.a]);\n          vertexNormals[1].copy(vertices[face.b]);\n          vertexNormals[2].copy(vertices[face.c]);\n        } else {\n          vertexNormals[0] = vertices[face.a].clone();\n          vertexNormals[1] = vertices[face.b].clone();\n          vertexNormals[2] = vertices[face.c].clone();\n        }\n      }\n\n      if (this.faces.length > 0) {\n        this.normalsNeedUpdate = true;\n      }\n    },\n\n    computeFlatVertexNormals: function () {\n      var f, fl, face;\n\n      this.computeFaceNormals();\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n\n        var vertexNormals = face.vertexNormals;\n\n        if (vertexNormals.length === 3) {\n          vertexNormals[0].copy(face.normal);\n          vertexNormals[1].copy(face.normal);\n          vertexNormals[2].copy(face.normal);\n        } else {\n          vertexNormals[0] = face.normal.clone();\n          vertexNormals[1] = face.normal.clone();\n          vertexNormals[2] = face.normal.clone();\n        }\n      }\n\n      if (this.faces.length > 0) {\n        this.normalsNeedUpdate = true;\n      }\n    },\n\n    computeMorphNormals: function () {\n      var i, il, f, fl, face;\n\n      // save original normals\n      // - create temp variables on first access\n      //   otherwise just copy (for faster repeated calls)\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n\n        if (!face.__originalFaceNormal) {\n          face.__originalFaceNormal = face.normal.clone();\n        } else {\n          face.__originalFaceNormal.copy(face.normal);\n        }\n\n        if (!face.__originalVertexNormals) face.__originalVertexNormals = [];\n\n        for (i = 0, il = face.vertexNormals.length; i < il; i++) {\n          if (!face.__originalVertexNormals[i]) {\n            face.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n          } else {\n            face.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n          }\n        }\n      }\n\n      // use temp geometry to compute face and vertex normals for each morph\n\n      var tmpGeo = new Geometry();\n      tmpGeo.faces = this.faces;\n\n      for (i = 0, il = this.morphTargets.length; i < il; i++) {\n        // create on first access\n\n        if (!this.morphNormals[i]) {\n          this.morphNormals[i] = {};\n          this.morphNormals[i].faceNormals = [];\n          this.morphNormals[i].vertexNormals = [];\n\n          var dstNormalsFace = this.morphNormals[i].faceNormals;\n          var dstNormalsVertex = this.morphNormals[i].vertexNormals;\n\n          var faceNormal, vertexNormals;\n\n          for (f = 0, fl = this.faces.length; f < fl; f++) {\n            faceNormal = new Vector3();\n            vertexNormals = {\n              a: new Vector3(),\n              b: new Vector3(),\n              c: new Vector3(),\n            };\n\n            dstNormalsFace.push(faceNormal);\n            dstNormalsVertex.push(vertexNormals);\n          }\n        }\n\n        var morphNormals = this.morphNormals[i];\n\n        // set vertices to morph target\n\n        tmpGeo.vertices = this.morphTargets[i].vertices;\n\n        // compute morph normals\n\n        tmpGeo.computeFaceNormals();\n        tmpGeo.computeVertexNormals();\n\n        // store morph normals\n\n        var faceNormal, vertexNormals;\n\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n          face = this.faces[f];\n\n          faceNormal = morphNormals.faceNormals[f];\n          vertexNormals = morphNormals.vertexNormals[f];\n\n          faceNormal.copy(face.normal);\n\n          vertexNormals.a.copy(face.vertexNormals[0]);\n          vertexNormals.b.copy(face.vertexNormals[1]);\n          vertexNormals.c.copy(face.vertexNormals[2]);\n        }\n      }\n\n      // restore original normals\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n\n        face.normal = face.__originalFaceNormal;\n        face.vertexNormals = face.__originalVertexNormals;\n      }\n    },\n\n    computeBoundingBox: function () {\n      if (this.boundingBox === null) {\n        this.boundingBox = new Box3();\n      }\n\n      this.boundingBox.setFromPoints(this.vertices);\n    },\n\n    computeBoundingSphere: function () {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new Sphere();\n      }\n\n      this.boundingSphere.setFromPoints(this.vertices);\n    },\n\n    merge: function (geometry, matrix, materialIndexOffset) {\n      if (!(geometry && geometry.isGeometry)) {\n        console.error(\n          \"THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.\",\n          geometry\n        );\n        return;\n      }\n\n      var normalMatrix,\n        vertexOffset = this.vertices.length,\n        vertices1 = this.vertices,\n        vertices2 = geometry.vertices,\n        faces1 = this.faces,\n        faces2 = geometry.faces,\n        uvs1 = this.faceVertexUvs[0],\n        uvs2 = geometry.faceVertexUvs[0],\n        colors1 = this.colors,\n        colors2 = geometry.colors;\n\n      if (materialIndexOffset === undefined) materialIndexOffset = 0;\n\n      if (matrix !== undefined) {\n        normalMatrix = new Matrix3().getNormalMatrix(matrix);\n      }\n\n      // vertices\n\n      for (var i = 0, il = vertices2.length; i < il; i++) {\n        var vertex = vertices2[i];\n\n        var vertexCopy = vertex.clone();\n\n        if (matrix !== undefined) vertexCopy.applyMatrix4(matrix);\n\n        vertices1.push(vertexCopy);\n      }\n\n      // colors\n\n      for (var i = 0, il = colors2.length; i < il; i++) {\n        colors1.push(colors2[i].clone());\n      }\n\n      // faces\n\n      for (i = 0, il = faces2.length; i < il; i++) {\n        var face = faces2[i],\n          faceCopy,\n          normal,\n          color,\n          faceVertexNormals = face.vertexNormals,\n          faceVertexColors = face.vertexColors;\n\n        faceCopy = new Face3(\n          face.a + vertexOffset,\n          face.b + vertexOffset,\n          face.c + vertexOffset\n        );\n        faceCopy.normal.copy(face.normal);\n\n        if (normalMatrix !== undefined) {\n          faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n        }\n\n        for (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n          normal = faceVertexNormals[j].clone();\n\n          if (normalMatrix !== undefined) {\n            normal.applyMatrix3(normalMatrix).normalize();\n          }\n\n          faceCopy.vertexNormals.push(normal);\n        }\n\n        faceCopy.color.copy(face.color);\n\n        for (var j = 0, jl = faceVertexColors.length; j < jl; j++) {\n          color = faceVertexColors[j];\n          faceCopy.vertexColors.push(color.clone());\n        }\n\n        faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n        faces1.push(faceCopy);\n      }\n\n      // uvs\n\n      for (i = 0, il = uvs2.length; i < il; i++) {\n        var uv = uvs2[i],\n          uvCopy = [];\n\n        if (uv === undefined) {\n          continue;\n        }\n\n        for (var j = 0, jl = uv.length; j < jl; j++) {\n          uvCopy.push(uv[j].clone());\n        }\n\n        uvs1.push(uvCopy);\n      }\n    },\n\n    mergeMesh: function (mesh) {\n      if (!(mesh && mesh.isMesh)) {\n        console.error(\n          \"THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.\",\n          mesh\n        );\n        return;\n      }\n\n      if (mesh.matrixAutoUpdate) mesh.updateMatrix();\n\n      this.merge(mesh.geometry, mesh.matrix);\n    },\n\n    /*\n     * Checks for duplicate vertices with hashmap.\n     * Duplicated vertices are removed\n     * and faces' vertices are updated.\n     */\n\n    mergeVertices: function () {\n      var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n      var unique = [],\n        changes = [];\n\n      var v, key;\n      var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n      var precision = Math.pow(10, precisionPoints);\n      var i, il, face;\n      var indices, j, jl;\n\n      for (i = 0, il = this.vertices.length; i < il; i++) {\n        v = this.vertices[i];\n        key =\n          Math.round(v.x * precision) +\n          \"_\" +\n          Math.round(v.y * precision) +\n          \"_\" +\n          Math.round(v.z * precision);\n\n        if (verticesMap[key] === undefined) {\n          verticesMap[key] = i;\n          unique.push(this.vertices[i]);\n          changes[i] = unique.length - 1;\n        } else {\n          //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n          changes[i] = changes[verticesMap[key]];\n        }\n      }\n\n      // if faces are completely degenerate after merging vertices, we\n      // have to remove them from the geometry.\n      var faceIndicesToRemove = [];\n\n      for (i = 0, il = this.faces.length; i < il; i++) {\n        face = this.faces[i];\n\n        face.a = changes[face.a];\n        face.b = changes[face.b];\n        face.c = changes[face.c];\n\n        indices = [face.a, face.b, face.c];\n\n        // if any duplicate vertices are found in a Face3\n        // we have to remove the face as nothing can be saved\n        for (var n = 0; n < 3; n++) {\n          if (indices[n] === indices[(n + 1) % 3]) {\n            faceIndicesToRemove.push(i);\n            break;\n          }\n        }\n      }\n\n      for (i = faceIndicesToRemove.length - 1; i >= 0; i--) {\n        var idx = faceIndicesToRemove[i];\n\n        this.faces.splice(idx, 1);\n\n        for (j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n          this.faceVertexUvs[j].splice(idx, 1);\n        }\n      }\n\n      // Use unique set of vertices\n\n      var diff = this.vertices.length - unique.length;\n      this.vertices = unique;\n      return diff;\n    },\n\n    setFromPoints: function (points) {\n      this.vertices = [];\n\n      for (var i = 0, l = points.length; i < l; i++) {\n        var point = points[i];\n        this.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n      }\n\n      return this;\n    },\n\n    sortFacesByMaterialIndex: function () {\n      var faces = this.faces;\n      var length = faces.length;\n\n      // tag faces\n\n      for (var i = 0; i < length; i++) {\n        faces[i]._id = i;\n      }\n\n      // sort faces\n\n      function materialIndexSort(a, b) {\n        return a.materialIndex - b.materialIndex;\n      }\n\n      faces.sort(materialIndexSort);\n\n      // sort uvs\n\n      var uvs1 = this.faceVertexUvs[0];\n      var uvs2 = this.faceVertexUvs[1];\n\n      var newUvs1, newUvs2;\n\n      if (uvs1 && uvs1.length === length) newUvs1 = [];\n      if (uvs2 && uvs2.length === length) newUvs2 = [];\n\n      for (var i = 0; i < length; i++) {\n        var id = faces[i]._id;\n\n        if (newUvs1) newUvs1.push(uvs1[id]);\n        if (newUvs2) newUvs2.push(uvs2[id]);\n      }\n\n      if (newUvs1) this.faceVertexUvs[0] = newUvs1;\n      if (newUvs2) this.faceVertexUvs[1] = newUvs2;\n    },\n\n    toJSON: function () {\n      var data = {\n        metadata: {\n          version: 4.5,\n          type: \"Geometry\",\n          generator: \"Geometry.toJSON\",\n        },\n      };\n\n      // standard Geometry serialization\n\n      data.uuid = this.uuid;\n      data.type = this.type;\n      if (this.name !== \"\") data.name = this.name;\n\n      if (this.parameters !== undefined) {\n        var parameters = this.parameters;\n\n        for (var key in parameters) {\n          if (parameters[key] !== undefined) data[key] = parameters[key];\n        }\n\n        return data;\n      }\n\n      var vertices = [];\n\n      for (var i = 0; i < this.vertices.length; i++) {\n        var vertex = this.vertices[i];\n        vertices.push(vertex.x, vertex.y, vertex.z);\n      }\n\n      var faces = [];\n      var normals = [];\n      var normalsHash = {};\n      var colors = [];\n      var colorsHash = {};\n      var uvs = [];\n      var uvsHash = {};\n\n      for (var i = 0; i < this.faces.length; i++) {\n        var face = this.faces[i];\n\n        var hasMaterial = true;\n        var hasFaceUv = false; // deprecated\n        var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;\n        var hasFaceNormal = face.normal.length() > 0;\n        var hasFaceVertexNormal = face.vertexNormals.length > 0;\n        var hasFaceColor =\n          face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n        var hasFaceVertexColor = face.vertexColors.length > 0;\n\n        var faceType = 0;\n\n        faceType = setBit(faceType, 0, 0); // isQuad\n        faceType = setBit(faceType, 1, hasMaterial);\n        faceType = setBit(faceType, 2, hasFaceUv);\n        faceType = setBit(faceType, 3, hasFaceVertexUv);\n        faceType = setBit(faceType, 4, hasFaceNormal);\n        faceType = setBit(faceType, 5, hasFaceVertexNormal);\n        faceType = setBit(faceType, 6, hasFaceColor);\n        faceType = setBit(faceType, 7, hasFaceVertexColor);\n\n        faces.push(faceType);\n        faces.push(face.a, face.b, face.c);\n        faces.push(face.materialIndex);\n\n        if (hasFaceVertexUv) {\n          var faceVertexUvs = this.faceVertexUvs[0][i];\n\n          faces.push(\n            getUvIndex(faceVertexUvs[0]),\n            getUvIndex(faceVertexUvs[1]),\n            getUvIndex(faceVertexUvs[2])\n          );\n        }\n\n        if (hasFaceNormal) {\n          faces.push(getNormalIndex(face.normal));\n        }\n\n        if (hasFaceVertexNormal) {\n          var vertexNormals = face.vertexNormals;\n\n          faces.push(\n            getNormalIndex(vertexNormals[0]),\n            getNormalIndex(vertexNormals[1]),\n            getNormalIndex(vertexNormals[2])\n          );\n        }\n\n        if (hasFaceColor) {\n          faces.push(getColorIndex(face.color));\n        }\n\n        if (hasFaceVertexColor) {\n          var vertexColors = face.vertexColors;\n\n          faces.push(\n            getColorIndex(vertexColors[0]),\n            getColorIndex(vertexColors[1]),\n            getColorIndex(vertexColors[2])\n          );\n        }\n      }\n\n      function setBit(value, position, enabled) {\n        return enabled ? value | (1 << position) : value & ~(1 << position);\n      }\n\n      function getNormalIndex(normal) {\n        var hash =\n          normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n        if (normalsHash[hash] !== undefined) {\n          return normalsHash[hash];\n        }\n\n        normalsHash[hash] = normals.length / 3;\n        normals.push(normal.x, normal.y, normal.z);\n\n        return normalsHash[hash];\n      }\n\n      function getColorIndex(color) {\n        var hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n        if (colorsHash[hash] !== undefined) {\n          return colorsHash[hash];\n        }\n\n        colorsHash[hash] = colors.length;\n        colors.push(color.getHex());\n\n        return colorsHash[hash];\n      }\n\n      function getUvIndex(uv) {\n        var hash = uv.x.toString() + uv.y.toString();\n\n        if (uvsHash[hash] !== undefined) {\n          return uvsHash[hash];\n        }\n\n        uvsHash[hash] = uvs.length / 2;\n        uvs.push(uv.x, uv.y);\n\n        return uvsHash[hash];\n      }\n\n      data.data = {};\n\n      data.data.vertices = vertices;\n      data.data.normals = normals;\n      if (colors.length > 0) data.data.colors = colors;\n      if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n      data.data.faces = faces;\n\n      return data;\n    },\n\n    clone: function () {\n      /*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n      return new Geometry().copy(this);\n    },\n\n    copy: function (source) {\n      var i, il, j, jl, k, kl;\n\n      // reset\n\n      this.vertices = [];\n      this.colors = [];\n      this.faces = [];\n      this.faceVertexUvs = [[]];\n      this.morphTargets = [];\n      this.morphNormals = [];\n      this.skinWeights = [];\n      this.skinIndices = [];\n      this.lineDistances = [];\n      this.boundingBox = null;\n      this.boundingSphere = null;\n\n      // name\n\n      this.name = source.name;\n\n      // vertices\n\n      var vertices = source.vertices;\n\n      for (i = 0, il = vertices.length; i < il; i++) {\n        this.vertices.push(vertices[i].clone());\n      }\n\n      // colors\n\n      var colors = source.colors;\n\n      for (i = 0, il = colors.length; i < il; i++) {\n        this.colors.push(colors[i].clone());\n      }\n\n      // faces\n\n      var faces = source.faces;\n\n      for (i = 0, il = faces.length; i < il; i++) {\n        this.faces.push(faces[i].clone());\n      }\n\n      // face vertex uvs\n\n      for (i = 0, il = source.faceVertexUvs.length; i < il; i++) {\n        var faceVertexUvs = source.faceVertexUvs[i];\n\n        if (this.faceVertexUvs[i] === undefined) {\n          this.faceVertexUvs[i] = [];\n        }\n\n        for (j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n          var uvs = faceVertexUvs[j],\n            uvsCopy = [];\n\n          for (k = 0, kl = uvs.length; k < kl; k++) {\n            var uv = uvs[k];\n\n            uvsCopy.push(uv.clone());\n          }\n\n          this.faceVertexUvs[i].push(uvsCopy);\n        }\n      }\n\n      // morph targets\n\n      var morphTargets = source.morphTargets;\n\n      for (i = 0, il = morphTargets.length; i < il; i++) {\n        var morphTarget = {};\n        morphTarget.name = morphTargets[i].name;\n\n        // vertices\n\n        if (morphTargets[i].vertices !== undefined) {\n          morphTarget.vertices = [];\n\n          for (j = 0, jl = morphTargets[i].vertices.length; j < jl; j++) {\n            morphTarget.vertices.push(morphTargets[i].vertices[j].clone());\n          }\n        }\n\n        // normals\n\n        if (morphTargets[i].normals !== undefined) {\n          morphTarget.normals = [];\n\n          for (j = 0, jl = morphTargets[i].normals.length; j < jl; j++) {\n            morphTarget.normals.push(morphTargets[i].normals[j].clone());\n          }\n        }\n\n        this.morphTargets.push(morphTarget);\n      }\n\n      // morph normals\n\n      var morphNormals = source.morphNormals;\n\n      for (i = 0, il = morphNormals.length; i < il; i++) {\n        var morphNormal = {};\n\n        // vertex normals\n\n        if (morphNormals[i].vertexNormals !== undefined) {\n          morphNormal.vertexNormals = [];\n\n          for (j = 0, jl = morphNormals[i].vertexNormals.length; j < jl; j++) {\n            var srcVertexNormal = morphNormals[i].vertexNormals[j];\n            var destVertexNormal = {};\n\n            destVertexNormal.a = srcVertexNormal.a.clone();\n            destVertexNormal.b = srcVertexNormal.b.clone();\n            destVertexNormal.c = srcVertexNormal.c.clone();\n\n            morphNormal.vertexNormals.push(destVertexNormal);\n          }\n        }\n\n        // face normals\n\n        if (morphNormals[i].faceNormals !== undefined) {\n          morphNormal.faceNormals = [];\n\n          for (j = 0, jl = morphNormals[i].faceNormals.length; j < jl; j++) {\n            morphNormal.faceNormals.push(\n              morphNormals[i].faceNormals[j].clone()\n            );\n          }\n        }\n\n        this.morphNormals.push(morphNormal);\n      }\n\n      // skin weights\n\n      var skinWeights = source.skinWeights;\n\n      for (i = 0, il = skinWeights.length; i < il; i++) {\n        this.skinWeights.push(skinWeights[i].clone());\n      }\n\n      // skin indices\n\n      var skinIndices = source.skinIndices;\n\n      for (i = 0, il = skinIndices.length; i < il; i++) {\n        this.skinIndices.push(skinIndices[i].clone());\n      }\n\n      // line distances\n\n      var lineDistances = source.lineDistances;\n\n      for (i = 0, il = lineDistances.length; i < il; i++) {\n        this.lineDistances.push(lineDistances[i]);\n      }\n\n      // bounding box\n\n      var boundingBox = source.boundingBox;\n\n      if (boundingBox !== null) {\n        this.boundingBox = boundingBox.clone();\n      }\n\n      // bounding sphere\n\n      var boundingSphere = source.boundingSphere;\n\n      if (boundingSphere !== null) {\n        this.boundingSphere = boundingSphere.clone();\n      }\n\n      // update flags\n\n      this.elementsNeedUpdate = source.elementsNeedUpdate;\n      this.verticesNeedUpdate = source.verticesNeedUpdate;\n      this.uvsNeedUpdate = source.uvsNeedUpdate;\n      this.normalsNeedUpdate = source.normalsNeedUpdate;\n      this.colorsNeedUpdate = source.colorsNeedUpdate;\n      this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n      this.groupsNeedUpdate = source.groupsNeedUpdate;\n\n      return this;\n    },\n\n    dispose: function () {\n      this.dispatchEvent({ type: \"dispose\" });\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function BufferAttribute(array, itemSize, normalized) {\n    if (Array.isArray(array)) {\n      throw new TypeError(\n        \"THREE.BufferAttribute: array should be a Typed Array.\"\n      );\n    }\n\n    this.name = \"\";\n\n    this.array = array;\n    this.itemSize = itemSize;\n    this.count = array !== undefined ? array.length / itemSize : 0;\n    this.normalized = normalized === true;\n\n    this.dynamic = false;\n    this.updateRange = { offset: 0, count: -1 };\n\n    this.version = 0;\n  }\n\n  Object.defineProperty(BufferAttribute.prototype, \"needsUpdate\", {\n    set: function (value) {\n      if (value === true) this.version++;\n    },\n  });\n\n  Object.assign(BufferAttribute.prototype, {\n    isBufferAttribute: true,\n\n    onUploadCallback: function () {},\n\n    setArray: function (array) {\n      if (Array.isArray(array)) {\n        throw new TypeError(\n          \"THREE.BufferAttribute: array should be a Typed Array.\"\n        );\n      }\n\n      this.count = array !== undefined ? array.length / this.itemSize : 0;\n      this.array = array;\n\n      return this;\n    },\n\n    setDynamic: function (value) {\n      this.dynamic = value;\n\n      return this;\n    },\n\n    copy: function (source) {\n      this.name = source.name;\n      this.array = new source.array.constructor(source.array);\n      this.itemSize = source.itemSize;\n      this.count = source.count;\n      this.normalized = source.normalized;\n\n      this.dynamic = source.dynamic;\n\n      return this;\n    },\n\n    copyAt: function (index1, attribute, index2) {\n      index1 *= this.itemSize;\n      index2 *= attribute.itemSize;\n\n      for (var i = 0, l = this.itemSize; i < l; i++) {\n        this.array[index1 + i] = attribute.array[index2 + i];\n      }\n\n      return this;\n    },\n\n    copyArray: function (array) {\n      this.array.set(array);\n\n      return this;\n    },\n\n    copyColorsArray: function (colors) {\n      var array = this.array,\n        offset = 0;\n\n      for (var i = 0, l = colors.length; i < l; i++) {\n        var color = colors[i];\n\n        if (color === undefined) {\n          console.warn(\n            \"THREE.BufferAttribute.copyColorsArray(): color is undefined\",\n            i\n          );\n          color = new Color();\n        }\n\n        array[offset++] = color.r;\n        array[offset++] = color.g;\n        array[offset++] = color.b;\n      }\n\n      return this;\n    },\n\n    copyVector2sArray: function (vectors) {\n      var array = this.array,\n        offset = 0;\n\n      for (var i = 0, l = vectors.length; i < l; i++) {\n        var vector = vectors[i];\n\n        if (vector === undefined) {\n          console.warn(\n            \"THREE.BufferAttribute.copyVector2sArray(): vector is undefined\",\n            i\n          );\n          vector = new Vector2();\n        }\n\n        array[offset++] = vector.x;\n        array[offset++] = vector.y;\n      }\n\n      return this;\n    },\n\n    copyVector3sArray: function (vectors) {\n      var array = this.array,\n        offset = 0;\n\n      for (var i = 0, l = vectors.length; i < l; i++) {\n        var vector = vectors[i];\n\n        if (vector === undefined) {\n          console.warn(\n            \"THREE.BufferAttribute.copyVector3sArray(): vector is undefined\",\n            i\n          );\n          vector = new Vector3();\n        }\n\n        array[offset++] = vector.x;\n        array[offset++] = vector.y;\n        array[offset++] = vector.z;\n      }\n\n      return this;\n    },\n\n    copyVector4sArray: function (vectors) {\n      var array = this.array,\n        offset = 0;\n\n      for (var i = 0, l = vectors.length; i < l; i++) {\n        var vector = vectors[i];\n\n        if (vector === undefined) {\n          console.warn(\n            \"THREE.BufferAttribute.copyVector4sArray(): vector is undefined\",\n            i\n          );\n          vector = new Vector4();\n        }\n\n        array[offset++] = vector.x;\n        array[offset++] = vector.y;\n        array[offset++] = vector.z;\n        array[offset++] = vector.w;\n      }\n\n      return this;\n    },\n\n    set: function (value, offset) {\n      if (offset === undefined) offset = 0;\n\n      this.array.set(value, offset);\n\n      return this;\n    },\n\n    getX: function (index) {\n      return this.array[index * this.itemSize];\n    },\n\n    setX: function (index, x) {\n      this.array[index * this.itemSize] = x;\n\n      return this;\n    },\n\n    getY: function (index) {\n      return this.array[index * this.itemSize + 1];\n    },\n\n    setY: function (index, y) {\n      this.array[index * this.itemSize + 1] = y;\n\n      return this;\n    },\n\n    getZ: function (index) {\n      return this.array[index * this.itemSize + 2];\n    },\n\n    setZ: function (index, z) {\n      this.array[index * this.itemSize + 2] = z;\n\n      return this;\n    },\n\n    getW: function (index) {\n      return this.array[index * this.itemSize + 3];\n    },\n\n    setW: function (index, w) {\n      this.array[index * this.itemSize + 3] = w;\n\n      return this;\n    },\n\n    setXY: function (index, x, y) {\n      index *= this.itemSize;\n\n      this.array[index + 0] = x;\n      this.array[index + 1] = y;\n\n      return this;\n    },\n\n    setXYZ: function (index, x, y, z) {\n      index *= this.itemSize;\n\n      this.array[index + 0] = x;\n      this.array[index + 1] = y;\n      this.array[index + 2] = z;\n\n      return this;\n    },\n\n    setXYZW: function (index, x, y, z, w) {\n      index *= this.itemSize;\n\n      this.array[index + 0] = x;\n      this.array[index + 1] = y;\n      this.array[index + 2] = z;\n      this.array[index + 3] = w;\n\n      return this;\n    },\n\n    onUpload: function (callback) {\n      this.onUploadCallback = callback;\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor(this.array, this.itemSize).copy(this);\n    },\n  });\n\n  //\n\n  function Int8BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Int8Array(array), itemSize, normalized);\n  }\n\n  Int8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n  Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n  function Uint8BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);\n  }\n\n  Uint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n  Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n  function Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(\n      this,\n      new Uint8ClampedArray(array),\n      itemSize,\n      normalized\n    );\n  }\n\n  Uint8ClampedBufferAttribute.prototype = Object.create(\n    BufferAttribute.prototype\n  );\n  Uint8ClampedBufferAttribute.prototype.constructor =\n    Uint8ClampedBufferAttribute;\n\n  function Int16BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Int16Array(array), itemSize, normalized);\n  }\n\n  Int16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n  Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n  function Uint16BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n  }\n\n  Uint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n  Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n  function Int32BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Int32Array(array), itemSize, normalized);\n  }\n\n  Int32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n  Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n  function Uint32BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);\n  }\n\n  Uint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n  Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n  function Float32BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Float32Array(array), itemSize, normalized);\n  }\n\n  Float32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n  Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n  function Float64BufferAttribute(array, itemSize, normalized) {\n    BufferAttribute.call(this, new Float64Array(array), itemSize, normalized);\n  }\n\n  Float64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n  Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function DirectGeometry() {\n    this.vertices = [];\n    this.normals = [];\n    this.colors = [];\n    this.uvs = [];\n    this.uvs2 = [];\n\n    this.groups = [];\n\n    this.morphTargets = {};\n\n    this.skinWeights = [];\n    this.skinIndices = [];\n\n    // this.lineDistances = [];\n\n    this.boundingBox = null;\n    this.boundingSphere = null;\n\n    // update flags\n\n    this.verticesNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  }\n\n  Object.assign(DirectGeometry.prototype, {\n    computeGroups: function (geometry) {\n      var group;\n      var groups = [];\n      var materialIndex = undefined;\n\n      var faces = geometry.faces;\n\n      for (var i = 0; i < faces.length; i++) {\n        var face = faces[i];\n\n        // materials\n\n        if (face.materialIndex !== materialIndex) {\n          materialIndex = face.materialIndex;\n\n          if (group !== undefined) {\n            group.count = i * 3 - group.start;\n            groups.push(group);\n          }\n\n          group = {\n            start: i * 3,\n            materialIndex: materialIndex,\n          };\n        }\n      }\n\n      if (group !== undefined) {\n        group.count = i * 3 - group.start;\n        groups.push(group);\n      }\n\n      this.groups = groups;\n    },\n\n    fromGeometry: function (geometry) {\n      var faces = geometry.faces;\n      var vertices = geometry.vertices;\n      var faceVertexUvs = geometry.faceVertexUvs;\n\n      var hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n      var hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0;\n\n      // morphs\n\n      var morphTargets = geometry.morphTargets;\n      var morphTargetsLength = morphTargets.length;\n\n      var morphTargetsPosition;\n\n      if (morphTargetsLength > 0) {\n        morphTargetsPosition = [];\n\n        for (var i = 0; i < morphTargetsLength; i++) {\n          morphTargetsPosition[i] = [];\n        }\n\n        this.morphTargets.position = morphTargetsPosition;\n      }\n\n      var morphNormals = geometry.morphNormals;\n      var morphNormalsLength = morphNormals.length;\n\n      var morphTargetsNormal;\n\n      if (morphNormalsLength > 0) {\n        morphTargetsNormal = [];\n\n        for (var i = 0; i < morphNormalsLength; i++) {\n          morphTargetsNormal[i] = [];\n        }\n\n        this.morphTargets.normal = morphTargetsNormal;\n      }\n\n      // skins\n\n      var skinIndices = geometry.skinIndices;\n      var skinWeights = geometry.skinWeights;\n\n      var hasSkinIndices = skinIndices.length === vertices.length;\n      var hasSkinWeights = skinWeights.length === vertices.length;\n\n      //\n\n      if (vertices.length > 0 && faces.length === 0) {\n        console.error(\n          \"THREE.DirectGeometry: Faceless geometries are not supported.\"\n        );\n      }\n\n      for (var i = 0; i < faces.length; i++) {\n        var face = faces[i];\n\n        this.vertices.push(\n          vertices[face.a],\n          vertices[face.b],\n          vertices[face.c]\n        );\n\n        var vertexNormals = face.vertexNormals;\n\n        if (vertexNormals.length === 3) {\n          this.normals.push(\n            vertexNormals[0],\n            vertexNormals[1],\n            vertexNormals[2]\n          );\n        } else {\n          var normal = face.normal;\n\n          this.normals.push(normal, normal, normal);\n        }\n\n        var vertexColors = face.vertexColors;\n\n        if (vertexColors.length === 3) {\n          this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n        } else {\n          var color = face.color;\n\n          this.colors.push(color, color, color);\n        }\n\n        if (hasFaceVertexUv === true) {\n          var vertexUvs = faceVertexUvs[0][i];\n\n          if (vertexUvs !== undefined) {\n            this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n          } else {\n            console.warn(\n              \"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv \",\n              i\n            );\n\n            this.uvs.push(new Vector2(), new Vector2(), new Vector2());\n          }\n        }\n\n        if (hasFaceVertexUv2 === true) {\n          var vertexUvs = faceVertexUvs[1][i];\n\n          if (vertexUvs !== undefined) {\n            this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n          } else {\n            console.warn(\n              \"THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 \",\n              i\n            );\n\n            this.uvs2.push(new Vector2(), new Vector2(), new Vector2());\n          }\n        }\n\n        // morphs\n\n        for (var j = 0; j < morphTargetsLength; j++) {\n          var morphTarget = morphTargets[j].vertices;\n\n          morphTargetsPosition[j].push(\n            morphTarget[face.a],\n            morphTarget[face.b],\n            morphTarget[face.c]\n          );\n        }\n\n        for (var j = 0; j < morphNormalsLength; j++) {\n          var morphNormal = morphNormals[j].vertexNormals[i];\n\n          morphTargetsNormal[j].push(\n            morphNormal.a,\n            morphNormal.b,\n            morphNormal.c\n          );\n        }\n\n        // skins\n\n        if (hasSkinIndices) {\n          this.skinIndices.push(\n            skinIndices[face.a],\n            skinIndices[face.b],\n            skinIndices[face.c]\n          );\n        }\n\n        if (hasSkinWeights) {\n          this.skinWeights.push(\n            skinWeights[face.a],\n            skinWeights[face.b],\n            skinWeights[face.c]\n          );\n        }\n      }\n\n      this.computeGroups(geometry);\n\n      this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n      this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n      this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n      this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n      this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function arrayMax(array) {\n    if (array.length === 0) return -Infinity;\n\n    var max = array[0];\n\n    for (var i = 1, l = array.length; i < l; ++i) {\n      if (array[i] > max) max = array[i];\n    }\n\n    return max;\n  }\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  var bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\n\n  function BufferGeometry() {\n    Object.defineProperty(this, \"id\", { value: (bufferGeometryId += 2) });\n\n    this.uuid = _Math.generateUUID();\n\n    this.name = \"\";\n    this.type = \"BufferGeometry\";\n\n    this.index = null;\n    this.attributes = {};\n\n    this.morphAttributes = {};\n\n    this.groups = [];\n\n    this.boundingBox = null;\n    this.boundingSphere = null;\n\n    this.drawRange = { start: 0, count: Infinity };\n\n    this.userData = {};\n  }\n\n  BufferGeometry.prototype = Object.assign(\n    Object.create(EventDispatcher.prototype),\n    {\n      constructor: BufferGeometry,\n\n      isBufferGeometry: true,\n\n      getIndex: function () {\n        return this.index;\n      },\n\n      setIndex: function (index) {\n        if (Array.isArray(index)) {\n          this.index = new (\n            arrayMax(index) > 65535\n              ? Uint32BufferAttribute\n              : Uint16BufferAttribute\n          )(index, 1);\n        } else {\n          this.index = index;\n        }\n      },\n\n      addAttribute: function (name, attribute) {\n        if (\n          !(attribute && attribute.isBufferAttribute) &&\n          !(attribute && attribute.isInterleavedBufferAttribute)\n        ) {\n          console.warn(\n            \"THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).\"\n          );\n\n          return this.addAttribute(\n            name,\n            new BufferAttribute(arguments[1], arguments[2])\n          );\n        }\n\n        if (name === \"index\") {\n          console.warn(\n            \"THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.\"\n          );\n          this.setIndex(attribute);\n\n          return this;\n        }\n\n        this.attributes[name] = attribute;\n\n        return this;\n      },\n\n      getAttribute: function (name) {\n        return this.attributes[name];\n      },\n\n      removeAttribute: function (name) {\n        delete this.attributes[name];\n\n        return this;\n      },\n\n      addGroup: function (start, count, materialIndex) {\n        this.groups.push({\n          start: start,\n          count: count,\n          materialIndex: materialIndex !== undefined ? materialIndex : 0,\n        });\n      },\n\n      clearGroups: function () {\n        this.groups = [];\n      },\n\n      setDrawRange: function (start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n      },\n\n      applyMatrix: function (matrix) {\n        var position = this.attributes.position;\n\n        if (position !== undefined) {\n          matrix.applyToBufferAttribute(position);\n          position.needsUpdate = true;\n        }\n\n        var normal = this.attributes.normal;\n\n        if (normal !== undefined) {\n          var normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\n          normalMatrix.applyToBufferAttribute(normal);\n          normal.needsUpdate = true;\n        }\n\n        if (this.boundingBox !== null) {\n          this.computeBoundingBox();\n        }\n\n        if (this.boundingSphere !== null) {\n          this.computeBoundingSphere();\n        }\n\n        return this;\n      },\n\n      rotateX: (function () {\n        // rotate geometry around world x-axis\n\n        var m1 = new Matrix4();\n\n        return function rotateX(angle) {\n          m1.makeRotationX(angle);\n\n          this.applyMatrix(m1);\n\n          return this;\n        };\n      })(),\n\n      rotateY: (function () {\n        // rotate geometry around world y-axis\n\n        var m1 = new Matrix4();\n\n        return function rotateY(angle) {\n          m1.makeRotationY(angle);\n\n          this.applyMatrix(m1);\n\n          return this;\n        };\n      })(),\n\n      rotateZ: (function () {\n        // rotate geometry around world z-axis\n\n        var m1 = new Matrix4();\n\n        return function rotateZ(angle) {\n          m1.makeRotationZ(angle);\n\n          this.applyMatrix(m1);\n\n          return this;\n        };\n      })(),\n\n      translate: (function () {\n        // translate geometry\n\n        var m1 = new Matrix4();\n\n        return function translate(x, y, z) {\n          m1.makeTranslation(x, y, z);\n\n          this.applyMatrix(m1);\n\n          return this;\n        };\n      })(),\n\n      scale: (function () {\n        // scale geometry\n\n        var m1 = new Matrix4();\n\n        return function scale(x, y, z) {\n          m1.makeScale(x, y, z);\n\n          this.applyMatrix(m1);\n\n          return this;\n        };\n      })(),\n\n      lookAt: (function () {\n        var obj = new Object3D();\n\n        return function lookAt(vector) {\n          obj.lookAt(vector);\n\n          obj.updateMatrix();\n\n          this.applyMatrix(obj.matrix);\n        };\n      })(),\n\n      center: (function () {\n        var offset = new Vector3();\n\n        return function center() {\n          this.computeBoundingBox();\n\n          this.boundingBox.getCenter(offset).negate();\n\n          this.translate(offset.x, offset.y, offset.z);\n\n          return this;\n        };\n      })(),\n\n      setFromObject: function (object) {\n        // console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n\n        var geometry = object.geometry;\n\n        if (object.isPoints || object.isLine) {\n          var positions = new Float32BufferAttribute(\n            geometry.vertices.length * 3,\n            3\n          );\n          var colors = new Float32BufferAttribute(\n            geometry.colors.length * 3,\n            3\n          );\n\n          this.addAttribute(\n            \"position\",\n            positions.copyVector3sArray(geometry.vertices)\n          );\n          this.addAttribute(\"color\", colors.copyColorsArray(geometry.colors));\n\n          if (\n            geometry.lineDistances &&\n            geometry.lineDistances.length === geometry.vertices.length\n          ) {\n            var lineDistances = new Float32BufferAttribute(\n              geometry.lineDistances.length,\n              1\n            );\n\n            this.addAttribute(\n              \"lineDistance\",\n              lineDistances.copyArray(geometry.lineDistances)\n            );\n          }\n\n          if (geometry.boundingSphere !== null) {\n            this.boundingSphere = geometry.boundingSphere.clone();\n          }\n\n          if (geometry.boundingBox !== null) {\n            this.boundingBox = geometry.boundingBox.clone();\n          }\n        } else if (object.isMesh) {\n          if (geometry && geometry.isGeometry) {\n            this.fromGeometry(geometry);\n          }\n        }\n\n        return this;\n      },\n\n      setFromPoints: function (points) {\n        var position = [];\n\n        for (var i = 0, l = points.length; i < l; i++) {\n          var point = points[i];\n          position.push(point.x, point.y, point.z || 0);\n        }\n\n        this.addAttribute(\"position\", new Float32BufferAttribute(position, 3));\n\n        return this;\n      },\n\n      updateFromObject: function (object) {\n        var geometry = object.geometry;\n\n        if (object.isMesh) {\n          var direct = geometry.__directGeometry;\n\n          if (geometry.elementsNeedUpdate === true) {\n            direct = undefined;\n            geometry.elementsNeedUpdate = false;\n          }\n\n          if (direct === undefined) {\n            return this.fromGeometry(geometry);\n          }\n\n          direct.verticesNeedUpdate = geometry.verticesNeedUpdate;\n          direct.normalsNeedUpdate = geometry.normalsNeedUpdate;\n          direct.colorsNeedUpdate = geometry.colorsNeedUpdate;\n          direct.uvsNeedUpdate = geometry.uvsNeedUpdate;\n          direct.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n          geometry.verticesNeedUpdate = false;\n          geometry.normalsNeedUpdate = false;\n          geometry.colorsNeedUpdate = false;\n          geometry.uvsNeedUpdate = false;\n          geometry.groupsNeedUpdate = false;\n\n          geometry = direct;\n        }\n\n        var attribute;\n\n        if (geometry.verticesNeedUpdate === true) {\n          attribute = this.attributes.position;\n\n          if (attribute !== undefined) {\n            attribute.copyVector3sArray(geometry.vertices);\n            attribute.needsUpdate = true;\n          }\n\n          geometry.verticesNeedUpdate = false;\n        }\n\n        if (geometry.normalsNeedUpdate === true) {\n          attribute = this.attributes.normal;\n\n          if (attribute !== undefined) {\n            attribute.copyVector3sArray(geometry.normals);\n            attribute.needsUpdate = true;\n          }\n\n          geometry.normalsNeedUpdate = false;\n        }\n\n        if (geometry.colorsNeedUpdate === true) {\n          attribute = this.attributes.color;\n\n          if (attribute !== undefined) {\n            attribute.copyColorsArray(geometry.colors);\n            attribute.needsUpdate = true;\n          }\n\n          geometry.colorsNeedUpdate = false;\n        }\n\n        if (geometry.uvsNeedUpdate) {\n          attribute = this.attributes.uv;\n\n          if (attribute !== undefined) {\n            attribute.copyVector2sArray(geometry.uvs);\n            attribute.needsUpdate = true;\n          }\n\n          geometry.uvsNeedUpdate = false;\n        }\n\n        if (geometry.lineDistancesNeedUpdate) {\n          attribute = this.attributes.lineDistance;\n\n          if (attribute !== undefined) {\n            attribute.copyArray(geometry.lineDistances);\n            attribute.needsUpdate = true;\n          }\n\n          geometry.lineDistancesNeedUpdate = false;\n        }\n\n        if (geometry.groupsNeedUpdate) {\n          geometry.computeGroups(object.geometry);\n          this.groups = geometry.groups;\n\n          geometry.groupsNeedUpdate = false;\n        }\n\n        return this;\n      },\n\n      fromGeometry: function (geometry) {\n        geometry.__directGeometry = new DirectGeometry().fromGeometry(geometry);\n\n        return this.fromDirectGeometry(geometry.__directGeometry);\n      },\n\n      fromDirectGeometry: function (geometry) {\n        var positions = new Float32Array(geometry.vertices.length * 3);\n        this.addAttribute(\n          \"position\",\n          new BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices)\n        );\n\n        if (geometry.normals.length > 0) {\n          var normals = new Float32Array(geometry.normals.length * 3);\n          this.addAttribute(\n            \"normal\",\n            new BufferAttribute(normals, 3).copyVector3sArray(geometry.normals)\n          );\n        }\n\n        if (geometry.colors.length > 0) {\n          var colors = new Float32Array(geometry.colors.length * 3);\n          this.addAttribute(\n            \"color\",\n            new BufferAttribute(colors, 3).copyColorsArray(geometry.colors)\n          );\n        }\n\n        if (geometry.uvs.length > 0) {\n          var uvs = new Float32Array(geometry.uvs.length * 2);\n          this.addAttribute(\n            \"uv\",\n            new BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs)\n          );\n        }\n\n        if (geometry.uvs2.length > 0) {\n          var uvs2 = new Float32Array(geometry.uvs2.length * 2);\n          this.addAttribute(\n            \"uv2\",\n            new BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2)\n          );\n        }\n\n        // groups\n\n        this.groups = geometry.groups;\n\n        // morphs\n\n        for (var name in geometry.morphTargets) {\n          var array = [];\n          var morphTargets = geometry.morphTargets[name];\n\n          for (var i = 0, l = morphTargets.length; i < l; i++) {\n            var morphTarget = morphTargets[i];\n\n            var attribute = new Float32BufferAttribute(\n              morphTarget.length * 3,\n              3\n            );\n\n            array.push(attribute.copyVector3sArray(morphTarget));\n          }\n\n          this.morphAttributes[name] = array;\n        }\n\n        // skinning\n\n        if (geometry.skinIndices.length > 0) {\n          var skinIndices = new Float32BufferAttribute(\n            geometry.skinIndices.length * 4,\n            4\n          );\n          this.addAttribute(\n            \"skinIndex\",\n            skinIndices.copyVector4sArray(geometry.skinIndices)\n          );\n        }\n\n        if (geometry.skinWeights.length > 0) {\n          var skinWeights = new Float32BufferAttribute(\n            geometry.skinWeights.length * 4,\n            4\n          );\n          this.addAttribute(\n            \"skinWeight\",\n            skinWeights.copyVector4sArray(geometry.skinWeights)\n          );\n        }\n\n        //\n\n        if (geometry.boundingSphere !== null) {\n          this.boundingSphere = geometry.boundingSphere.clone();\n        }\n\n        if (geometry.boundingBox !== null) {\n          this.boundingBox = geometry.boundingBox.clone();\n        }\n\n        return this;\n      },\n\n      computeBoundingBox: function () {\n        if (this.boundingBox === null) {\n          this.boundingBox = new Box3();\n        }\n\n        var position = this.attributes.position;\n\n        if (position !== undefined) {\n          this.boundingBox.setFromBufferAttribute(position);\n        } else {\n          this.boundingBox.makeEmpty();\n        }\n\n        if (\n          isNaN(this.boundingBox.min.x) ||\n          isNaN(this.boundingBox.min.y) ||\n          isNaN(this.boundingBox.min.z)\n        ) {\n          console.error(\n            'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',\n            this\n          );\n        }\n      },\n\n      computeBoundingSphere: (function () {\n        var box = new Box3();\n        var vector = new Vector3();\n\n        return function computeBoundingSphere() {\n          if (this.boundingSphere === null) {\n            this.boundingSphere = new Sphere();\n          }\n\n          var position = this.attributes.position;\n\n          if (position) {\n            var center = this.boundingSphere.center;\n\n            box.setFromBufferAttribute(position);\n            box.getCenter(center);\n\n            // hoping to find a boundingSphere with a radius smaller than the\n            // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n            var maxRadiusSq = 0;\n\n            for (var i = 0, il = position.count; i < il; i++) {\n              vector.x = position.getX(i);\n              vector.y = position.getY(i);\n              vector.z = position.getZ(i);\n              maxRadiusSq = Math.max(\n                maxRadiusSq,\n                center.distanceToSquared(vector)\n              );\n            }\n\n            this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n            if (isNaN(this.boundingSphere.radius)) {\n              console.error(\n                'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',\n                this\n              );\n            }\n          }\n        };\n      })(),\n\n      computeFaceNormals: function () {\n        // backwards compatibility\n      },\n\n      computeVertexNormals: function () {\n        var index = this.index;\n        var attributes = this.attributes;\n        var groups = this.groups;\n\n        if (attributes.position) {\n          var positions = attributes.position.array;\n\n          if (attributes.normal === undefined) {\n            this.addAttribute(\n              \"normal\",\n              new BufferAttribute(new Float32Array(positions.length), 3)\n            );\n          } else {\n            // reset existing normals to zero\n\n            var array = attributes.normal.array;\n\n            for (var i = 0, il = array.length; i < il; i++) {\n              array[i] = 0;\n            }\n          }\n\n          var normals = attributes.normal.array;\n\n          var vA, vB, vC;\n          var pA = new Vector3(),\n            pB = new Vector3(),\n            pC = new Vector3();\n          var cb = new Vector3(),\n            ab = new Vector3();\n\n          // indexed elements\n\n          if (index) {\n            var indices = index.array;\n\n            if (groups.length === 0) {\n              this.addGroup(0, indices.length);\n            }\n\n            for (var j = 0, jl = groups.length; j < jl; ++j) {\n              var group = groups[j];\n\n              var start = group.start;\n              var count = group.count;\n\n              for (var i = start, il = start + count; i < il; i += 3) {\n                vA = indices[i + 0] * 3;\n                vB = indices[i + 1] * 3;\n                vC = indices[i + 2] * 3;\n\n                pA.fromArray(positions, vA);\n                pB.fromArray(positions, vB);\n                pC.fromArray(positions, vC);\n\n                cb.subVectors(pC, pB);\n                ab.subVectors(pA, pB);\n                cb.cross(ab);\n\n                normals[vA] += cb.x;\n                normals[vA + 1] += cb.y;\n                normals[vA + 2] += cb.z;\n\n                normals[vB] += cb.x;\n                normals[vB + 1] += cb.y;\n                normals[vB + 2] += cb.z;\n\n                normals[vC] += cb.x;\n                normals[vC + 1] += cb.y;\n                normals[vC + 2] += cb.z;\n              }\n            }\n          } else {\n            // non-indexed elements (unconnected triangle soup)\n\n            for (var i = 0, il = positions.length; i < il; i += 9) {\n              pA.fromArray(positions, i);\n              pB.fromArray(positions, i + 3);\n              pC.fromArray(positions, i + 6);\n\n              cb.subVectors(pC, pB);\n              ab.subVectors(pA, pB);\n              cb.cross(ab);\n\n              normals[i] = cb.x;\n              normals[i + 1] = cb.y;\n              normals[i + 2] = cb.z;\n\n              normals[i + 3] = cb.x;\n              normals[i + 4] = cb.y;\n              normals[i + 5] = cb.z;\n\n              normals[i + 6] = cb.x;\n              normals[i + 7] = cb.y;\n              normals[i + 8] = cb.z;\n            }\n          }\n\n          this.normalizeNormals();\n\n          attributes.normal.needsUpdate = true;\n        }\n      },\n\n      merge: function (geometry, offset) {\n        if (!(geometry && geometry.isBufferGeometry)) {\n          console.error(\n            \"THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.\",\n            geometry\n          );\n          return;\n        }\n\n        if (offset === undefined) {\n          offset = 0;\n\n          console.warn(\n            \"THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. \" +\n              \"Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.\"\n          );\n        }\n\n        var attributes = this.attributes;\n\n        for (var key in attributes) {\n          if (geometry.attributes[key] === undefined) continue;\n\n          var attribute1 = attributes[key];\n          var attributeArray1 = attribute1.array;\n\n          var attribute2 = geometry.attributes[key];\n          var attributeArray2 = attribute2.array;\n\n          var attributeSize = attribute2.itemSize;\n\n          for (\n            var i = 0, j = attributeSize * offset;\n            i < attributeArray2.length;\n            i++, j++\n          ) {\n            attributeArray1[j] = attributeArray2[i];\n          }\n        }\n\n        return this;\n      },\n\n      normalizeNormals: (function () {\n        var vector = new Vector3();\n\n        return function normalizeNormals() {\n          var normals = this.attributes.normal;\n\n          for (var i = 0, il = normals.count; i < il; i++) {\n            vector.x = normals.getX(i);\n            vector.y = normals.getY(i);\n            vector.z = normals.getZ(i);\n\n            vector.normalize();\n\n            normals.setXYZ(i, vector.x, vector.y, vector.z);\n          }\n        };\n      })(),\n\n      toNonIndexed: function () {\n        if (this.index === null) {\n          console.warn(\n            \"THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.\"\n          );\n          return this;\n        }\n\n        var geometry2 = new BufferGeometry();\n\n        var indices = this.index.array;\n        var attributes = this.attributes;\n\n        for (var name in attributes) {\n          var attribute = attributes[name];\n\n          var array = attribute.array;\n          var itemSize = attribute.itemSize;\n\n          var array2 = new array.constructor(indices.length * itemSize);\n\n          var index = 0,\n            index2 = 0;\n\n          for (var i = 0, l = indices.length; i < l; i++) {\n            index = indices[i] * itemSize;\n\n            for (var j = 0; j < itemSize; j++) {\n              array2[index2++] = array[index++];\n            }\n          }\n\n          geometry2.addAttribute(name, new BufferAttribute(array2, itemSize));\n        }\n\n        var groups = this.groups;\n\n        for (var i = 0, l = groups.length; i < l; i++) {\n          var group = groups[i];\n          geometry2.addGroup(group.start, group.count, group.materialIndex);\n        }\n\n        return geometry2;\n      },\n\n      toJSON: function () {\n        var data = {\n          metadata: {\n            version: 4.5,\n            type: \"BufferGeometry\",\n            generator: \"BufferGeometry.toJSON\",\n          },\n        };\n\n        // standard BufferGeometry serialization\n\n        data.uuid = this.uuid;\n        data.type = this.type;\n        if (this.name !== \"\") data.name = this.name;\n        if (Object.keys(this.userData).length > 0)\n          data.userData = this.userData;\n\n        if (this.parameters !== undefined) {\n          var parameters = this.parameters;\n\n          for (var key in parameters) {\n            if (parameters[key] !== undefined) data[key] = parameters[key];\n          }\n\n          return data;\n        }\n\n        data.data = { attributes: {} };\n\n        var index = this.index;\n\n        if (index !== null) {\n          var array = Array.prototype.slice.call(index.array);\n\n          data.data.index = {\n            type: index.array.constructor.name,\n            array: array,\n          };\n        }\n\n        var attributes = this.attributes;\n\n        for (var key in attributes) {\n          var attribute = attributes[key];\n\n          var array = Array.prototype.slice.call(attribute.array);\n\n          data.data.attributes[key] = {\n            itemSize: attribute.itemSize,\n            type: attribute.array.constructor.name,\n            array: array,\n            normalized: attribute.normalized,\n          };\n        }\n\n        var groups = this.groups;\n\n        if (groups.length > 0) {\n          data.data.groups = JSON.parse(JSON.stringify(groups));\n        }\n\n        var boundingSphere = this.boundingSphere;\n\n        if (boundingSphere !== null) {\n          data.data.boundingSphere = {\n            center: boundingSphere.center.toArray(),\n            radius: boundingSphere.radius,\n          };\n        }\n\n        return data;\n      },\n\n      clone: function () {\n        /*\n\t\t\t // Handle primitives\n\n\t\t\t var parameters = this.parameters;\n\n\t\t\t if ( parameters !== undefined ) {\n\n\t\t\t var values = [];\n\n\t\t\t for ( var key in parameters ) {\n\n\t\t\t values.push( parameters[ key ] );\n\n\t\t\t }\n\n\t\t\t var geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\n\t\t\t }\n\n\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\n        return new BufferGeometry().copy(this);\n      },\n\n      copy: function (source) {\n        var name, i, l;\n\n        // reset\n\n        this.index = null;\n        this.attributes = {};\n        this.morphAttributes = {};\n        this.groups = [];\n        this.boundingBox = null;\n        this.boundingSphere = null;\n\n        // name\n\n        this.name = source.name;\n\n        // index\n\n        var index = source.index;\n\n        if (index !== null) {\n          this.setIndex(index.clone());\n        }\n\n        // attributes\n\n        var attributes = source.attributes;\n\n        for (name in attributes) {\n          var attribute = attributes[name];\n          this.addAttribute(name, attribute.clone());\n        }\n\n        // morph attributes\n\n        var morphAttributes = source.morphAttributes;\n\n        for (name in morphAttributes) {\n          var array = [];\n          var morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes\n\n          for (i = 0, l = morphAttribute.length; i < l; i++) {\n            array.push(morphAttribute[i].clone());\n          }\n\n          this.morphAttributes[name] = array;\n        }\n\n        // groups\n\n        var groups = source.groups;\n\n        for (i = 0, l = groups.length; i < l; i++) {\n          var group = groups[i];\n          this.addGroup(group.start, group.count, group.materialIndex);\n        }\n\n        // bounding box\n\n        var boundingBox = source.boundingBox;\n\n        if (boundingBox !== null) {\n          this.boundingBox = boundingBox.clone();\n        }\n\n        // bounding sphere\n\n        var boundingSphere = source.boundingSphere;\n\n        if (boundingSphere !== null) {\n          this.boundingSphere = boundingSphere.clone();\n        }\n\n        // draw range\n\n        this.drawRange.start = source.drawRange.start;\n        this.drawRange.count = source.drawRange.count;\n\n        // user data\n\n        this.userData = source.userData;\n\n        return this;\n      },\n\n      dispose: function () {\n        this.dispatchEvent({ type: \"dispose\" });\n      },\n    }\n  );\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // BoxGeometry\n\n  function BoxGeometry(\n    width,\n    height,\n    depth,\n    widthSegments,\n    heightSegments,\n    depthSegments\n  ) {\n    Geometry.call(this);\n\n    this.type = \"BoxGeometry\";\n\n    this.parameters = {\n      width: width,\n      height: height,\n      depth: depth,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      depthSegments: depthSegments,\n    };\n\n    this.fromBufferGeometry(\n      new BoxBufferGeometry(\n        width,\n        height,\n        depth,\n        widthSegments,\n        heightSegments,\n        depthSegments\n      )\n    );\n    this.mergeVertices();\n  }\n\n  BoxGeometry.prototype = Object.create(Geometry.prototype);\n  BoxGeometry.prototype.constructor = BoxGeometry;\n\n  // BoxBufferGeometry\n\n  function BoxBufferGeometry(\n    width,\n    height,\n    depth,\n    widthSegments,\n    heightSegments,\n    depthSegments\n  ) {\n    BufferGeometry.call(this);\n\n    this.type = \"BoxBufferGeometry\";\n\n    this.parameters = {\n      width: width,\n      height: height,\n      depth: depth,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      depthSegments: depthSegments,\n    };\n\n    var scope = this;\n\n    width = width || 1;\n    height = height || 1;\n    depth = depth || 1;\n\n    // segments\n\n    widthSegments = Math.floor(widthSegments) || 1;\n    heightSegments = Math.floor(heightSegments) || 1;\n    depthSegments = Math.floor(depthSegments) || 1;\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    // helper variables\n\n    var numberOfVertices = 0;\n    var groupStart = 0;\n\n    // build each side of the box geometry\n\n    buildPlane(\n      \"z\",\n      \"y\",\n      \"x\",\n      -1,\n      -1,\n      depth,\n      height,\n      width,\n      depthSegments,\n      heightSegments,\n      0\n    ); // px\n    buildPlane(\n      \"z\",\n      \"y\",\n      \"x\",\n      1,\n      -1,\n      depth,\n      height,\n      -width,\n      depthSegments,\n      heightSegments,\n      1\n    ); // nx\n    buildPlane(\n      \"x\",\n      \"z\",\n      \"y\",\n      1,\n      1,\n      width,\n      depth,\n      height,\n      widthSegments,\n      depthSegments,\n      2\n    ); // py\n    buildPlane(\n      \"x\",\n      \"z\",\n      \"y\",\n      1,\n      -1,\n      width,\n      depth,\n      -height,\n      widthSegments,\n      depthSegments,\n      3\n    ); // ny\n    buildPlane(\n      \"x\",\n      \"y\",\n      \"z\",\n      1,\n      -1,\n      width,\n      height,\n      depth,\n      widthSegments,\n      heightSegments,\n      4\n    ); // pz\n    buildPlane(\n      \"x\",\n      \"y\",\n      \"z\",\n      -1,\n      -1,\n      width,\n      height,\n      -depth,\n      widthSegments,\n      heightSegments,\n      5\n    ); // nz\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n\n    function buildPlane(\n      u,\n      v,\n      w,\n      udir,\n      vdir,\n      width,\n      height,\n      depth,\n      gridX,\n      gridY,\n      materialIndex\n    ) {\n      var segmentWidth = width / gridX;\n      var segmentHeight = height / gridY;\n\n      var widthHalf = width / 2;\n      var heightHalf = height / 2;\n      var depthHalf = depth / 2;\n\n      var gridX1 = gridX + 1;\n      var gridY1 = gridY + 1;\n\n      var vertexCounter = 0;\n      var groupCount = 0;\n\n      var ix, iy;\n\n      var vector = new Vector3();\n\n      // generate vertices, normals and uvs\n\n      for (iy = 0; iy < gridY1; iy++) {\n        var y = iy * segmentHeight - heightHalf;\n\n        for (ix = 0; ix < gridX1; ix++) {\n          var x = ix * segmentWidth - widthHalf;\n\n          // set values to correct vector component\n\n          vector[u] = x * udir;\n          vector[v] = y * vdir;\n          vector[w] = depthHalf;\n\n          // now apply vector to vertex buffer\n\n          vertices.push(vector.x, vector.y, vector.z);\n\n          // set values to correct vector component\n\n          vector[u] = 0;\n          vector[v] = 0;\n          vector[w] = depth > 0 ? 1 : -1;\n\n          // now apply vector to normal buffer\n\n          normals.push(vector.x, vector.y, vector.z);\n\n          // uvs\n\n          uvs.push(ix / gridX);\n          uvs.push(1 - iy / gridY);\n\n          // counters\n\n          vertexCounter += 1;\n        }\n      }\n\n      // indices\n\n      // 1. you need three indices to draw a single face\n      // 2. a single segment consists of two faces\n      // 3. so we need to generate six (2*3) indices per segment\n\n      for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n          var a = numberOfVertices + ix + gridX1 * iy;\n          var b = numberOfVertices + ix + gridX1 * (iy + 1);\n          var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n          var d = numberOfVertices + (ix + 1) + gridX1 * iy;\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n\n          // increase counter\n\n          groupCount += 6;\n        }\n      }\n\n      // add a group to the geometry. this will ensure multi material support\n\n      scope.addGroup(groupStart, groupCount, materialIndex);\n\n      // calculate new start value for groups\n\n      groupStart += groupCount;\n\n      // update total number of vertices\n\n      numberOfVertices += vertexCounter;\n    }\n  }\n\n  BoxBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // PlaneGeometry\n\n  function PlaneGeometry(width, height, widthSegments, heightSegments) {\n    Geometry.call(this);\n\n    this.type = \"PlaneGeometry\";\n\n    this.parameters = {\n      width: width,\n      height: height,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n    };\n\n    this.fromBufferGeometry(\n      new PlaneBufferGeometry(width, height, widthSegments, heightSegments)\n    );\n    this.mergeVertices();\n  }\n\n  PlaneGeometry.prototype = Object.create(Geometry.prototype);\n  PlaneGeometry.prototype.constructor = PlaneGeometry;\n\n  // PlaneBufferGeometry\n\n  function PlaneBufferGeometry(width, height, widthSegments, heightSegments) {\n    BufferGeometry.call(this);\n\n    this.type = \"PlaneBufferGeometry\";\n\n    this.parameters = {\n      width: width,\n      height: height,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n    };\n\n    width = width || 1;\n    height = height || 1;\n\n    var width_half = width / 2;\n    var height_half = height / 2;\n\n    var gridX = Math.floor(widthSegments) || 1;\n    var gridY = Math.floor(heightSegments) || 1;\n\n    var gridX1 = gridX + 1;\n    var gridY1 = gridY + 1;\n\n    var segment_width = width / gridX;\n    var segment_height = height / gridY;\n\n    var ix, iy;\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    // generate vertices, normals and uvs\n\n    for (iy = 0; iy < gridY1; iy++) {\n      var y = iy * segment_height - height_half;\n\n      for (ix = 0; ix < gridX1; ix++) {\n        var x = ix * segment_width - width_half;\n\n        vertices.push(x, -y, 0);\n\n        normals.push(0, 0, 1);\n\n        uvs.push(ix / gridX);\n        uvs.push(1 - iy / gridY);\n      }\n    }\n\n    // indices\n\n    for (iy = 0; iy < gridY; iy++) {\n      for (ix = 0; ix < gridX; ix++) {\n        var a = ix + gridX1 * iy;\n        var b = ix + gridX1 * (iy + 1);\n        var c = ix + 1 + gridX1 * (iy + 1);\n        var d = ix + 1 + gridX1 * iy;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n\n  PlaneBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  var materialId = 0;\n\n  function Material() {\n    Object.defineProperty(this, \"id\", { value: materialId++ });\n\n    this.uuid = _Math.generateUUID();\n\n    this.name = \"\";\n    this.type = \"Material\";\n\n    this.fog = true;\n    this.lights = true;\n\n    this.blending = NormalBlending;\n    this.side = FrontSide;\n    this.flatShading = false;\n    this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n    this.opacity = 1;\n    this.transparent = false;\n\n    this.blendSrc = SrcAlphaFactor;\n    this.blendDst = OneMinusSrcAlphaFactor;\n    this.blendEquation = AddEquation;\n    this.blendSrcAlpha = null;\n    this.blendDstAlpha = null;\n    this.blendEquationAlpha = null;\n\n    this.depthFunc = LessEqualDepth;\n    this.depthTest = true;\n    this.depthWrite = true;\n\n    this.clippingPlanes = null;\n    this.clipIntersection = false;\n    this.clipShadows = false;\n\n    this.shadowSide = null;\n\n    this.colorWrite = true;\n\n    this.precision = null; // override the renderer's default precision for this material\n\n    this.polygonOffset = false;\n    this.polygonOffsetFactor = 0;\n    this.polygonOffsetUnits = 0;\n\n    this.dithering = false;\n\n    this.alphaTest = 0;\n    this.premultipliedAlpha = false;\n\n    this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n    this.visible = true;\n\n    this.userData = {};\n\n    this.needsUpdate = true;\n  }\n\n  Material.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n    constructor: Material,\n\n    isMaterial: true,\n\n    onBeforeCompile: function () {},\n\n    setValues: function (values) {\n      if (values === undefined) return;\n\n      for (var key in values) {\n        var newValue = values[key];\n\n        if (newValue === undefined) {\n          console.warn(\"THREE.Material: '\" + key + \"' parameter is undefined.\");\n          continue;\n        }\n\n        // for backward compatability if shading is set in the constructor\n        if (key === \"shading\") {\n          console.warn(\n            \"THREE.\" +\n              this.type +\n              \": .shading has been removed. Use the boolean .flatShading instead.\"\n          );\n          this.flatShading = newValue === FlatShading ? true : false;\n          continue;\n        }\n\n        var currentValue = this[key];\n\n        if (currentValue === undefined) {\n          console.warn(\n            \"THREE.\" +\n              this.type +\n              \": '\" +\n              key +\n              \"' is not a property of this material.\"\n          );\n          continue;\n        }\n\n        if (currentValue && currentValue.isColor) {\n          currentValue.set(newValue);\n        } else if (\n          currentValue &&\n          currentValue.isVector3 &&\n          newValue &&\n          newValue.isVector3\n        ) {\n          currentValue.copy(newValue);\n        } else if (key === \"overdraw\") {\n          // ensure overdraw is backwards-compatible with legacy boolean type\n          this[key] = Number(newValue);\n        } else {\n          this[key] = newValue;\n        }\n      }\n    },\n\n    toJSON: function (meta) {\n      var isRoot = meta === undefined || typeof meta === \"string\";\n\n      if (isRoot) {\n        meta = {\n          textures: {},\n          images: {},\n        };\n      }\n\n      var data = {\n        metadata: {\n          version: 4.5,\n          type: \"Material\",\n          generator: \"Material.toJSON\",\n        },\n      };\n\n      // standard Material serialization\n      data.uuid = this.uuid;\n      data.type = this.type;\n\n      if (this.name !== \"\") data.name = this.name;\n\n      if (this.color && this.color.isColor) data.color = this.color.getHex();\n\n      if (this.roughness !== undefined) data.roughness = this.roughness;\n      if (this.metalness !== undefined) data.metalness = this.metalness;\n\n      if (this.emissive && this.emissive.isColor)\n        data.emissive = this.emissive.getHex();\n      if (this.emissiveIntensity !== 1)\n        data.emissiveIntensity = this.emissiveIntensity;\n\n      if (this.specular && this.specular.isColor)\n        data.specular = this.specular.getHex();\n      if (this.shininess !== undefined) data.shininess = this.shininess;\n      if (this.clearCoat !== undefined) data.clearCoat = this.clearCoat;\n      if (this.clearCoatRoughness !== undefined)\n        data.clearCoatRoughness = this.clearCoatRoughness;\n\n      if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n      if (this.alphaMap && this.alphaMap.isTexture)\n        data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n      if (this.lightMap && this.lightMap.isTexture)\n        data.lightMap = this.lightMap.toJSON(meta).uuid;\n\n      if (this.aoMap && this.aoMap.isTexture) {\n        data.aoMap = this.aoMap.toJSON(meta).uuid;\n        data.aoMapIntensity = this.aoMapIntensity;\n      }\n\n      if (this.bumpMap && this.bumpMap.isTexture) {\n        data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n        data.bumpScale = this.bumpScale;\n      }\n\n      if (this.normalMap && this.normalMap.isTexture) {\n        data.normalMap = this.normalMap.toJSON(meta).uuid;\n        data.normalMapType = this.normalMapType;\n        data.normalScale = this.normalScale.toArray();\n      }\n\n      if (this.displacementMap && this.displacementMap.isTexture) {\n        data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n        data.displacementScale = this.displacementScale;\n        data.displacementBias = this.displacementBias;\n      }\n\n      if (this.roughnessMap && this.roughnessMap.isTexture)\n        data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n      if (this.metalnessMap && this.metalnessMap.isTexture)\n        data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\n      if (this.emissiveMap && this.emissiveMap.isTexture)\n        data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n      if (this.specularMap && this.specularMap.isTexture)\n        data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n      if (this.envMap && this.envMap.isTexture) {\n        data.envMap = this.envMap.toJSON(meta).uuid;\n        data.reflectivity = this.reflectivity; // Scale behind envMap\n      }\n\n      if (this.gradientMap && this.gradientMap.isTexture) {\n        data.gradientMap = this.gradientMap.toJSON(meta).uuid;\n      }\n\n      if (this.size !== undefined) data.size = this.size;\n      if (this.sizeAttenuation !== undefined)\n        data.sizeAttenuation = this.sizeAttenuation;\n\n      if (this.blending !== NormalBlending) data.blending = this.blending;\n      if (this.flatShading === true) data.flatShading = this.flatShading;\n      if (this.side !== FrontSide) data.side = this.side;\n      if (this.vertexColors !== NoColors) data.vertexColors = this.vertexColors;\n\n      if (this.opacity < 1) data.opacity = this.opacity;\n      if (this.transparent === true) data.transparent = this.transparent;\n\n      data.depthFunc = this.depthFunc;\n      data.depthTest = this.depthTest;\n      data.depthWrite = this.depthWrite;\n\n      // rotation (SpriteMaterial)\n      if (this.rotation !== 0) data.rotation = this.rotation;\n\n      if (this.linewidth !== 1) data.linewidth = this.linewidth;\n      if (this.dashSize !== undefined) data.dashSize = this.dashSize;\n      if (this.gapSize !== undefined) data.gapSize = this.gapSize;\n      if (this.scale !== undefined) data.scale = this.scale;\n\n      if (this.dithering === true) data.dithering = true;\n\n      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n      if (this.premultipliedAlpha === true)\n        data.premultipliedAlpha = this.premultipliedAlpha;\n\n      if (this.wireframe === true) data.wireframe = this.wireframe;\n      if (this.wireframeLinewidth > 1)\n        data.wireframeLinewidth = this.wireframeLinewidth;\n      if (this.wireframeLinecap !== \"round\")\n        data.wireframeLinecap = this.wireframeLinecap;\n      if (this.wireframeLinejoin !== \"round\")\n        data.wireframeLinejoin = this.wireframeLinejoin;\n\n      if (this.morphTargets === true) data.morphTargets = true;\n      if (this.skinning === true) data.skinning = true;\n\n      if (this.visible === false) data.visible = false;\n      if (JSON.stringify(this.userData) !== \"{}\") data.userData = this.userData;\n\n      // TODO: Copied from Object3D.toJSON\n\n      function extractFromCache(cache) {\n        var values = [];\n\n        for (var key in cache) {\n          var data = cache[key];\n          delete data.metadata;\n          values.push(data);\n        }\n\n        return values;\n      }\n\n      if (isRoot) {\n        var textures = extractFromCache(meta.textures);\n        var images = extractFromCache(meta.images);\n\n        if (textures.length > 0) data.textures = textures;\n        if (images.length > 0) data.images = images;\n      }\n\n      return data;\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (source) {\n      this.name = source.name;\n\n      this.fog = source.fog;\n      this.lights = source.lights;\n\n      this.blending = source.blending;\n      this.side = source.side;\n      this.flatShading = source.flatShading;\n      this.vertexColors = source.vertexColors;\n\n      this.opacity = source.opacity;\n      this.transparent = source.transparent;\n\n      this.blendSrc = source.blendSrc;\n      this.blendDst = source.blendDst;\n      this.blendEquation = source.blendEquation;\n      this.blendSrcAlpha = source.blendSrcAlpha;\n      this.blendDstAlpha = source.blendDstAlpha;\n      this.blendEquationAlpha = source.blendEquationAlpha;\n\n      this.depthFunc = source.depthFunc;\n      this.depthTest = source.depthTest;\n      this.depthWrite = source.depthWrite;\n\n      this.colorWrite = source.colorWrite;\n\n      this.precision = source.precision;\n\n      this.polygonOffset = source.polygonOffset;\n      this.polygonOffsetFactor = source.polygonOffsetFactor;\n      this.polygonOffsetUnits = source.polygonOffsetUnits;\n\n      this.dithering = source.dithering;\n\n      this.alphaTest = source.alphaTest;\n      this.premultipliedAlpha = source.premultipliedAlpha;\n\n      this.overdraw = source.overdraw;\n\n      this.visible = source.visible;\n      this.userData = JSON.parse(JSON.stringify(source.userData));\n\n      this.clipShadows = source.clipShadows;\n      this.clipIntersection = source.clipIntersection;\n\n      var srcPlanes = source.clippingPlanes,\n        dstPlanes = null;\n\n      if (srcPlanes !== null) {\n        var n = srcPlanes.length;\n        dstPlanes = new Array(n);\n\n        for (var i = 0; i !== n; ++i) dstPlanes[i] = srcPlanes[i].clone();\n      }\n\n      this.clippingPlanes = dstPlanes;\n\n      this.shadowSide = source.shadowSide;\n\n      return this;\n    },\n\n    dispose: function () {\n      this.dispatchEvent({ type: \"dispose\" });\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  lightMap: new THREE.Texture( <Image> ),\n   *  lightMapIntensity: <float>\n   *\n   *  aoMap: new THREE.Texture( <Image> ),\n   *  aoMapIntensity: <float>\n   *\n   *  specularMap: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n   *  combine: THREE.Multiply,\n   *  reflectivity: <float>,\n   *  refractionRatio: <float>,\n   *\n   *  depthTest: <bool>,\n   *  depthWrite: <bool>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>\n   * }\n   */\n\n  function MeshBasicMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"MeshBasicMaterial\";\n\n    this.color = new Color(0xffffff); // emissive\n\n    this.map = null;\n\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n\n    this.specularMap = null;\n\n    this.alphaMap = null;\n\n    this.envMap = null;\n    this.combine = MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = \"round\";\n    this.wireframeLinejoin = \"round\";\n\n    this.skinning = false;\n    this.morphTargets = false;\n\n    this.lights = false;\n\n    this.setValues(parameters);\n  }\n\n  MeshBasicMaterial.prototype = Object.create(Material.prototype);\n  MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\n\n  MeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n  MeshBasicMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.color.copy(source.color);\n\n    this.map = source.map;\n\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n\n    this.specularMap = source.specularMap;\n\n    this.alphaMap = source.alphaMap;\n\n    this.envMap = source.envMap;\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n\n    return this;\n  };\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  defines: { \"label\" : \"value\" },\n   *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n   *\n   *  fragmentShader: <string>,\n   *  vertexShader: <string>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>,\n   *\n   *  lights: <bool>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>,\n   *  morphNormals: <bool>\n   * }\n   */\n\n  function ShaderMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"ShaderMaterial\";\n\n    this.defines = {};\n    this.uniforms = {};\n\n    this.vertexShader =\n      \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n    this.fragmentShader =\n      \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n    this.linewidth = 1;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n\n    this.fog = false; // set to use scene fog\n    this.lights = false; // set to use scene lights\n    this.clipping = false; // set to use user-defined clipping planes\n\n    this.skinning = false; // set to use skinning attribute streams\n    this.morphTargets = false; // set to use morph targets\n    this.morphNormals = false; // set to use morph normals\n\n    this.extensions = {\n      derivatives: false, // set to use derivatives\n      fragDepth: false, // set to use fragment depth values\n      drawBuffers: false, // set to use draw buffers\n      shaderTextureLOD: false, // set to use shader texture LOD\n    };\n\n    // When rendered geometry doesn't include these attributes but the material does,\n    // use these default values in WebGL. This avoids errors when buffer data is missing.\n    this.defaultAttributeValues = {\n      color: [1, 1, 1],\n      uv: [0, 0],\n      uv2: [0, 0],\n    };\n\n    this.index0AttributeName = undefined;\n    this.uniformsNeedUpdate = false;\n\n    if (parameters !== undefined) {\n      if (parameters.attributes !== undefined) {\n        console.error(\n          \"THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.\"\n        );\n      }\n\n      this.setValues(parameters);\n    }\n  }\n\n  ShaderMaterial.prototype = Object.create(Material.prototype);\n  ShaderMaterial.prototype.constructor = ShaderMaterial;\n\n  ShaderMaterial.prototype.isShaderMaterial = true;\n\n  ShaderMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.fragmentShader = source.fragmentShader;\n    this.vertexShader = source.vertexShader;\n\n    this.uniforms = UniformsUtils.clone(source.uniforms);\n\n    this.defines = Object.assign({}, source.defines);\n\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n\n    this.lights = source.lights;\n    this.clipping = source.clipping;\n\n    this.skinning = source.skinning;\n\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n\n    this.extensions = source.extensions;\n\n    return this;\n  };\n\n  ShaderMaterial.prototype.toJSON = function (meta) {\n    var data = Material.prototype.toJSON.call(this, meta);\n\n    data.uniforms = this.uniforms;\n    data.vertexShader = this.vertexShader;\n    data.fragmentShader = this.fragmentShader;\n\n    return data;\n  };\n\n  /**\n   * @author bhouston / http://clara.io\n   */\n\n  function Ray(origin, direction) {\n    this.origin = origin !== undefined ? origin : new Vector3();\n    this.direction = direction !== undefined ? direction : new Vector3();\n  }\n\n  Object.assign(Ray.prototype, {\n    set: function (origin, direction) {\n      this.origin.copy(origin);\n      this.direction.copy(direction);\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (ray) {\n      this.origin.copy(ray.origin);\n      this.direction.copy(ray.direction);\n\n      return this;\n    },\n\n    at: function (t, target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Ray: .at() target is now required\");\n        target = new Vector3();\n      }\n\n      return target.copy(this.direction).multiplyScalar(t).add(this.origin);\n    },\n\n    lookAt: function (v) {\n      this.direction.copy(v).sub(this.origin).normalize();\n\n      return this;\n    },\n\n    recast: (function () {\n      var v1 = new Vector3();\n\n      return function recast(t) {\n        this.origin.copy(this.at(t, v1));\n\n        return this;\n      };\n    })(),\n\n    closestPointToPoint: function (point, target) {\n      if (target === undefined) {\n        console.warn(\n          \"THREE.Ray: .closestPointToPoint() target is now required\"\n        );\n        target = new Vector3();\n      }\n\n      target.subVectors(point, this.origin);\n\n      var directionDistance = target.dot(this.direction);\n\n      if (directionDistance < 0) {\n        return target.copy(this.origin);\n      }\n\n      return target\n        .copy(this.direction)\n        .multiplyScalar(directionDistance)\n        .add(this.origin);\n    },\n\n    distanceToPoint: function (point) {\n      return Math.sqrt(this.distanceSqToPoint(point));\n    },\n\n    distanceSqToPoint: (function () {\n      var v1 = new Vector3();\n\n      return function distanceSqToPoint(point) {\n        var directionDistance = v1\n          .subVectors(point, this.origin)\n          .dot(this.direction);\n\n        // point behind the ray\n\n        if (directionDistance < 0) {\n          return this.origin.distanceToSquared(point);\n        }\n\n        v1.copy(this.direction)\n          .multiplyScalar(directionDistance)\n          .add(this.origin);\n\n        return v1.distanceToSquared(point);\n      };\n    })(),\n\n    distanceSqToSegment: (function () {\n      var segCenter = new Vector3();\n      var segDir = new Vector3();\n      var diff = new Vector3();\n\n      return function distanceSqToSegment(\n        v0,\n        v1,\n        optionalPointOnRay,\n        optionalPointOnSegment\n      ) {\n        // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n        // It returns the min distance between the ray and the segment\n        // defined by v0 and v1\n        // It can also set two optional targets :\n        // - The closest point on the ray\n        // - The closest point on the segment\n\n        segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n        segDir.copy(v1).sub(v0).normalize();\n        diff.copy(this.origin).sub(segCenter);\n\n        var segExtent = v0.distanceTo(v1) * 0.5;\n        var a01 = -this.direction.dot(segDir);\n        var b0 = diff.dot(this.direction);\n        var b1 = -diff.dot(segDir);\n        var c = diff.lengthSq();\n        var det = Math.abs(1 - a01 * a01);\n        var s0, s1, sqrDist, extDet;\n\n        if (det > 0) {\n          // The ray and segment are not parallel.\n\n          s0 = a01 * b1 - b0;\n          s1 = a01 * b0 - b1;\n          extDet = segExtent * det;\n\n          if (s0 >= 0) {\n            if (s1 >= -extDet) {\n              if (s1 <= extDet) {\n                // region 0\n                // Minimum at interior points of ray and segment.\n\n                var invDet = 1 / det;\n                s0 *= invDet;\n                s1 *= invDet;\n                sqrDist =\n                  s0 * (s0 + a01 * s1 + 2 * b0) +\n                  s1 * (a01 * s0 + s1 + 2 * b1) +\n                  c;\n              } else {\n                // region 1\n\n                s1 = segExtent;\n                s0 = Math.max(0, -(a01 * s1 + b0));\n                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n              }\n            } else {\n              // region 5\n\n              s1 = -segExtent;\n              s0 = Math.max(0, -(a01 * s1 + b0));\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            }\n          } else {\n            if (s1 <= -extDet) {\n              // region 4\n\n              s0 = Math.max(0, -(-a01 * segExtent + b0));\n              s1 =\n                s0 > 0\n                  ? -segExtent\n                  : Math.min(Math.max(-segExtent, -b1), segExtent);\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            } else if (s1 <= extDet) {\n              // region 3\n\n              s0 = 0;\n              s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n              sqrDist = s1 * (s1 + 2 * b1) + c;\n            } else {\n              // region 2\n\n              s0 = Math.max(0, -(a01 * segExtent + b0));\n              s1 =\n                s0 > 0\n                  ? segExtent\n                  : Math.min(Math.max(-segExtent, -b1), segExtent);\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            }\n          }\n        } else {\n          // Ray and segment are parallel.\n\n          s1 = a01 > 0 ? -segExtent : segExtent;\n          s0 = Math.max(0, -(a01 * s1 + b0));\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n\n        if (optionalPointOnRay) {\n          optionalPointOnRay\n            .copy(this.direction)\n            .multiplyScalar(s0)\n            .add(this.origin);\n        }\n\n        if (optionalPointOnSegment) {\n          optionalPointOnSegment.copy(segDir).multiplyScalar(s1).add(segCenter);\n        }\n\n        return sqrDist;\n      };\n    })(),\n\n    intersectSphere: (function () {\n      var v1 = new Vector3();\n\n      return function intersectSphere(sphere, target) {\n        v1.subVectors(sphere.center, this.origin);\n        var tca = v1.dot(this.direction);\n        var d2 = v1.dot(v1) - tca * tca;\n        var radius2 = sphere.radius * sphere.radius;\n\n        if (d2 > radius2) return null;\n\n        var thc = Math.sqrt(radius2 - d2);\n\n        // t0 = first intersect point - entrance on front of sphere\n        var t0 = tca - thc;\n\n        // t1 = second intersect point - exit point on back of sphere\n        var t1 = tca + thc;\n\n        // test to see if both t0 and t1 are behind the ray - if so, return null\n        if (t0 < 0 && t1 < 0) return null;\n\n        // test to see if t0 is behind the ray:\n        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n        // in order to always return an intersect point that is in front of the ray.\n        if (t0 < 0) return this.at(t1, target);\n\n        // else t0 is in front of the ray, so return the first collision point scaled by t0\n        return this.at(t0, target);\n      };\n    })(),\n\n    intersectsSphere: function (sphere) {\n      return this.distanceToPoint(sphere.center) <= sphere.radius;\n    },\n\n    distanceToPlane: function (plane) {\n      var denominator = plane.normal.dot(this.direction);\n\n      if (denominator === 0) {\n        // line is coplanar, return origin\n        if (plane.distanceToPoint(this.origin) === 0) {\n          return 0;\n        }\n\n        // Null is preferable to undefined since undefined means.... it is undefined\n\n        return null;\n      }\n\n      var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;\n\n      // Return if the ray never intersects the plane\n\n      return t >= 0 ? t : null;\n    },\n\n    intersectPlane: function (plane, target) {\n      var t = this.distanceToPlane(plane);\n\n      if (t === null) {\n        return null;\n      }\n\n      return this.at(t, target);\n    },\n\n    intersectsPlane: function (plane) {\n      // check if the ray lies on the plane first\n\n      var distToPoint = plane.distanceToPoint(this.origin);\n\n      if (distToPoint === 0) {\n        return true;\n      }\n\n      var denominator = plane.normal.dot(this.direction);\n\n      if (denominator * distToPoint < 0) {\n        return true;\n      }\n\n      // ray origin is behind the plane (and is pointing behind it)\n\n      return false;\n    },\n\n    intersectBox: function (box, target) {\n      var tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n      var invdirx = 1 / this.direction.x,\n        invdiry = 1 / this.direction.y,\n        invdirz = 1 / this.direction.z;\n\n      var origin = this.origin;\n\n      if (invdirx >= 0) {\n        tmin = (box.min.x - origin.x) * invdirx;\n        tmax = (box.max.x - origin.x) * invdirx;\n      } else {\n        tmin = (box.max.x - origin.x) * invdirx;\n        tmax = (box.min.x - origin.x) * invdirx;\n      }\n\n      if (invdiry >= 0) {\n        tymin = (box.min.y - origin.y) * invdiry;\n        tymax = (box.max.y - origin.y) * invdiry;\n      } else {\n        tymin = (box.max.y - origin.y) * invdiry;\n        tymax = (box.min.y - origin.y) * invdiry;\n      }\n\n      if (tmin > tymax || tymin > tmax) return null;\n\n      // These lines also handle the case where tmin or tmax is NaN\n      // (result of 0 * Infinity). x !== x returns true if x is NaN\n\n      if (tymin > tmin || tmin !== tmin) tmin = tymin;\n\n      if (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n      if (invdirz >= 0) {\n        tzmin = (box.min.z - origin.z) * invdirz;\n        tzmax = (box.max.z - origin.z) * invdirz;\n      } else {\n        tzmin = (box.max.z - origin.z) * invdirz;\n        tzmax = (box.min.z - origin.z) * invdirz;\n      }\n\n      if (tmin > tzmax || tzmin > tmax) return null;\n\n      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\n      if (tzmax < tmax || tmax !== tmax) tmax = tzmax;\n\n      //return point closest to the ray (positive side)\n\n      if (tmax < 0) return null;\n\n      return this.at(tmin >= 0 ? tmin : tmax, target);\n    },\n\n    intersectsBox: (function () {\n      var v = new Vector3();\n\n      return function intersectsBox(box) {\n        return this.intersectBox(box, v) !== null;\n      };\n    })(),\n\n    intersectTriangle: (function () {\n      // Compute the offset origin, edges, and normal.\n      var diff = new Vector3();\n      var edge1 = new Vector3();\n      var edge2 = new Vector3();\n      var normal = new Vector3();\n\n      return function intersectTriangle(a, b, c, backfaceCulling, target) {\n        // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n        edge1.subVectors(b, a);\n        edge2.subVectors(c, a);\n        normal.crossVectors(edge1, edge2);\n\n        // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n        var DdN = this.direction.dot(normal);\n        var sign;\n\n        if (DdN > 0) {\n          if (backfaceCulling) return null;\n          sign = 1;\n        } else if (DdN < 0) {\n          sign = -1;\n          DdN = -DdN;\n        } else {\n          return null;\n        }\n\n        diff.subVectors(this.origin, a);\n        var DdQxE2 = sign * this.direction.dot(edge2.crossVectors(diff, edge2));\n\n        // b1 < 0, no intersection\n        if (DdQxE2 < 0) {\n          return null;\n        }\n\n        var DdE1xQ = sign * this.direction.dot(edge1.cross(diff));\n\n        // b2 < 0, no intersection\n        if (DdE1xQ < 0) {\n          return null;\n        }\n\n        // b1+b2 > 1, no intersection\n        if (DdQxE2 + DdE1xQ > DdN) {\n          return null;\n        }\n\n        // Line intersects triangle, check if ray does.\n        var QdN = -sign * diff.dot(normal);\n\n        // t < 0, no intersection\n        if (QdN < 0) {\n          return null;\n        }\n\n        // Ray intersects triangle.\n        return this.at(QdN / DdN, target);\n      };\n    })(),\n\n    applyMatrix4: function (matrix4) {\n      this.origin.applyMatrix4(matrix4);\n      this.direction.transformDirection(matrix4);\n\n      return this;\n    },\n\n    equals: function (ray) {\n      return (\n        ray.origin.equals(this.origin) && ray.direction.equals(this.direction)\n      );\n    },\n  });\n\n  /**\n   * @author bhouston / http://clara.io\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function Triangle(a, b, c) {\n    this.a = a !== undefined ? a : new Vector3();\n    this.b = b !== undefined ? b : new Vector3();\n    this.c = c !== undefined ? c : new Vector3();\n  }\n\n  Object.assign(Triangle, {\n    getNormal: (function () {\n      var v0 = new Vector3();\n\n      return function getNormal(a, b, c, target) {\n        if (target === undefined) {\n          console.warn(\"THREE.Triangle: .getNormal() target is now required\");\n          target = new Vector3();\n        }\n\n        target.subVectors(c, b);\n        v0.subVectors(a, b);\n        target.cross(v0);\n\n        var targetLengthSq = target.lengthSq();\n        if (targetLengthSq > 0) {\n          return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n        }\n\n        return target.set(0, 0, 0);\n      };\n    })(),\n\n    // static/instance method to calculate barycentric coordinates\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n    getBarycoord: (function () {\n      var v0 = new Vector3();\n      var v1 = new Vector3();\n      var v2 = new Vector3();\n\n      return function getBarycoord(point, a, b, c, target) {\n        v0.subVectors(c, a);\n        v1.subVectors(b, a);\n        v2.subVectors(point, a);\n\n        var dot00 = v0.dot(v0);\n        var dot01 = v0.dot(v1);\n        var dot02 = v0.dot(v2);\n        var dot11 = v1.dot(v1);\n        var dot12 = v1.dot(v2);\n\n        var denom = dot00 * dot11 - dot01 * dot01;\n\n        if (target === undefined) {\n          console.warn(\n            \"THREE.Triangle: .getBarycoord() target is now required\"\n          );\n          target = new Vector3();\n        }\n\n        // collinear or singular triangle\n        if (denom === 0) {\n          // arbitrary location outside of triangle?\n          // not sure if this is the best idea, maybe should be returning undefined\n          return target.set(-2, -1, -1);\n        }\n\n        var invDenom = 1 / denom;\n        var u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n        var v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n        // barycentric coordinates must always sum to 1\n        return target.set(1 - u - v, v, u);\n      };\n    })(),\n\n    containsPoint: (function () {\n      var v1 = new Vector3();\n\n      return function containsPoint(point, a, b, c) {\n        Triangle.getBarycoord(point, a, b, c, v1);\n\n        return v1.x >= 0 && v1.y >= 0 && v1.x + v1.y <= 1;\n      };\n    })(),\n  });\n\n  Object.assign(Triangle.prototype, {\n    set: function (a, b, c) {\n      this.a.copy(a);\n      this.b.copy(b);\n      this.c.copy(c);\n\n      return this;\n    },\n\n    setFromPointsAndIndices: function (points, i0, i1, i2) {\n      this.a.copy(points[i0]);\n      this.b.copy(points[i1]);\n      this.c.copy(points[i2]);\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (triangle) {\n      this.a.copy(triangle.a);\n      this.b.copy(triangle.b);\n      this.c.copy(triangle.c);\n\n      return this;\n    },\n\n    getArea: (function () {\n      var v0 = new Vector3();\n      var v1 = new Vector3();\n\n      return function getArea() {\n        v0.subVectors(this.c, this.b);\n        v1.subVectors(this.a, this.b);\n\n        return v0.cross(v1).length() * 0.5;\n      };\n    })(),\n\n    getMidpoint: function (target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Triangle: .getMidpoint() target is now required\");\n        target = new Vector3();\n      }\n\n      return target\n        .addVectors(this.a, this.b)\n        .add(this.c)\n        .multiplyScalar(1 / 3);\n    },\n\n    getNormal: function (target) {\n      return Triangle.getNormal(this.a, this.b, this.c, target);\n    },\n\n    getPlane: function (target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Triangle: .getPlane() target is now required\");\n        target = new Vector3();\n      }\n\n      return target.setFromCoplanarPoints(this.a, this.b, this.c);\n    },\n\n    getBarycoord: function (point, target) {\n      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n    },\n\n    containsPoint: function (point) {\n      return Triangle.containsPoint(point, this.a, this.b, this.c);\n    },\n\n    intersectsBox: function (box) {\n      return box.intersectsTriangle(this);\n    },\n\n    closestPointToPoint: (function () {\n      var vab = new Vector3();\n      var vac = new Vector3();\n      var vbc = new Vector3();\n      var vap = new Vector3();\n      var vbp = new Vector3();\n      var vcp = new Vector3();\n\n      return function closestPointToPoint(p, target) {\n        if (target === undefined) {\n          console.warn(\n            \"THREE.Triangle: .closestPointToPoint() target is now required\"\n          );\n          target = new Vector3();\n        }\n\n        var a = this.a,\n          b = this.b,\n          c = this.c;\n        var v, w;\n\n        // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n        // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n        // under the accompanying license; see chapter 5.1.5 for detailed explanation.\n        // basically, we're distinguishing which of the voronoi regions of the triangle\n        // the point lies in with the minimum amount of redundant computation.\n\n        vab.subVectors(b, a);\n        vac.subVectors(c, a);\n        vap.subVectors(p, a);\n        var d1 = vab.dot(vap);\n        var d2 = vac.dot(vap);\n        if (d1 <= 0 && d2 <= 0) {\n          // vertex region of A; barycentric coords (1, 0, 0)\n          return target.copy(a);\n        }\n\n        vbp.subVectors(p, b);\n        var d3 = vab.dot(vbp);\n        var d4 = vac.dot(vbp);\n        if (d3 >= 0 && d4 <= d3) {\n          // vertex region of B; barycentric coords (0, 1, 0)\n          return target.copy(b);\n        }\n\n        var vc = d1 * d4 - d3 * d2;\n        if (vc <= 0 && d1 >= 0 && d3 <= 0) {\n          v = d1 / (d1 - d3);\n          // edge region of AB; barycentric coords (1-v, v, 0)\n          return target.copy(a).addScaledVector(vab, v);\n        }\n\n        vcp.subVectors(p, c);\n        var d5 = vab.dot(vcp);\n        var d6 = vac.dot(vcp);\n        if (d6 >= 0 && d5 <= d6) {\n          // vertex region of C; barycentric coords (0, 0, 1)\n          return target.copy(c);\n        }\n\n        var vb = d5 * d2 - d1 * d6;\n        if (vb <= 0 && d2 >= 0 && d6 <= 0) {\n          w = d2 / (d2 - d6);\n          // edge region of AC; barycentric coords (1-w, 0, w)\n          return target.copy(a).addScaledVector(vac, w);\n        }\n\n        var va = d3 * d6 - d5 * d4;\n        if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n          vbc.subVectors(c, b);\n          w = (d4 - d3) / (d4 - d3 + (d5 - d6));\n          // edge region of BC; barycentric coords (0, 1-w, w)\n          return target.copy(b).addScaledVector(vbc, w); // edge region of BC\n        }\n\n        // face region\n        var denom = 1 / (va + vb + vc);\n        // u = va * denom\n        v = vb * denom;\n        w = vc * denom;\n        return target.copy(a).addScaledVector(vab, v).addScaledVector(vac, w);\n      };\n    })(),\n\n    equals: function (triangle) {\n      return (\n        triangle.a.equals(this.a) &&\n        triangle.b.equals(this.b) &&\n        triangle.c.equals(this.c)\n      );\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author mikael emtinger / http://gomo.se/\n   * @author jonobr1 / http://jonobr1.com/\n   */\n\n  function Mesh(geometry, material) {\n    Object3D.call(this);\n\n    this.type = \"Mesh\";\n\n    this.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    this.material =\n      material !== undefined\n        ? material\n        : new MeshBasicMaterial({ color: Math.random() * 0xffffff });\n\n    this.drawMode = TrianglesDrawMode;\n\n    this.updateMorphTargets();\n  }\n\n  Mesh.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Mesh,\n\n    isMesh: true,\n\n    setDrawMode: function (value) {\n      this.drawMode = value;\n    },\n\n    copy: function (source) {\n      Object3D.prototype.copy.call(this, source);\n\n      this.drawMode = source.drawMode;\n\n      if (source.morphTargetInfluences !== undefined) {\n        this.morphTargetInfluences = source.morphTargetInfluences.slice();\n      }\n\n      if (source.morphTargetDictionary !== undefined) {\n        this.morphTargetDictionary = Object.assign(\n          {},\n          source.morphTargetDictionary\n        );\n      }\n\n      return this;\n    },\n\n    updateMorphTargets: function () {\n      var geometry = this.geometry;\n      var m, ml, name;\n\n      if (geometry.isBufferGeometry) {\n        var morphAttributes = geometry.morphAttributes;\n        var keys = Object.keys(morphAttributes);\n\n        if (keys.length > 0) {\n          var morphAttribute = morphAttributes[keys[0]];\n\n          if (morphAttribute !== undefined) {\n            this.morphTargetInfluences = [];\n            this.morphTargetDictionary = {};\n\n            for (m = 0, ml = morphAttribute.length; m < ml; m++) {\n              name = morphAttribute[m].name || String(m);\n\n              this.morphTargetInfluences.push(0);\n              this.morphTargetDictionary[name] = m;\n            }\n          }\n        }\n      } else {\n        var morphTargets = geometry.morphTargets;\n\n        if (morphTargets !== undefined && morphTargets.length > 0) {\n          this.morphTargetInfluences = [];\n          this.morphTargetDictionary = {};\n\n          for (m = 0, ml = morphTargets.length; m < ml; m++) {\n            name = morphTargets[m].name || String(m);\n\n            this.morphTargetInfluences.push(0);\n            this.morphTargetDictionary[name] = m;\n          }\n        }\n      }\n    },\n\n    raycast: (function () {\n      var inverseMatrix = new Matrix4();\n      var ray = new Ray();\n      var sphere = new Sphere();\n\n      var vA = new Vector3();\n      var vB = new Vector3();\n      var vC = new Vector3();\n\n      var tempA = new Vector3();\n      var tempB = new Vector3();\n      var tempC = new Vector3();\n\n      var uvA = new Vector2();\n      var uvB = new Vector2();\n      var uvC = new Vector2();\n\n      var barycoord = new Vector3();\n\n      var intersectionPoint = new Vector3();\n      var intersectionPointWorld = new Vector3();\n\n      function uvIntersection(point, p1, p2, p3, uv1, uv2, uv3) {\n        Triangle.getBarycoord(point, p1, p2, p3, barycoord);\n\n        uv1.multiplyScalar(barycoord.x);\n        uv2.multiplyScalar(barycoord.y);\n        uv3.multiplyScalar(barycoord.z);\n\n        uv1.add(uv2).add(uv3);\n\n        return uv1.clone();\n      }\n\n      function checkIntersection(\n        object,\n        material,\n        raycaster,\n        ray,\n        pA,\n        pB,\n        pC,\n        point\n      ) {\n        var intersect;\n\n        if (material.side === BackSide) {\n          intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n        } else {\n          intersect = ray.intersectTriangle(\n            pA,\n            pB,\n            pC,\n            material.side !== DoubleSide,\n            point\n          );\n        }\n\n        if (intersect === null) return null;\n\n        intersectionPointWorld.copy(point);\n        intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n        var distance = raycaster.ray.origin.distanceTo(intersectionPointWorld);\n\n        if (distance < raycaster.near || distance > raycaster.far) return null;\n\n        return {\n          distance: distance,\n          point: intersectionPointWorld.clone(),\n          object: object,\n        };\n      }\n\n      function checkBufferGeometryIntersection(\n        object,\n        material,\n        raycaster,\n        ray,\n        position,\n        uv,\n        a,\n        b,\n        c\n      ) {\n        vA.fromBufferAttribute(position, a);\n        vB.fromBufferAttribute(position, b);\n        vC.fromBufferAttribute(position, c);\n\n        var intersection = checkIntersection(\n          object,\n          material,\n          raycaster,\n          ray,\n          vA,\n          vB,\n          vC,\n          intersectionPoint\n        );\n\n        if (intersection) {\n          if (uv) {\n            uvA.fromBufferAttribute(uv, a);\n            uvB.fromBufferAttribute(uv, b);\n            uvC.fromBufferAttribute(uv, c);\n\n            intersection.uv = uvIntersection(\n              intersectionPoint,\n              vA,\n              vB,\n              vC,\n              uvA,\n              uvB,\n              uvC\n            );\n          }\n\n          var face = new Face3(a, b, c);\n          Triangle.getNormal(vA, vB, vC, face.normal);\n\n          intersection.face = face;\n        }\n\n        return intersection;\n      }\n\n      return function raycast(raycaster, intersects) {\n        var geometry = this.geometry;\n        var material = this.material;\n        var matrixWorld = this.matrixWorld;\n\n        if (material === undefined) return;\n\n        // Checking boundingSphere distance to ray\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n        sphere.copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n\n        if (raycaster.ray.intersectsSphere(sphere) === false) return;\n\n        //\n\n        inverseMatrix.getInverse(matrixWorld);\n        ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n\n        // Check boundingBox before continuing\n\n        if (geometry.boundingBox !== null) {\n          if (ray.intersectsBox(geometry.boundingBox) === false) return;\n        }\n\n        var intersection;\n\n        if (geometry.isBufferGeometry) {\n          var a, b, c;\n          var index = geometry.index;\n          var position = geometry.attributes.position;\n          var uv = geometry.attributes.uv;\n          var groups = geometry.groups;\n          var drawRange = geometry.drawRange;\n          var i, j, il, jl;\n          var group, groupMaterial;\n          var start, end;\n\n          if (index !== null) {\n            // indexed buffer geometry\n\n            if (Array.isArray(material)) {\n              for (i = 0, il = groups.length; i < il; i++) {\n                group = groups[i];\n                groupMaterial = material[group.materialIndex];\n\n                start = Math.max(group.start, drawRange.start);\n                end = Math.min(\n                  group.start + group.count,\n                  drawRange.start + drawRange.count\n                );\n\n                for (j = start, jl = end; j < jl; j += 3) {\n                  a = index.getX(j);\n                  b = index.getX(j + 1);\n                  c = index.getX(j + 2);\n\n                  intersection = checkBufferGeometryIntersection(\n                    this,\n                    groupMaterial,\n                    raycaster,\n                    ray,\n                    position,\n                    uv,\n                    a,\n                    b,\n                    c\n                  );\n\n                  if (intersection) {\n                    intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n                    intersects.push(intersection);\n                  }\n                }\n              }\n            } else {\n              start = Math.max(0, drawRange.start);\n              end = Math.min(index.count, drawRange.start + drawRange.count);\n\n              for (i = start, il = end; i < il; i += 3) {\n                a = index.getX(i);\n                b = index.getX(i + 1);\n                c = index.getX(i + 2);\n\n                intersection = checkBufferGeometryIntersection(\n                  this,\n                  material,\n                  raycaster,\n                  ray,\n                  position,\n                  uv,\n                  a,\n                  b,\n                  c\n                );\n\n                if (intersection) {\n                  intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics\n                  intersects.push(intersection);\n                }\n              }\n            }\n          } else if (position !== undefined) {\n            // non-indexed buffer geometry\n\n            if (Array.isArray(material)) {\n              for (i = 0, il = groups.length; i < il; i++) {\n                group = groups[i];\n                groupMaterial = material[group.materialIndex];\n\n                start = Math.max(group.start, drawRange.start);\n                end = Math.min(\n                  group.start + group.count,\n                  drawRange.start + drawRange.count\n                );\n\n                for (j = start, jl = end; j < jl; j += 3) {\n                  a = j;\n                  b = j + 1;\n                  c = j + 2;\n\n                  intersection = checkBufferGeometryIntersection(\n                    this,\n                    groupMaterial,\n                    raycaster,\n                    ray,\n                    position,\n                    uv,\n                    a,\n                    b,\n                    c\n                  );\n\n                  if (intersection) {\n                    intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics\n                    intersects.push(intersection);\n                  }\n                }\n              }\n            } else {\n              start = Math.max(0, drawRange.start);\n              end = Math.min(position.count, drawRange.start + drawRange.count);\n\n              for (i = start, il = end; i < il; i += 3) {\n                a = i;\n                b = i + 1;\n                c = i + 2;\n\n                intersection = checkBufferGeometryIntersection(\n                  this,\n                  material,\n                  raycaster,\n                  ray,\n                  position,\n                  uv,\n                  a,\n                  b,\n                  c\n                );\n\n                if (intersection) {\n                  intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics\n                  intersects.push(intersection);\n                }\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          var fvA, fvB, fvC;\n          var isMultiMaterial = Array.isArray(material);\n\n          var vertices = geometry.vertices;\n          var faces = geometry.faces;\n          var uvs;\n\n          var faceVertexUvs = geometry.faceVertexUvs[0];\n          if (faceVertexUvs.length > 0) uvs = faceVertexUvs;\n\n          for (var f = 0, fl = faces.length; f < fl; f++) {\n            var face = faces[f];\n            var faceMaterial = isMultiMaterial\n              ? material[face.materialIndex]\n              : material;\n\n            if (faceMaterial === undefined) continue;\n\n            fvA = vertices[face.a];\n            fvB = vertices[face.b];\n            fvC = vertices[face.c];\n\n            if (faceMaterial.morphTargets === true) {\n              var morphTargets = geometry.morphTargets;\n              var morphInfluences = this.morphTargetInfluences;\n\n              vA.set(0, 0, 0);\n              vB.set(0, 0, 0);\n              vC.set(0, 0, 0);\n\n              for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n\n                if (influence === 0) continue;\n\n                var targets = morphTargets[t].vertices;\n\n                vA.addScaledVector(\n                  tempA.subVectors(targets[face.a], fvA),\n                  influence\n                );\n                vB.addScaledVector(\n                  tempB.subVectors(targets[face.b], fvB),\n                  influence\n                );\n                vC.addScaledVector(\n                  tempC.subVectors(targets[face.c], fvC),\n                  influence\n                );\n              }\n\n              vA.add(fvA);\n              vB.add(fvB);\n              vC.add(fvC);\n\n              fvA = vA;\n              fvB = vB;\n              fvC = vC;\n            }\n\n            intersection = checkIntersection(\n              this,\n              faceMaterial,\n              raycaster,\n              ray,\n              fvA,\n              fvB,\n              fvC,\n              intersectionPoint\n            );\n\n            if (intersection) {\n              if (uvs && uvs[f]) {\n                var uvs_f = uvs[f];\n                uvA.copy(uvs_f[0]);\n                uvB.copy(uvs_f[1]);\n                uvC.copy(uvs_f[2]);\n\n                intersection.uv = uvIntersection(\n                  intersectionPoint,\n                  fvA,\n                  fvB,\n                  fvC,\n                  uvA,\n                  uvB,\n                  uvC\n                );\n              }\n\n              intersection.face = face;\n              intersection.faceIndex = f;\n              intersects.push(intersection);\n            }\n          }\n        }\n      };\n    })(),\n\n    clone: function () {\n      return new this.constructor(this.geometry, this.material).copy(this);\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLBackground(renderer, state, objects, premultipliedAlpha) {\n    var clearColor = new Color(0x000000);\n    var clearAlpha = 0;\n\n    var planeCamera, planeMesh;\n    var boxMesh;\n\n    function render(renderList, scene, camera, forceClear) {\n      var background = scene.background;\n\n      if (background === null) {\n        setClear(clearColor, clearAlpha);\n      } else if (background && background.isColor) {\n        setClear(background, 1);\n        forceClear = true;\n      }\n\n      if (renderer.autoClear || forceClear) {\n        renderer.clear(\n          renderer.autoClearColor,\n          renderer.autoClearDepth,\n          renderer.autoClearStencil\n        );\n      }\n\n      if (background && background.isCubeTexture) {\n        if (boxMesh === undefined) {\n          boxMesh = new Mesh(\n            new BoxBufferGeometry(1, 1, 1),\n            new ShaderMaterial({\n              uniforms: ShaderLib.cube.uniforms,\n              vertexShader: ShaderLib.cube.vertexShader,\n              fragmentShader: ShaderLib.cube.fragmentShader,\n              side: BackSide,\n              depthTest: true,\n              depthWrite: false,\n              fog: false,\n            })\n          );\n\n          boxMesh.geometry.removeAttribute(\"normal\");\n          boxMesh.geometry.removeAttribute(\"uv\");\n\n          boxMesh.onBeforeRender = function (renderer, scene, camera) {\n            this.matrixWorld.copyPosition(camera.matrixWorld);\n          };\n\n          objects.update(boxMesh);\n        }\n\n        boxMesh.material.uniforms.tCube.value = background;\n\n        renderList.push(boxMesh, boxMesh.geometry, boxMesh.material, 0, null);\n      } else if (background && background.isTexture) {\n        if (planeCamera === undefined) {\n          planeCamera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n          planeMesh = new Mesh(\n            new PlaneBufferGeometry(2, 2),\n            new MeshBasicMaterial({\n              depthTest: false,\n              depthWrite: false,\n              fog: false,\n            })\n          );\n\n          objects.update(planeMesh);\n        }\n\n        planeMesh.material.map = background;\n\n        // TODO Push this to renderList\n\n        renderer.renderBufferDirect(\n          planeCamera,\n          null,\n          planeMesh.geometry,\n          planeMesh.material,\n          planeMesh,\n          null\n        );\n      }\n    }\n\n    function setClear(color, alpha) {\n      state.buffers.color.setClear(\n        color.r,\n        color.g,\n        color.b,\n        alpha,\n        premultipliedAlpha\n      );\n    }\n\n    return {\n      getClearColor: function () {\n        return clearColor;\n      },\n      setClearColor: function (color, alpha) {\n        clearColor.set(color);\n        clearAlpha = alpha !== undefined ? alpha : 1;\n        setClear(clearColor, clearAlpha);\n      },\n      getClearAlpha: function () {\n        return clearAlpha;\n      },\n      setClearAlpha: function (alpha) {\n        clearAlpha = alpha;\n        setClear(clearColor, clearAlpha);\n      },\n      render: render,\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLBufferRenderer(gl, extensions, info, capabilities) {\n    var mode;\n\n    function setMode(value) {\n      mode = value;\n    }\n\n    function render(start, count) {\n      gl.drawArrays(mode, start, count);\n\n      info.update(count, mode);\n    }\n\n    function renderInstances(geometry, start, count) {\n      var extension;\n\n      if (capabilities.isWebGL2) {\n        extension = gl;\n      } else {\n        extension = extensions.get(\"ANGLE_instanced_arrays\");\n\n        if (extension === null) {\n          console.error(\n            \"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\"\n          );\n          return;\n        }\n      }\n\n      extension[\n        capabilities.isWebGL2\n          ? \"drawArraysInstanced\"\n          : \"drawArraysInstancedANGLE\"\n      ](mode, start, count, geometry.maxInstancedCount);\n\n      info.update(count, mode, geometry.maxInstancedCount);\n    }\n\n    //\n\n    this.setMode = setMode;\n    this.render = render;\n    this.renderInstances = renderInstances;\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLCapabilities(gl, extensions, parameters) {\n    var maxAnisotropy;\n\n    function getMaxAnisotropy() {\n      if (maxAnisotropy !== undefined) return maxAnisotropy;\n\n      var extension = extensions.get(\"EXT_texture_filter_anisotropic\");\n\n      if (extension !== null) {\n        maxAnisotropy = gl.getParameter(\n          extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT\n        );\n      } else {\n        maxAnisotropy = 0;\n      }\n\n      return maxAnisotropy;\n    }\n\n    function getMaxPrecision(precision) {\n      if (precision === \"highp\") {\n        if (\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT)\n            .precision > 0 &&\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)\n            .precision > 0\n        ) {\n          return \"highp\";\n        }\n\n        precision = \"mediump\";\n      }\n\n      if (precision === \"mediump\") {\n        if (\n          gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT)\n            .precision > 0 &&\n          gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT)\n            .precision > 0\n        ) {\n          return \"mediump\";\n        }\n      }\n\n      return \"lowp\";\n    }\n\n    var isWebGL2 =\n      typeof WebGL2RenderingContext !== \"undefined\" &&\n      gl instanceof WebGL2RenderingContext;\n\n    var precision =\n      parameters.precision !== undefined ? parameters.precision : \"highp\";\n    var maxPrecision = getMaxPrecision(precision);\n\n    if (maxPrecision !== precision) {\n      console.warn(\n        \"THREE.WebGLRenderer:\",\n        precision,\n        \"not supported, using\",\n        maxPrecision,\n        \"instead.\"\n      );\n      precision = maxPrecision;\n    }\n\n    var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n    var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    var maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n    var maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    var maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n\n    var maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    var maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n    var maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n    var maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n\n    var vertexTextures = maxVertexTextures > 0;\n    var floatFragmentTextures =\n      isWebGL2 || !!extensions.get(\"OES_texture_float\");\n    var floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    return {\n      isWebGL2: isWebGL2,\n\n      getMaxAnisotropy: getMaxAnisotropy,\n      getMaxPrecision: getMaxPrecision,\n\n      precision: precision,\n      logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n      maxTextures: maxTextures,\n      maxVertexTextures: maxVertexTextures,\n      maxTextureSize: maxTextureSize,\n      maxCubemapSize: maxCubemapSize,\n\n      maxAttributes: maxAttributes,\n      maxVertexUniforms: maxVertexUniforms,\n      maxVaryings: maxVaryings,\n      maxFragmentUniforms: maxFragmentUniforms,\n\n      vertexTextures: vertexTextures,\n      floatFragmentTextures: floatFragmentTextures,\n      floatVertexTextures: floatVertexTextures,\n    };\n  }\n\n  /**\n   * @author tschw\n   */\n\n  function WebGLClipping() {\n    var scope = this,\n      globalState = null,\n      numGlobalPlanes = 0,\n      localClippingEnabled = false,\n      renderingShadows = false,\n      plane = new Plane(),\n      viewNormalMatrix = new Matrix3(),\n      uniform = { value: null, needsUpdate: false };\n\n    this.uniform = uniform;\n    this.numPlanes = 0;\n    this.numIntersection = 0;\n\n    this.init = function (planes, enableLocalClipping, camera) {\n      var enabled =\n        planes.length !== 0 ||\n        enableLocalClipping ||\n        // enable state of previous frame - the clipping code has to\n        // run another frame in order to reset the state:\n        numGlobalPlanes !== 0 ||\n        localClippingEnabled;\n\n      localClippingEnabled = enableLocalClipping;\n\n      globalState = projectPlanes(planes, camera, 0);\n      numGlobalPlanes = planes.length;\n\n      return enabled;\n    };\n\n    this.beginShadows = function () {\n      renderingShadows = true;\n      projectPlanes(null);\n    };\n\n    this.endShadows = function () {\n      renderingShadows = false;\n      resetGlobalState();\n    };\n\n    this.setState = function (\n      planes,\n      clipIntersection,\n      clipShadows,\n      camera,\n      cache,\n      fromCache\n    ) {\n      if (\n        !localClippingEnabled ||\n        planes === null ||\n        planes.length === 0 ||\n        (renderingShadows && !clipShadows)\n      ) {\n        // there's no local clipping\n\n        if (renderingShadows) {\n          // there's no global clipping\n\n          projectPlanes(null);\n        } else {\n          resetGlobalState();\n        }\n      } else {\n        var nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n          lGlobal = nGlobal * 4,\n          dstArray = cache.clippingState || null;\n\n        uniform.value = dstArray; // ensure unique state\n\n        dstArray = projectPlanes(planes, camera, lGlobal, fromCache);\n\n        for (var i = 0; i !== lGlobal; ++i) {\n          dstArray[i] = globalState[i];\n        }\n\n        cache.clippingState = dstArray;\n        this.numIntersection = clipIntersection ? this.numPlanes : 0;\n        this.numPlanes += nGlobal;\n      }\n    };\n\n    function resetGlobalState() {\n      if (uniform.value !== globalState) {\n        uniform.value = globalState;\n        uniform.needsUpdate = numGlobalPlanes > 0;\n      }\n\n      scope.numPlanes = numGlobalPlanes;\n      scope.numIntersection = 0;\n    }\n\n    function projectPlanes(planes, camera, dstOffset, skipTransform) {\n      var nPlanes = planes !== null ? planes.length : 0,\n        dstArray = null;\n\n      if (nPlanes !== 0) {\n        dstArray = uniform.value;\n\n        if (skipTransform !== true || dstArray === null) {\n          var flatSize = dstOffset + nPlanes * 4,\n            viewMatrix = camera.matrixWorldInverse;\n\n          viewNormalMatrix.getNormalMatrix(viewMatrix);\n\n          if (dstArray === null || dstArray.length < flatSize) {\n            dstArray = new Float32Array(flatSize);\n          }\n\n          for (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\n            plane.normal.toArray(dstArray, i4);\n            dstArray[i4 + 3] = plane.constant;\n          }\n        }\n\n        uniform.value = dstArray;\n        uniform.needsUpdate = true;\n      }\n\n      scope.numPlanes = nPlanes;\n\n      return dstArray;\n    }\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLExtensions(gl) {\n    var extensions = {};\n\n    return {\n      get: function (name) {\n        if (extensions[name] !== undefined) {\n          return extensions[name];\n        }\n\n        var extension;\n\n        switch (name) {\n          case \"WEBGL_depth_texture\":\n            extension =\n              gl.getExtension(\"WEBGL_depth_texture\") ||\n              gl.getExtension(\"MOZ_WEBGL_depth_texture\") ||\n              gl.getExtension(\"WEBKIT_WEBGL_depth_texture\");\n            break;\n\n          case \"EXT_texture_filter_anisotropic\":\n            extension =\n              gl.getExtension(\"EXT_texture_filter_anisotropic\") ||\n              gl.getExtension(\"MOZ_EXT_texture_filter_anisotropic\") ||\n              gl.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");\n            break;\n\n          case \"WEBGL_compressed_texture_s3tc\":\n            extension =\n              gl.getExtension(\"WEBGL_compressed_texture_s3tc\") ||\n              gl.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\") ||\n              gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");\n            break;\n\n          case \"WEBGL_compressed_texture_pvrtc\":\n            extension =\n              gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") ||\n              gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");\n            break;\n\n          default:\n            extension = gl.getExtension(name);\n        }\n\n        if (extension === null) {\n          console.warn(\n            \"THREE.WebGLRenderer: \" + name + \" extension not supported.\"\n          );\n        }\n\n        extensions[name] = extension;\n\n        return extension;\n      },\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLGeometries(gl, attributes, info) {\n    var geometries = {};\n    var wireframeAttributes = {};\n\n    function onGeometryDispose(event) {\n      var geometry = event.target;\n      var buffergeometry = geometries[geometry.id];\n\n      if (buffergeometry.index !== null) {\n        attributes.remove(buffergeometry.index);\n      }\n\n      for (var name in buffergeometry.attributes) {\n        attributes.remove(buffergeometry.attributes[name]);\n      }\n\n      geometry.removeEventListener(\"dispose\", onGeometryDispose);\n\n      delete geometries[geometry.id];\n\n      var attribute = wireframeAttributes[buffergeometry.id];\n\n      if (attribute) {\n        attributes.remove(attribute);\n        delete wireframeAttributes[buffergeometry.id];\n      }\n\n      //\n\n      info.memory.geometries--;\n    }\n\n    function get(object, geometry) {\n      var buffergeometry = geometries[geometry.id];\n\n      if (buffergeometry) return buffergeometry;\n\n      geometry.addEventListener(\"dispose\", onGeometryDispose);\n\n      if (geometry.isBufferGeometry) {\n        buffergeometry = geometry;\n      } else if (geometry.isGeometry) {\n        if (geometry._bufferGeometry === undefined) {\n          geometry._bufferGeometry = new BufferGeometry().setFromObject(object);\n        }\n\n        buffergeometry = geometry._bufferGeometry;\n      }\n\n      geometries[geometry.id] = buffergeometry;\n\n      info.memory.geometries++;\n\n      return buffergeometry;\n    }\n\n    function update(geometry) {\n      var index = geometry.index;\n      var geometryAttributes = geometry.attributes;\n\n      if (index !== null) {\n        attributes.update(index, gl.ELEMENT_ARRAY_BUFFER);\n      }\n\n      for (var name in geometryAttributes) {\n        attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);\n      }\n\n      // morph targets\n\n      var morphAttributes = geometry.morphAttributes;\n\n      for (var name in morphAttributes) {\n        var array = morphAttributes[name];\n\n        for (var i = 0, l = array.length; i < l; i++) {\n          attributes.update(array[i], gl.ARRAY_BUFFER);\n        }\n      }\n    }\n\n    function getWireframeAttribute(geometry) {\n      var attribute = wireframeAttributes[geometry.id];\n\n      if (attribute) return attribute;\n\n      var indices = [];\n\n      var geometryIndex = geometry.index;\n      var geometryAttributes = geometry.attributes;\n\n      // console.time( 'wireframe' );\n\n      if (geometryIndex !== null) {\n        var array = geometryIndex.array;\n\n        for (var i = 0, l = array.length; i < l; i += 3) {\n          var a = array[i + 0];\n          var b = array[i + 1];\n          var c = array[i + 2];\n\n          indices.push(a, b, b, c, c, a);\n        }\n      } else {\n        var array = geometryAttributes.position.array;\n\n        for (var i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n          var a = i + 0;\n          var b = i + 1;\n          var c = i + 2;\n\n          indices.push(a, b, b, c, c, a);\n        }\n      }\n\n      // console.timeEnd( 'wireframe' );\n\n      attribute = new (\n        arrayMax(indices) > 65535\n          ? Uint32BufferAttribute\n          : Uint16BufferAttribute\n      )(indices, 1);\n\n      attributes.update(attribute, gl.ELEMENT_ARRAY_BUFFER);\n\n      wireframeAttributes[geometry.id] = attribute;\n\n      return attribute;\n    }\n\n    return {\n      get: get,\n      update: update,\n\n      getWireframeAttribute: getWireframeAttribute,\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n    var mode;\n\n    function setMode(value) {\n      mode = value;\n    }\n\n    var type, bytesPerElement;\n\n    function setIndex(value) {\n      type = value.type;\n      bytesPerElement = value.bytesPerElement;\n    }\n\n    function render(start, count) {\n      gl.drawElements(mode, count, type, start * bytesPerElement);\n\n      info.update(count, mode);\n    }\n\n    function renderInstances(geometry, start, count) {\n      var extension;\n\n      if (capabilities.isWebGL2) {\n        extension = gl;\n      } else {\n        var extension = extensions.get(\"ANGLE_instanced_arrays\");\n\n        if (extension === null) {\n          console.error(\n            \"THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\"\n          );\n          return;\n        }\n      }\n\n      extension[\n        capabilities.isWebGL2\n          ? \"drawElementsInstanced\"\n          : \"drawElementsInstancedANGLE\"\n      ](mode, count, type, start * bytesPerElement, geometry.maxInstancedCount);\n\n      info.update(count, mode, geometry.maxInstancedCount);\n    }\n\n    //\n\n    this.setMode = setMode;\n    this.setIndex = setIndex;\n    this.render = render;\n    this.renderInstances = renderInstances;\n  }\n\n  /**\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  function WebGLInfo(gl) {\n    var memory = {\n      geometries: 0,\n      textures: 0,\n    };\n\n    var render = {\n      frame: 0,\n      calls: 0,\n      triangles: 0,\n      points: 0,\n      lines: 0,\n    };\n\n    function update(count, mode, instanceCount) {\n      instanceCount = instanceCount || 1;\n\n      render.calls++;\n\n      switch (mode) {\n        case gl.TRIANGLES:\n          render.triangles += instanceCount * (count / 3);\n          break;\n\n        case gl.TRIANGLE_STRIP:\n        case gl.TRIANGLE_FAN:\n          render.triangles += instanceCount * (count - 2);\n          break;\n\n        case gl.LINES:\n          render.lines += instanceCount * (count / 2);\n          break;\n\n        case gl.LINE_STRIP:\n          render.lines += instanceCount * (count - 1);\n          break;\n\n        case gl.LINE_LOOP:\n          render.lines += instanceCount * count;\n          break;\n\n        case gl.POINTS:\n          render.points += instanceCount * count;\n          break;\n\n        default:\n          console.error(\"THREE.WebGLInfo: Unknown draw mode:\", mode);\n          break;\n      }\n    }\n\n    function reset() {\n      render.frame++;\n      render.calls = 0;\n      render.triangles = 0;\n      render.points = 0;\n      render.lines = 0;\n    }\n\n    return {\n      memory: memory,\n      render: render,\n      programs: null,\n      autoReset: true,\n      reset: reset,\n      update: update,\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function absNumericalSort(a, b) {\n    return Math.abs(b[1]) - Math.abs(a[1]);\n  }\n\n  function WebGLMorphtargets(gl) {\n    var influencesList = {};\n    var morphInfluences = new Float32Array(8);\n\n    function update(object, geometry, material, program) {\n      var objectInfluences = object.morphTargetInfluences;\n\n      var length = objectInfluences.length;\n\n      var influences = influencesList[geometry.id];\n\n      if (influences === undefined) {\n        // initialise list\n\n        influences = [];\n\n        for (var i = 0; i < length; i++) {\n          influences[i] = [i, 0];\n        }\n\n        influencesList[geometry.id] = influences;\n      }\n\n      var morphTargets =\n        material.morphTargets && geometry.morphAttributes.position;\n      var morphNormals =\n        material.morphNormals && geometry.morphAttributes.normal;\n\n      // Remove current morphAttributes\n\n      for (var i = 0; i < length; i++) {\n        var influence = influences[i];\n\n        if (influence[1] !== 0) {\n          if (morphTargets) geometry.removeAttribute(\"morphTarget\" + i);\n          if (morphNormals) geometry.removeAttribute(\"morphNormal\" + i);\n        }\n      }\n\n      // Collect influences\n\n      for (var i = 0; i < length; i++) {\n        var influence = influences[i];\n\n        influence[0] = i;\n        influence[1] = objectInfluences[i];\n      }\n\n      influences.sort(absNumericalSort);\n\n      // Add morphAttributes\n\n      for (var i = 0; i < 8; i++) {\n        var influence = influences[i];\n\n        if (influence) {\n          var index = influence[0];\n          var value = influence[1];\n\n          if (value) {\n            if (morphTargets)\n              geometry.addAttribute(\"morphTarget\" + i, morphTargets[index]);\n            if (morphNormals)\n              geometry.addAttribute(\"morphNormal\" + i, morphNormals[index]);\n\n            morphInfluences[i] = value;\n            continue;\n          }\n        }\n\n        morphInfluences[i] = 0;\n      }\n\n      program\n        .getUniforms()\n        .setValue(gl, \"morphTargetInfluences\", morphInfluences);\n    }\n\n    return {\n      update: update,\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLObjects(geometries, info) {\n    var updateList = {};\n\n    function update(object) {\n      var frame = info.render.frame;\n\n      var geometry = object.geometry;\n      var buffergeometry = geometries.get(object, geometry);\n\n      // Update once per frame\n\n      if (updateList[buffergeometry.id] !== frame) {\n        if (geometry.isGeometry) {\n          buffergeometry.updateFromObject(object);\n        }\n\n        geometries.update(buffergeometry);\n\n        updateList[buffergeometry.id] = frame;\n      }\n\n      return buffergeometry;\n    }\n\n    function dispose() {\n      updateList = {};\n    }\n\n    return {\n      update: update,\n      dispose: dispose,\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function CubeTexture(\n    images,\n    mapping,\n    wrapS,\n    wrapT,\n    magFilter,\n    minFilter,\n    format,\n    type,\n    anisotropy,\n    encoding\n  ) {\n    images = images !== undefined ? images : [];\n    mapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n    Texture.call(\n      this,\n      images,\n      mapping,\n      wrapS,\n      wrapT,\n      magFilter,\n      minFilter,\n      format,\n      type,\n      anisotropy,\n      encoding\n    );\n\n    this.flipY = false;\n  }\n\n  CubeTexture.prototype = Object.create(Texture.prototype);\n  CubeTexture.prototype.constructor = CubeTexture;\n\n  CubeTexture.prototype.isCubeTexture = true;\n\n  Object.defineProperty(CubeTexture.prototype, \"images\", {\n    get: function () {\n      return this.image;\n    },\n\n    set: function (value) {\n      this.image = value;\n    },\n  });\n\n  /**\n   * @author tschw\n   * @author Mugen87 / https://github.com/Mugen87\n   * @author mrdoob / http://mrdoob.com/\n   *\n   * Uniforms of a program.\n   * Those form a tree structure with a special top-level container for the root,\n   * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n   *\n   *\n   * Properties of inner nodes including the top-level container:\n   *\n   * .seq - array of nested uniforms\n   * .map - nested uniforms by name\n   *\n   *\n   * Methods of all nodes except the top-level container:\n   *\n   * .setValue( gl, value, [renderer] )\n   *\n   * \t\tuploads a uniform value(s)\n   *  \tthe 'renderer' parameter is needed for sampler uniforms\n   *\n   *\n   * Static methods of the top-level container (renderer factorizations):\n   *\n   * .upload( gl, seq, values, renderer )\n   *\n   * \t\tsets uniforms in 'seq' to 'values[id].value'\n   *\n   * .seqWithValue( seq, values ) : filteredSeq\n   *\n   * \t\tfilters 'seq' entries with corresponding entry in values\n   *\n   *\n   * Methods of the top-level container (renderer factorizations):\n   *\n   * .setValue( gl, name, value )\n   *\n   * \t\tsets uniform with  name 'name' to 'value'\n   *\n   * .set( gl, obj, prop )\n   *\n   * \t\tsets uniform from object and property with same name than uniform\n   *\n   * .setOptional( gl, obj, prop )\n   *\n   * \t\tlike .set for an optional property of the object\n   *\n   */\n\n  var emptyTexture = new Texture();\n  var emptyCubeTexture = new CubeTexture();\n\n  // --- Base for inner nodes (including the root) ---\n\n  function UniformContainer() {\n    this.seq = [];\n    this.map = {};\n  }\n\n  // --- Utilities ---\n\n  // Array Caches (provide typed arrays for temporary by size)\n\n  var arrayCacheF32 = [];\n  var arrayCacheI32 = [];\n\n  // Float32Array caches used for uploading Matrix uniforms\n\n  var mat4array = new Float32Array(16);\n  var mat3array = new Float32Array(9);\n  var mat2array = new Float32Array(4);\n\n  // Flattening for arrays of vectors and matrices\n\n  function flatten(array, nBlocks, blockSize) {\n    var firstElem = array[0];\n\n    if (firstElem <= 0 || firstElem > 0) return array;\n    // unoptimized: ! isNaN( firstElem )\n    // see http://jacksondunstan.com/articles/983\n\n    var n = nBlocks * blockSize,\n      r = arrayCacheF32[n];\n\n    if (r === undefined) {\n      r = new Float32Array(n);\n      arrayCacheF32[n] = r;\n    }\n\n    if (nBlocks !== 0) {\n      firstElem.toArray(r, 0);\n\n      for (var i = 1, offset = 0; i !== nBlocks; ++i) {\n        offset += blockSize;\n        array[i].toArray(r, offset);\n      }\n    }\n\n    return r;\n  }\n\n  function arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n\n    for (var i = 0, l = a.length; i < l; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  }\n\n  function copyArray(a, b) {\n    for (var i = 0, l = b.length; i < l; i++) {\n      a[i] = b[i];\n    }\n  }\n\n  // Texture unit allocation\n\n  function allocTexUnits(renderer, n) {\n    var r = arrayCacheI32[n];\n\n    if (r === undefined) {\n      r = new Int32Array(n);\n      arrayCacheI32[n] = r;\n    }\n\n    for (var i = 0; i !== n; ++i) r[i] = renderer.allocTextureUnit();\n\n    return r;\n  }\n\n  // --- Setters ---\n\n  // Note: Defining these methods externally, because they come in a bunch\n  // and this way their names minify.\n\n  // Single scalar\n\n  function setValue1f(gl, v) {\n    var cache = this.cache;\n\n    if (cache[0] === v) return;\n\n    gl.uniform1f(this.addr, v);\n\n    cache[0] = v;\n  }\n\n  function setValue1i(gl, v) {\n    var cache = this.cache;\n\n    if (cache[0] === v) return;\n\n    gl.uniform1i(this.addr, v);\n\n    cache[0] = v;\n  }\n\n  // Single float vector (from flat array or THREE.VectorN)\n\n  function setValue2fv(gl, v) {\n    var cache = this.cache;\n\n    if (v.x !== undefined) {\n      if (cache[0] !== v.x || cache[1] !== v.y) {\n        gl.uniform2f(this.addr, v.x, v.y);\n\n        cache[0] = v.x;\n        cache[1] = v.y;\n      }\n    } else {\n      if (arraysEqual(cache, v)) return;\n\n      gl.uniform2fv(this.addr, v);\n\n      copyArray(cache, v);\n    }\n  }\n\n  function setValue3fv(gl, v) {\n    var cache = this.cache;\n\n    if (v.x !== undefined) {\n      if (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n        gl.uniform3f(this.addr, v.x, v.y, v.z);\n\n        cache[0] = v.x;\n        cache[1] = v.y;\n        cache[2] = v.z;\n      }\n    } else if (v.r !== undefined) {\n      if (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n        gl.uniform3f(this.addr, v.r, v.g, v.b);\n\n        cache[0] = v.r;\n        cache[1] = v.g;\n        cache[2] = v.b;\n      }\n    } else {\n      if (arraysEqual(cache, v)) return;\n\n      gl.uniform3fv(this.addr, v);\n\n      copyArray(cache, v);\n    }\n  }\n\n  function setValue4fv(gl, v) {\n    var cache = this.cache;\n\n    if (v.x !== undefined) {\n      if (\n        cache[0] !== v.x ||\n        cache[1] !== v.y ||\n        cache[2] !== v.z ||\n        cache[3] !== v.w\n      ) {\n        gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\n        cache[0] = v.x;\n        cache[1] = v.y;\n        cache[2] = v.z;\n        cache[3] = v.w;\n      }\n    } else {\n      if (arraysEqual(cache, v)) return;\n\n      gl.uniform4fv(this.addr, v);\n\n      copyArray(cache, v);\n    }\n  }\n\n  // Single matrix (from flat array or MatrixN)\n\n  function setValue2fm(gl, v) {\n    var cache = this.cache;\n    var elements = v.elements;\n\n    if (elements === undefined) {\n      if (arraysEqual(cache, v)) return;\n\n      gl.uniformMatrix2fv(this.addr, false, v);\n\n      copyArray(cache, v);\n    } else {\n      if (arraysEqual(cache, elements)) return;\n\n      mat2array.set(elements);\n\n      gl.uniformMatrix2fv(this.addr, false, mat2array);\n\n      copyArray(cache, elements);\n    }\n  }\n\n  function setValue3fm(gl, v) {\n    var cache = this.cache;\n    var elements = v.elements;\n\n    if (elements === undefined) {\n      if (arraysEqual(cache, v)) return;\n\n      gl.uniformMatrix3fv(this.addr, false, v);\n\n      copyArray(cache, v);\n    } else {\n      if (arraysEqual(cache, elements)) return;\n\n      mat3array.set(elements);\n\n      gl.uniformMatrix3fv(this.addr, false, mat3array);\n\n      copyArray(cache, elements);\n    }\n  }\n\n  function setValue4fm(gl, v) {\n    var cache = this.cache;\n    var elements = v.elements;\n\n    if (elements === undefined) {\n      if (arraysEqual(cache, v)) return;\n\n      gl.uniformMatrix4fv(this.addr, false, v);\n\n      copyArray(cache, v);\n    } else {\n      if (arraysEqual(cache, elements)) return;\n\n      mat4array.set(elements);\n\n      gl.uniformMatrix4fv(this.addr, false, mat4array);\n\n      copyArray(cache, elements);\n    }\n  }\n\n  // Single texture (2D / Cube)\n\n  function setValueT1(gl, v, renderer) {\n    var cache = this.cache;\n    var unit = renderer.allocTextureUnit();\n\n    if (cache[0] !== unit) {\n      gl.uniform1i(this.addr, unit);\n      cache[0] = unit;\n    }\n\n    renderer.setTexture2D(v || emptyTexture, unit);\n  }\n\n  function setValueT6(gl, v, renderer) {\n    var cache = this.cache;\n    var unit = renderer.allocTextureUnit();\n\n    if (cache[0] !== unit) {\n      gl.uniform1i(this.addr, unit);\n      cache[0] = unit;\n    }\n\n    renderer.setTextureCube(v || emptyCubeTexture, unit);\n  }\n\n  // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n  function setValue2iv(gl, v) {\n    var cache = this.cache;\n\n    if (arraysEqual(cache, v)) return;\n\n    gl.uniform2iv(this.addr, v);\n\n    copyArray(cache, v);\n  }\n\n  function setValue3iv(gl, v) {\n    var cache = this.cache;\n\n    if (arraysEqual(cache, v)) return;\n\n    gl.uniform3iv(this.addr, v);\n\n    copyArray(cache, v);\n  }\n\n  function setValue4iv(gl, v) {\n    var cache = this.cache;\n\n    if (arraysEqual(cache, v)) return;\n\n    gl.uniform4iv(this.addr, v);\n\n    copyArray(cache, v);\n  }\n\n  // Helper to pick the right setter for the singular case\n\n  function getSingularSetter(type) {\n    switch (type) {\n      case 0x1406:\n        return setValue1f; // FLOAT\n      case 0x8b50:\n        return setValue2fv; // _VEC2\n      case 0x8b51:\n        return setValue3fv; // _VEC3\n      case 0x8b52:\n        return setValue4fv; // _VEC4\n\n      case 0x8b5a:\n        return setValue2fm; // _MAT2\n      case 0x8b5b:\n        return setValue3fm; // _MAT3\n      case 0x8b5c:\n        return setValue4fm; // _MAT4\n\n      case 0x8b5e:\n      case 0x8d66:\n        return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\n      case 0x8b60:\n        return setValueT6; // SAMPLER_CUBE\n\n      case 0x1404:\n      case 0x8b56:\n        return setValue1i; // INT, BOOL\n      case 0x8b53:\n      case 0x8b57:\n        return setValue2iv; // _VEC2\n      case 0x8b54:\n      case 0x8b58:\n        return setValue3iv; // _VEC3\n      case 0x8b55:\n      case 0x8b59:\n        return setValue4iv; // _VEC4\n    }\n  }\n\n  // Array of scalars\n\n  function setValue1fv(gl, v) {\n    var cache = this.cache;\n\n    if (arraysEqual(cache, v)) return;\n\n    gl.uniform1fv(this.addr, v);\n\n    copyArray(cache, v);\n  }\n  function setValue1iv(gl, v) {\n    var cache = this.cache;\n\n    if (arraysEqual(cache, v)) return;\n\n    gl.uniform1iv(this.addr, v);\n\n    copyArray(cache, v);\n  }\n\n  // Array of vectors (flat or from THREE classes)\n\n  function setValueV2a(gl, v) {\n    var cache = this.cache;\n    var data = flatten(v, this.size, 2);\n\n    if (arraysEqual(cache, data)) return;\n\n    gl.uniform2fv(this.addr, data);\n\n    this.updateCache(data);\n  }\n\n  function setValueV3a(gl, v) {\n    var cache = this.cache;\n    var data = flatten(v, this.size, 3);\n\n    if (arraysEqual(cache, data)) return;\n\n    gl.uniform3fv(this.addr, data);\n\n    this.updateCache(data);\n  }\n\n  function setValueV4a(gl, v) {\n    var cache = this.cache;\n    var data = flatten(v, this.size, 4);\n\n    if (arraysEqual(cache, data)) return;\n\n    gl.uniform4fv(this.addr, data);\n\n    this.updateCache(data);\n  }\n\n  // Array of matrices (flat or from THREE clases)\n\n  function setValueM2a(gl, v) {\n    var cache = this.cache;\n    var data = flatten(v, this.size, 4);\n\n    if (arraysEqual(cache, data)) return;\n\n    gl.uniformMatrix2fv(this.addr, false, data);\n\n    this.updateCache(data);\n  }\n\n  function setValueM3a(gl, v) {\n    var cache = this.cache;\n    var data = flatten(v, this.size, 9);\n\n    if (arraysEqual(cache, data)) return;\n\n    gl.uniformMatrix3fv(this.addr, false, data);\n\n    this.updateCache(data);\n  }\n\n  function setValueM4a(gl, v) {\n    var cache = this.cache;\n    var data = flatten(v, this.size, 16);\n\n    if (arraysEqual(cache, data)) return;\n\n    gl.uniformMatrix4fv(this.addr, false, data);\n\n    this.updateCache(data);\n  }\n\n  // Array of textures (2D / Cube)\n\n  function setValueT1a(gl, v, renderer) {\n    var cache = this.cache;\n    var n = v.length;\n\n    var units = allocTexUnits(renderer, n);\n\n    if (arraysEqual(cache, units) === false) {\n      gl.uniform1iv(this.addr, units);\n      copyArray(cache, units);\n    }\n\n    for (var i = 0; i !== n; ++i) {\n      renderer.setTexture2D(v[i] || emptyTexture, units[i]);\n    }\n  }\n\n  function setValueT6a(gl, v, renderer) {\n    var cache = this.cache;\n    var n = v.length;\n\n    var units = allocTexUnits(renderer, n);\n\n    if (arraysEqual(cache, units) === false) {\n      gl.uniform1iv(this.addr, units);\n      copyArray(cache, units);\n    }\n\n    for (var i = 0; i !== n; ++i) {\n      renderer.setTextureCube(v[i] || emptyCubeTexture, units[i]);\n    }\n  }\n\n  // Helper to pick the right setter for a pure (bottom-level) array\n\n  function getPureArraySetter(type) {\n    switch (type) {\n      case 0x1406:\n        return setValue1fv; // FLOAT\n      case 0x8b50:\n        return setValueV2a; // _VEC2\n      case 0x8b51:\n        return setValueV3a; // _VEC3\n      case 0x8b52:\n        return setValueV4a; // _VEC4\n\n      case 0x8b5a:\n        return setValueM2a; // _MAT2\n      case 0x8b5b:\n        return setValueM3a; // _MAT3\n      case 0x8b5c:\n        return setValueM4a; // _MAT4\n\n      case 0x8b5e:\n        return setValueT1a; // SAMPLER_2D\n      case 0x8b60:\n        return setValueT6a; // SAMPLER_CUBE\n\n      case 0x1404:\n      case 0x8b56:\n        return setValue1iv; // INT, BOOL\n      case 0x8b53:\n      case 0x8b57:\n        return setValue2iv; // _VEC2\n      case 0x8b54:\n      case 0x8b58:\n        return setValue3iv; // _VEC3\n      case 0x8b55:\n      case 0x8b59:\n        return setValue4iv; // _VEC4\n    }\n  }\n\n  // --- Uniform Classes ---\n\n  function SingleUniform(id, activeInfo, addr) {\n    this.id = id;\n    this.addr = addr;\n    this.cache = [];\n    this.setValue = getSingularSetter(activeInfo.type);\n\n    // this.path = activeInfo.name; // DEBUG\n  }\n\n  function PureArrayUniform(id, activeInfo, addr) {\n    this.id = id;\n    this.addr = addr;\n    this.cache = [];\n    this.size = activeInfo.size;\n    this.setValue = getPureArraySetter(activeInfo.type);\n\n    // this.path = activeInfo.name; // DEBUG\n  }\n\n  PureArrayUniform.prototype.updateCache = function (data) {\n    var cache = this.cache;\n\n    if (data instanceof Float32Array && cache.length !== data.length) {\n      this.cache = new Float32Array(data.length);\n    }\n\n    copyArray(cache, data);\n  };\n\n  function StructuredUniform(id) {\n    this.id = id;\n\n    UniformContainer.call(this); // mix-in\n  }\n\n  StructuredUniform.prototype.setValue = function (gl, value, renderer) {\n    var seq = this.seq;\n\n    for (var i = 0, n = seq.length; i !== n; ++i) {\n      var u = seq[i];\n      u.setValue(gl, value[u.id], renderer);\n    }\n  };\n\n  // --- Top-level ---\n\n  // Parser - builds up the property tree from the path strings\n\n  var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\n\n  // extracts\n  // \t- the identifier (member name or array index)\n  //  - followed by an optional right bracket (found when array index)\n  //  - followed by an optional left bracket or dot (type of subscript)\n  //\n  // Note: These portions can be read in a non-overlapping fashion and\n  // allow straightforward parsing of the hierarchy that WebGL encodes\n  // in the uniform names.\n\n  function addUniform(container, uniformObject) {\n    container.seq.push(uniformObject);\n    container.map[uniformObject.id] = uniformObject;\n  }\n\n  function parseUniform(activeInfo, addr, container) {\n    var path = activeInfo.name,\n      pathLength = path.length;\n\n    // reset RegExp object, because of the early exit of a previous run\n    RePathPart.lastIndex = 0;\n\n    while (true) {\n      var match = RePathPart.exec(path),\n        matchEnd = RePathPart.lastIndex,\n        id = match[1],\n        idIsIndex = match[2] === \"]\",\n        subscript = match[3];\n\n      if (idIsIndex) id = id | 0; // convert to integer\n\n      if (\n        subscript === undefined ||\n        (subscript === \"[\" && matchEnd + 2 === pathLength)\n      ) {\n        // bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n        addUniform(\n          container,\n          subscript === undefined\n            ? new SingleUniform(id, activeInfo, addr)\n            : new PureArrayUniform(id, activeInfo, addr)\n        );\n\n        break;\n      } else {\n        // step into inner node / create it in case it doesn't exist\n\n        var map = container.map,\n          next = map[id];\n\n        if (next === undefined) {\n          next = new StructuredUniform(id);\n          addUniform(container, next);\n        }\n\n        container = next;\n      }\n    }\n  }\n\n  // Root Container\n\n  function WebGLUniforms(gl, program, renderer) {\n    UniformContainer.call(this);\n\n    this.renderer = renderer;\n\n    var n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (var i = 0; i < n; ++i) {\n      var info = gl.getActiveUniform(program, i),\n        addr = gl.getUniformLocation(program, info.name);\n\n      parseUniform(info, addr, this);\n    }\n  }\n\n  WebGLUniforms.prototype.setValue = function (gl, name, value) {\n    var u = this.map[name];\n\n    if (u !== undefined) u.setValue(gl, value, this.renderer);\n  };\n\n  WebGLUniforms.prototype.setOptional = function (gl, object, name) {\n    var v = object[name];\n\n    if (v !== undefined) this.setValue(gl, name, v);\n  };\n\n  // Static interface\n\n  WebGLUniforms.upload = function (gl, seq, values, renderer) {\n    for (var i = 0, n = seq.length; i !== n; ++i) {\n      var u = seq[i],\n        v = values[u.id];\n\n      if (v.needsUpdate !== false) {\n        // note: always updating when .needsUpdate is undefined\n        u.setValue(gl, v.value, renderer);\n      }\n    }\n  };\n\n  WebGLUniforms.seqWithValue = function (seq, values) {\n    var r = [];\n\n    for (var i = 0, n = seq.length; i !== n; ++i) {\n      var u = seq[i];\n      if (u.id in values) r.push(u);\n    }\n\n    return r;\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function addLineNumbers(string) {\n    var lines = string.split(\"\\n\");\n\n    for (var i = 0; i < lines.length; i++) {\n      lines[i] = i + 1 + \": \" + lines[i];\n    }\n\n    return lines.join(\"\\n\");\n  }\n\n  function WebGLShader(gl, type, string) {\n    var shader = gl.createShader(type);\n\n    gl.shaderSource(shader, string);\n    gl.compileShader(shader);\n\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      console.error(\"THREE.WebGLShader: Shader couldn't compile.\");\n    }\n\n    if (gl.getShaderInfoLog(shader) !== \"\") {\n      console.warn(\n        \"THREE.WebGLShader: gl.getShaderInfoLog()\",\n        type === gl.VERTEX_SHADER ? \"vertex\" : \"fragment\",\n        gl.getShaderInfoLog(shader),\n        addLineNumbers(string)\n      );\n    }\n\n    // --enable-privileged-webgl-extension\n    // console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n    return shader;\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  var programIdCount = 0;\n\n  function getEncodingComponents(encoding) {\n    switch (encoding) {\n      case LinearEncoding:\n        return [\"Linear\", \"( value )\"];\n      case sRGBEncoding:\n        return [\"sRGB\", \"( value )\"];\n      case RGBEEncoding:\n        return [\"RGBE\", \"( value )\"];\n      case RGBM7Encoding:\n        return [\"RGBM\", \"( value, 7.0 )\"];\n      case RGBM16Encoding:\n        return [\"RGBM\", \"( value, 16.0 )\"];\n      case RGBDEncoding:\n        return [\"RGBD\", \"( value, 256.0 )\"];\n      case GammaEncoding:\n        return [\"Gamma\", \"( value, float( GAMMA_FACTOR ) )\"];\n      default:\n        throw new Error(\"unsupported encoding: \" + encoding);\n    }\n  }\n\n  function getTexelDecodingFunction(functionName, encoding) {\n    var components = getEncodingComponents(encoding);\n    return (\n      \"vec4 \" +\n      functionName +\n      \"( vec4 value ) { return \" +\n      components[0] +\n      \"ToLinear\" +\n      components[1] +\n      \"; }\"\n    );\n  }\n\n  function getTexelEncodingFunction(functionName, encoding) {\n    var components = getEncodingComponents(encoding);\n    return (\n      \"vec4 \" +\n      functionName +\n      \"( vec4 value ) { return LinearTo\" +\n      components[0] +\n      components[1] +\n      \"; }\"\n    );\n  }\n\n  function getToneMappingFunction(functionName, toneMapping) {\n    var toneMappingName;\n\n    switch (toneMapping) {\n      case LinearToneMapping:\n        toneMappingName = \"Linear\";\n        break;\n\n      case ReinhardToneMapping:\n        toneMappingName = \"Reinhard\";\n        break;\n\n      case Uncharted2ToneMapping:\n        toneMappingName = \"Uncharted2\";\n        break;\n\n      case CineonToneMapping:\n        toneMappingName = \"OptimizedCineon\";\n        break;\n\n      default:\n        throw new Error(\"unsupported toneMapping: \" + toneMapping);\n    }\n\n    return (\n      \"vec3 \" +\n      functionName +\n      \"( vec3 color ) { return \" +\n      toneMappingName +\n      \"ToneMapping( color ); }\"\n    );\n  }\n\n  function generateExtensions(extensions, parameters, rendererExtensions) {\n    extensions = extensions || {};\n\n    var chunks = [\n      extensions.derivatives ||\n      parameters.envMapCubeUV ||\n      parameters.bumpMap ||\n      (parameters.normalMap && !parameters.objectSpaceNormalMap) ||\n      parameters.flatShading\n        ? \"#extension GL_OES_standard_derivatives : enable\"\n        : \"\",\n      (extensions.fragDepth || parameters.logarithmicDepthBuffer) &&\n      rendererExtensions.get(\"EXT_frag_depth\")\n        ? \"#extension GL_EXT_frag_depth : enable\"\n        : \"\",\n      extensions.drawBuffers && rendererExtensions.get(\"WEBGL_draw_buffers\")\n        ? \"#extension GL_EXT_draw_buffers : require\"\n        : \"\",\n      (extensions.shaderTextureLOD || parameters.envMap) &&\n      rendererExtensions.get(\"EXT_shader_texture_lod\")\n        ? \"#extension GL_EXT_shader_texture_lod : enable\"\n        : \"\",\n    ];\n\n    return chunks.filter(filterEmptyLine).join(\"\\n\");\n  }\n\n  function generateDefines(defines) {\n    var chunks = [];\n\n    for (var name in defines) {\n      var value = defines[name];\n\n      if (value === false) continue;\n\n      chunks.push(\"#define \" + name + \" \" + value);\n    }\n\n    return chunks.join(\"\\n\");\n  }\n\n  function fetchAttributeLocations(gl, program) {\n    var attributes = {};\n\n    var n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (var i = 0; i < n; i++) {\n      var info = gl.getActiveAttrib(program, i);\n      var name = info.name;\n\n      // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n      attributes[name] = gl.getAttribLocation(program, name);\n    }\n\n    return attributes;\n  }\n\n  function filterEmptyLine(string) {\n    return string !== \"\";\n  }\n\n  function replaceLightNums(string, parameters) {\n    return string\n      .replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights)\n      .replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights)\n      .replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights)\n      .replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights)\n      .replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights);\n  }\n\n  function replaceClippingPlaneNums(string, parameters) {\n    return string\n      .replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes)\n      .replace(\n        /UNION_CLIPPING_PLANES/g,\n        parameters.numClippingPlanes - parameters.numClipIntersection\n      );\n  }\n\n  function parseIncludes(string) {\n    var pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n    function replace(match, include) {\n      var replace = ShaderChunk[include];\n\n      if (replace === undefined) {\n        throw new Error(\"Can not resolve #include <\" + include + \">\");\n      }\n\n      return parseIncludes(replace);\n    }\n\n    return string.replace(pattern, replace);\n  }\n\n  function unrollLoops(string) {\n    var pattern =\n      /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n    function replace(match, start, end, snippet) {\n      var unroll = \"\";\n\n      for (var i = parseInt(start); i < parseInt(end); i++) {\n        unroll += snippet.replace(/\\[ i \\]/g, \"[ \" + i + \" ]\");\n      }\n\n      return unroll;\n    }\n\n    return string.replace(pattern, replace);\n  }\n\n  function WebGLProgram(\n    renderer,\n    extensions,\n    code,\n    material,\n    shader,\n    parameters,\n    capabilities\n  ) {\n    var gl = renderer.context;\n\n    var defines = material.defines;\n\n    var vertexShader = shader.vertexShader;\n    var fragmentShader = shader.fragmentShader;\n\n    var shadowMapTypeDefine = \"SHADOWMAP_TYPE_BASIC\";\n\n    if (parameters.shadowMapType === PCFShadowMap) {\n      shadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF\";\n    } else if (parameters.shadowMapType === PCFSoftShadowMap) {\n      shadowMapTypeDefine = \"SHADOWMAP_TYPE_PCF_SOFT\";\n    }\n\n    var envMapTypeDefine = \"ENVMAP_TYPE_CUBE\";\n    var envMapModeDefine = \"ENVMAP_MODE_REFLECTION\";\n    var envMapBlendingDefine = \"ENVMAP_BLENDING_MULTIPLY\";\n\n    if (parameters.envMap) {\n      switch (material.envMap.mapping) {\n        case CubeReflectionMapping:\n        case CubeRefractionMapping:\n          envMapTypeDefine = \"ENVMAP_TYPE_CUBE\";\n          break;\n\n        case CubeUVReflectionMapping:\n        case CubeUVRefractionMapping:\n          envMapTypeDefine = \"ENVMAP_TYPE_CUBE_UV\";\n          break;\n\n        case EquirectangularReflectionMapping:\n        case EquirectangularRefractionMapping:\n          envMapTypeDefine = \"ENVMAP_TYPE_EQUIREC\";\n          break;\n\n        case SphericalReflectionMapping:\n          envMapTypeDefine = \"ENVMAP_TYPE_SPHERE\";\n          break;\n      }\n\n      switch (material.envMap.mapping) {\n        case CubeRefractionMapping:\n        case EquirectangularRefractionMapping:\n          envMapModeDefine = \"ENVMAP_MODE_REFRACTION\";\n          break;\n      }\n\n      switch (material.combine) {\n        case MultiplyOperation:\n          envMapBlendingDefine = \"ENVMAP_BLENDING_MULTIPLY\";\n          break;\n\n        case MixOperation:\n          envMapBlendingDefine = \"ENVMAP_BLENDING_MIX\";\n          break;\n\n        case AddOperation:\n          envMapBlendingDefine = \"ENVMAP_BLENDING_ADD\";\n          break;\n      }\n    }\n\n    var gammaFactorDefine =\n      renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\n    // console.log( 'building new program ' );\n\n    //\n\n    var customExtensions = capabilities.isWebGL2\n      ? \"\"\n      : generateExtensions(material.extensions, parameters, extensions);\n\n    var customDefines = generateDefines(defines);\n\n    //\n\n    var program = gl.createProgram();\n\n    var prefixVertex, prefixFragment;\n\n    if (material.isRawShaderMaterial) {\n      prefixVertex = [customDefines].filter(filterEmptyLine).join(\"\\n\");\n\n      if (prefixVertex.length > 0) {\n        prefixVertex += \"\\n\";\n      }\n\n      prefixFragment = [customExtensions, customDefines]\n        .filter(filterEmptyLine)\n        .join(\"\\n\");\n\n      if (prefixFragment.length > 0) {\n        prefixFragment += \"\\n\";\n      }\n    } else {\n      prefixVertex = [\n        \"precision \" + parameters.precision + \" float;\",\n        \"precision \" + parameters.precision + \" int;\",\n\n        \"#define SHADER_NAME \" + shader.name,\n\n        customDefines,\n\n        parameters.supportsVertexTextures ? \"#define VERTEX_TEXTURES\" : \"\",\n\n        \"#define GAMMA_FACTOR \" + gammaFactorDefine,\n\n        \"#define MAX_BONES \" + parameters.maxBones,\n        parameters.useFog && parameters.fog ? \"#define USE_FOG\" : \"\",\n        parameters.useFog && parameters.fogExp ? \"#define FOG_EXP2\" : \"\",\n\n        parameters.map ? \"#define USE_MAP\" : \"\",\n        parameters.envMap ? \"#define USE_ENVMAP\" : \"\",\n        parameters.envMap ? \"#define \" + envMapModeDefine : \"\",\n        parameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\n        parameters.aoMap ? \"#define USE_AOMAP\" : \"\",\n        parameters.emissiveMap ? \"#define USE_EMISSIVEMAP\" : \"\",\n        parameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\n        parameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\n        parameters.normalMap && parameters.objectSpaceNormalMap\n          ? \"#define OBJECTSPACE_NORMALMAP\"\n          : \"\",\n        parameters.displacementMap && parameters.supportsVertexTextures\n          ? \"#define USE_DISPLACEMENTMAP\"\n          : \"\",\n        parameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\n        parameters.roughnessMap ? \"#define USE_ROUGHNESSMAP\" : \"\",\n        parameters.metalnessMap ? \"#define USE_METALNESSMAP\" : \"\",\n        parameters.alphaMap ? \"#define USE_ALPHAMAP\" : \"\",\n        parameters.vertexColors ? \"#define USE_COLOR\" : \"\",\n\n        parameters.flatShading ? \"#define FLAT_SHADED\" : \"\",\n\n        parameters.skinning ? \"#define USE_SKINNING\" : \"\",\n        parameters.useVertexTexture ? \"#define BONE_TEXTURE\" : \"\",\n\n        parameters.morphTargets ? \"#define USE_MORPHTARGETS\" : \"\",\n        parameters.morphNormals && parameters.flatShading === false\n          ? \"#define USE_MORPHNORMALS\"\n          : \"\",\n        parameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\n        parameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\n\n        parameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\n        parameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\n\n        parameters.sizeAttenuation ? \"#define USE_SIZEATTENUATION\" : \"\",\n\n        parameters.logarithmicDepthBuffer ? \"#define USE_LOGDEPTHBUF\" : \"\",\n        parameters.logarithmicDepthBuffer &&\n        (capabilities.isWebGL2 || extensions.get(\"EXT_frag_depth\"))\n          ? \"#define USE_LOGDEPTHBUF_EXT\"\n          : \"\",\n\n        \"uniform mat4 modelMatrix;\",\n        \"uniform mat4 modelViewMatrix;\",\n        \"uniform mat4 projectionMatrix;\",\n        \"uniform mat4 viewMatrix;\",\n        \"uniform mat3 normalMatrix;\",\n        \"uniform vec3 cameraPosition;\",\n\n        \"attribute vec3 position;\",\n        \"attribute vec3 normal;\",\n        \"attribute vec2 uv;\",\n\n        \"#ifdef USE_COLOR\",\n\n        \"\tattribute vec3 color;\",\n\n        \"#endif\",\n\n        \"#ifdef USE_MORPHTARGETS\",\n\n        \"\tattribute vec3 morphTarget0;\",\n        \"\tattribute vec3 morphTarget1;\",\n        \"\tattribute vec3 morphTarget2;\",\n        \"\tattribute vec3 morphTarget3;\",\n\n        \"\t#ifdef USE_MORPHNORMALS\",\n\n        \"\t\tattribute vec3 morphNormal0;\",\n        \"\t\tattribute vec3 morphNormal1;\",\n        \"\t\tattribute vec3 morphNormal2;\",\n        \"\t\tattribute vec3 morphNormal3;\",\n\n        \"\t#else\",\n\n        \"\t\tattribute vec3 morphTarget4;\",\n        \"\t\tattribute vec3 morphTarget5;\",\n        \"\t\tattribute vec3 morphTarget6;\",\n        \"\t\tattribute vec3 morphTarget7;\",\n\n        \"\t#endif\",\n\n        \"#endif\",\n\n        \"#ifdef USE_SKINNING\",\n\n        \"\tattribute vec4 skinIndex;\",\n        \"\tattribute vec4 skinWeight;\",\n\n        \"#endif\",\n\n        \"\\n\",\n      ]\n        .filter(filterEmptyLine)\n        .join(\"\\n\");\n\n      prefixFragment = [\n        customExtensions,\n\n        \"precision \" + parameters.precision + \" float;\",\n        \"precision \" + parameters.precision + \" int;\",\n\n        \"#define SHADER_NAME \" + shader.name,\n\n        customDefines,\n\n        parameters.alphaTest\n          ? \"#define ALPHATEST \" +\n            parameters.alphaTest +\n            (parameters.alphaTest % 1 ? \"\" : \".0\")\n          : \"\", // add '.0' if integer\n\n        \"#define GAMMA_FACTOR \" + gammaFactorDefine,\n\n        parameters.useFog && parameters.fog ? \"#define USE_FOG\" : \"\",\n        parameters.useFog && parameters.fogExp ? \"#define FOG_EXP2\" : \"\",\n\n        parameters.map ? \"#define USE_MAP\" : \"\",\n        parameters.envMap ? \"#define USE_ENVMAP\" : \"\",\n        parameters.envMap ? \"#define \" + envMapTypeDefine : \"\",\n        parameters.envMap ? \"#define \" + envMapModeDefine : \"\",\n        parameters.envMap ? \"#define \" + envMapBlendingDefine : \"\",\n        parameters.lightMap ? \"#define USE_LIGHTMAP\" : \"\",\n        parameters.aoMap ? \"#define USE_AOMAP\" : \"\",\n        parameters.emissiveMap ? \"#define USE_EMISSIVEMAP\" : \"\",\n        parameters.bumpMap ? \"#define USE_BUMPMAP\" : \"\",\n        parameters.normalMap ? \"#define USE_NORMALMAP\" : \"\",\n        parameters.normalMap && parameters.objectSpaceNormalMap\n          ? \"#define OBJECTSPACE_NORMALMAP\"\n          : \"\",\n        parameters.specularMap ? \"#define USE_SPECULARMAP\" : \"\",\n        parameters.roughnessMap ? \"#define USE_ROUGHNESSMAP\" : \"\",\n        parameters.metalnessMap ? \"#define USE_METALNESSMAP\" : \"\",\n        parameters.alphaMap ? \"#define USE_ALPHAMAP\" : \"\",\n        parameters.vertexColors ? \"#define USE_COLOR\" : \"\",\n\n        parameters.gradientMap ? \"#define USE_GRADIENTMAP\" : \"\",\n\n        parameters.flatShading ? \"#define FLAT_SHADED\" : \"\",\n\n        parameters.doubleSided ? \"#define DOUBLE_SIDED\" : \"\",\n        parameters.flipSided ? \"#define FLIP_SIDED\" : \"\",\n\n        parameters.shadowMapEnabled ? \"#define USE_SHADOWMAP\" : \"\",\n        parameters.shadowMapEnabled ? \"#define \" + shadowMapTypeDefine : \"\",\n\n        parameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : \"\",\n\n        parameters.physicallyCorrectLights\n          ? \"#define PHYSICALLY_CORRECT_LIGHTS\"\n          : \"\",\n\n        parameters.logarithmicDepthBuffer ? \"#define USE_LOGDEPTHBUF\" : \"\",\n        parameters.logarithmicDepthBuffer &&\n        (capabilities.isWebGL2 || extensions.get(\"EXT_frag_depth\"))\n          ? \"#define USE_LOGDEPTHBUF_EXT\"\n          : \"\",\n\n        parameters.envMap &&\n        (capabilities.isWebGL2 || extensions.get(\"EXT_shader_texture_lod\"))\n          ? \"#define TEXTURE_LOD_EXT\"\n          : \"\",\n\n        \"uniform mat4 viewMatrix;\",\n        \"uniform vec3 cameraPosition;\",\n\n        parameters.toneMapping !== NoToneMapping ? \"#define TONE_MAPPING\" : \"\",\n        parameters.toneMapping !== NoToneMapping\n          ? ShaderChunk[\"tonemapping_pars_fragment\"]\n          : \"\", // this code is required here because it is used by the toneMapping() function defined below\n        parameters.toneMapping !== NoToneMapping\n          ? getToneMappingFunction(\"toneMapping\", parameters.toneMapping)\n          : \"\",\n\n        parameters.dithering ? \"#define DITHERING\" : \"\",\n\n        parameters.outputEncoding ||\n        parameters.mapEncoding ||\n        parameters.envMapEncoding ||\n        parameters.emissiveMapEncoding\n          ? ShaderChunk[\"encodings_pars_fragment\"]\n          : \"\", // this code is required here because it is used by the various encoding/decoding function defined below\n        parameters.mapEncoding\n          ? getTexelDecodingFunction(\"mapTexelToLinear\", parameters.mapEncoding)\n          : \"\",\n        parameters.envMapEncoding\n          ? getTexelDecodingFunction(\n              \"envMapTexelToLinear\",\n              parameters.envMapEncoding\n            )\n          : \"\",\n        parameters.emissiveMapEncoding\n          ? getTexelDecodingFunction(\n              \"emissiveMapTexelToLinear\",\n              parameters.emissiveMapEncoding\n            )\n          : \"\",\n        parameters.outputEncoding\n          ? getTexelEncodingFunction(\n              \"linearToOutputTexel\",\n              parameters.outputEncoding\n            )\n          : \"\",\n\n        parameters.depthPacking\n          ? \"#define DEPTH_PACKING \" + material.depthPacking\n          : \"\",\n\n        \"\\n\",\n      ]\n        .filter(filterEmptyLine)\n        .join(\"\\n\");\n    }\n\n    vertexShader = parseIncludes(vertexShader);\n    vertexShader = replaceLightNums(vertexShader, parameters);\n    vertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\n    fragmentShader = parseIncludes(fragmentShader);\n    fragmentShader = replaceLightNums(fragmentShader, parameters);\n    fragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\n    vertexShader = unrollLoops(vertexShader);\n    fragmentShader = unrollLoops(fragmentShader);\n\n    if (capabilities.isWebGL2 && !material.isRawShaderMaterial) {\n      var isGLSL3ShaderMaterial = false;\n\n      var versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\n\n      if (\n        material.isShaderMaterial &&\n        vertexShader.match(versionRegex) !== null &&\n        fragmentShader.match(versionRegex) !== null\n      ) {\n        isGLSL3ShaderMaterial = true;\n\n        vertexShader = vertexShader.replace(versionRegex, \"\");\n        fragmentShader = fragmentShader.replace(versionRegex, \"\");\n      }\n\n      // GLSL 3.0 conversion\n      prefixVertex =\n        [\n          \"#version 300 es\\n\",\n          \"#define attribute in\",\n          \"#define varying out\",\n          \"#define texture2D texture\",\n        ].join(\"\\n\") +\n        \"\\n\" +\n        prefixVertex;\n\n      prefixFragment =\n        [\n          \"#version 300 es\\n\",\n          \"#define varying in\",\n          isGLSL3ShaderMaterial ? \"\" : \"out highp vec4 pc_fragColor;\",\n          isGLSL3ShaderMaterial ? \"\" : \"#define gl_FragColor pc_fragColor\",\n          \"#define gl_FragDepthEXT gl_FragDepth\",\n          \"#define texture2D texture\",\n          \"#define textureCube texture\",\n          \"#define texture2DProj textureProj\",\n          \"#define texture2DLodEXT textureLod\",\n          \"#define texture2DProjLodEXT textureProjLod\",\n          \"#define textureCubeLodEXT textureLod\",\n          \"#define texture2DGradEXT textureGrad\",\n          \"#define texture2DProjGradEXT textureProjGrad\",\n          \"#define textureCubeGradEXT textureGrad\",\n        ].join(\"\\n\") +\n        \"\\n\" +\n        prefixFragment;\n    }\n\n    var vertexGlsl = prefixVertex + vertexShader;\n    var fragmentGlsl = prefixFragment + fragmentShader;\n\n    // console.log( '*VERTEX*', vertexGlsl );\n    // console.log( '*FRAGMENT*', fragmentGlsl );\n\n    var glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n    var glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n\n    gl.attachShader(program, glVertexShader);\n    gl.attachShader(program, glFragmentShader);\n\n    // Force a particular attribute to index 0.\n\n    if (material.index0AttributeName !== undefined) {\n      gl.bindAttribLocation(program, 0, material.index0AttributeName);\n    } else if (parameters.morphTargets === true) {\n      // programs with morphTargets displace position out of attribute 0\n      gl.bindAttribLocation(program, 0, \"position\");\n    }\n\n    gl.linkProgram(program);\n\n    // clean up\n\n    gl.deleteShader(glVertexShader);\n    gl.deleteShader(glFragmentShader);\n\n    // set up caching for uniform locations\n\n    var cachedUniforms;\n\n    this.getUniforms = function () {\n      if (cachedUniforms === undefined) {\n        cachedUniforms = new WebGLUniforms(gl, program, renderer);\n      }\n\n      return cachedUniforms;\n    };\n\n    // set up caching for attribute locations\n\n    var cachedAttributes;\n\n    this.getAttributes = function () {\n      if (cachedAttributes === undefined) {\n        cachedAttributes = fetchAttributeLocations(gl, program);\n      }\n\n      return cachedAttributes;\n    };\n\n    // free resource\n\n    this.destroy = function () {\n      gl.deleteProgram(program);\n      this.program = undefined;\n    };\n\n    // DEPRECATED\n\n    Object.defineProperties(this, {\n      uniforms: {\n        get: function () {\n          console.warn(\"THREE.WebGLProgram: .uniforms is now .getUniforms().\");\n          return this.getUniforms();\n        },\n      },\n\n      attributes: {\n        get: function () {\n          console.warn(\n            \"THREE.WebGLProgram: .attributes is now .getAttributes().\"\n          );\n          return this.getAttributes();\n        },\n      },\n    });\n\n    //\n\n    this.name = shader.name;\n    this.id = programIdCount++;\n    this.code = code;\n    this.usedTimes = 1;\n    this.program = program;\n    this.vertexShader = glVertexShader;\n    this.fragmentShader = glFragmentShader;\n\n    return this;\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLPrograms(renderer, extensions, capabilities) {\n    var programs = [];\n\n    var shaderIDs = {\n      MeshDepthMaterial: \"depth\",\n      MeshDistanceMaterial: \"distanceRGBA\",\n      MeshNormalMaterial: \"normal\",\n      MeshBasicMaterial: \"basic\",\n      MeshLambertMaterial: \"lambert\",\n      MeshPhongMaterial: \"phong\",\n      MeshToonMaterial: \"phong\",\n      MeshStandardMaterial: \"physical\",\n      MeshPhysicalMaterial: \"physical\",\n      LineBasicMaterial: \"basic\",\n      LineDashedMaterial: \"dashed\",\n      PointsMaterial: \"points\",\n      ShadowMaterial: \"shadow\",\n      SpriteMaterial: \"sprite\",\n    };\n\n    var parameterNames = [\n      \"precision\",\n      \"supportsVertexTextures\",\n      \"map\",\n      \"mapEncoding\",\n      \"envMap\",\n      \"envMapMode\",\n      \"envMapEncoding\",\n      \"lightMap\",\n      \"aoMap\",\n      \"emissiveMap\",\n      \"emissiveMapEncoding\",\n      \"bumpMap\",\n      \"normalMap\",\n      \"objectSpaceNormalMap\",\n      \"displacementMap\",\n      \"specularMap\",\n      \"roughnessMap\",\n      \"metalnessMap\",\n      \"gradientMap\",\n      \"alphaMap\",\n      \"combine\",\n      \"vertexColors\",\n      \"fog\",\n      \"useFog\",\n      \"fogExp\",\n      \"flatShading\",\n      \"sizeAttenuation\",\n      \"logarithmicDepthBuffer\",\n      \"skinning\",\n      \"maxBones\",\n      \"useVertexTexture\",\n      \"morphTargets\",\n      \"morphNormals\",\n      \"maxMorphTargets\",\n      \"maxMorphNormals\",\n      \"premultipliedAlpha\",\n      \"numDirLights\",\n      \"numPointLights\",\n      \"numSpotLights\",\n      \"numHemiLights\",\n      \"numRectAreaLights\",\n      \"shadowMapEnabled\",\n      \"shadowMapType\",\n      \"toneMapping\",\n      \"physicallyCorrectLights\",\n      \"alphaTest\",\n      \"doubleSided\",\n      \"flipSided\",\n      \"numClippingPlanes\",\n      \"numClipIntersection\",\n      \"depthPacking\",\n      \"dithering\",\n    ];\n\n    function allocateBones(object) {\n      var skeleton = object.skeleton;\n      var bones = skeleton.bones;\n\n      if (capabilities.floatVertexTextures) {\n        return 1024;\n      } else {\n        // default for when object is not specified\n        // ( for example when prebuilding shader to be used with multiple objects )\n        //\n        //  - leave some extra space for other uniforms\n        //  - limit here is ANGLE's 254 max uniform vectors\n        //    (up to 54 should be safe)\n\n        var nVertexUniforms = capabilities.maxVertexUniforms;\n        var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\n        var maxBones = Math.min(nVertexMatrices, bones.length);\n\n        if (maxBones < bones.length) {\n          console.warn(\n            \"THREE.WebGLRenderer: Skeleton has \" +\n              bones.length +\n              \" bones. This GPU supports \" +\n              maxBones +\n              \".\"\n          );\n          return 0;\n        }\n\n        return maxBones;\n      }\n    }\n\n    function getTextureEncodingFromMap(map, gammaOverrideLinear) {\n      var encoding;\n\n      if (!map) {\n        encoding = LinearEncoding;\n      } else if (map.isTexture) {\n        encoding = map.encoding;\n      } else if (map.isWebGLRenderTarget) {\n        console.warn(\n          \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\"\n        );\n        encoding = map.texture.encoding;\n      }\n\n      // add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n      if (encoding === LinearEncoding && gammaOverrideLinear) {\n        encoding = GammaEncoding;\n      }\n\n      return encoding;\n    }\n\n    this.getParameters = function (\n      material,\n      lights,\n      shadows,\n      fog,\n      nClipPlanes,\n      nClipIntersection,\n      object\n    ) {\n      var shaderID = shaderIDs[material.type];\n\n      // heuristics to create shader parameters according to lights in the scene\n      // (not to blow over maxLights budget)\n\n      var maxBones = object.isSkinnedMesh ? allocateBones(object) : 0;\n      var precision = capabilities.precision;\n\n      if (material.precision !== null) {\n        precision = capabilities.getMaxPrecision(material.precision);\n\n        if (precision !== material.precision) {\n          console.warn(\n            \"THREE.WebGLProgram.getParameters:\",\n            material.precision,\n            \"not supported, using\",\n            precision,\n            \"instead.\"\n          );\n        }\n      }\n\n      var currentRenderTarget = renderer.getRenderTarget();\n\n      var parameters = {\n        shaderID: shaderID,\n\n        precision: precision,\n        supportsVertexTextures: capabilities.vertexTextures,\n        outputEncoding: getTextureEncodingFromMap(\n          !currentRenderTarget ? null : currentRenderTarget.texture,\n          renderer.gammaOutput\n        ),\n        map: !!material.map,\n        mapEncoding: getTextureEncodingFromMap(\n          material.map,\n          renderer.gammaInput\n        ),\n        envMap: !!material.envMap,\n        envMapMode: material.envMap && material.envMap.mapping,\n        envMapEncoding: getTextureEncodingFromMap(\n          material.envMap,\n          renderer.gammaInput\n        ),\n        envMapCubeUV:\n          !!material.envMap &&\n          (material.envMap.mapping === CubeUVReflectionMapping ||\n            material.envMap.mapping === CubeUVRefractionMapping),\n        lightMap: !!material.lightMap,\n        aoMap: !!material.aoMap,\n        emissiveMap: !!material.emissiveMap,\n        emissiveMapEncoding: getTextureEncodingFromMap(\n          material.emissiveMap,\n          renderer.gammaInput\n        ),\n        bumpMap: !!material.bumpMap,\n        normalMap: !!material.normalMap,\n        objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n        displacementMap: !!material.displacementMap,\n        roughnessMap: !!material.roughnessMap,\n        metalnessMap: !!material.metalnessMap,\n        specularMap: !!material.specularMap,\n        alphaMap: !!material.alphaMap,\n\n        gradientMap: !!material.gradientMap,\n\n        combine: material.combine,\n\n        vertexColors: material.vertexColors,\n\n        fog: !!fog,\n        useFog: material.fog,\n        fogExp: fog && fog.isFogExp2,\n\n        flatShading: material.flatShading,\n\n        sizeAttenuation: material.sizeAttenuation,\n        logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n\n        skinning: material.skinning && maxBones > 0,\n        maxBones: maxBones,\n        useVertexTexture: capabilities.floatVertexTextures,\n\n        morphTargets: material.morphTargets,\n        morphNormals: material.morphNormals,\n        maxMorphTargets: renderer.maxMorphTargets,\n        maxMorphNormals: renderer.maxMorphNormals,\n\n        numDirLights: lights.directional.length,\n        numPointLights: lights.point.length,\n        numSpotLights: lights.spot.length,\n        numRectAreaLights: lights.rectArea.length,\n        numHemiLights: lights.hemi.length,\n\n        numClippingPlanes: nClipPlanes,\n        numClipIntersection: nClipIntersection,\n\n        dithering: material.dithering,\n\n        shadowMapEnabled:\n          renderer.shadowMap.enabled &&\n          object.receiveShadow &&\n          shadows.length > 0,\n        shadowMapType: renderer.shadowMap.type,\n\n        toneMapping: renderer.toneMapping,\n        physicallyCorrectLights: renderer.physicallyCorrectLights,\n\n        premultipliedAlpha: material.premultipliedAlpha,\n\n        alphaTest: material.alphaTest,\n        doubleSided: material.side === DoubleSide,\n        flipSided: material.side === BackSide,\n\n        depthPacking:\n          material.depthPacking !== undefined ? material.depthPacking : false,\n      };\n\n      return parameters;\n    };\n\n    this.getProgramCode = function (material, parameters) {\n      var array = [];\n\n      if (parameters.shaderID) {\n        array.push(parameters.shaderID);\n      } else {\n        array.push(material.fragmentShader);\n        array.push(material.vertexShader);\n      }\n\n      if (material.defines !== undefined) {\n        for (var name in material.defines) {\n          array.push(name);\n          array.push(material.defines[name]);\n        }\n      }\n\n      for (var i = 0; i < parameterNames.length; i++) {\n        array.push(parameters[parameterNames[i]]);\n      }\n\n      array.push(material.onBeforeCompile.toString());\n\n      array.push(renderer.gammaOutput);\n\n      return array.join();\n    };\n\n    this.acquireProgram = function (material, shader, parameters, code) {\n      var program;\n\n      // Check if code has been already compiled\n      for (var p = 0, pl = programs.length; p < pl; p++) {\n        var programInfo = programs[p];\n\n        if (programInfo.code === code) {\n          program = programInfo;\n          ++program.usedTimes;\n\n          break;\n        }\n      }\n\n      if (program === undefined) {\n        program = new WebGLProgram(\n          renderer,\n          extensions,\n          code,\n          material,\n          shader,\n          parameters,\n          capabilities\n        );\n        programs.push(program);\n      }\n\n      return program;\n    };\n\n    this.releaseProgram = function (program) {\n      if (--program.usedTimes === 0) {\n        // Remove from unordered set\n        var i = programs.indexOf(program);\n        programs[i] = programs[programs.length - 1];\n        programs.pop();\n\n        // Free WebGL resources\n        program.destroy();\n      }\n    };\n\n    // Exposed for resource monitoring & error feedback via renderer.info:\n    this.programs = programs;\n  }\n\n  /**\n   * @author fordacious / fordacious.github.io\n   */\n\n  function WebGLProperties() {\n    var properties = new WeakMap();\n\n    function get(object) {\n      var map = properties.get(object);\n\n      if (map === undefined) {\n        map = {};\n        properties.set(object, map);\n      }\n\n      return map;\n    }\n\n    function remove(object) {\n      properties.delete(object);\n    }\n\n    function update(object, key, value) {\n      properties.get(object)[key] = value;\n    }\n\n    function dispose() {\n      properties = new WeakMap();\n    }\n\n    return {\n      get: get,\n      remove: remove,\n      update: update,\n      dispose: dispose,\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function painterSortStable(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.program && b.program && a.program !== b.program) {\n      return a.program.id - b.program.id;\n    } else if (a.material.id !== b.material.id) {\n      return a.material.id - b.material.id;\n    } else if (a.z !== b.z) {\n      return a.z - b.z;\n    } else {\n      return a.id - b.id;\n    }\n  }\n\n  function reversePainterSortStable(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    }\n    if (a.z !== b.z) {\n      return b.z - a.z;\n    } else {\n      return a.id - b.id;\n    }\n  }\n\n  function WebGLRenderList() {\n    var renderItems = [];\n    var renderItemsIndex = 0;\n\n    var opaque = [];\n    var transparent = [];\n\n    function init() {\n      renderItemsIndex = 0;\n\n      opaque.length = 0;\n      transparent.length = 0;\n    }\n\n    function push(object, geometry, material, z, group) {\n      var renderItem = renderItems[renderItemsIndex];\n\n      if (renderItem === undefined) {\n        renderItem = {\n          id: object.id,\n          object: object,\n          geometry: geometry,\n          material: material,\n          program: material.program,\n          renderOrder: object.renderOrder,\n          z: z,\n          group: group,\n        };\n\n        renderItems[renderItemsIndex] = renderItem;\n      } else {\n        renderItem.id = object.id;\n        renderItem.object = object;\n        renderItem.geometry = geometry;\n        renderItem.material = material;\n        renderItem.program = material.program;\n        renderItem.renderOrder = object.renderOrder;\n        renderItem.z = z;\n        renderItem.group = group;\n      }\n\n      (material.transparent === true ? transparent : opaque).push(renderItem);\n\n      renderItemsIndex++;\n    }\n\n    function sort() {\n      if (opaque.length > 1) opaque.sort(painterSortStable);\n      if (transparent.length > 1) transparent.sort(reversePainterSortStable);\n    }\n\n    return {\n      opaque: opaque,\n      transparent: transparent,\n\n      init: init,\n      push: push,\n\n      sort: sort,\n    };\n  }\n\n  function WebGLRenderLists() {\n    var lists = {};\n\n    function get(scene, camera) {\n      var hash = scene.id + \",\" + camera.id;\n      var list = lists[hash];\n\n      if (list === undefined) {\n        // console.log( 'THREE.WebGLRenderLists:', hash );\n\n        list = new WebGLRenderList();\n        lists[hash] = list;\n      }\n\n      return list;\n    }\n\n    function dispose() {\n      lists = {};\n    }\n\n    return {\n      get: get,\n      dispose: dispose,\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function UniformsCache() {\n    var lights = {};\n\n    return {\n      get: function (light) {\n        if (lights[light.id] !== undefined) {\n          return lights[light.id];\n        }\n\n        var uniforms;\n\n        switch (light.type) {\n          case \"DirectionalLight\":\n            uniforms = {\n              direction: new Vector3(),\n              color: new Color(),\n\n              shadow: false,\n              shadowBias: 0,\n              shadowRadius: 1,\n              shadowMapSize: new Vector2(),\n            };\n            break;\n\n          case \"SpotLight\":\n            uniforms = {\n              position: new Vector3(),\n              direction: new Vector3(),\n              color: new Color(),\n              distance: 0,\n              coneCos: 0,\n              penumbraCos: 0,\n              decay: 0,\n\n              shadow: false,\n              shadowBias: 0,\n              shadowRadius: 1,\n              shadowMapSize: new Vector2(),\n            };\n            break;\n\n          case \"PointLight\":\n            uniforms = {\n              position: new Vector3(),\n              color: new Color(),\n              distance: 0,\n              decay: 0,\n\n              shadow: false,\n              shadowBias: 0,\n              shadowRadius: 1,\n              shadowMapSize: new Vector2(),\n              shadowCameraNear: 1,\n              shadowCameraFar: 1000,\n            };\n            break;\n\n          case \"HemisphereLight\":\n            uniforms = {\n              direction: new Vector3(),\n              skyColor: new Color(),\n              groundColor: new Color(),\n            };\n            break;\n\n          case \"RectAreaLight\":\n            uniforms = {\n              color: new Color(),\n              position: new Vector3(),\n              halfWidth: new Vector3(),\n              halfHeight: new Vector3(),\n              // TODO (abelnation): set RectAreaLight shadow uniforms\n            };\n            break;\n        }\n\n        lights[light.id] = uniforms;\n\n        return uniforms;\n      },\n    };\n  }\n\n  var count = 0;\n\n  function WebGLLights() {\n    var cache = new UniformsCache();\n\n    var state = {\n      id: count++,\n\n      hash: {\n        stateID: -1,\n        directionalLength: -1,\n        pointLength: -1,\n        spotLength: -1,\n        rectAreaLength: -1,\n        hemiLength: -1,\n        shadowsLength: -1,\n      },\n\n      ambient: [0, 0, 0],\n      directional: [],\n      directionalShadowMap: [],\n      directionalShadowMatrix: [],\n      spot: [],\n      spotShadowMap: [],\n      spotShadowMatrix: [],\n      rectArea: [],\n      point: [],\n      pointShadowMap: [],\n      pointShadowMatrix: [],\n      hemi: [],\n    };\n\n    var vector3 = new Vector3();\n    var matrix4 = new Matrix4();\n    var matrix42 = new Matrix4();\n\n    function setup(lights, shadows, camera) {\n      var r = 0,\n        g = 0,\n        b = 0;\n\n      var directionalLength = 0;\n      var pointLength = 0;\n      var spotLength = 0;\n      var rectAreaLength = 0;\n      var hemiLength = 0;\n\n      var viewMatrix = camera.matrixWorldInverse;\n\n      for (var i = 0, l = lights.length; i < l; i++) {\n        var light = lights[i];\n\n        var color = light.color;\n        var intensity = light.intensity;\n        var distance = light.distance;\n\n        var shadowMap =\n          light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n        if (light.isAmbientLight) {\n          r += color.r * intensity;\n          g += color.g * intensity;\n          b += color.b * intensity;\n        } else if (light.isDirectionalLight) {\n          var uniforms = cache.get(light);\n\n          uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n          vector3.setFromMatrixPosition(light.target.matrixWorld);\n          uniforms.direction.sub(vector3);\n          uniforms.direction.transformDirection(viewMatrix);\n\n          uniforms.shadow = light.castShadow;\n\n          if (light.castShadow) {\n            var shadow = light.shadow;\n\n            uniforms.shadowBias = shadow.bias;\n            uniforms.shadowRadius = shadow.radius;\n            uniforms.shadowMapSize = shadow.mapSize;\n          }\n\n          state.directionalShadowMap[directionalLength] = shadowMap;\n          state.directionalShadowMatrix[directionalLength] =\n            light.shadow.matrix;\n          state.directional[directionalLength] = uniforms;\n\n          directionalLength++;\n        } else if (light.isSpotLight) {\n          var uniforms = cache.get(light);\n\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\n          uniforms.position.applyMatrix4(viewMatrix);\n\n          uniforms.color.copy(color).multiplyScalar(intensity);\n          uniforms.distance = distance;\n\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n          vector3.setFromMatrixPosition(light.target.matrixWorld);\n          uniforms.direction.sub(vector3);\n          uniforms.direction.transformDirection(viewMatrix);\n\n          uniforms.coneCos = Math.cos(light.angle);\n          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n          uniforms.decay = light.distance === 0 ? 0.0 : light.decay;\n\n          uniforms.shadow = light.castShadow;\n\n          if (light.castShadow) {\n            var shadow = light.shadow;\n\n            uniforms.shadowBias = shadow.bias;\n            uniforms.shadowRadius = shadow.radius;\n            uniforms.shadowMapSize = shadow.mapSize;\n          }\n\n          state.spotShadowMap[spotLength] = shadowMap;\n          state.spotShadowMatrix[spotLength] = light.shadow.matrix;\n          state.spot[spotLength] = uniforms;\n\n          spotLength++;\n        } else if (light.isRectAreaLight) {\n          var uniforms = cache.get(light);\n\n          // (a) intensity is the total visible light emitted\n          //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n          // (b) intensity is the brightness of the light\n          uniforms.color.copy(color).multiplyScalar(intensity);\n\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\n          uniforms.position.applyMatrix4(viewMatrix);\n\n          // extract local rotation of light to derive width/height half vectors\n          matrix42.identity();\n          matrix4.copy(light.matrixWorld);\n          matrix4.premultiply(viewMatrix);\n          matrix42.extractRotation(matrix4);\n\n          uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n          uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n          uniforms.halfWidth.applyMatrix4(matrix42);\n          uniforms.halfHeight.applyMatrix4(matrix42);\n\n          // TODO (abelnation): RectAreaLight distance?\n          // uniforms.distance = distance;\n\n          state.rectArea[rectAreaLength] = uniforms;\n\n          rectAreaLength++;\n        } else if (light.isPointLight) {\n          var uniforms = cache.get(light);\n\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\n          uniforms.position.applyMatrix4(viewMatrix);\n\n          uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n          uniforms.distance = light.distance;\n          uniforms.decay = light.distance === 0 ? 0.0 : light.decay;\n\n          uniforms.shadow = light.castShadow;\n\n          if (light.castShadow) {\n            var shadow = light.shadow;\n\n            uniforms.shadowBias = shadow.bias;\n            uniforms.shadowRadius = shadow.radius;\n            uniforms.shadowMapSize = shadow.mapSize;\n            uniforms.shadowCameraNear = shadow.camera.near;\n            uniforms.shadowCameraFar = shadow.camera.far;\n          }\n\n          state.pointShadowMap[pointLength] = shadowMap;\n          state.pointShadowMatrix[pointLength] = light.shadow.matrix;\n          state.point[pointLength] = uniforms;\n\n          pointLength++;\n        } else if (light.isHemisphereLight) {\n          var uniforms = cache.get(light);\n\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n          uniforms.direction.transformDirection(viewMatrix);\n          uniforms.direction.normalize();\n\n          uniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n          uniforms.groundColor\n            .copy(light.groundColor)\n            .multiplyScalar(intensity);\n\n          state.hemi[hemiLength] = uniforms;\n\n          hemiLength++;\n        }\n      }\n\n      state.ambient[0] = r;\n      state.ambient[1] = g;\n      state.ambient[2] = b;\n\n      state.directional.length = directionalLength;\n      state.spot.length = spotLength;\n      state.rectArea.length = rectAreaLength;\n      state.point.length = pointLength;\n      state.hemi.length = hemiLength;\n\n      state.hash.stateID = state.id;\n      state.hash.directionalLength = directionalLength;\n      state.hash.pointLength = pointLength;\n      state.hash.spotLength = spotLength;\n      state.hash.rectAreaLength = rectAreaLength;\n      state.hash.hemiLength = hemiLength;\n      state.hash.shadowsLength = shadows.length;\n    }\n\n    return {\n      setup: setup,\n      state: state,\n    };\n  }\n\n  /**\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  function WebGLRenderState() {\n    var lights = new WebGLLights();\n\n    var lightsArray = [];\n    var shadowsArray = [];\n\n    function init() {\n      lightsArray.length = 0;\n      shadowsArray.length = 0;\n    }\n\n    function pushLight(light) {\n      lightsArray.push(light);\n    }\n\n    function pushShadow(shadowLight) {\n      shadowsArray.push(shadowLight);\n    }\n\n    function setupLights(camera) {\n      lights.setup(lightsArray, shadowsArray, camera);\n    }\n\n    var state = {\n      lightsArray: lightsArray,\n      shadowsArray: shadowsArray,\n\n      lights: lights,\n    };\n\n    return {\n      init: init,\n      state: state,\n      setupLights: setupLights,\n\n      pushLight: pushLight,\n      pushShadow: pushShadow,\n    };\n  }\n\n  function WebGLRenderStates() {\n    var renderStates = {};\n\n    function get(scene, camera) {\n      var renderState;\n\n      if (renderStates[scene.id] === undefined) {\n        renderState = new WebGLRenderState();\n        renderStates[scene.id] = {};\n        renderStates[scene.id][camera.id] = renderState;\n      } else {\n        if (renderStates[scene.id][camera.id] === undefined) {\n          renderState = new WebGLRenderState();\n          renderStates[scene.id][camera.id] = renderState;\n        } else {\n          renderState = renderStates[scene.id][camera.id];\n        }\n      }\n\n      return renderState;\n    }\n\n    function dispose() {\n      renderStates = {};\n    }\n\n    return {\n      get: get,\n      dispose: dispose,\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author bhouston / https://clara.io\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * parameters = {\n   *\n   *  opacity: <float>,\n   *\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  displacementMap: new THREE.Texture( <Image> ),\n   *  displacementScale: <float>,\n   *  displacementBias: <float>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>\n   * }\n   */\n\n  function MeshDepthMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"MeshDepthMaterial\";\n\n    this.depthPacking = BasicDepthPacking;\n\n    this.skinning = false;\n    this.morphTargets = false;\n\n    this.map = null;\n\n    this.alphaMap = null;\n\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n\n    this.fog = false;\n    this.lights = false;\n\n    this.setValues(parameters);\n  }\n\n  MeshDepthMaterial.prototype = Object.create(Material.prototype);\n  MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\n\n  MeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n  MeshDepthMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.depthPacking = source.depthPacking;\n\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n\n    this.map = source.map;\n\n    this.alphaMap = source.alphaMap;\n\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n\n    return this;\n  };\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * parameters = {\n   *\n   *  referencePosition: <float>,\n   *  nearDistance: <float>,\n   *  farDistance: <float>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>,\n   *\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  displacementMap: new THREE.Texture( <Image> ),\n   *  displacementScale: <float>,\n   *  displacementBias: <float>\n   *\n   * }\n   */\n\n  function MeshDistanceMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"MeshDistanceMaterial\";\n\n    this.referencePosition = new Vector3();\n    this.nearDistance = 1;\n    this.farDistance = 1000;\n\n    this.skinning = false;\n    this.morphTargets = false;\n\n    this.map = null;\n\n    this.alphaMap = null;\n\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n\n    this.fog = false;\n    this.lights = false;\n\n    this.setValues(parameters);\n  }\n\n  MeshDistanceMaterial.prototype = Object.create(Material.prototype);\n  MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\n\n  MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n  MeshDistanceMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.referencePosition.copy(source.referencePosition);\n    this.nearDistance = source.nearDistance;\n    this.farDistance = source.farDistance;\n\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n\n    this.map = source.map;\n\n    this.alphaMap = source.alphaMap;\n\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n\n    return this;\n  };\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLShadowMap(_renderer, _objects, maxTextureSize) {\n    var _frustum = new Frustum(),\n      _projScreenMatrix = new Matrix4(),\n      _shadowMapSize = new Vector2(),\n      _maxShadowMapSize = new Vector2(maxTextureSize, maxTextureSize),\n      _lookTarget = new Vector3(),\n      _lightPositionWorld = new Vector3(),\n      _MorphingFlag = 1,\n      _SkinningFlag = 2,\n      _NumberOfMaterialVariants = (_MorphingFlag | _SkinningFlag) + 1,\n      _depthMaterials = new Array(_NumberOfMaterialVariants),\n      _distanceMaterials = new Array(_NumberOfMaterialVariants),\n      _materialCache = {};\n\n    var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n    var cubeDirections = [\n      new Vector3(1, 0, 0),\n      new Vector3(-1, 0, 0),\n      new Vector3(0, 0, 1),\n      new Vector3(0, 0, -1),\n      new Vector3(0, 1, 0),\n      new Vector3(0, -1, 0),\n    ];\n\n    var cubeUps = [\n      new Vector3(0, 1, 0),\n      new Vector3(0, 1, 0),\n      new Vector3(0, 1, 0),\n      new Vector3(0, 1, 0),\n      new Vector3(0, 0, 1),\n      new Vector3(0, 0, -1),\n    ];\n\n    var cube2DViewPorts = [\n      new Vector4(),\n      new Vector4(),\n      new Vector4(),\n      new Vector4(),\n      new Vector4(),\n      new Vector4(),\n    ];\n\n    // init\n\n    for (var i = 0; i !== _NumberOfMaterialVariants; ++i) {\n      var useMorphing = (i & _MorphingFlag) !== 0;\n      var useSkinning = (i & _SkinningFlag) !== 0;\n\n      var depthMaterial = new MeshDepthMaterial({\n        depthPacking: RGBADepthPacking,\n\n        morphTargets: useMorphing,\n        skinning: useSkinning,\n      });\n\n      _depthMaterials[i] = depthMaterial;\n\n      //\n\n      var distanceMaterial = new MeshDistanceMaterial({\n        morphTargets: useMorphing,\n        skinning: useSkinning,\n      });\n\n      _distanceMaterials[i] = distanceMaterial;\n    }\n\n    //\n\n    var scope = this;\n\n    this.enabled = false;\n\n    this.autoUpdate = true;\n    this.needsUpdate = false;\n\n    this.type = PCFShadowMap;\n\n    this.render = function (lights, scene, camera) {\n      if (scope.enabled === false) return;\n      if (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\n      if (lights.length === 0) return;\n\n      // TODO Clean up (needed in case of contextlost)\n      var _gl = _renderer.context;\n      var _state = _renderer.state;\n\n      // Set GL state for depth map.\n      _state.disable(_gl.BLEND);\n      _state.buffers.color.setClear(1, 1, 1, 1);\n      _state.buffers.depth.setTest(true);\n      _state.setScissorTest(false);\n\n      // render depth map\n\n      var faceCount;\n\n      for (var i = 0, il = lights.length; i < il; i++) {\n        var light = lights[i];\n        var shadow = light.shadow;\n        var isPointLight = light && light.isPointLight;\n\n        if (shadow === undefined) {\n          console.warn(\"THREE.WebGLShadowMap:\", light, \"has no shadow.\");\n          continue;\n        }\n\n        var shadowCamera = shadow.camera;\n\n        _shadowMapSize.copy(shadow.mapSize);\n        _shadowMapSize.min(_maxShadowMapSize);\n\n        if (isPointLight) {\n          var vpWidth = _shadowMapSize.x;\n          var vpHeight = _shadowMapSize.y;\n\n          // These viewports map a cube-map onto a 2D texture with the\n          // following orientation:\n          //\n          //  xzXZ\n          //   y Y\n          //\n          // X - Positive x direction\n          // x - Negative x direction\n          // Y - Positive y direction\n          // y - Negative y direction\n          // Z - Positive z direction\n          // z - Negative z direction\n\n          // positive X\n          cube2DViewPorts[0].set(vpWidth * 2, vpHeight, vpWidth, vpHeight);\n          // negative X\n          cube2DViewPorts[1].set(0, vpHeight, vpWidth, vpHeight);\n          // positive Z\n          cube2DViewPorts[2].set(vpWidth * 3, vpHeight, vpWidth, vpHeight);\n          // negative Z\n          cube2DViewPorts[3].set(vpWidth, vpHeight, vpWidth, vpHeight);\n          // positive Y\n          cube2DViewPorts[4].set(vpWidth * 3, 0, vpWidth, vpHeight);\n          // negative Y\n          cube2DViewPorts[5].set(vpWidth, 0, vpWidth, vpHeight);\n\n          _shadowMapSize.x *= 4.0;\n          _shadowMapSize.y *= 2.0;\n        }\n\n        if (shadow.map === null) {\n          var pars = {\n            minFilter: NearestFilter,\n            magFilter: NearestFilter,\n            format: RGBAFormat,\n          };\n\n          shadow.map = new WebGLRenderTarget(\n            _shadowMapSize.x,\n            _shadowMapSize.y,\n            pars\n          );\n          shadow.map.texture.name = light.name + \".shadowMap\";\n\n          shadowCamera.updateProjectionMatrix();\n        }\n\n        if (shadow.isSpotLightShadow) {\n          shadow.update(light);\n        }\n\n        var shadowMap = shadow.map;\n        var shadowMatrix = shadow.matrix;\n\n        _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n        shadowCamera.position.copy(_lightPositionWorld);\n\n        if (isPointLight) {\n          faceCount = 6;\n\n          // for point lights we set the shadow matrix to be a translation-only matrix\n          // equal to inverse of the light's position\n\n          shadowMatrix.makeTranslation(\n            -_lightPositionWorld.x,\n            -_lightPositionWorld.y,\n            -_lightPositionWorld.z\n          );\n        } else {\n          faceCount = 1;\n\n          _lookTarget.setFromMatrixPosition(light.target.matrixWorld);\n          shadowCamera.lookAt(_lookTarget);\n          shadowCamera.updateMatrixWorld();\n\n          // compute shadow matrix\n\n          shadowMatrix.set(\n            0.5,\n            0.0,\n            0.0,\n            0.5,\n            0.0,\n            0.5,\n            0.0,\n            0.5,\n            0.0,\n            0.0,\n            0.5,\n            0.5,\n            0.0,\n            0.0,\n            0.0,\n            1.0\n          );\n\n          shadowMatrix.multiply(shadowCamera.projectionMatrix);\n          shadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n        }\n\n        _renderer.setRenderTarget(shadowMap);\n        _renderer.clear();\n\n        // render shadow map for each cube face (if omni-directional) or\n        // run a single pass if not\n\n        for (var face = 0; face < faceCount; face++) {\n          if (isPointLight) {\n            _lookTarget.copy(shadowCamera.position);\n            _lookTarget.add(cubeDirections[face]);\n            shadowCamera.up.copy(cubeUps[face]);\n            shadowCamera.lookAt(_lookTarget);\n            shadowCamera.updateMatrixWorld();\n\n            var vpDimensions = cube2DViewPorts[face];\n            _state.viewport(vpDimensions);\n          }\n\n          // update camera matrices and frustum\n\n          _projScreenMatrix.multiplyMatrices(\n            shadowCamera.projectionMatrix,\n            shadowCamera.matrixWorldInverse\n          );\n          _frustum.setFromMatrix(_projScreenMatrix);\n\n          // set object matrices & frustum culling\n\n          renderObject(scene, camera, shadowCamera, isPointLight);\n        }\n      }\n\n      scope.needsUpdate = false;\n    };\n\n    function getDepthMaterial(\n      object,\n      material,\n      isPointLight,\n      lightPositionWorld,\n      shadowCameraNear,\n      shadowCameraFar\n    ) {\n      var geometry = object.geometry;\n\n      var result = null;\n\n      var materialVariants = _depthMaterials;\n      var customMaterial = object.customDepthMaterial;\n\n      if (isPointLight) {\n        materialVariants = _distanceMaterials;\n        customMaterial = object.customDistanceMaterial;\n      }\n\n      if (!customMaterial) {\n        var useMorphing = false;\n\n        if (material.morphTargets) {\n          if (geometry && geometry.isBufferGeometry) {\n            useMorphing =\n              geometry.morphAttributes &&\n              geometry.morphAttributes.position &&\n              geometry.morphAttributes.position.length > 0;\n          } else if (geometry && geometry.isGeometry) {\n            useMorphing =\n              geometry.morphTargets && geometry.morphTargets.length > 0;\n          }\n        }\n\n        if (object.isSkinnedMesh && material.skinning === false) {\n          console.warn(\n            \"THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:\",\n            object\n          );\n        }\n\n        var useSkinning = object.isSkinnedMesh && material.skinning;\n\n        var variantIndex = 0;\n\n        if (useMorphing) variantIndex |= _MorphingFlag;\n        if (useSkinning) variantIndex |= _SkinningFlag;\n\n        result = materialVariants[variantIndex];\n      } else {\n        result = customMaterial;\n      }\n\n      if (\n        _renderer.localClippingEnabled &&\n        material.clipShadows === true &&\n        material.clippingPlanes.length !== 0\n      ) {\n        // in this case we need a unique material instance reflecting the\n        // appropriate state\n\n        var keyA = result.uuid,\n          keyB = material.uuid;\n\n        var materialsForVariant = _materialCache[keyA];\n\n        if (materialsForVariant === undefined) {\n          materialsForVariant = {};\n          _materialCache[keyA] = materialsForVariant;\n        }\n\n        var cachedMaterial = materialsForVariant[keyB];\n\n        if (cachedMaterial === undefined) {\n          cachedMaterial = result.clone();\n          materialsForVariant[keyB] = cachedMaterial;\n        }\n\n        result = cachedMaterial;\n      }\n\n      result.visible = material.visible;\n      result.wireframe = material.wireframe;\n\n      result.side =\n        material.shadowSide != null\n          ? material.shadowSide\n          : shadowSide[material.side];\n\n      result.clipShadows = material.clipShadows;\n      result.clippingPlanes = material.clippingPlanes;\n      result.clipIntersection = material.clipIntersection;\n\n      result.wireframeLinewidth = material.wireframeLinewidth;\n      result.linewidth = material.linewidth;\n\n      if (isPointLight && result.isMeshDistanceMaterial) {\n        result.referencePosition.copy(lightPositionWorld);\n        result.nearDistance = shadowCameraNear;\n        result.farDistance = shadowCameraFar;\n      }\n\n      return result;\n    }\n\n    function renderObject(object, camera, shadowCamera, isPointLight) {\n      if (object.visible === false) return;\n\n      var visible = object.layers.test(camera.layers);\n\n      if (visible && (object.isMesh || object.isLine || object.isPoints)) {\n        if (\n          object.castShadow &&\n          (!object.frustumCulled || _frustum.intersectsObject(object))\n        ) {\n          object.modelViewMatrix.multiplyMatrices(\n            shadowCamera.matrixWorldInverse,\n            object.matrixWorld\n          );\n\n          var geometry = _objects.update(object);\n          var material = object.material;\n\n          if (Array.isArray(material)) {\n            var groups = geometry.groups;\n\n            for (var k = 0, kl = groups.length; k < kl; k++) {\n              var group = groups[k];\n              var groupMaterial = material[group.materialIndex];\n\n              if (groupMaterial && groupMaterial.visible) {\n                var depthMaterial = getDepthMaterial(\n                  object,\n                  groupMaterial,\n                  isPointLight,\n                  _lightPositionWorld,\n                  shadowCamera.near,\n                  shadowCamera.far\n                );\n                _renderer.renderBufferDirect(\n                  shadowCamera,\n                  null,\n                  geometry,\n                  depthMaterial,\n                  object,\n                  group\n                );\n              }\n            }\n          } else if (material.visible) {\n            var depthMaterial = getDepthMaterial(\n              object,\n              material,\n              isPointLight,\n              _lightPositionWorld,\n              shadowCamera.near,\n              shadowCamera.far\n            );\n            _renderer.renderBufferDirect(\n              shadowCamera,\n              null,\n              geometry,\n              depthMaterial,\n              object,\n              null\n            );\n          }\n        }\n      }\n\n      var children = object.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        renderObject(children[i], camera, shadowCamera, isPointLight);\n      }\n    }\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLState(gl, extensions, utils, capabilities) {\n    function ColorBuffer() {\n      var locked = false;\n\n      var color = new Vector4();\n      var currentColorMask = null;\n      var currentColorClear = new Vector4(0, 0, 0, 0);\n\n      return {\n        setMask: function (colorMask) {\n          if (currentColorMask !== colorMask && !locked) {\n            gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n            currentColorMask = colorMask;\n          }\n        },\n\n        setLocked: function (lock) {\n          locked = lock;\n        },\n\n        setClear: function (r, g, b, a, premultipliedAlpha) {\n          if (premultipliedAlpha === true) {\n            r *= a;\n            g *= a;\n            b *= a;\n          }\n\n          color.set(r, g, b, a);\n\n          if (currentColorClear.equals(color) === false) {\n            gl.clearColor(r, g, b, a);\n            currentColorClear.copy(color);\n          }\n        },\n\n        reset: function () {\n          locked = false;\n\n          currentColorMask = null;\n          currentColorClear.set(-1, 0, 0, 0); // set to invalid state\n        },\n      };\n    }\n\n    function DepthBuffer() {\n      var locked = false;\n\n      var currentDepthMask = null;\n      var currentDepthFunc = null;\n      var currentDepthClear = null;\n\n      return {\n        setTest: function (depthTest) {\n          if (depthTest) {\n            enable(gl.DEPTH_TEST);\n          } else {\n            disable(gl.DEPTH_TEST);\n          }\n        },\n\n        setMask: function (depthMask) {\n          if (currentDepthMask !== depthMask && !locked) {\n            gl.depthMask(depthMask);\n            currentDepthMask = depthMask;\n          }\n        },\n\n        setFunc: function (depthFunc) {\n          if (currentDepthFunc !== depthFunc) {\n            if (depthFunc) {\n              switch (depthFunc) {\n                case NeverDepth:\n                  gl.depthFunc(gl.NEVER);\n                  break;\n\n                case AlwaysDepth:\n                  gl.depthFunc(gl.ALWAYS);\n                  break;\n\n                case LessDepth:\n                  gl.depthFunc(gl.LESS);\n                  break;\n\n                case LessEqualDepth:\n                  gl.depthFunc(gl.LEQUAL);\n                  break;\n\n                case EqualDepth:\n                  gl.depthFunc(gl.EQUAL);\n                  break;\n\n                case GreaterEqualDepth:\n                  gl.depthFunc(gl.GEQUAL);\n                  break;\n\n                case GreaterDepth:\n                  gl.depthFunc(gl.GREATER);\n                  break;\n\n                case NotEqualDepth:\n                  gl.depthFunc(gl.NOTEQUAL);\n                  break;\n\n                default:\n                  gl.depthFunc(gl.LEQUAL);\n              }\n            } else {\n              gl.depthFunc(gl.LEQUAL);\n            }\n\n            currentDepthFunc = depthFunc;\n          }\n        },\n\n        setLocked: function (lock) {\n          locked = lock;\n        },\n\n        setClear: function (depth) {\n          if (currentDepthClear !== depth) {\n            gl.clearDepth(depth);\n            currentDepthClear = depth;\n          }\n        },\n\n        reset: function () {\n          locked = false;\n\n          currentDepthMask = null;\n          currentDepthFunc = null;\n          currentDepthClear = null;\n        },\n      };\n    }\n\n    function StencilBuffer() {\n      var locked = false;\n\n      var currentStencilMask = null;\n      var currentStencilFunc = null;\n      var currentStencilRef = null;\n      var currentStencilFuncMask = null;\n      var currentStencilFail = null;\n      var currentStencilZFail = null;\n      var currentStencilZPass = null;\n      var currentStencilClear = null;\n\n      return {\n        setTest: function (stencilTest) {\n          if (stencilTest) {\n            enable(gl.STENCIL_TEST);\n          } else {\n            disable(gl.STENCIL_TEST);\n          }\n        },\n\n        setMask: function (stencilMask) {\n          if (currentStencilMask !== stencilMask && !locked) {\n            gl.stencilMask(stencilMask);\n            currentStencilMask = stencilMask;\n          }\n        },\n\n        setFunc: function (stencilFunc, stencilRef, stencilMask) {\n          if (\n            currentStencilFunc !== stencilFunc ||\n            currentStencilRef !== stencilRef ||\n            currentStencilFuncMask !== stencilMask\n          ) {\n            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\n            currentStencilFunc = stencilFunc;\n            currentStencilRef = stencilRef;\n            currentStencilFuncMask = stencilMask;\n          }\n        },\n\n        setOp: function (stencilFail, stencilZFail, stencilZPass) {\n          if (\n            currentStencilFail !== stencilFail ||\n            currentStencilZFail !== stencilZFail ||\n            currentStencilZPass !== stencilZPass\n          ) {\n            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\n            currentStencilFail = stencilFail;\n            currentStencilZFail = stencilZFail;\n            currentStencilZPass = stencilZPass;\n          }\n        },\n\n        setLocked: function (lock) {\n          locked = lock;\n        },\n\n        setClear: function (stencil) {\n          if (currentStencilClear !== stencil) {\n            gl.clearStencil(stencil);\n            currentStencilClear = stencil;\n          }\n        },\n\n        reset: function () {\n          locked = false;\n\n          currentStencilMask = null;\n          currentStencilFunc = null;\n          currentStencilRef = null;\n          currentStencilFuncMask = null;\n          currentStencilFail = null;\n          currentStencilZFail = null;\n          currentStencilZPass = null;\n          currentStencilClear = null;\n        },\n      };\n    }\n\n    //\n\n    var colorBuffer = new ColorBuffer();\n    var depthBuffer = new DepthBuffer();\n    var stencilBuffer = new StencilBuffer();\n\n    var maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    var newAttributes = new Uint8Array(maxVertexAttributes);\n    var enabledAttributes = new Uint8Array(maxVertexAttributes);\n    var attributeDivisors = new Uint8Array(maxVertexAttributes);\n\n    var enabledCapabilities = {};\n\n    var compressedTextureFormats = null;\n\n    var currentProgram = null;\n\n    var currentBlending = null;\n    var currentBlendEquation = null;\n    var currentBlendSrc = null;\n    var currentBlendDst = null;\n    var currentBlendEquationAlpha = null;\n    var currentBlendSrcAlpha = null;\n    var currentBlendDstAlpha = null;\n    var currentPremultipledAlpha = false;\n\n    var currentFlipSided = null;\n    var currentCullFace = null;\n\n    var currentLineWidth = null;\n\n    var currentPolygonOffsetFactor = null;\n    var currentPolygonOffsetUnits = null;\n\n    var maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n\n    var lineWidthAvailable = false;\n    var version = 0;\n    var glVersion = gl.getParameter(gl.VERSION);\n\n    if (glVersion.indexOf(\"WebGL\") !== -1) {\n      version = parseFloat(/^WebGL\\ ([0-9])/.exec(glVersion)[1]);\n      lineWidthAvailable = version >= 1.0;\n    } else if (glVersion.indexOf(\"OpenGL ES\") !== -1) {\n      version = parseFloat(/^OpenGL\\ ES\\ ([0-9])/.exec(glVersion)[1]);\n      lineWidthAvailable = version >= 2.0;\n    }\n\n    var currentTextureSlot = null;\n    var currentBoundTextures = {};\n\n    var currentScissor = new Vector4();\n    var currentViewport = new Vector4();\n\n    function createTexture(type, target, count) {\n      var data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n      var texture = gl.createTexture();\n\n      gl.bindTexture(type, texture);\n      gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n      for (var i = 0; i < count; i++) {\n        gl.texImage2D(\n          target + i,\n          0,\n          gl.RGBA,\n          1,\n          1,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          data\n        );\n      }\n\n      return texture;\n    }\n\n    var emptyTextures = {};\n    emptyTextures[gl.TEXTURE_2D] = createTexture(\n      gl.TEXTURE_2D,\n      gl.TEXTURE_2D,\n      1\n    );\n    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(\n      gl.TEXTURE_CUBE_MAP,\n      gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n      6\n    );\n\n    // init\n\n    colorBuffer.setClear(0, 0, 0, 1);\n    depthBuffer.setClear(1);\n    stencilBuffer.setClear(0);\n\n    enable(gl.DEPTH_TEST);\n    depthBuffer.setFunc(LessEqualDepth);\n\n    setFlipSided(false);\n    setCullFace(CullFaceBack);\n    enable(gl.CULL_FACE);\n\n    enable(gl.BLEND);\n    setBlending(NormalBlending);\n\n    //\n\n    function initAttributes() {\n      for (var i = 0, l = newAttributes.length; i < l; i++) {\n        newAttributes[i] = 0;\n      }\n    }\n\n    function enableAttribute(attribute) {\n      enableAttributeAndDivisor(attribute, 0);\n    }\n\n    function enableAttributeAndDivisor(attribute, meshPerAttribute) {\n      newAttributes[attribute] = 1;\n\n      if (enabledAttributes[attribute] === 0) {\n        gl.enableVertexAttribArray(attribute);\n        enabledAttributes[attribute] = 1;\n      }\n\n      if (attributeDivisors[attribute] !== meshPerAttribute) {\n        var extension = capabilities.isWebGL2\n          ? gl\n          : extensions.get(\"ANGLE_instanced_arrays\");\n\n        extension[\n          capabilities.isWebGL2\n            ? \"vertexAttribDivisor\"\n            : \"vertexAttribDivisorANGLE\"\n        ](attribute, meshPerAttribute);\n        attributeDivisors[attribute] = meshPerAttribute;\n      }\n    }\n\n    function disableUnusedAttributes() {\n      for (var i = 0, l = enabledAttributes.length; i !== l; ++i) {\n        if (enabledAttributes[i] !== newAttributes[i]) {\n          gl.disableVertexAttribArray(i);\n          enabledAttributes[i] = 0;\n        }\n      }\n    }\n\n    function enable(id) {\n      if (enabledCapabilities[id] !== true) {\n        gl.enable(id);\n        enabledCapabilities[id] = true;\n      }\n    }\n\n    function disable(id) {\n      if (enabledCapabilities[id] !== false) {\n        gl.disable(id);\n        enabledCapabilities[id] = false;\n      }\n    }\n\n    function getCompressedTextureFormats() {\n      if (compressedTextureFormats === null) {\n        compressedTextureFormats = [];\n\n        if (\n          extensions.get(\"WEBGL_compressed_texture_pvrtc\") ||\n          extensions.get(\"WEBGL_compressed_texture_s3tc\") ||\n          extensions.get(\"WEBGL_compressed_texture_etc1\") ||\n          extensions.get(\"WEBGL_compressed_texture_astc\")\n        ) {\n          var formats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);\n\n          for (var i = 0; i < formats.length; i++) {\n            compressedTextureFormats.push(formats[i]);\n          }\n        }\n      }\n\n      return compressedTextureFormats;\n    }\n\n    function useProgram(program) {\n      if (currentProgram !== program) {\n        gl.useProgram(program);\n\n        currentProgram = program;\n\n        return true;\n      }\n\n      return false;\n    }\n\n    function setBlending(\n      blending,\n      blendEquation,\n      blendSrc,\n      blendDst,\n      blendEquationAlpha,\n      blendSrcAlpha,\n      blendDstAlpha,\n      premultipliedAlpha\n    ) {\n      if (blending !== NoBlending) {\n        enable(gl.BLEND);\n      } else {\n        disable(gl.BLEND);\n      }\n\n      if (blending !== CustomBlending) {\n        if (\n          blending !== currentBlending ||\n          premultipliedAlpha !== currentPremultipledAlpha\n        ) {\n          switch (blending) {\n            case AdditiveBlending:\n              if (premultipliedAlpha) {\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n              } else {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n              }\n              break;\n\n            case SubtractiveBlending:\n              if (premultipliedAlpha) {\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(\n                  gl.ZERO,\n                  gl.ZERO,\n                  gl.ONE_MINUS_SRC_COLOR,\n                  gl.ONE_MINUS_SRC_ALPHA\n                );\n              } else {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n              }\n              break;\n\n            case MultiplyBlending:\n              if (premultipliedAlpha) {\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(\n                  gl.ZERO,\n                  gl.SRC_COLOR,\n                  gl.ZERO,\n                  gl.SRC_ALPHA\n                );\n              } else {\n                gl.blendEquation(gl.FUNC_ADD);\n                gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n              }\n              break;\n\n            default:\n              if (premultipliedAlpha) {\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(\n                  gl.ONE,\n                  gl.ONE_MINUS_SRC_ALPHA,\n                  gl.ONE,\n                  gl.ONE_MINUS_SRC_ALPHA\n                );\n              } else {\n                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n                gl.blendFuncSeparate(\n                  gl.SRC_ALPHA,\n                  gl.ONE_MINUS_SRC_ALPHA,\n                  gl.ONE,\n                  gl.ONE_MINUS_SRC_ALPHA\n                );\n              }\n          }\n        }\n\n        currentBlendEquation = null;\n        currentBlendSrc = null;\n        currentBlendDst = null;\n        currentBlendEquationAlpha = null;\n        currentBlendSrcAlpha = null;\n        currentBlendDstAlpha = null;\n      } else {\n        blendEquationAlpha = blendEquationAlpha || blendEquation;\n        blendSrcAlpha = blendSrcAlpha || blendSrc;\n        blendDstAlpha = blendDstAlpha || blendDst;\n\n        if (\n          blendEquation !== currentBlendEquation ||\n          blendEquationAlpha !== currentBlendEquationAlpha\n        ) {\n          gl.blendEquationSeparate(\n            utils.convert(blendEquation),\n            utils.convert(blendEquationAlpha)\n          );\n\n          currentBlendEquation = blendEquation;\n          currentBlendEquationAlpha = blendEquationAlpha;\n        }\n\n        if (\n          blendSrc !== currentBlendSrc ||\n          blendDst !== currentBlendDst ||\n          blendSrcAlpha !== currentBlendSrcAlpha ||\n          blendDstAlpha !== currentBlendDstAlpha\n        ) {\n          gl.blendFuncSeparate(\n            utils.convert(blendSrc),\n            utils.convert(blendDst),\n            utils.convert(blendSrcAlpha),\n            utils.convert(blendDstAlpha)\n          );\n\n          currentBlendSrc = blendSrc;\n          currentBlendDst = blendDst;\n          currentBlendSrcAlpha = blendSrcAlpha;\n          currentBlendDstAlpha = blendDstAlpha;\n        }\n      }\n\n      currentBlending = blending;\n      currentPremultipledAlpha = premultipliedAlpha;\n    }\n\n    function setMaterial(material, frontFaceCW) {\n      material.side === DoubleSide\n        ? disable(gl.CULL_FACE)\n        : enable(gl.CULL_FACE);\n\n      var flipSided = material.side === BackSide;\n      if (frontFaceCW) flipSided = !flipSided;\n\n      setFlipSided(flipSided);\n\n      material.blending === NormalBlending && material.transparent === false\n        ? setBlending(NoBlending)\n        : setBlending(\n            material.blending,\n            material.blendEquation,\n            material.blendSrc,\n            material.blendDst,\n            material.blendEquationAlpha,\n            material.blendSrcAlpha,\n            material.blendDstAlpha,\n            material.premultipliedAlpha\n          );\n\n      depthBuffer.setFunc(material.depthFunc);\n      depthBuffer.setTest(material.depthTest);\n      depthBuffer.setMask(material.depthWrite);\n      colorBuffer.setMask(material.colorWrite);\n\n      setPolygonOffset(\n        material.polygonOffset,\n        material.polygonOffsetFactor,\n        material.polygonOffsetUnits\n      );\n    }\n\n    //\n\n    function setFlipSided(flipSided) {\n      if (currentFlipSided !== flipSided) {\n        if (flipSided) {\n          gl.frontFace(gl.CW);\n        } else {\n          gl.frontFace(gl.CCW);\n        }\n\n        currentFlipSided = flipSided;\n      }\n    }\n\n    function setCullFace(cullFace) {\n      if (cullFace !== CullFaceNone) {\n        enable(gl.CULL_FACE);\n\n        if (cullFace !== currentCullFace) {\n          if (cullFace === CullFaceBack) {\n            gl.cullFace(gl.BACK);\n          } else if (cullFace === CullFaceFront) {\n            gl.cullFace(gl.FRONT);\n          } else {\n            gl.cullFace(gl.FRONT_AND_BACK);\n          }\n        }\n      } else {\n        disable(gl.CULL_FACE);\n      }\n\n      currentCullFace = cullFace;\n    }\n\n    function setLineWidth(width) {\n      if (width !== currentLineWidth) {\n        if (lineWidthAvailable) gl.lineWidth(width);\n\n        currentLineWidth = width;\n      }\n    }\n\n    function setPolygonOffset(polygonOffset, factor, units) {\n      if (polygonOffset) {\n        enable(gl.POLYGON_OFFSET_FILL);\n\n        if (\n          currentPolygonOffsetFactor !== factor ||\n          currentPolygonOffsetUnits !== units\n        ) {\n          gl.polygonOffset(factor, units);\n\n          currentPolygonOffsetFactor = factor;\n          currentPolygonOffsetUnits = units;\n        }\n      } else {\n        disable(gl.POLYGON_OFFSET_FILL);\n      }\n    }\n\n    function setScissorTest(scissorTest) {\n      if (scissorTest) {\n        enable(gl.SCISSOR_TEST);\n      } else {\n        disable(gl.SCISSOR_TEST);\n      }\n    }\n\n    // texture\n\n    function activeTexture(webglSlot) {\n      if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n      if (currentTextureSlot !== webglSlot) {\n        gl.activeTexture(webglSlot);\n        currentTextureSlot = webglSlot;\n      }\n    }\n\n    function bindTexture(webglType, webglTexture) {\n      if (currentTextureSlot === null) {\n        activeTexture();\n      }\n\n      var boundTexture = currentBoundTextures[currentTextureSlot];\n\n      if (boundTexture === undefined) {\n        boundTexture = { type: undefined, texture: undefined };\n        currentBoundTextures[currentTextureSlot] = boundTexture;\n      }\n\n      if (\n        boundTexture.type !== webglType ||\n        boundTexture.texture !== webglTexture\n      ) {\n        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\n        boundTexture.type = webglType;\n        boundTexture.texture = webglTexture;\n      }\n    }\n\n    function compressedTexImage2D() {\n      try {\n        gl.compressedTexImage2D.apply(gl, arguments);\n      } catch (error) {\n        console.error(\"THREE.WebGLState:\", error);\n      }\n    }\n\n    function texImage2D() {\n      try {\n        gl.texImage2D.apply(gl, arguments);\n      } catch (error) {\n        console.error(\"THREE.WebGLState:\", error);\n      }\n    }\n\n    //\n\n    function scissor(scissor) {\n      if (currentScissor.equals(scissor) === false) {\n        gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n        currentScissor.copy(scissor);\n      }\n    }\n\n    function viewport(viewport) {\n      if (currentViewport.equals(viewport) === false) {\n        gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n        currentViewport.copy(viewport);\n      }\n    }\n\n    //\n\n    function reset() {\n      for (var i = 0; i < enabledAttributes.length; i++) {\n        if (enabledAttributes[i] === 1) {\n          gl.disableVertexAttribArray(i);\n          enabledAttributes[i] = 0;\n        }\n      }\n\n      enabledCapabilities = {};\n\n      compressedTextureFormats = null;\n\n      currentTextureSlot = null;\n      currentBoundTextures = {};\n\n      currentProgram = null;\n\n      currentBlending = null;\n\n      currentFlipSided = null;\n      currentCullFace = null;\n\n      colorBuffer.reset();\n      depthBuffer.reset();\n      stencilBuffer.reset();\n    }\n\n    return {\n      buffers: {\n        color: colorBuffer,\n        depth: depthBuffer,\n        stencil: stencilBuffer,\n      },\n\n      initAttributes: initAttributes,\n      enableAttribute: enableAttribute,\n      enableAttributeAndDivisor: enableAttributeAndDivisor,\n      disableUnusedAttributes: disableUnusedAttributes,\n      enable: enable,\n      disable: disable,\n      getCompressedTextureFormats: getCompressedTextureFormats,\n\n      useProgram: useProgram,\n\n      setBlending: setBlending,\n      setMaterial: setMaterial,\n\n      setFlipSided: setFlipSided,\n      setCullFace: setCullFace,\n\n      setLineWidth: setLineWidth,\n      setPolygonOffset: setPolygonOffset,\n\n      setScissorTest: setScissorTest,\n\n      activeTexture: activeTexture,\n      bindTexture: bindTexture,\n      compressedTexImage2D: compressedTexImage2D,\n      texImage2D: texImage2D,\n\n      scissor: scissor,\n      viewport: viewport,\n\n      reset: reset,\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebGLTextures(\n    _gl,\n    extensions,\n    state,\n    properties,\n    capabilities,\n    utils,\n    info\n  ) {\n    var _videoTextures = {};\n    var _canvas;\n\n    //\n\n    function clampToMaxSize(image, maxSize) {\n      if (image.width > maxSize || image.height > maxSize) {\n        if (\"data\" in image) {\n          console.warn(\n            \"THREE.WebGLRenderer: image in DataTexture is too big (\" +\n              image.width +\n              \"x\" +\n              image.height +\n              \").\"\n          );\n          return;\n        }\n\n        // Warning: Scaling through the canvas will only work with images that use\n        // premultiplied alpha.\n\n        var scale = maxSize / Math.max(image.width, image.height);\n\n        var canvas = document.createElementNS(\n          \"http://www.w3.org/1999/xhtml\",\n          \"canvas\"\n        );\n        canvas.width = Math.floor(image.width * scale);\n        canvas.height = Math.floor(image.height * scale);\n\n        var context = canvas.getContext(\"2d\");\n        context.drawImage(\n          image,\n          0,\n          0,\n          image.width,\n          image.height,\n          0,\n          0,\n          canvas.width,\n          canvas.height\n        );\n\n        console.warn(\n          \"THREE.WebGLRenderer: image is too big (\" +\n            image.width +\n            \"x\" +\n            image.height +\n            \"). Resized to \" +\n            canvas.width +\n            \"x\" +\n            canvas.height\n        );\n\n        return canvas;\n      }\n\n      return image;\n    }\n\n    function isPowerOfTwo(image) {\n      return (\n        _Math.isPowerOfTwo(image.width) && _Math.isPowerOfTwo(image.height)\n      );\n    }\n\n    function makePowerOfTwo(image) {\n      if (\n        image instanceof HTMLImageElement ||\n        image instanceof HTMLCanvasElement ||\n        image instanceof ImageBitmap\n      ) {\n        if (_canvas === undefined)\n          _canvas = document.createElementNS(\n            \"http://www.w3.org/1999/xhtml\",\n            \"canvas\"\n          );\n\n        _canvas.width = _Math.floorPowerOfTwo(image.width);\n        _canvas.height = _Math.floorPowerOfTwo(image.height);\n\n        var context = _canvas.getContext(\"2d\");\n        context.drawImage(image, 0, 0, _canvas.width, _canvas.height);\n\n        console.warn(\n          \"THREE.WebGLRenderer: image is not power of two (\" +\n            image.width +\n            \"x\" +\n            image.height +\n            \"). Resized to \" +\n            _canvas.width +\n            \"x\" +\n            _canvas.height\n        );\n\n        return _canvas;\n      }\n\n      return image;\n    }\n\n    function textureNeedsPowerOfTwo(texture) {\n      if (capabilities.isWebGL2) return false;\n\n      return (\n        texture.wrapS !== ClampToEdgeWrapping ||\n        texture.wrapT !== ClampToEdgeWrapping ||\n        (texture.minFilter !== NearestFilter &&\n          texture.minFilter !== LinearFilter)\n      );\n    }\n\n    function textureNeedsGenerateMipmaps(texture, isPowerOfTwo) {\n      return (\n        texture.generateMipmaps &&\n        isPowerOfTwo &&\n        texture.minFilter !== NearestFilter &&\n        texture.minFilter !== LinearFilter\n      );\n    }\n\n    function generateMipmap(target, texture, width, height) {\n      _gl.generateMipmap(target);\n\n      var textureProperties = properties.get(texture);\n\n      // Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\n      textureProperties.__maxMipLevel =\n        Math.log(Math.max(width, height)) * Math.LOG2E;\n    }\n\n    function getInternalFormat(glFormat, glType) {\n      if (!capabilities.isWebGL2) return glFormat;\n\n      if (glFormat === _gl.RGB) {\n        if (glType === _gl.FLOAT) return _gl.RGB32F;\n        if (glType === _gl.HALF_FLOAT) return _gl.RGB16F;\n        if (glType === _gl.UNSIGNED_BYTE) return _gl.RGB8;\n      }\n\n      if (glFormat === _gl.RGBA) {\n        if (glType === _gl.FLOAT) return _gl.RGBA32F;\n        if (glType === _gl.HALF_FLOAT) return _gl.RGBA16F;\n        if (glType === _gl.UNSIGNED_BYTE) return _gl.RGBA8;\n      }\n\n      return glFormat;\n    }\n\n    // Fallback filters for non-power-of-2 textures\n\n    function filterFallback(f) {\n      if (\n        f === NearestFilter ||\n        f === NearestMipMapNearestFilter ||\n        f === NearestMipMapLinearFilter\n      ) {\n        return _gl.NEAREST;\n      }\n\n      return _gl.LINEAR;\n    }\n\n    //\n\n    function onTextureDispose(event) {\n      var texture = event.target;\n\n      texture.removeEventListener(\"dispose\", onTextureDispose);\n\n      deallocateTexture(texture);\n\n      if (texture.isVideoTexture) {\n        delete _videoTextures[texture.id];\n      }\n\n      info.memory.textures--;\n    }\n\n    function onRenderTargetDispose(event) {\n      var renderTarget = event.target;\n\n      renderTarget.removeEventListener(\"dispose\", onRenderTargetDispose);\n\n      deallocateRenderTarget(renderTarget);\n\n      info.memory.textures--;\n    }\n\n    //\n\n    function deallocateTexture(texture) {\n      var textureProperties = properties.get(texture);\n\n      if (texture.image && textureProperties.__image__webglTextureCube) {\n        // cube texture\n\n        _gl.deleteTexture(textureProperties.__image__webglTextureCube);\n      } else {\n        // 2D texture\n\n        if (textureProperties.__webglInit === undefined) return;\n\n        _gl.deleteTexture(textureProperties.__webglTexture);\n      }\n\n      // remove all webgl properties\n      properties.remove(texture);\n    }\n\n    function deallocateRenderTarget(renderTarget) {\n      var renderTargetProperties = properties.get(renderTarget);\n      var textureProperties = properties.get(renderTarget.texture);\n\n      if (!renderTarget) return;\n\n      if (textureProperties.__webglTexture !== undefined) {\n        _gl.deleteTexture(textureProperties.__webglTexture);\n      }\n\n      if (renderTarget.depthTexture) {\n        renderTarget.depthTexture.dispose();\n      }\n\n      if (renderTarget.isWebGLRenderTargetCube) {\n        for (var i = 0; i < 6; i++) {\n          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n          if (renderTargetProperties.__webglDepthbuffer)\n            _gl.deleteRenderbuffer(\n              renderTargetProperties.__webglDepthbuffer[i]\n            );\n        }\n      } else {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n        if (renderTargetProperties.__webglDepthbuffer)\n          _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n      }\n\n      properties.remove(renderTarget.texture);\n      properties.remove(renderTarget);\n    }\n\n    //\n\n    function setTexture2D(texture, slot) {\n      var textureProperties = properties.get(texture);\n\n      if (texture.isVideoTexture) updateVideoTexture(texture);\n\n      if (\n        texture.version > 0 &&\n        textureProperties.__version !== texture.version\n      ) {\n        var image = texture.image;\n\n        if (image === undefined) {\n          console.warn(\n            \"THREE.WebGLRenderer: Texture marked for update but image is undefined\"\n          );\n        } else if (image.complete === false) {\n          console.warn(\n            \"THREE.WebGLRenderer: Texture marked for update but image is incomplete\"\n          );\n        } else {\n          uploadTexture(textureProperties, texture, slot);\n          return;\n        }\n      }\n\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n    }\n\n    function setTextureCube(texture, slot) {\n      var textureProperties = properties.get(texture);\n\n      if (texture.image.length === 6) {\n        if (\n          texture.version > 0 &&\n          textureProperties.__version !== texture.version\n        ) {\n          if (!textureProperties.__image__webglTextureCube) {\n            texture.addEventListener(\"dispose\", onTextureDispose);\n\n            textureProperties.__image__webglTextureCube = _gl.createTexture();\n\n            info.memory.textures++;\n          }\n\n          state.activeTexture(_gl.TEXTURE0 + slot);\n          state.bindTexture(\n            _gl.TEXTURE_CUBE_MAP,\n            textureProperties.__image__webglTextureCube\n          );\n\n          _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n          var isCompressed = texture && texture.isCompressedTexture;\n          var isDataTexture =\n            texture.image[0] && texture.image[0].isDataTexture;\n\n          var cubeImage = [];\n\n          for (var i = 0; i < 6; i++) {\n            if (!isCompressed && !isDataTexture) {\n              cubeImage[i] = clampToMaxSize(\n                texture.image[i],\n                capabilities.maxCubemapSize\n              );\n            } else {\n              cubeImage[i] = isDataTexture\n                ? texture.image[i].image\n                : texture.image[i];\n            }\n          }\n\n          var image = cubeImage[0],\n            isPowerOfTwoImage = isPowerOfTwo(image),\n            glFormat = utils.convert(texture.format),\n            glType = utils.convert(texture.type),\n            glInternalFormat = getInternalFormat(glFormat, glType);\n\n          setTextureParameters(\n            _gl.TEXTURE_CUBE_MAP,\n            texture,\n            isPowerOfTwoImage\n          );\n\n          for (var i = 0; i < 6; i++) {\n            if (!isCompressed) {\n              if (isDataTexture) {\n                state.texImage2D(\n                  _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                  0,\n                  glInternalFormat,\n                  cubeImage[i].width,\n                  cubeImage[i].height,\n                  0,\n                  glFormat,\n                  glType,\n                  cubeImage[i].data\n                );\n              } else {\n                state.texImage2D(\n                  _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                  0,\n                  glInternalFormat,\n                  glFormat,\n                  glType,\n                  cubeImage[i]\n                );\n              }\n            } else {\n              var mipmap,\n                mipmaps = cubeImage[i].mipmaps;\n\n              for (var j = 0, jl = mipmaps.length; j < jl; j++) {\n                mipmap = mipmaps[j];\n\n                if (\n                  texture.format !== RGBAFormat &&\n                  texture.format !== RGBFormat\n                ) {\n                  if (\n                    state.getCompressedTextureFormats().indexOf(glFormat) > -1\n                  ) {\n                    state.compressedTexImage2D(\n                      _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                      j,\n                      glInternalFormat,\n                      mipmap.width,\n                      mipmap.height,\n                      0,\n                      mipmap.data\n                    );\n                  } else {\n                    console.warn(\n                      \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\"\n                    );\n                  }\n                } else {\n                  state.texImage2D(\n                    _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                    j,\n                    glInternalFormat,\n                    mipmap.width,\n                    mipmap.height,\n                    0,\n                    glFormat,\n                    glType,\n                    mipmap.data\n                  );\n                }\n              }\n            }\n          }\n\n          if (!isCompressed) {\n            textureProperties.__maxMipLevel = 0;\n          } else {\n            textureProperties.__maxMipLevel = mipmaps.length - 1;\n          }\n\n          if (textureNeedsGenerateMipmaps(texture, isPowerOfTwoImage)) {\n            // We assume images for cube map have the same size.\n            generateMipmap(\n              _gl.TEXTURE_CUBE_MAP,\n              texture,\n              image.width,\n              image.height\n            );\n          }\n\n          textureProperties.__version = texture.version;\n\n          if (texture.onUpdate) texture.onUpdate(texture);\n        } else {\n          state.activeTexture(_gl.TEXTURE0 + slot);\n          state.bindTexture(\n            _gl.TEXTURE_CUBE_MAP,\n            textureProperties.__image__webglTextureCube\n          );\n        }\n      }\n    }\n\n    function setTextureCubeDynamic(texture, slot) {\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(\n        _gl.TEXTURE_CUBE_MAP,\n        properties.get(texture).__webglTexture\n      );\n    }\n\n    function setTextureParameters(textureType, texture, isPowerOfTwoImage) {\n      var extension;\n\n      if (isPowerOfTwoImage) {\n        _gl.texParameteri(\n          textureType,\n          _gl.TEXTURE_WRAP_S,\n          utils.convert(texture.wrapS)\n        );\n        _gl.texParameteri(\n          textureType,\n          _gl.TEXTURE_WRAP_T,\n          utils.convert(texture.wrapT)\n        );\n\n        _gl.texParameteri(\n          textureType,\n          _gl.TEXTURE_MAG_FILTER,\n          utils.convert(texture.magFilter)\n        );\n        _gl.texParameteri(\n          textureType,\n          _gl.TEXTURE_MIN_FILTER,\n          utils.convert(texture.minFilter)\n        );\n      } else {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n        if (\n          texture.wrapS !== ClampToEdgeWrapping ||\n          texture.wrapT !== ClampToEdgeWrapping\n        ) {\n          console.warn(\n            \"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\"\n          );\n        }\n\n        _gl.texParameteri(\n          textureType,\n          _gl.TEXTURE_MAG_FILTER,\n          filterFallback(texture.magFilter)\n        );\n        _gl.texParameteri(\n          textureType,\n          _gl.TEXTURE_MIN_FILTER,\n          filterFallback(texture.minFilter)\n        );\n\n        if (\n          texture.minFilter !== NearestFilter &&\n          texture.minFilter !== LinearFilter\n        ) {\n          console.warn(\n            \"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\"\n          );\n        }\n      }\n\n      extension = extensions.get(\"EXT_texture_filter_anisotropic\");\n\n      if (extension) {\n        if (\n          texture.type === FloatType &&\n          extensions.get(\"OES_texture_float_linear\") === null\n        )\n          return;\n        if (\n          texture.type === HalfFloatType &&\n          (capabilities.isWebGL2 ||\n            extensions.get(\"OES_texture_half_float_linear\")) === null\n        )\n          return;\n\n        if (\n          texture.anisotropy > 1 ||\n          properties.get(texture).__currentAnisotropy\n        ) {\n          _gl.texParameterf(\n            textureType,\n            extension.TEXTURE_MAX_ANISOTROPY_EXT,\n            Math.min(texture.anisotropy, capabilities.getMaxAnisotropy())\n          );\n          properties.get(texture).__currentAnisotropy = texture.anisotropy;\n        }\n      }\n    }\n\n    function uploadTexture(textureProperties, texture, slot) {\n      if (textureProperties.__webglInit === undefined) {\n        textureProperties.__webglInit = true;\n\n        texture.addEventListener(\"dispose\", onTextureDispose);\n\n        textureProperties.__webglTexture = _gl.createTexture();\n\n        info.memory.textures++;\n      }\n\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n      _gl.pixelStorei(\n        _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,\n        texture.premultiplyAlpha\n      );\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n      var image = clampToMaxSize(texture.image, capabilities.maxTextureSize);\n\n      if (textureNeedsPowerOfTwo(texture) && isPowerOfTwo(image) === false) {\n        image = makePowerOfTwo(image);\n      }\n\n      var isPowerOfTwoImage = isPowerOfTwo(image),\n        glFormat = utils.convert(texture.format),\n        glType = utils.convert(texture.type),\n        glInternalFormat = getInternalFormat(glFormat, glType);\n\n      setTextureParameters(_gl.TEXTURE_2D, texture, isPowerOfTwoImage);\n\n      var mipmap,\n        mipmaps = texture.mipmaps;\n\n      if (texture.isDepthTexture) {\n        // populate depth texture with dummy data\n\n        glInternalFormat = _gl.DEPTH_COMPONENT;\n\n        if (texture.type === FloatType) {\n          if (!capabilities.isWebGL2)\n            throw new Error(\"Float Depth Texture only supported in WebGL2.0\");\n          glInternalFormat = _gl.DEPTH_COMPONENT32F;\n        } else if (capabilities.isWebGL2) {\n          // WebGL 2.0 requires signed internalformat for glTexImage2D\n          glInternalFormat = _gl.DEPTH_COMPONENT16;\n        }\n\n        if (\n          texture.format === DepthFormat &&\n          glInternalFormat === _gl.DEPTH_COMPONENT\n        ) {\n          // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n          // DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          if (\n            texture.type !== UnsignedShortType &&\n            texture.type !== UnsignedIntType\n          ) {\n            console.warn(\n              \"THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.\"\n            );\n\n            texture.type = UnsignedShortType;\n            glType = utils.convert(texture.type);\n          }\n        }\n\n        // Depth stencil textures need the DEPTH_STENCIL internal format\n        // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n        if (texture.format === DepthStencilFormat) {\n          glInternalFormat = _gl.DEPTH_STENCIL;\n\n          // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n          // DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n          // (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n          if (texture.type !== UnsignedInt248Type) {\n            console.warn(\n              \"THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.\"\n            );\n\n            texture.type = UnsignedInt248Type;\n            glType = utils.convert(texture.type);\n          }\n        }\n\n        state.texImage2D(\n          _gl.TEXTURE_2D,\n          0,\n          glInternalFormat,\n          image.width,\n          image.height,\n          0,\n          glFormat,\n          glType,\n          null\n        );\n      } else if (texture.isDataTexture) {\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n\n        if (mipmaps.length > 0 && isPowerOfTwoImage) {\n          for (var i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            state.texImage2D(\n              _gl.TEXTURE_2D,\n              i,\n              glInternalFormat,\n              mipmap.width,\n              mipmap.height,\n              0,\n              glFormat,\n              glType,\n              mipmap.data\n            );\n          }\n\n          texture.generateMipmaps = false;\n          textureProperties.__maxMipLevel = mipmaps.length - 1;\n        } else {\n          state.texImage2D(\n            _gl.TEXTURE_2D,\n            0,\n            glInternalFormat,\n            image.width,\n            image.height,\n            0,\n            glFormat,\n            glType,\n            image.data\n          );\n          textureProperties.__maxMipLevel = 0;\n        }\n      } else if (texture.isCompressedTexture) {\n        for (var i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n\n          if (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n            if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n              state.compressedTexImage2D(\n                _gl.TEXTURE_2D,\n                i,\n                glInternalFormat,\n                mipmap.width,\n                mipmap.height,\n                0,\n                mipmap.data\n              );\n            } else {\n              console.warn(\n                \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\"\n              );\n            }\n          } else {\n            state.texImage2D(\n              _gl.TEXTURE_2D,\n              i,\n              glInternalFormat,\n              mipmap.width,\n              mipmap.height,\n              0,\n              glFormat,\n              glType,\n              mipmap.data\n            );\n          }\n        }\n\n        textureProperties.__maxMipLevel = mipmaps.length - 1;\n      } else {\n        // regular Texture (image, video, canvas)\n\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n\n        if (mipmaps.length > 0 && isPowerOfTwoImage) {\n          for (var i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            state.texImage2D(\n              _gl.TEXTURE_2D,\n              i,\n              glInternalFormat,\n              glFormat,\n              glType,\n              mipmap\n            );\n          }\n\n          texture.generateMipmaps = false;\n          textureProperties.__maxMipLevel = mipmaps.length - 1;\n        } else {\n          state.texImage2D(\n            _gl.TEXTURE_2D,\n            0,\n            glInternalFormat,\n            glFormat,\n            glType,\n            image\n          );\n          textureProperties.__maxMipLevel = 0;\n        }\n      }\n\n      if (textureNeedsGenerateMipmaps(texture, isPowerOfTwoImage)) {\n        generateMipmap(_gl.TEXTURE_2D, texture, image.width, image.height);\n      }\n\n      textureProperties.__version = texture.version;\n\n      if (texture.onUpdate) texture.onUpdate(texture);\n    }\n\n    // Render targets\n\n    // Setup storage for target texture and bind it to correct framebuffer\n    function setupFrameBufferTexture(\n      framebuffer,\n      renderTarget,\n      attachment,\n      textureTarget\n    ) {\n      var glFormat = utils.convert(renderTarget.texture.format);\n      var glType = utils.convert(renderTarget.texture.type);\n      var glInternalFormat = getInternalFormat(glFormat, glType);\n      state.texImage2D(\n        textureTarget,\n        0,\n        glInternalFormat,\n        renderTarget.width,\n        renderTarget.height,\n        0,\n        glFormat,\n        glType,\n        null\n      );\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n      _gl.framebufferTexture2D(\n        _gl.FRAMEBUFFER,\n        attachment,\n        textureTarget,\n        properties.get(renderTarget.texture).__webglTexture,\n        0\n      );\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n    }\n\n    // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n    function setupRenderBufferStorage(renderbuffer, renderTarget) {\n      _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n      if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n        _gl.renderbufferStorage(\n          _gl.RENDERBUFFER,\n          _gl.DEPTH_COMPONENT16,\n          renderTarget.width,\n          renderTarget.height\n        );\n        _gl.framebufferRenderbuffer(\n          _gl.FRAMEBUFFER,\n          _gl.DEPTH_ATTACHMENT,\n          _gl.RENDERBUFFER,\n          renderbuffer\n        );\n      } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n        _gl.renderbufferStorage(\n          _gl.RENDERBUFFER,\n          _gl.DEPTH_STENCIL,\n          renderTarget.width,\n          renderTarget.height\n        );\n        _gl.framebufferRenderbuffer(\n          _gl.FRAMEBUFFER,\n          _gl.DEPTH_STENCIL_ATTACHMENT,\n          _gl.RENDERBUFFER,\n          renderbuffer\n        );\n      } else {\n        // FIXME: We don't support !depth !stencil\n        _gl.renderbufferStorage(\n          _gl.RENDERBUFFER,\n          _gl.RGBA4,\n          renderTarget.width,\n          renderTarget.height\n        );\n      }\n\n      _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n    }\n\n    // Setup resources for a Depth Texture for a FBO (needs an extension)\n    function setupDepthTexture(framebuffer, renderTarget) {\n      var isCube = renderTarget && renderTarget.isWebGLRenderTargetCube;\n      if (isCube)\n        throw new Error(\n          \"Depth Texture with cube render targets is not supported\"\n        );\n\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n      if (\n        !(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)\n      ) {\n        throw new Error(\n          \"renderTarget.depthTexture must be an instance of THREE.DepthTexture\"\n        );\n      }\n\n      // upload an empty depth texture with framebuffer size\n      if (\n        !properties.get(renderTarget.depthTexture).__webglTexture ||\n        renderTarget.depthTexture.image.width !== renderTarget.width ||\n        renderTarget.depthTexture.image.height !== renderTarget.height\n      ) {\n        renderTarget.depthTexture.image.width = renderTarget.width;\n        renderTarget.depthTexture.image.height = renderTarget.height;\n        renderTarget.depthTexture.needsUpdate = true;\n      }\n\n      setTexture2D(renderTarget.depthTexture, 0);\n\n      var webglDepthTexture = properties.get(\n        renderTarget.depthTexture\n      ).__webglTexture;\n\n      if (renderTarget.depthTexture.format === DepthFormat) {\n        _gl.framebufferTexture2D(\n          _gl.FRAMEBUFFER,\n          _gl.DEPTH_ATTACHMENT,\n          _gl.TEXTURE_2D,\n          webglDepthTexture,\n          0\n        );\n      } else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n        _gl.framebufferTexture2D(\n          _gl.FRAMEBUFFER,\n          _gl.DEPTH_STENCIL_ATTACHMENT,\n          _gl.TEXTURE_2D,\n          webglDepthTexture,\n          0\n        );\n      } else {\n        throw new Error(\"Unknown depthTexture format\");\n      }\n    }\n\n    // Setup GL resources for a non-texture depth buffer\n    function setupDepthRenderbuffer(renderTarget) {\n      var renderTargetProperties = properties.get(renderTarget);\n\n      var isCube = renderTarget.isWebGLRenderTargetCube === true;\n\n      if (renderTarget.depthTexture) {\n        if (isCube)\n          throw new Error(\n            \"target.depthTexture not supported in Cube render targets\"\n          );\n\n        setupDepthTexture(\n          renderTargetProperties.__webglFramebuffer,\n          renderTarget\n        );\n      } else {\n        if (isCube) {\n          renderTargetProperties.__webglDepthbuffer = [];\n\n          for (var i = 0; i < 6; i++) {\n            _gl.bindFramebuffer(\n              _gl.FRAMEBUFFER,\n              renderTargetProperties.__webglFramebuffer[i]\n            );\n            renderTargetProperties.__webglDepthbuffer[i] =\n              _gl.createRenderbuffer();\n            setupRenderBufferStorage(\n              renderTargetProperties.__webglDepthbuffer[i],\n              renderTarget\n            );\n          }\n        } else {\n          _gl.bindFramebuffer(\n            _gl.FRAMEBUFFER,\n            renderTargetProperties.__webglFramebuffer\n          );\n          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n          setupRenderBufferStorage(\n            renderTargetProperties.__webglDepthbuffer,\n            renderTarget\n          );\n        }\n      }\n\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n    }\n\n    // Set up GL resources for the render target\n    function setupRenderTarget(renderTarget) {\n      var renderTargetProperties = properties.get(renderTarget);\n      var textureProperties = properties.get(renderTarget.texture);\n\n      renderTarget.addEventListener(\"dispose\", onRenderTargetDispose);\n\n      textureProperties.__webglTexture = _gl.createTexture();\n\n      info.memory.textures++;\n\n      var isCube = renderTarget.isWebGLRenderTargetCube === true;\n      var isTargetPowerOfTwo = isPowerOfTwo(renderTarget);\n\n      // Setup framebuffer\n\n      if (isCube) {\n        renderTargetProperties.__webglFramebuffer = [];\n\n        for (var i = 0; i < 6; i++) {\n          renderTargetProperties.__webglFramebuffer[i] =\n            _gl.createFramebuffer();\n        }\n      } else {\n        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n      }\n\n      // Setup color buffer\n\n      if (isCube) {\n        state.bindTexture(\n          _gl.TEXTURE_CUBE_MAP,\n          textureProperties.__webglTexture\n        );\n        setTextureParameters(\n          _gl.TEXTURE_CUBE_MAP,\n          renderTarget.texture,\n          isTargetPowerOfTwo\n        );\n\n        for (var i = 0; i < 6; i++) {\n          setupFrameBufferTexture(\n            renderTargetProperties.__webglFramebuffer[i],\n            renderTarget,\n            _gl.COLOR_ATTACHMENT0,\n            _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i\n          );\n        }\n\n        if (\n          textureNeedsGenerateMipmaps(renderTarget.texture, isTargetPowerOfTwo)\n        ) {\n          generateMipmap(\n            _gl.TEXTURE_CUBE_MAP,\n            renderTarget.texture,\n            renderTarget.width,\n            renderTarget.height\n          );\n        }\n\n        state.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n      } else {\n        state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n        setTextureParameters(\n          _gl.TEXTURE_2D,\n          renderTarget.texture,\n          isTargetPowerOfTwo\n        );\n        setupFrameBufferTexture(\n          renderTargetProperties.__webglFramebuffer,\n          renderTarget,\n          _gl.COLOR_ATTACHMENT0,\n          _gl.TEXTURE_2D\n        );\n\n        if (\n          textureNeedsGenerateMipmaps(renderTarget.texture, isTargetPowerOfTwo)\n        ) {\n          generateMipmap(\n            _gl.TEXTURE_2D,\n            renderTarget.texture,\n            renderTarget.width,\n            renderTarget.height\n          );\n        }\n\n        state.bindTexture(_gl.TEXTURE_2D, null);\n      }\n\n      // Setup depth and stencil buffers\n\n      if (renderTarget.depthBuffer) {\n        setupDepthRenderbuffer(renderTarget);\n      }\n    }\n\n    function updateRenderTargetMipmap(renderTarget) {\n      var texture = renderTarget.texture;\n      var isTargetPowerOfTwo = isPowerOfTwo(renderTarget);\n\n      if (textureNeedsGenerateMipmaps(texture, isTargetPowerOfTwo)) {\n        var target = renderTarget.isWebGLRenderTargetCube\n          ? _gl.TEXTURE_CUBE_MAP\n          : _gl.TEXTURE_2D;\n        var webglTexture = properties.get(texture).__webglTexture;\n\n        state.bindTexture(target, webglTexture);\n        generateMipmap(\n          target,\n          texture,\n          renderTarget.width,\n          renderTarget.height\n        );\n        state.bindTexture(target, null);\n      }\n    }\n\n    function updateVideoTexture(texture) {\n      var id = texture.id;\n      var frame = info.render.frame;\n\n      // Check the last frame we updated the VideoTexture\n\n      if (_videoTextures[id] !== frame) {\n        _videoTextures[id] = frame;\n        texture.update();\n      }\n    }\n\n    this.setTexture2D = setTexture2D;\n    this.setTextureCube = setTextureCube;\n    this.setTextureCubeDynamic = setTextureCubeDynamic;\n    this.setupRenderTarget = setupRenderTarget;\n    this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n  }\n\n  /**\n   * @author thespite / http://www.twitter.com/thespite\n   */\n\n  function WebGLUtils(gl, extensions, capabilities) {\n    function convert(p) {\n      var extension;\n\n      if (p === RepeatWrapping) return gl.REPEAT;\n      if (p === ClampToEdgeWrapping) return gl.CLAMP_TO_EDGE;\n      if (p === MirroredRepeatWrapping) return gl.MIRRORED_REPEAT;\n\n      if (p === NearestFilter) return gl.NEAREST;\n      if (p === NearestMipMapNearestFilter) return gl.NEAREST_MIPMAP_NEAREST;\n      if (p === NearestMipMapLinearFilter) return gl.NEAREST_MIPMAP_LINEAR;\n\n      if (p === LinearFilter) return gl.LINEAR;\n      if (p === LinearMipMapNearestFilter) return gl.LINEAR_MIPMAP_NEAREST;\n      if (p === LinearMipMapLinearFilter) return gl.LINEAR_MIPMAP_LINEAR;\n\n      if (p === UnsignedByteType) return gl.UNSIGNED_BYTE;\n      if (p === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;\n      if (p === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;\n      if (p === UnsignedShort565Type) return gl.UNSIGNED_SHORT_5_6_5;\n\n      if (p === ByteType) return gl.BYTE;\n      if (p === ShortType) return gl.SHORT;\n      if (p === UnsignedShortType) return gl.UNSIGNED_SHORT;\n      if (p === IntType) return gl.INT;\n      if (p === UnsignedIntType) return gl.UNSIGNED_INT;\n      if (p === FloatType) return gl.FLOAT;\n\n      if (p === HalfFloatType) {\n        if (capabilities.isWebGL2) return gl.HALF_FLOAT;\n\n        extension = extensions.get(\"OES_texture_half_float\");\n\n        if (extension !== null) return extension.HALF_FLOAT_OES;\n      }\n\n      if (p === AlphaFormat) return gl.ALPHA;\n      if (p === RGBFormat) return gl.RGB;\n      if (p === RGBAFormat) return gl.RGBA;\n      if (p === LuminanceFormat) return gl.LUMINANCE;\n      if (p === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;\n      if (p === DepthFormat) return gl.DEPTH_COMPONENT;\n      if (p === DepthStencilFormat) return gl.DEPTH_STENCIL;\n\n      if (p === AddEquation) return gl.FUNC_ADD;\n      if (p === SubtractEquation) return gl.FUNC_SUBTRACT;\n      if (p === ReverseSubtractEquation) return gl.FUNC_REVERSE_SUBTRACT;\n\n      if (p === ZeroFactor) return gl.ZERO;\n      if (p === OneFactor) return gl.ONE;\n      if (p === SrcColorFactor) return gl.SRC_COLOR;\n      if (p === OneMinusSrcColorFactor) return gl.ONE_MINUS_SRC_COLOR;\n      if (p === SrcAlphaFactor) return gl.SRC_ALPHA;\n      if (p === OneMinusSrcAlphaFactor) return gl.ONE_MINUS_SRC_ALPHA;\n      if (p === DstAlphaFactor) return gl.DST_ALPHA;\n      if (p === OneMinusDstAlphaFactor) return gl.ONE_MINUS_DST_ALPHA;\n\n      if (p === DstColorFactor) return gl.DST_COLOR;\n      if (p === OneMinusDstColorFactor) return gl.ONE_MINUS_DST_COLOR;\n      if (p === SrcAlphaSaturateFactor) return gl.SRC_ALPHA_SATURATE;\n\n      if (\n        p === RGB_S3TC_DXT1_Format ||\n        p === RGBA_S3TC_DXT1_Format ||\n        p === RGBA_S3TC_DXT3_Format ||\n        p === RGBA_S3TC_DXT5_Format\n      ) {\n        extension = extensions.get(\"WEBGL_compressed_texture_s3tc\");\n\n        if (extension !== null) {\n          if (p === RGB_S3TC_DXT1_Format)\n            return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n          if (p === RGBA_S3TC_DXT1_Format)\n            return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n          if (p === RGBA_S3TC_DXT3_Format)\n            return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n          if (p === RGBA_S3TC_DXT5_Format)\n            return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n        }\n      }\n\n      if (\n        p === RGB_PVRTC_4BPPV1_Format ||\n        p === RGB_PVRTC_2BPPV1_Format ||\n        p === RGBA_PVRTC_4BPPV1_Format ||\n        p === RGBA_PVRTC_2BPPV1_Format\n      ) {\n        extension = extensions.get(\"WEBGL_compressed_texture_pvrtc\");\n\n        if (extension !== null) {\n          if (p === RGB_PVRTC_4BPPV1_Format)\n            return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n          if (p === RGB_PVRTC_2BPPV1_Format)\n            return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n          if (p === RGBA_PVRTC_4BPPV1_Format)\n            return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n          if (p === RGBA_PVRTC_2BPPV1_Format)\n            return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n        }\n      }\n\n      if (p === RGB_ETC1_Format) {\n        extension = extensions.get(\"WEBGL_compressed_texture_etc1\");\n\n        if (extension !== null) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n      }\n\n      if (\n        p === RGBA_ASTC_4x4_Format ||\n        p === RGBA_ASTC_5x4_Format ||\n        p === RGBA_ASTC_5x5_Format ||\n        p === RGBA_ASTC_6x5_Format ||\n        p === RGBA_ASTC_6x6_Format ||\n        p === RGBA_ASTC_8x5_Format ||\n        p === RGBA_ASTC_8x6_Format ||\n        p === RGBA_ASTC_8x8_Format ||\n        p === RGBA_ASTC_10x5_Format ||\n        p === RGBA_ASTC_10x6_Format ||\n        p === RGBA_ASTC_10x8_Format ||\n        p === RGBA_ASTC_10x10_Format ||\n        p === RGBA_ASTC_12x10_Format ||\n        p === RGBA_ASTC_12x12_Format\n      ) {\n        extension = extensions.get(\"WEBGL_compressed_texture_astc\");\n\n        if (extension !== null) {\n          return p;\n        }\n      }\n\n      if (p === MinEquation || p === MaxEquation) {\n        if (capabilities.isWebGL2) {\n          if (p === MinEquation) return gl.MIN;\n          if (p === MaxEquation) return gl.MAX;\n        }\n\n        extension = extensions.get(\"EXT_blend_minmax\");\n\n        if (extension !== null) {\n          if (p === MinEquation) return extension.MIN_EXT;\n          if (p === MaxEquation) return extension.MAX_EXT;\n        }\n      }\n\n      if (p === UnsignedInt248Type) {\n        if (capabilities.isWebGL2) return gl.UNSIGNED_INT_24_8;\n\n        extension = extensions.get(\"WEBGL_depth_texture\");\n\n        if (extension !== null) return extension.UNSIGNED_INT_24_8_WEBGL;\n      }\n\n      return 0;\n    }\n\n    return { convert: convert };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function Group() {\n    Object3D.call(this);\n\n    this.type = \"Group\";\n  }\n\n  Group.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Group,\n\n    isGroup: true,\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author greggman / http://games.greggman.com/\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * @author tschw\n   */\n\n  function PerspectiveCamera(fov, aspect, near, far) {\n    Camera.call(this);\n\n    this.type = \"PerspectiveCamera\";\n\n    this.fov = fov !== undefined ? fov : 50;\n    this.zoom = 1;\n\n    this.near = near !== undefined ? near : 0.1;\n    this.far = far !== undefined ? far : 2000;\n    this.focus = 10;\n\n    this.aspect = aspect !== undefined ? aspect : 1;\n    this.view = null;\n\n    this.filmGauge = 35; // width of the film (default in millimeters)\n    this.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n    this.updateProjectionMatrix();\n  }\n\n  PerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n    constructor: PerspectiveCamera,\n\n    isPerspectiveCamera: true,\n\n    copy: function (source, recursive) {\n      Camera.prototype.copy.call(this, source, recursive);\n\n      this.fov = source.fov;\n      this.zoom = source.zoom;\n\n      this.near = source.near;\n      this.far = source.far;\n      this.focus = source.focus;\n\n      this.aspect = source.aspect;\n      this.view = source.view === null ? null : Object.assign({}, source.view);\n\n      this.filmGauge = source.filmGauge;\n      this.filmOffset = source.filmOffset;\n\n      return this;\n    },\n\n    /**\n     * Sets the FOV by focal length in respect to the current .filmGauge.\n     *\n     * The default film gauge is 35, so that the focal length can be specified for\n     * a 35mm (full frame) camera.\n     *\n     * Values for focal length and film gauge must have the same unit.\n     */\n    setFocalLength: function (focalLength) {\n      // see http://www.bobatkins.com/photography/technical/field_of_view.html\n      var vExtentSlope = (0.5 * this.getFilmHeight()) / focalLength;\n\n      this.fov = _Math.RAD2DEG * 2 * Math.atan(vExtentSlope);\n      this.updateProjectionMatrix();\n    },\n\n    /**\n     * Calculates the focal length from the current .fov and .filmGauge.\n     */\n    getFocalLength: function () {\n      var vExtentSlope = Math.tan(_Math.DEG2RAD * 0.5 * this.fov);\n\n      return (0.5 * this.getFilmHeight()) / vExtentSlope;\n    },\n\n    getEffectiveFOV: function () {\n      return (\n        _Math.RAD2DEG *\n        2 *\n        Math.atan(Math.tan(_Math.DEG2RAD * 0.5 * this.fov) / this.zoom)\n      );\n    },\n\n    getFilmWidth: function () {\n      // film not completely covered in portrait format (aspect < 1)\n      return this.filmGauge * Math.min(this.aspect, 1);\n    },\n\n    getFilmHeight: function () {\n      // film not completely covered in landscape format (aspect > 1)\n      return this.filmGauge / Math.max(this.aspect, 1);\n    },\n\n    /**\n     * Sets an offset in a larger frustum. This is useful for multi-window or\n     * multi-monitor/multi-machine setups.\n     *\n     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n     * the monitors are in grid like this\n     *\n     *   +---+---+---+\n     *   | A | B | C |\n     *   +---+---+---+\n     *   | D | E | F |\n     *   +---+---+---+\n     *\n     * then for each monitor you would call it like this\n     *\n     *   var w = 1920;\n     *   var h = 1080;\n     *   var fullWidth = w * 3;\n     *   var fullHeight = h * 2;\n     *\n     *   --A--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n     *   --B--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n     *   --C--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n     *   --D--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n     *   --E--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n     *   --F--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n     *\n     *   Note there is no reason monitors have to be the same size or in a grid.\n     */\n    setViewOffset: function (fullWidth, fullHeight, x, y, width, height) {\n      this.aspect = fullWidth / fullHeight;\n\n      if (this.view === null) {\n        this.view = {\n          enabled: true,\n          fullWidth: 1,\n          fullHeight: 1,\n          offsetX: 0,\n          offsetY: 0,\n          width: 1,\n          height: 1,\n        };\n      }\n\n      this.view.enabled = true;\n      this.view.fullWidth = fullWidth;\n      this.view.fullHeight = fullHeight;\n      this.view.offsetX = x;\n      this.view.offsetY = y;\n      this.view.width = width;\n      this.view.height = height;\n\n      this.updateProjectionMatrix();\n    },\n\n    clearViewOffset: function () {\n      if (this.view !== null) {\n        this.view.enabled = false;\n      }\n\n      this.updateProjectionMatrix();\n    },\n\n    updateProjectionMatrix: function () {\n      var near = this.near,\n        top = (near * Math.tan(_Math.DEG2RAD * 0.5 * this.fov)) / this.zoom,\n        height = 2 * top,\n        width = this.aspect * height,\n        left = -0.5 * width,\n        view = this.view;\n\n      if (this.view !== null && this.view.enabled) {\n        var fullWidth = view.fullWidth,\n          fullHeight = view.fullHeight;\n\n        left += (view.offsetX * width) / fullWidth;\n        top -= (view.offsetY * height) / fullHeight;\n        width *= view.width / fullWidth;\n        height *= view.height / fullHeight;\n      }\n\n      var skew = this.filmOffset;\n      if (skew !== 0) left += (near * skew) / this.getFilmWidth();\n\n      this.projectionMatrix.makePerspective(\n        left,\n        left + width,\n        top,\n        top - height,\n        near,\n        this.far\n      );\n    },\n\n    toJSON: function (meta) {\n      var data = Object3D.prototype.toJSON.call(this, meta);\n\n      data.object.fov = this.fov;\n      data.object.zoom = this.zoom;\n\n      data.object.near = this.near;\n      data.object.far = this.far;\n      data.object.focus = this.focus;\n\n      data.object.aspect = this.aspect;\n\n      if (this.view !== null) data.object.view = Object.assign({}, this.view);\n\n      data.object.filmGauge = this.filmGauge;\n      data.object.filmOffset = this.filmOffset;\n\n      return data;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function ArrayCamera(array) {\n    PerspectiveCamera.call(this);\n\n    this.cameras = array || [];\n  }\n\n  ArrayCamera.prototype = Object.assign(\n    Object.create(PerspectiveCamera.prototype),\n    {\n      constructor: ArrayCamera,\n\n      isArrayCamera: true,\n    }\n  );\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebVRManager(renderer) {\n    var scope = this;\n\n    var device = null;\n    var frameData = null;\n\n    var poseTarget = null;\n\n    var controllers = [];\n    var standingMatrix = new Matrix4();\n    var standingMatrixInverse = new Matrix4();\n\n    if (typeof window !== \"undefined\" && \"VRFrameData\" in window) {\n      frameData = new window.VRFrameData();\n      window.addEventListener(\n        \"vrdisplaypresentchange\",\n        onVRDisplayPresentChange,\n        false\n      );\n    }\n\n    var matrixWorldInverse = new Matrix4();\n    var tempQuaternion = new Quaternion();\n    var tempPosition = new Vector3();\n\n    var cameraL = new PerspectiveCamera();\n    cameraL.bounds = new Vector4(0.0, 0.0, 0.5, 1.0);\n    cameraL.layers.enable(1);\n\n    var cameraR = new PerspectiveCamera();\n    cameraR.bounds = new Vector4(0.5, 0.0, 0.5, 1.0);\n    cameraR.layers.enable(2);\n\n    var cameraVR = new ArrayCamera([cameraL, cameraR]);\n    cameraVR.layers.enable(1);\n    cameraVR.layers.enable(2);\n\n    //\n\n    function isPresenting() {\n      return device !== null && device.isPresenting === true;\n    }\n\n    var currentSize, currentPixelRatio;\n\n    function onVRDisplayPresentChange() {\n      if (isPresenting()) {\n        var eyeParameters = device.getEyeParameters(\"left\");\n        var renderWidth = eyeParameters.renderWidth;\n        var renderHeight = eyeParameters.renderHeight;\n\n        currentPixelRatio = renderer.getPixelRatio();\n        currentSize = renderer.getSize();\n\n        renderer.setDrawingBufferSize(renderWidth * 2, renderHeight, 1);\n\n        animation.start();\n      } else if (scope.enabled) {\n        renderer.setDrawingBufferSize(\n          currentSize.width,\n          currentSize.height,\n          currentPixelRatio\n        );\n\n        animation.stop();\n      }\n    }\n\n    //\n\n    var triggers = [];\n\n    function findGamepad(id) {\n      var gamepads = navigator.getGamepads && navigator.getGamepads();\n\n      for (var i = 0, j = 0, l = gamepads.length; i < l; i++) {\n        var gamepad = gamepads[i];\n\n        if (\n          gamepad &&\n          (gamepad.id === \"Daydream Controller\" ||\n            gamepad.id === \"Gear VR Controller\" ||\n            gamepad.id === \"Oculus Go Controller\" ||\n            gamepad.id === \"OpenVR Gamepad\" ||\n            gamepad.id.startsWith(\"Oculus Touch\") ||\n            gamepad.id.startsWith(\"Spatial Controller\"))\n        ) {\n          if (j === id) return gamepad;\n\n          j++;\n        }\n      }\n    }\n\n    function updateControllers() {\n      for (var i = 0; i < controllers.length; i++) {\n        var controller = controllers[i];\n\n        var gamepad = findGamepad(i);\n\n        if (gamepad !== undefined && gamepad.pose !== undefined) {\n          if (gamepad.pose === null) return;\n\n          //  Pose\n\n          var pose = gamepad.pose;\n\n          if (pose.hasPosition === false)\n            controller.position.set(0.2, -0.6, -0.05);\n\n          if (pose.position !== null)\n            controller.position.fromArray(pose.position);\n          if (pose.orientation !== null)\n            controller.quaternion.fromArray(pose.orientation);\n          controller.matrix.compose(\n            controller.position,\n            controller.quaternion,\n            controller.scale\n          );\n          controller.matrix.premultiply(standingMatrix);\n          controller.matrix.decompose(\n            controller.position,\n            controller.quaternion,\n            controller.scale\n          );\n          controller.matrixWorldNeedsUpdate = true;\n          controller.visible = true;\n\n          //  Trigger\n\n          var buttonId = gamepad.id === \"Daydream Controller\" ? 0 : 1;\n\n          if (triggers[i] !== gamepad.buttons[buttonId].pressed) {\n            triggers[i] = gamepad.buttons[buttonId].pressed;\n\n            if (triggers[i] === true) {\n              controller.dispatchEvent({ type: \"selectstart\" });\n            } else {\n              controller.dispatchEvent({ type: \"selectend\" });\n              controller.dispatchEvent({ type: \"select\" });\n            }\n          }\n        } else {\n          controller.visible = false;\n        }\n      }\n    }\n\n    //\n\n    this.enabled = false;\n    this.userHeight = 1.6;\n\n    this.getController = function (id) {\n      var controller = controllers[id];\n\n      if (controller === undefined) {\n        controller = new Group();\n        controller.matrixAutoUpdate = false;\n        controller.visible = false;\n\n        controllers[id] = controller;\n      }\n\n      return controller;\n    };\n\n    this.getDevice = function () {\n      return device;\n    };\n\n    this.setDevice = function (value) {\n      if (value !== undefined) device = value;\n\n      animation.setContext(value);\n    };\n\n    this.setPoseTarget = function (object) {\n      if (object !== undefined) poseTarget = object;\n    };\n\n    this.getCamera = function (camera) {\n      if (device === null) {\n        camera.position.set(0, scope.userHeight, 0);\n        return camera;\n      }\n\n      device.depthNear = camera.near;\n      device.depthFar = camera.far;\n\n      device.getFrameData(frameData);\n\n      //\n\n      var stageParameters = device.stageParameters;\n\n      if (stageParameters) {\n        standingMatrix.fromArray(stageParameters.sittingToStandingTransform);\n      } else {\n        standingMatrix.makeTranslation(0, scope.userHeight, 0);\n      }\n\n      var pose = frameData.pose;\n      var poseObject = poseTarget !== null ? poseTarget : camera;\n\n      // We want to manipulate poseObject by its position and quaternion components since users may rely on them.\n      poseObject.matrix.copy(standingMatrix);\n      poseObject.matrix.decompose(\n        poseObject.position,\n        poseObject.quaternion,\n        poseObject.scale\n      );\n\n      if (pose.orientation !== null) {\n        tempQuaternion.fromArray(pose.orientation);\n        poseObject.quaternion.multiply(tempQuaternion);\n      }\n\n      if (pose.position !== null) {\n        tempQuaternion.setFromRotationMatrix(standingMatrix);\n        tempPosition.fromArray(pose.position);\n        tempPosition.applyQuaternion(tempQuaternion);\n        poseObject.position.add(tempPosition);\n      }\n\n      poseObject.updateMatrixWorld();\n\n      if (device.isPresenting === false) return camera;\n\n      //\n\n      cameraL.near = camera.near;\n      cameraR.near = camera.near;\n\n      cameraL.far = camera.far;\n      cameraR.far = camera.far;\n\n      cameraVR.matrixWorld.copy(camera.matrixWorld);\n      cameraVR.matrixWorldInverse.copy(camera.matrixWorldInverse);\n\n      cameraL.matrixWorldInverse.fromArray(frameData.leftViewMatrix);\n      cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix);\n\n      // TODO (mrdoob) Double check this code\n\n      standingMatrixInverse.getInverse(standingMatrix);\n\n      cameraL.matrixWorldInverse.multiply(standingMatrixInverse);\n      cameraR.matrixWorldInverse.multiply(standingMatrixInverse);\n\n      var parent = poseObject.parent;\n\n      if (parent !== null) {\n        matrixWorldInverse.getInverse(parent.matrixWorld);\n\n        cameraL.matrixWorldInverse.multiply(matrixWorldInverse);\n        cameraR.matrixWorldInverse.multiply(matrixWorldInverse);\n      }\n\n      // envMap and Mirror needs camera.matrixWorld\n\n      cameraL.matrixWorld.getInverse(cameraL.matrixWorldInverse);\n      cameraR.matrixWorld.getInverse(cameraR.matrixWorldInverse);\n\n      cameraL.projectionMatrix.fromArray(frameData.leftProjectionMatrix);\n      cameraR.projectionMatrix.fromArray(frameData.rightProjectionMatrix);\n\n      // HACK (mrdoob)\n      // https://github.com/w3c/webvr/issues/203\n\n      cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\n      //\n\n      var layers = device.getLayers();\n\n      if (layers.length) {\n        var layer = layers[0];\n\n        if (layer.leftBounds !== null && layer.leftBounds.length === 4) {\n          cameraL.bounds.fromArray(layer.leftBounds);\n        }\n\n        if (layer.rightBounds !== null && layer.rightBounds.length === 4) {\n          cameraR.bounds.fromArray(layer.rightBounds);\n        }\n      }\n\n      updateControllers();\n\n      return cameraVR;\n    };\n\n    this.getStandingMatrix = function () {\n      return standingMatrix;\n    };\n\n    this.isPresenting = isPresenting;\n\n    // Animation Loop\n\n    var animation = new WebGLAnimation();\n\n    this.setAnimationLoop = function (callback) {\n      animation.setAnimationLoop(callback);\n    };\n\n    this.submitFrame = function () {\n      if (isPresenting()) device.submitFrame();\n    };\n\n    this.dispose = function () {\n      if (typeof window !== \"undefined\") {\n        window.removeEventListener(\n          \"vrdisplaypresentchange\",\n          onVRDisplayPresentChange\n        );\n      }\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function WebXRManager(renderer) {\n    var gl = renderer.context;\n\n    var device = null;\n    var session = null;\n\n    var frameOfRef = null;\n\n    var pose = null;\n\n    var controllers = [];\n    var inputSources = [];\n\n    function isPresenting() {\n      return session !== null && frameOfRef !== null;\n    }\n\n    //\n\n    var cameraL = new PerspectiveCamera();\n    cameraL.layers.enable(1);\n    cameraL.viewport = new Vector4();\n\n    var cameraR = new PerspectiveCamera();\n    cameraR.layers.enable(2);\n    cameraR.viewport = new Vector4();\n\n    var cameraVR = new ArrayCamera([cameraL, cameraR]);\n    cameraVR.layers.enable(1);\n    cameraVR.layers.enable(2);\n\n    //\n\n    this.enabled = false;\n\n    this.getController = function (id) {\n      var controller = controllers[id];\n\n      if (controller === undefined) {\n        controller = new Group();\n        controller.matrixAutoUpdate = false;\n        controller.visible = false;\n\n        controllers[id] = controller;\n      }\n\n      return controller;\n    };\n\n    this.getDevice = function () {\n      return device;\n    };\n\n    this.setDevice = function (value) {\n      if (value !== undefined) device = value;\n      if (value instanceof XRDevice) gl.setCompatibleXRDevice(value);\n    };\n\n    //\n\n    function onSessionEvent(event) {\n      var controller = controllers[inputSources.indexOf(event.inputSource)];\n      if (controller) controller.dispatchEvent({ type: event.type });\n    }\n\n    function onSessionEnd() {\n      renderer.setFramebuffer(null);\n      animation.stop();\n    }\n\n    this.setSession = function (value, options) {\n      session = value;\n\n      if (session !== null) {\n        session.addEventListener(\"select\", onSessionEvent);\n        session.addEventListener(\"selectstart\", onSessionEvent);\n        session.addEventListener(\"selectend\", onSessionEvent);\n        session.addEventListener(\"end\", onSessionEnd);\n\n        session.baseLayer = new XRWebGLLayer(session, gl);\n        session\n          .requestFrameOfReference(options.frameOfReferenceType)\n          .then(function (value) {\n            frameOfRef = value;\n\n            renderer.setFramebuffer(session.baseLayer.framebuffer);\n\n            animation.setContext(session);\n            animation.start();\n          });\n\n        //\n\n        inputSources = session.getInputSources();\n\n        session.addEventListener(\"inputsourceschange\", function () {\n          inputSources = session.getInputSources();\n          console.log(inputSources);\n        });\n      }\n    };\n\n    function updateCamera(camera, parent) {\n      if (parent === null) {\n        camera.matrixWorld.copy(camera.matrix);\n      } else {\n        camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n      }\n\n      camera.matrixWorldInverse.getInverse(camera.matrixWorld);\n    }\n\n    this.getCamera = function (camera) {\n      if (isPresenting()) {\n        var parent = camera.parent;\n        var cameras = cameraVR.cameras;\n\n        // apply camera.parent to cameraVR\n\n        updateCamera(cameraVR, parent);\n\n        for (var i = 0; i < cameras.length; i++) {\n          updateCamera(cameras[i], parent);\n        }\n\n        // update camera and its children\n\n        camera.matrixWorld.copy(cameraVR.matrixWorld);\n\n        var children = camera.children;\n\n        for (var i = 0, l = children.length; i < l; i++) {\n          children[i].updateMatrixWorld(true);\n        }\n\n        return cameraVR;\n      }\n\n      return camera;\n    };\n\n    this.isPresenting = isPresenting;\n\n    // Animation Loop\n\n    var onAnimationFrameCallback = null;\n\n    function onAnimationFrame(time, frame) {\n      pose = frame.getDevicePose(frameOfRef);\n\n      if (pose !== null) {\n        var layer = session.baseLayer;\n        var views = frame.views;\n\n        for (var i = 0; i < views.length; i++) {\n          var view = views[i];\n          var viewport = layer.getViewport(view);\n          var viewMatrix = pose.getViewMatrix(view);\n\n          var camera = cameraVR.cameras[i];\n          camera.matrix.fromArray(viewMatrix).getInverse(camera.matrix);\n          camera.projectionMatrix.fromArray(view.projectionMatrix);\n          camera.viewport.set(\n            viewport.x,\n            viewport.y,\n            viewport.width,\n            viewport.height\n          );\n\n          if (i === 0) {\n            cameraVR.matrix.copy(camera.matrix);\n\n            // HACK (mrdoob)\n            // https://github.com/w3c/webvr/issues/203\n\n            cameraVR.projectionMatrix.copy(camera.projectionMatrix);\n          }\n        }\n      }\n\n      //\n\n      for (var i = 0; i < controllers.length; i++) {\n        var controller = controllers[i];\n\n        var inputSource = inputSources[i];\n\n        if (inputSource) {\n          var inputPose = frame.getInputPose(inputSource, frameOfRef);\n\n          if (inputPose !== null) {\n            controller.matrix.elements = inputPose.pointerMatrix;\n            controller.matrix.decompose(\n              controller.position,\n              controller.rotation,\n              controller.scale\n            );\n            controller.visible = true;\n\n            continue;\n          }\n        }\n\n        controller.visible = false;\n      }\n\n      if (onAnimationFrameCallback) onAnimationFrameCallback(time);\n    }\n\n    var animation = new WebGLAnimation();\n    animation.setAnimationLoop(onAnimationFrame);\n\n    this.setAnimationLoop = function (callback) {\n      onAnimationFrameCallback = callback;\n    };\n\n    this.dispose = function () {};\n\n    // DEPRECATED\n\n    this.getStandingMatrix = function () {\n      console.warn(\n        \"THREE.WebXRManager: getStandingMatrix() is no longer needed.\"\n      );\n      return new THREE.Matrix4();\n    };\n\n    this.submitFrame = function () {};\n  }\n\n  /**\n   * @author supereggbert / http://www.paulbrunt.co.uk/\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author szimek / https://github.com/szimek/\n   * @author tschw\n   */\n\n  function WebGLRenderer(parameters) {\n    console.log(\"THREE.WebGLRenderer\", REVISION);\n\n    parameters = parameters || {};\n\n    var _canvas =\n        parameters.canvas !== undefined\n          ? parameters.canvas\n          : document.createElementNS(\"http://www.w3.org/1999/xhtml\", \"canvas\"),\n      _context = parameters.context !== undefined ? parameters.context : null,\n      _alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n      _depth = parameters.depth !== undefined ? parameters.depth : true,\n      _stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n      _antialias =\n        parameters.antialias !== undefined ? parameters.antialias : false,\n      _premultipliedAlpha =\n        parameters.premultipliedAlpha !== undefined\n          ? parameters.premultipliedAlpha\n          : true,\n      _preserveDrawingBuffer =\n        parameters.preserveDrawingBuffer !== undefined\n          ? parameters.preserveDrawingBuffer\n          : false,\n      _powerPreference =\n        parameters.powerPreference !== undefined\n          ? parameters.powerPreference\n          : \"default\";\n\n    var currentRenderList = null;\n    var currentRenderState = null;\n\n    // public properties\n\n    this.domElement = _canvas;\n    this.context = null;\n\n    // clearing\n\n    this.autoClear = true;\n    this.autoClearColor = true;\n    this.autoClearDepth = true;\n    this.autoClearStencil = true;\n\n    // scene graph\n\n    this.sortObjects = true;\n\n    // user-defined clipping\n\n    this.clippingPlanes = [];\n    this.localClippingEnabled = false;\n\n    // physically based shading\n\n    this.gammaFactor = 2.0; // for backwards compatibility\n    this.gammaInput = false;\n    this.gammaOutput = false;\n\n    // physical lights\n\n    this.physicallyCorrectLights = false;\n\n    // tone mapping\n\n    this.toneMapping = LinearToneMapping;\n    this.toneMappingExposure = 1.0;\n    this.toneMappingWhitePoint = 1.0;\n\n    // morphs\n\n    this.maxMorphTargets = 8;\n    this.maxMorphNormals = 4;\n\n    // internal properties\n\n    var _this = this,\n      _isContextLost = false,\n      // internal state cache\n\n      _framebuffer = null,\n      _currentRenderTarget = null,\n      _currentFramebuffer = null,\n      _currentMaterialId = -1,\n      // geometry and program caching\n\n      _currentGeometryProgram = {\n        geometry: null,\n        program: null,\n        wireframe: false,\n      },\n      _currentCamera = null,\n      _currentArrayCamera = null,\n      _currentViewport = new Vector4(),\n      _currentScissor = new Vector4(),\n      _currentScissorTest = null,\n      //\n\n      _usedTextureUnits = 0,\n      //\n\n      _width = _canvas.width,\n      _height = _canvas.height,\n      _pixelRatio = 1,\n      _viewport = new Vector4(0, 0, _width, _height),\n      _scissor = new Vector4(0, 0, _width, _height),\n      _scissorTest = false,\n      // frustum\n\n      _frustum = new Frustum(),\n      // clipping\n\n      _clipping = new WebGLClipping(),\n      _clippingEnabled = false,\n      _localClippingEnabled = false,\n      // camera matrices cache\n\n      _projScreenMatrix = new Matrix4(),\n      _vector3 = new Vector3();\n\n    function getTargetPixelRatio() {\n      return _currentRenderTarget === null ? _pixelRatio : 1;\n    }\n\n    // initialize\n\n    var _gl;\n\n    try {\n      var contextAttributes = {\n        alpha: _alpha,\n        depth: _depth,\n        stencil: _stencil,\n        antialias: _antialias,\n        premultipliedAlpha: _premultipliedAlpha,\n        preserveDrawingBuffer: _preserveDrawingBuffer,\n        powerPreference: _powerPreference,\n      };\n\n      // event listeners must be registered before WebGL context is created, see #12753\n\n      _canvas.addEventListener(\"webglcontextlost\", onContextLost, false);\n      _canvas.addEventListener(\"webglcontextrestored\", onContextRestore, false);\n\n      _gl =\n        _context ||\n        _canvas.getContext(\"webgl\", contextAttributes) ||\n        _canvas.getContext(\"experimental-webgl\", contextAttributes);\n\n      if (_gl === null) {\n        if (_canvas.getContext(\"webgl\") !== null) {\n          throw new Error(\n            \"Error creating WebGL context with your selected attributes.\"\n          );\n        } else {\n          throw new Error(\"Error creating WebGL context.\");\n        }\n      }\n\n      // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n      if (_gl.getShaderPrecisionFormat === undefined) {\n        _gl.getShaderPrecisionFormat = function () {\n          return { rangeMin: 1, rangeMax: 1, precision: 1 };\n        };\n      }\n    } catch (error) {\n      console.error(\"THREE.WebGLRenderer: \" + error.message);\n    }\n\n    var extensions, capabilities, state, info;\n    var properties, textures, attributes, geometries, objects;\n    var programCache, renderLists, renderStates;\n\n    var background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n    var utils;\n\n    function initGLContext() {\n      extensions = new WebGLExtensions(_gl);\n\n      capabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\n      if (!capabilities.isWebGL2) {\n        extensions.get(\"WEBGL_depth_texture\");\n        extensions.get(\"OES_texture_float\");\n        extensions.get(\"OES_texture_half_float\");\n        extensions.get(\"OES_texture_half_float_linear\");\n        extensions.get(\"OES_standard_derivatives\");\n        extensions.get(\"OES_element_index_uint\");\n        extensions.get(\"ANGLE_instanced_arrays\");\n      }\n\n      extensions.get(\"OES_texture_float_linear\");\n\n      utils = new WebGLUtils(_gl, extensions, capabilities);\n\n      state = new WebGLState(_gl, extensions, utils, capabilities);\n      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));\n      state.viewport(\n        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio)\n      );\n\n      info = new WebGLInfo(_gl);\n      properties = new WebGLProperties();\n      textures = new WebGLTextures(\n        _gl,\n        extensions,\n        state,\n        properties,\n        capabilities,\n        utils,\n        info\n      );\n      attributes = new WebGLAttributes(_gl);\n      geometries = new WebGLGeometries(_gl, attributes, info);\n      objects = new WebGLObjects(geometries, info);\n      morphtargets = new WebGLMorphtargets(_gl);\n      programCache = new WebGLPrograms(_this, extensions, capabilities);\n      renderLists = new WebGLRenderLists();\n      renderStates = new WebGLRenderStates();\n\n      background = new WebGLBackground(\n        _this,\n        state,\n        objects,\n        _premultipliedAlpha\n      );\n\n      bufferRenderer = new WebGLBufferRenderer(\n        _gl,\n        extensions,\n        info,\n        capabilities\n      );\n      indexedBufferRenderer = new WebGLIndexedBufferRenderer(\n        _gl,\n        extensions,\n        info,\n        capabilities\n      );\n\n      info.programs = programCache.programs;\n\n      _this.context = _gl;\n      _this.capabilities = capabilities;\n      _this.extensions = extensions;\n      _this.properties = properties;\n      _this.renderLists = renderLists;\n      _this.state = state;\n      _this.info = info;\n    }\n\n    initGLContext();\n\n    // vr\n\n    var vr =\n      \"xr\" in navigator ? new WebXRManager(_this) : new WebVRManager(_this);\n\n    this.vr = vr;\n\n    // shadow map\n\n    var shadowMap = new WebGLShadowMap(\n      _this,\n      objects,\n      capabilities.maxTextureSize\n    );\n\n    this.shadowMap = shadowMap;\n\n    // API\n\n    this.getContext = function () {\n      return _gl;\n    };\n\n    this.getContextAttributes = function () {\n      return _gl.getContextAttributes();\n    };\n\n    this.forceContextLoss = function () {\n      var extension = extensions.get(\"WEBGL_lose_context\");\n      if (extension) extension.loseContext();\n    };\n\n    this.forceContextRestore = function () {\n      var extension = extensions.get(\"WEBGL_lose_context\");\n      if (extension) extension.restoreContext();\n    };\n\n    this.getPixelRatio = function () {\n      return _pixelRatio;\n    };\n\n    this.setPixelRatio = function (value) {\n      if (value === undefined) return;\n\n      _pixelRatio = value;\n\n      this.setSize(_width, _height, false);\n    };\n\n    this.getSize = function () {\n      return {\n        width: _width,\n        height: _height,\n      };\n    };\n\n    this.setSize = function (width, height, updateStyle) {\n      if (vr.isPresenting()) {\n        console.warn(\n          \"THREE.WebGLRenderer: Can't change size while VR device is presenting.\"\n        );\n        return;\n      }\n\n      _width = width;\n      _height = height;\n\n      _canvas.width = width * _pixelRatio;\n      _canvas.height = height * _pixelRatio;\n\n      if (updateStyle !== false) {\n        _canvas.style.width = width + \"px\";\n        _canvas.style.height = height + \"px\";\n      }\n\n      this.setViewport(0, 0, width, height);\n    };\n\n    this.getDrawingBufferSize = function () {\n      return {\n        width: _width * _pixelRatio,\n        height: _height * _pixelRatio,\n      };\n    };\n\n    this.setDrawingBufferSize = function (width, height, pixelRatio) {\n      _width = width;\n      _height = height;\n\n      _pixelRatio = pixelRatio;\n\n      _canvas.width = width * pixelRatio;\n      _canvas.height = height * pixelRatio;\n\n      this.setViewport(0, 0, width, height);\n    };\n\n    this.getCurrentViewport = function () {\n      return _currentViewport;\n    };\n\n    this.setViewport = function (x, y, width, height) {\n      _viewport.set(x, _height - y - height, width, height);\n      state.viewport(\n        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio)\n      );\n    };\n\n    this.setScissor = function (x, y, width, height) {\n      _scissor.set(x, _height - y - height, width, height);\n      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));\n    };\n\n    this.setScissorTest = function (boolean) {\n      state.setScissorTest((_scissorTest = boolean));\n    };\n\n    // Clearing\n\n    this.getClearColor = function () {\n      return background.getClearColor();\n    };\n\n    this.setClearColor = function () {\n      background.setClearColor.apply(background, arguments);\n    };\n\n    this.getClearAlpha = function () {\n      return background.getClearAlpha();\n    };\n\n    this.setClearAlpha = function () {\n      background.setClearAlpha.apply(background, arguments);\n    };\n\n    this.clear = function (color, depth, stencil) {\n      var bits = 0;\n\n      if (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n      if (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n      if (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n      _gl.clear(bits);\n    };\n\n    this.clearColor = function () {\n      this.clear(true, false, false);\n    };\n\n    this.clearDepth = function () {\n      this.clear(false, true, false);\n    };\n\n    this.clearStencil = function () {\n      this.clear(false, false, true);\n    };\n\n    this.clearTarget = function (renderTarget, color, depth, stencil) {\n      this.setRenderTarget(renderTarget);\n      this.clear(color, depth, stencil);\n    };\n\n    //\n\n    this.dispose = function () {\n      _canvas.removeEventListener(\"webglcontextlost\", onContextLost, false);\n      _canvas.removeEventListener(\n        \"webglcontextrestored\",\n        onContextRestore,\n        false\n      );\n\n      renderLists.dispose();\n      renderStates.dispose();\n      properties.dispose();\n      objects.dispose();\n\n      vr.dispose();\n\n      animation.stop();\n    };\n\n    // Events\n\n    function onContextLost(event) {\n      event.preventDefault();\n\n      console.log(\"THREE.WebGLRenderer: Context Lost.\");\n\n      _isContextLost = true;\n    }\n\n    function onContextRestore(/* event */) {\n      console.log(\"THREE.WebGLRenderer: Context Restored.\");\n\n      _isContextLost = false;\n\n      initGLContext();\n    }\n\n    function onMaterialDispose(event) {\n      var material = event.target;\n\n      material.removeEventListener(\"dispose\", onMaterialDispose);\n\n      deallocateMaterial(material);\n    }\n\n    // Buffer deallocation\n\n    function deallocateMaterial(material) {\n      releaseMaterialProgramReference(material);\n\n      properties.remove(material);\n    }\n\n    function releaseMaterialProgramReference(material) {\n      var programInfo = properties.get(material).program;\n\n      material.program = undefined;\n\n      if (programInfo !== undefined) {\n        programCache.releaseProgram(programInfo);\n      }\n    }\n\n    // Buffer rendering\n\n    function renderObjectImmediate(object, program) {\n      object.render(function (object) {\n        _this.renderBufferImmediate(object, program);\n      });\n    }\n\n    this.renderBufferImmediate = function (object, program) {\n      state.initAttributes();\n\n      var buffers = properties.get(object);\n\n      if (object.hasPositions && !buffers.position)\n        buffers.position = _gl.createBuffer();\n      if (object.hasNormals && !buffers.normal)\n        buffers.normal = _gl.createBuffer();\n      if (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n      if (object.hasColors && !buffers.color)\n        buffers.color = _gl.createBuffer();\n\n      var programAttributes = program.getAttributes();\n\n      if (object.hasPositions) {\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n        _gl.bufferData(\n          _gl.ARRAY_BUFFER,\n          object.positionArray,\n          _gl.DYNAMIC_DRAW\n        );\n\n        state.enableAttribute(programAttributes.position);\n        _gl.vertexAttribPointer(\n          programAttributes.position,\n          3,\n          _gl.FLOAT,\n          false,\n          0,\n          0\n        );\n      }\n\n      if (object.hasNormals) {\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n        state.enableAttribute(programAttributes.normal);\n        _gl.vertexAttribPointer(\n          programAttributes.normal,\n          3,\n          _gl.FLOAT,\n          false,\n          0,\n          0\n        );\n      }\n\n      if (object.hasUvs) {\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n        state.enableAttribute(programAttributes.uv);\n        _gl.vertexAttribPointer(\n          programAttributes.uv,\n          2,\n          _gl.FLOAT,\n          false,\n          0,\n          0\n        );\n      }\n\n      if (object.hasColors) {\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n        state.enableAttribute(programAttributes.color);\n        _gl.vertexAttribPointer(\n          programAttributes.color,\n          3,\n          _gl.FLOAT,\n          false,\n          0,\n          0\n        );\n      }\n\n      state.disableUnusedAttributes();\n\n      _gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n      object.count = 0;\n    };\n\n    this.renderBufferDirect = function (\n      camera,\n      fog,\n      geometry,\n      material,\n      object,\n      group\n    ) {\n      var frontFaceCW = object.isMesh && object.normalMatrix.determinant() < 0;\n\n      state.setMaterial(material, frontFaceCW);\n\n      var program = setProgram(camera, fog, material, object);\n\n      var updateBuffers = false;\n\n      if (\n        _currentGeometryProgram.geometry !== geometry.id ||\n        _currentGeometryProgram.program !== program.id ||\n        _currentGeometryProgram.wireframe !== (material.wireframe === true)\n      ) {\n        _currentGeometryProgram.geometry = geometry.id;\n        _currentGeometryProgram.program = program.id;\n        _currentGeometryProgram.wireframe = material.wireframe === true;\n        updateBuffers = true;\n      }\n\n      if (object.morphTargetInfluences) {\n        morphtargets.update(object, geometry, material, program);\n\n        updateBuffers = true;\n      }\n\n      //\n\n      var index = geometry.index;\n      var position = geometry.attributes.position;\n      var rangeFactor = 1;\n\n      if (material.wireframe === true) {\n        index = geometries.getWireframeAttribute(geometry);\n        rangeFactor = 2;\n      }\n\n      var attribute;\n      var renderer = bufferRenderer;\n\n      if (index !== null) {\n        attribute = attributes.get(index);\n\n        renderer = indexedBufferRenderer;\n        renderer.setIndex(attribute);\n      }\n\n      if (updateBuffers) {\n        setupVertexAttributes(material, program, geometry);\n\n        if (index !== null) {\n          _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, attribute.buffer);\n        }\n      }\n\n      //\n\n      var dataCount = Infinity;\n\n      if (index !== null) {\n        dataCount = index.count;\n      } else if (position !== undefined) {\n        dataCount = position.count;\n      }\n\n      var rangeStart = geometry.drawRange.start * rangeFactor;\n      var rangeCount = geometry.drawRange.count * rangeFactor;\n\n      var groupStart = group !== null ? group.start * rangeFactor : 0;\n      var groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n      var drawStart = Math.max(rangeStart, groupStart);\n      var drawEnd =\n        Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) -\n        1;\n\n      var drawCount = Math.max(0, drawEnd - drawStart + 1);\n\n      if (drawCount === 0) return;\n\n      //\n\n      if (object.isMesh) {\n        if (material.wireframe === true) {\n          state.setLineWidth(\n            material.wireframeLinewidth * getTargetPixelRatio()\n          );\n          renderer.setMode(_gl.LINES);\n        } else {\n          switch (object.drawMode) {\n            case TrianglesDrawMode:\n              renderer.setMode(_gl.TRIANGLES);\n              break;\n\n            case TriangleStripDrawMode:\n              renderer.setMode(_gl.TRIANGLE_STRIP);\n              break;\n\n            case TriangleFanDrawMode:\n              renderer.setMode(_gl.TRIANGLE_FAN);\n              break;\n          }\n        }\n      } else if (object.isLine) {\n        var lineWidth = material.linewidth;\n\n        if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n        state.setLineWidth(lineWidth * getTargetPixelRatio());\n\n        if (object.isLineSegments) {\n          renderer.setMode(_gl.LINES);\n        } else if (object.isLineLoop) {\n          renderer.setMode(_gl.LINE_LOOP);\n        } else {\n          renderer.setMode(_gl.LINE_STRIP);\n        }\n      } else if (object.isPoints) {\n        renderer.setMode(_gl.POINTS);\n      } else if (object.isSprite) {\n        renderer.setMode(_gl.TRIANGLES);\n      }\n\n      if (geometry && geometry.isInstancedBufferGeometry) {\n        if (geometry.maxInstancedCount > 0) {\n          renderer.renderInstances(geometry, drawStart, drawCount);\n        }\n      } else {\n        renderer.render(drawStart, drawCount);\n      }\n    };\n\n    function setupVertexAttributes(material, program, geometry) {\n      if (\n        geometry &&\n        geometry.isInstancedBufferGeometry & !capabilities.isWebGL2\n      ) {\n        if (extensions.get(\"ANGLE_instanced_arrays\") === null) {\n          console.error(\n            \"THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\"\n          );\n          return;\n        }\n      }\n\n      state.initAttributes();\n\n      var geometryAttributes = geometry.attributes;\n\n      var programAttributes = program.getAttributes();\n\n      var materialDefaultAttributeValues = material.defaultAttributeValues;\n\n      for (var name in programAttributes) {\n        var programAttribute = programAttributes[name];\n\n        if (programAttribute >= 0) {\n          var geometryAttribute = geometryAttributes[name];\n\n          if (geometryAttribute !== undefined) {\n            var normalized = geometryAttribute.normalized;\n            var size = geometryAttribute.itemSize;\n\n            var attribute = attributes.get(geometryAttribute);\n\n            // TODO Attribute may not be available on context restore\n\n            if (attribute === undefined) continue;\n\n            var buffer = attribute.buffer;\n            var type = attribute.type;\n            var bytesPerElement = attribute.bytesPerElement;\n\n            if (geometryAttribute.isInterleavedBufferAttribute) {\n              var data = geometryAttribute.data;\n              var stride = data.stride;\n              var offset = geometryAttribute.offset;\n\n              if (data && data.isInstancedInterleavedBuffer) {\n                state.enableAttributeAndDivisor(\n                  programAttribute,\n                  data.meshPerAttribute\n                );\n\n                if (geometry.maxInstancedCount === undefined) {\n                  geometry.maxInstancedCount =\n                    data.meshPerAttribute * data.count;\n                }\n              } else {\n                state.enableAttribute(programAttribute);\n              }\n\n              _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n              _gl.vertexAttribPointer(\n                programAttribute,\n                size,\n                type,\n                normalized,\n                stride * bytesPerElement,\n                offset * bytesPerElement\n              );\n            } else {\n              if (geometryAttribute.isInstancedBufferAttribute) {\n                state.enableAttributeAndDivisor(\n                  programAttribute,\n                  geometryAttribute.meshPerAttribute\n                );\n\n                if (geometry.maxInstancedCount === undefined) {\n                  geometry.maxInstancedCount =\n                    geometryAttribute.meshPerAttribute *\n                    geometryAttribute.count;\n                }\n              } else {\n                state.enableAttribute(programAttribute);\n              }\n\n              _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n              _gl.vertexAttribPointer(\n                programAttribute,\n                size,\n                type,\n                normalized,\n                0,\n                0\n              );\n            }\n          } else if (materialDefaultAttributeValues !== undefined) {\n            var value = materialDefaultAttributeValues[name];\n\n            if (value !== undefined) {\n              switch (value.length) {\n                case 2:\n                  _gl.vertexAttrib2fv(programAttribute, value);\n                  break;\n\n                case 3:\n                  _gl.vertexAttrib3fv(programAttribute, value);\n                  break;\n\n                case 4:\n                  _gl.vertexAttrib4fv(programAttribute, value);\n                  break;\n\n                default:\n                  _gl.vertexAttrib1fv(programAttribute, value);\n              }\n            }\n          }\n        }\n      }\n\n      state.disableUnusedAttributes();\n    }\n\n    // Compile\n\n    this.compile = function (scene, camera) {\n      currentRenderState = renderStates.get(scene, camera);\n      currentRenderState.init();\n\n      scene.traverse(function (object) {\n        if (object.isLight) {\n          currentRenderState.pushLight(object);\n\n          if (object.castShadow) {\n            currentRenderState.pushShadow(object);\n          }\n        }\n      });\n\n      currentRenderState.setupLights(camera);\n\n      scene.traverse(function (object) {\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            for (var i = 0; i < object.material.length; i++) {\n              initMaterial(object.material[i], scene.fog, object);\n            }\n          } else {\n            initMaterial(object.material, scene.fog, object);\n          }\n        }\n      });\n    };\n\n    // Animation Loop\n\n    var onAnimationFrameCallback = null;\n\n    function onAnimationFrame(time) {\n      if (vr.isPresenting()) return;\n      if (onAnimationFrameCallback) onAnimationFrameCallback(time);\n    }\n\n    var animation = new WebGLAnimation();\n    animation.setAnimationLoop(onAnimationFrame);\n\n    if (typeof window !== \"undefined\") animation.setContext(window);\n\n    this.setAnimationLoop = function (callback) {\n      onAnimationFrameCallback = callback;\n      vr.setAnimationLoop(callback);\n\n      animation.start();\n    };\n\n    // Rendering\n\n    this.render = function (scene, camera, renderTarget, forceClear) {\n      if (!(camera && camera.isCamera)) {\n        console.error(\n          \"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\"\n        );\n        return;\n      }\n\n      if (_isContextLost) return;\n\n      // reset caching for this frame\n\n      _currentGeometryProgram.geometry = null;\n      _currentGeometryProgram.program = null;\n      _currentGeometryProgram.wireframe = false;\n      _currentMaterialId = -1;\n      _currentCamera = null;\n\n      // update scene graph\n\n      const updateList = Object3D.UpdateList;\n      for (let index = 0; index < updateList.length; index++) {\n        const element = updateList[index];\n        element.updateMatrixWorld();\n      }\n      Object3D.UpdateList = [];\n\n      // update camera matrices and frustum\n\n      //\n\n      currentRenderState = renderStates.get(scene, camera);\n      currentRenderState.init();\n\n      scene.onBeforeRender(_this, scene, camera, renderTarget);\n\n      _projScreenMatrix.multiplyMatrices(\n        camera.projectionMatrix,\n        camera.matrixWorldInverse\n      );\n      _frustum.setFromMatrix(_projScreenMatrix);\n\n      _localClippingEnabled = this.localClippingEnabled;\n      _clippingEnabled = _clipping.init(\n        this.clippingPlanes,\n        _localClippingEnabled,\n        camera\n      );\n\n      currentRenderList = renderLists.get(scene, camera);\n      currentRenderList.init();\n\n      projectObject(scene, camera, _this.sortObjects);\n\n      if (_this.sortObjects === true) {\n        currentRenderList.sort();\n      }\n\n      //\n\n      if (_clippingEnabled) _clipping.beginShadows();\n\n      var shadowsArray = currentRenderState.state.shadowsArray;\n\n      shadowMap.render(shadowsArray, scene, camera);\n\n      currentRenderState.setupLights(camera);\n\n      if (_clippingEnabled) _clipping.endShadows();\n\n      //\n\n      if (this.info.autoReset) this.info.reset();\n\n      if (renderTarget === undefined) {\n        renderTarget = null;\n      }\n\n      this.setRenderTarget(renderTarget);\n\n      //\n\n      background.render(currentRenderList, scene, camera, forceClear);\n\n      // render scene\n\n      var opaqueObjects = currentRenderList.opaque;\n      var transparentObjects = currentRenderList.transparent;\n\n      if (scene.overrideMaterial) {\n        var overrideMaterial = scene.overrideMaterial;\n\n        if (opaqueObjects.length)\n          renderObjects(opaqueObjects, scene, camera, overrideMaterial);\n        if (transparentObjects.length)\n          renderObjects(transparentObjects, scene, camera, overrideMaterial);\n      } else {\n        // opaque pass (front-to-back order)\n\n        if (opaqueObjects.length) renderObjects(opaqueObjects, scene, camera);\n\n        // transparent pass (back-to-front order)\n\n        if (transparentObjects.length)\n          renderObjects(transparentObjects, scene, camera);\n      }\n\n      // Generate mipmap if we're using any kind of mipmap filtering\n\n      if (renderTarget) {\n        textures.updateRenderTargetMipmap(renderTarget);\n      }\n\n      // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n      state.buffers.depth.setTest(true);\n      state.buffers.depth.setMask(true);\n      state.buffers.color.setMask(true);\n\n      state.setPolygonOffset(false);\n\n      scene.onAfterRender(_this, scene, camera);\n\n      if (vr.enabled) {\n        vr.submitFrame();\n      }\n\n      // _gl.finish();\n\n      currentRenderList = null;\n      currentRenderState = null;\n    };\n\n    /*\n\t\t// TODO Duplicated code (Frustum)\n\n\t\tvar _sphere = new Sphere();\n\n\t\tfunction isObjectViewable( object ) {\n\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null )\n\t\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy( geometry.boundingSphere ).\n\t\t\tapplyMatrix4( object.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSpriteViewable( sprite ) {\n\n\t\t\t_sphere.center.set( 0, 0, 0 );\n\t\t\t_sphere.radius = 0.7071067811865476;\n\t\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\t\treturn isSphereViewable( _sphere );\n\n\t\t}\n\n\t\tfunction isSphereViewable( sphere ) {\n\n\t\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\n\n\t\t\tvar numPlanes = _clipping.numPlanes;\n\n\t\t\tif ( numPlanes === 0 ) return true;\n\n\t\t\tvar planes = _this.clippingPlanes,\n\n\t\t\t\tcenter = sphere.center,\n\t\t\t\tnegRad = - sphere.radius,\n\t\t\t\ti = 0;\n\n\t\t\tdo {\n\n\t\t\t\t// out when deeper than radius in the negative halfspace\n\t\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\n\n\t\t\t} while ( ++ i !== numPlanes );\n\n\t\t\treturn true;\n\n\t\t}\n\t\t*/\n\n    function projectObject(object, camera, sortObjects) {\n      if (object.visible === false) return;\n\n      var visible = object.layers.test(camera.layers);\n\n      if (visible) {\n        if (object.isLight) {\n          currentRenderState.pushLight(object);\n\n          if (object.castShadow) {\n            currentRenderState.pushShadow(object);\n          }\n        } else if (object.isSprite) {\n          if (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n            if (sortObjects) {\n              _vector3\n                .setFromMatrixPosition(object.matrixWorld)\n                .applyMatrix4(_projScreenMatrix);\n            }\n\n            var geometry = objects.update(object);\n            var material = object.material;\n\n            currentRenderList.push(\n              object,\n              geometry,\n              material,\n              _vector3.z,\n              null\n            );\n          }\n        } else if (object.isImmediateRenderObject) {\n          if (sortObjects) {\n            _vector3\n              .setFromMatrixPosition(object.matrixWorld)\n              .applyMatrix4(_projScreenMatrix);\n          }\n\n          currentRenderList.push(\n            object,\n            null,\n            object.material,\n            _vector3.z,\n            null\n          );\n        } else if (object.isMesh || object.isLine || object.isPoints) {\n          if (object.isSkinnedMesh) {\n            object.skeleton.update();\n          }\n\n          if (!object.frustumCulled || _frustum.intersectsObject(object)) {\n            if (sortObjects) {\n              _vector3\n                .setFromMatrixPosition(object.matrixWorld)\n                .applyMatrix4(_projScreenMatrix);\n            }\n\n            var geometry = objects.update(object);\n            var material = object.material;\n\n            if (Array.isArray(material)) {\n              var groups = geometry.groups;\n\n              for (var i = 0, l = groups.length; i < l; i++) {\n                var group = groups[i];\n                var groupMaterial = material[group.materialIndex];\n\n                if (groupMaterial && groupMaterial.visible) {\n                  currentRenderList.push(\n                    object,\n                    geometry,\n                    groupMaterial,\n                    _vector3.z,\n                    group\n                  );\n                }\n              }\n            } else if (material.visible) {\n              currentRenderList.push(\n                object,\n                geometry,\n                material,\n                _vector3.z,\n                null\n              );\n            }\n          }\n        }\n      }\n\n      var children = object.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        projectObject(children[i], camera, sortObjects);\n      }\n    }\n\n    function renderObjects(renderList, scene, camera, overrideMaterial) {\n      for (var i = 0, l = renderList.length; i < l; i++) {\n        var renderItem = renderList[i];\n\n        var object = renderItem.object;\n        var geometry = renderItem.geometry;\n        var material =\n          overrideMaterial === undefined\n            ? renderItem.material\n            : overrideMaterial;\n        var group = renderItem.group;\n\n        if (camera.isArrayCamera) {\n          _currentArrayCamera = camera;\n\n          var cameras = camera.cameras;\n\n          for (var j = 0, jl = cameras.length; j < jl; j++) {\n            var camera2 = cameras[j];\n\n            if (object.layers.test(camera2.layers)) {\n              if (\"viewport\" in camera2) {\n                // XR\n\n                state.viewport(_currentViewport.copy(camera2.viewport));\n              } else {\n                var bounds = camera2.bounds;\n\n                var x = bounds.x * _width;\n                var y = bounds.y * _height;\n                var width = bounds.z * _width;\n                var height = bounds.w * _height;\n\n                state.viewport(\n                  _currentViewport\n                    .set(x, y, width, height)\n                    .multiplyScalar(_pixelRatio)\n                );\n              }\n\n              renderObject(object, scene, camera2, geometry, material, group);\n            }\n          }\n        } else {\n          _currentArrayCamera = null;\n\n          renderObject(object, scene, camera, geometry, material, group);\n        }\n      }\n    }\n\n    function renderObject(object, scene, camera, geometry, material, group) {\n      object.onBeforeRender(_this, scene, camera, geometry, material, group);\n      currentRenderState = renderStates.get(\n        scene,\n        _currentArrayCamera || camera\n      );\n\n      object.modelViewMatrix.multiplyMatrices(\n        camera.matrixWorldInverse,\n        object.matrixWorld\n      );\n      object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n      if (object.isImmediateRenderObject) {\n        state.setMaterial(material);\n\n        var program = setProgram(camera, scene.fog, material, object);\n\n        _currentGeometryProgram.geometry = null;\n        _currentGeometryProgram.program = null;\n        _currentGeometryProgram.wireframe = false;\n\n        renderObjectImmediate(object, program);\n      } else {\n        _this.renderBufferDirect(\n          camera,\n          scene.fog,\n          geometry,\n          material,\n          object,\n          group\n        );\n      }\n\n      object.onAfterRender(_this, scene, camera, geometry, material, group);\n      currentRenderState = renderStates.get(\n        scene,\n        _currentArrayCamera || camera\n      );\n    }\n\n    function initMaterial(material, fog, object) {\n      var materialProperties = properties.get(material);\n\n      var lights = currentRenderState.state.lights;\n      var shadowsArray = currentRenderState.state.shadowsArray;\n\n      var lightsHash = materialProperties.lightsHash;\n      var lightsStateHash = lights.state.hash;\n\n      var parameters = programCache.getParameters(\n        material,\n        lights.state,\n        shadowsArray,\n        fog,\n        _clipping.numPlanes,\n        _clipping.numIntersection,\n        object\n      );\n\n      var code = programCache.getProgramCode(material, parameters);\n\n      var program = materialProperties.program;\n      var programChange = true;\n\n      if (program === undefined) {\n        // new material\n        material.addEventListener(\"dispose\", onMaterialDispose);\n      } else if (program.code !== code) {\n        // changed glsl or parameters\n        releaseMaterialProgramReference(material);\n      } else if (\n        lightsHash.stateID !== lightsStateHash.stateID ||\n        lightsHash.directionalLength !== lightsStateHash.directionalLength ||\n        lightsHash.pointLength !== lightsStateHash.pointLength ||\n        lightsHash.spotLength !== lightsStateHash.spotLength ||\n        lightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||\n        lightsHash.hemiLength !== lightsStateHash.hemiLength ||\n        lightsHash.shadowsLength !== lightsStateHash.shadowsLength\n      ) {\n        lightsHash.stateID = lightsStateHash.stateID;\n        lightsHash.directionalLength = lightsStateHash.directionalLength;\n        lightsHash.pointLength = lightsStateHash.pointLength;\n        lightsHash.spotLength = lightsStateHash.spotLength;\n        lightsHash.rectAreaLength = lightsStateHash.rectAreaLength;\n        lightsHash.hemiLength = lightsStateHash.hemiLength;\n        lightsHash.shadowsLength = lightsStateHash.shadowsLength;\n\n        programChange = false;\n      } else if (parameters.shaderID !== undefined) {\n        // same glsl and uniform list\n        return;\n      } else {\n        // only rebuild uniform list\n        programChange = false;\n      }\n\n      if (programChange) {\n        if (parameters.shaderID) {\n          var shader = ShaderLib[parameters.shaderID];\n\n          materialProperties.shader = {\n            name: material.type,\n            uniforms: UniformsUtils.clone(shader.uniforms),\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader,\n          };\n        } else {\n          materialProperties.shader = {\n            name: material.type,\n            uniforms: material.uniforms,\n            vertexShader: material.vertexShader,\n            fragmentShader: material.fragmentShader,\n          };\n        }\n\n        material.onBeforeCompile(materialProperties.shader, _this);\n\n        // Computing code again as onBeforeCompile may have changed the shaders\n        code = programCache.getProgramCode(material, parameters);\n\n        program = programCache.acquireProgram(\n          material,\n          materialProperties.shader,\n          parameters,\n          code\n        );\n\n        materialProperties.program = program;\n        material.program = program;\n      }\n\n      var programAttributes = program.getAttributes();\n\n      if (material.morphTargets) {\n        material.numSupportedMorphTargets = 0;\n\n        for (var i = 0; i < _this.maxMorphTargets; i++) {\n          if (programAttributes[\"morphTarget\" + i] >= 0) {\n            material.numSupportedMorphTargets++;\n          }\n        }\n      }\n\n      if (material.morphNormals) {\n        material.numSupportedMorphNormals = 0;\n\n        for (var i = 0; i < _this.maxMorphNormals; i++) {\n          if (programAttributes[\"morphNormal\" + i] >= 0) {\n            material.numSupportedMorphNormals++;\n          }\n        }\n      }\n\n      var uniforms = materialProperties.shader.uniforms;\n\n      if (\n        (!material.isShaderMaterial && !material.isRawShaderMaterial) ||\n        material.clipping === true\n      ) {\n        materialProperties.numClippingPlanes = _clipping.numPlanes;\n        materialProperties.numIntersection = _clipping.numIntersection;\n        uniforms.clippingPlanes = _clipping.uniform;\n      }\n\n      materialProperties.fog = fog;\n\n      // store the light setup it was created for\n      if (lightsHash === undefined) {\n        materialProperties.lightsHash = lightsHash = {};\n      }\n\n      lightsHash.stateID = lightsStateHash.stateID;\n      lightsHash.directionalLength = lightsStateHash.directionalLength;\n      lightsHash.pointLength = lightsStateHash.pointLength;\n      lightsHash.spotLength = lightsStateHash.spotLength;\n      lightsHash.rectAreaLength = lightsStateHash.rectAreaLength;\n      lightsHash.hemiLength = lightsStateHash.hemiLength;\n      lightsHash.shadowsLength = lightsStateHash.shadowsLength;\n\n      if (material.lights) {\n        // wire up the material to this renderer's lighting state\n\n        uniforms.ambientLightColor.value = lights.state.ambient;\n        uniforms.directionalLights.value = lights.state.directional;\n        uniforms.spotLights.value = lights.state.spot;\n        uniforms.rectAreaLights.value = lights.state.rectArea;\n        uniforms.pointLights.value = lights.state.point;\n        uniforms.hemisphereLights.value = lights.state.hemi;\n\n        uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n        uniforms.directionalShadowMatrix.value =\n          lights.state.directionalShadowMatrix;\n        uniforms.spotShadowMap.value = lights.state.spotShadowMap;\n        uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n        uniforms.pointShadowMap.value = lights.state.pointShadowMap;\n        uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n        // TODO (abelnation): add area lights shadow info to uniforms\n      }\n\n      var progUniforms = materialProperties.program.getUniforms(),\n        uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\n      materialProperties.uniformsList = uniformsList;\n    }\n\n    function setProgram(camera, fog, material, object) {\n      _usedTextureUnits = 0;\n\n      var materialProperties = properties.get(material);\n      var lights = currentRenderState.state.lights;\n\n      var lightsHash = materialProperties.lightsHash;\n      var lightsStateHash = lights.state.hash;\n\n      if (_clippingEnabled) {\n        if (_localClippingEnabled || camera !== _currentCamera) {\n          var useCache =\n            camera === _currentCamera && material.id === _currentMaterialId;\n\n          // we might want to call this function with some ClippingGroup\n          // object instead of the material, once it becomes feasible\n          // (#8465, #8379)\n          _clipping.setState(\n            material.clippingPlanes,\n            material.clipIntersection,\n            material.clipShadows,\n            camera,\n            materialProperties,\n            useCache\n          );\n        }\n      }\n\n      if (material.needsUpdate === false) {\n        if (materialProperties.program === undefined) {\n          material.needsUpdate = true;\n        } else if (material.fog && materialProperties.fog !== fog) {\n          material.needsUpdate = true;\n        } else if (\n          material.lights &&\n          (lightsHash.stateID !== lightsStateHash.stateID ||\n            lightsHash.directionalLength !==\n              lightsStateHash.directionalLength ||\n            lightsHash.pointLength !== lightsStateHash.pointLength ||\n            lightsHash.spotLength !== lightsStateHash.spotLength ||\n            lightsHash.rectAreaLength !== lightsStateHash.rectAreaLength ||\n            lightsHash.hemiLength !== lightsStateHash.hemiLength ||\n            lightsHash.shadowsLength !== lightsStateHash.shadowsLength)\n        ) {\n          material.needsUpdate = true;\n        } else if (\n          materialProperties.numClippingPlanes !== undefined &&\n          (materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n            materialProperties.numIntersection !== _clipping.numIntersection)\n        ) {\n          material.needsUpdate = true;\n        }\n      }\n\n      if (material.needsUpdate) {\n        initMaterial(material, fog, object);\n        material.needsUpdate = false;\n      }\n\n      var refreshProgram = false;\n      var refreshMaterial = false;\n      var refreshLights = false;\n\n      var program = materialProperties.program,\n        p_uniforms = program.getUniforms(),\n        m_uniforms = materialProperties.shader.uniforms;\n\n      if (state.useProgram(program.program)) {\n        refreshProgram = true;\n        refreshMaterial = true;\n        refreshLights = true;\n      }\n\n      if (material.id !== _currentMaterialId) {\n        _currentMaterialId = material.id;\n\n        refreshMaterial = true;\n      }\n\n      if (refreshProgram || camera !== _currentCamera) {\n        p_uniforms.setValue(_gl, \"projectionMatrix\", camera.projectionMatrix);\n\n        if (capabilities.logarithmicDepthBuffer) {\n          p_uniforms.setValue(\n            _gl,\n            \"logDepthBufFC\",\n            2.0 / (Math.log(camera.far + 1.0) / Math.LN2)\n          );\n        }\n\n        // Avoid unneeded uniform updates per ArrayCamera's sub-camera\n\n        if (_currentCamera !== (_currentArrayCamera || camera)) {\n          _currentCamera = _currentArrayCamera || camera;\n\n          // lighting uniforms depend on the camera so enforce an update\n          // now, in case this material supports lights - or later, when\n          // the next material that does gets activated:\n\n          refreshMaterial = true; // set to true on material change\n          refreshLights = true; // remains set until update done\n        }\n\n        // load material specific uniforms\n        // (shader material also gets them for the sake of genericity)\n\n        if (\n          material.isShaderMaterial ||\n          material.isMeshPhongMaterial ||\n          material.isMeshStandardMaterial ||\n          material.envMap\n        ) {\n          var uCamPos = p_uniforms.map.cameraPosition;\n\n          if (uCamPos !== undefined) {\n            uCamPos.setValue(\n              _gl,\n              _vector3.setFromMatrixPosition(camera.matrixWorld)\n            );\n          }\n        }\n\n        if (\n          material.isMeshPhongMaterial ||\n          material.isMeshLambertMaterial ||\n          material.isMeshBasicMaterial ||\n          material.isMeshStandardMaterial ||\n          material.isShaderMaterial ||\n          material.skinning\n        ) {\n          p_uniforms.setValue(_gl, \"viewMatrix\", camera.matrixWorldInverse);\n        }\n      }\n\n      // skinning uniforms must be set even if material didn't change\n      // auto-setting of texture unit for bone texture must go before other textures\n      // not sure why, but otherwise weird things happen\n\n      if (material.skinning) {\n        p_uniforms.setOptional(_gl, object, \"bindMatrix\");\n        p_uniforms.setOptional(_gl, object, \"bindMatrixInverse\");\n\n        var skeleton = object.skeleton;\n\n        if (skeleton) {\n          var bones = skeleton.bones;\n\n          if (capabilities.floatVertexTextures) {\n            if (skeleton.boneTexture === undefined) {\n              // layout (1 matrix = 4 pixels)\n              //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n              //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n              //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n              //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n              //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n              var size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n              size = _Math.ceilPowerOfTwo(size);\n              size = Math.max(size, 4);\n\n              var boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n              boneMatrices.set(skeleton.boneMatrices); // copy current values\n\n              var boneTexture = new DataTexture(\n                boneMatrices,\n                size,\n                size,\n                RGBAFormat,\n                FloatType\n              );\n              boneTexture.needsUpdate = true;\n\n              skeleton.boneMatrices = boneMatrices;\n              skeleton.boneTexture = boneTexture;\n              skeleton.boneTextureSize = size;\n            }\n\n            p_uniforms.setValue(_gl, \"boneTexture\", skeleton.boneTexture);\n            p_uniforms.setValue(\n              _gl,\n              \"boneTextureSize\",\n              skeleton.boneTextureSize\n            );\n          } else {\n            p_uniforms.setOptional(_gl, skeleton, \"boneMatrices\");\n          }\n        }\n      }\n\n      if (refreshMaterial) {\n        p_uniforms.setValue(\n          _gl,\n          \"toneMappingExposure\",\n          _this.toneMappingExposure\n        );\n        p_uniforms.setValue(\n          _gl,\n          \"toneMappingWhitePoint\",\n          _this.toneMappingWhitePoint\n        );\n\n        if (material.lights) {\n          // the current material requires lighting info\n\n          // note: all lighting uniforms are always set correctly\n          // they simply reference the renderer's state for their\n          // values\n          //\n          // use the current material's .needsUpdate flags to set\n          // the GL state when required\n\n          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n        }\n\n        // refresh uniforms common to several materials\n\n        if (fog && material.fog) {\n          refreshUniformsFog(m_uniforms, fog);\n        }\n\n        if (material.isMeshBasicMaterial) {\n          refreshUniformsCommon(m_uniforms, material);\n        } else if (material.isMeshLambertMaterial) {\n          refreshUniformsCommon(m_uniforms, material);\n          refreshUniformsLambert(m_uniforms, material);\n        } else if (material.isMeshPhongMaterial) {\n          refreshUniformsCommon(m_uniforms, material);\n\n          if (material.isMeshToonMaterial) {\n            refreshUniformsToon(m_uniforms, material);\n          } else {\n            refreshUniformsPhong(m_uniforms, material);\n          }\n        } else if (material.isMeshStandardMaterial) {\n          refreshUniformsCommon(m_uniforms, material);\n\n          if (material.isMeshPhysicalMaterial) {\n            refreshUniformsPhysical(m_uniforms, material);\n          } else {\n            refreshUniformsStandard(m_uniforms, material);\n          }\n        } else if (material.isMeshDepthMaterial) {\n          refreshUniformsCommon(m_uniforms, material);\n          refreshUniformsDepth(m_uniforms, material);\n        } else if (material.isMeshDistanceMaterial) {\n          refreshUniformsCommon(m_uniforms, material);\n          refreshUniformsDistance(m_uniforms, material);\n        } else if (material.isMeshNormalMaterial) {\n          refreshUniformsCommon(m_uniforms, material);\n          refreshUniformsNormal(m_uniforms, material);\n        } else if (material.isLineBasicMaterial) {\n          refreshUniformsLine(m_uniforms, material);\n\n          if (material.isLineDashedMaterial) {\n            refreshUniformsDash(m_uniforms, material);\n          }\n        } else if (material.isPointsMaterial) {\n          refreshUniformsPoints(m_uniforms, material);\n        } else if (material.isSpriteMaterial) {\n          refreshUniformsSprites(m_uniforms, material);\n        } else if (material.isShadowMaterial) {\n          m_uniforms.color.value = material.color;\n          m_uniforms.opacity.value = material.opacity;\n        }\n\n        // RectAreaLight Texture\n        // TODO (mrdoob): Find a nicer implementation\n\n        if (m_uniforms.ltc_1 !== undefined)\n          m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n        if (m_uniforms.ltc_2 !== undefined)\n          m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n\n        WebGLUniforms.upload(\n          _gl,\n          materialProperties.uniformsList,\n          m_uniforms,\n          _this\n        );\n      }\n\n      if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n        WebGLUniforms.upload(\n          _gl,\n          materialProperties.uniformsList,\n          m_uniforms,\n          _this\n        );\n        material.uniformsNeedUpdate = false;\n      }\n\n      if (material.isSpriteMaterial) {\n        p_uniforms.setValue(_gl, \"center\", object.center);\n      }\n\n      // common matrices\n\n      p_uniforms.setValue(_gl, \"modelViewMatrix\", object.modelViewMatrix);\n      p_uniforms.setValue(_gl, \"normalMatrix\", object.normalMatrix);\n      p_uniforms.setValue(_gl, \"modelMatrix\", object.matrixWorld);\n\n      return program;\n    }\n\n    // Uniforms (refresh uniforms objects)\n\n    function refreshUniformsCommon(uniforms, material) {\n      uniforms.opacity.value = material.opacity;\n\n      if (material.color) {\n        uniforms.diffuse.value = material.color;\n      }\n\n      if (material.emissive) {\n        uniforms.emissive.value\n          .copy(material.emissive)\n          .multiplyScalar(material.emissiveIntensity);\n      }\n\n      if (material.map) {\n        uniforms.map.value = material.map;\n      }\n\n      if (material.alphaMap) {\n        uniforms.alphaMap.value = material.alphaMap;\n      }\n\n      if (material.specularMap) {\n        uniforms.specularMap.value = material.specularMap;\n      }\n\n      if (material.envMap) {\n        uniforms.envMap.value = material.envMap;\n\n        // don't flip CubeTexture envMaps, flip everything else:\n        //  WebGLRenderTargetCube will be flipped for backwards compatibility\n        //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n        // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n        uniforms.flipEnvMap.value = !(\n          material.envMap && material.envMap.isCubeTexture\n        )\n          ? 1\n          : -1;\n\n        uniforms.reflectivity.value = material.reflectivity;\n        uniforms.refractionRatio.value = material.refractionRatio;\n\n        uniforms.maxMipLevel.value = properties.get(\n          material.envMap\n        ).__maxMipLevel;\n      }\n\n      if (material.lightMap) {\n        uniforms.lightMap.value = material.lightMap;\n        uniforms.lightMapIntensity.value = material.lightMapIntensity;\n      }\n\n      if (material.aoMap) {\n        uniforms.aoMap.value = material.aoMap;\n        uniforms.aoMapIntensity.value = material.aoMapIntensity;\n      }\n\n      // uv repeat and offset setting priorities\n      // 1. color map\n      // 2. specular map\n      // 3. normal map\n      // 4. bump map\n      // 5. alpha map\n      // 6. emissive map\n\n      var uvScaleMap;\n\n      if (material.map) {\n        uvScaleMap = material.map;\n      } else if (material.specularMap) {\n        uvScaleMap = material.specularMap;\n      } else if (material.displacementMap) {\n        uvScaleMap = material.displacementMap;\n      } else if (material.normalMap) {\n        uvScaleMap = material.normalMap;\n      } else if (material.bumpMap) {\n        uvScaleMap = material.bumpMap;\n      } else if (material.roughnessMap) {\n        uvScaleMap = material.roughnessMap;\n      } else if (material.metalnessMap) {\n        uvScaleMap = material.metalnessMap;\n      } else if (material.alphaMap) {\n        uvScaleMap = material.alphaMap;\n      } else if (material.emissiveMap) {\n        uvScaleMap = material.emissiveMap;\n      }\n\n      if (uvScaleMap !== undefined) {\n        // backwards compatibility\n        if (uvScaleMap.isWebGLRenderTarget) {\n          uvScaleMap = uvScaleMap.texture;\n        }\n\n        if (uvScaleMap.matrixAutoUpdate === true) {\n          uvScaleMap.updateMatrix();\n        }\n\n        uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n      }\n    }\n\n    function refreshUniformsLine(uniforms, material) {\n      uniforms.diffuse.value = material.color;\n      uniforms.opacity.value = material.opacity;\n    }\n\n    function refreshUniformsDash(uniforms, material) {\n      uniforms.dashSize.value = material.dashSize;\n      uniforms.totalSize.value = material.dashSize + material.gapSize;\n      uniforms.scale.value = material.scale;\n    }\n\n    function refreshUniformsPoints(uniforms, material) {\n      uniforms.diffuse.value = material.color;\n      uniforms.opacity.value = material.opacity;\n      uniforms.size.value = material.size * _pixelRatio;\n      uniforms.scale.value = _height * 0.5;\n\n      uniforms.map.value = material.map;\n\n      if (material.map !== null) {\n        if (material.map.matrixAutoUpdate === true) {\n          material.map.updateMatrix();\n        }\n\n        uniforms.uvTransform.value.copy(material.map.matrix);\n      }\n    }\n\n    function refreshUniformsSprites(uniforms, material) {\n      uniforms.diffuse.value = material.color;\n      uniforms.opacity.value = material.opacity;\n      uniforms.rotation.value = material.rotation;\n      uniforms.map.value = material.map;\n\n      if (material.map !== null) {\n        if (material.map.matrixAutoUpdate === true) {\n          material.map.updateMatrix();\n        }\n\n        uniforms.uvTransform.value.copy(material.map.matrix);\n      }\n    }\n\n    function refreshUniformsFog(uniforms, fog) {\n      uniforms.fogColor.value = fog.color;\n\n      if (fog.isFog) {\n        uniforms.fogNear.value = fog.near;\n        uniforms.fogFar.value = fog.far;\n      } else if (fog.isFogExp2) {\n        uniforms.fogDensity.value = fog.density;\n      }\n    }\n\n    function refreshUniformsLambert(uniforms, material) {\n      if (material.emissiveMap) {\n        uniforms.emissiveMap.value = material.emissiveMap;\n      }\n    }\n\n    function refreshUniformsPhong(uniforms, material) {\n      uniforms.specular.value = material.specular;\n      uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n      if (material.emissiveMap) {\n        uniforms.emissiveMap.value = material.emissiveMap;\n      }\n\n      if (material.bumpMap) {\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.bumpScale.value = material.bumpScale;\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n      }\n\n      if (material.normalMap) {\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.normalScale.value.copy(material.normalScale);\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\n      }\n\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n    }\n\n    function refreshUniformsToon(uniforms, material) {\n      refreshUniformsPhong(uniforms, material);\n\n      if (material.gradientMap) {\n        uniforms.gradientMap.value = material.gradientMap;\n      }\n    }\n\n    function refreshUniformsStandard(uniforms, material) {\n      uniforms.roughness.value = material.roughness;\n      uniforms.metalness.value = material.metalness;\n\n      if (material.roughnessMap) {\n        uniforms.roughnessMap.value = material.roughnessMap;\n      }\n\n      if (material.metalnessMap) {\n        uniforms.metalnessMap.value = material.metalnessMap;\n      }\n\n      if (material.emissiveMap) {\n        uniforms.emissiveMap.value = material.emissiveMap;\n      }\n\n      if (material.bumpMap) {\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.bumpScale.value = material.bumpScale;\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n      }\n\n      if (material.normalMap) {\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.normalScale.value.copy(material.normalScale);\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\n      }\n\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n\n      if (material.envMap) {\n        //uniforms.envMap.value = material.envMap; // part of uniforms common\n        uniforms.envMapIntensity.value = material.envMapIntensity;\n      }\n    }\n\n    function refreshUniformsPhysical(uniforms, material) {\n      refreshUniformsStandard(uniforms, material);\n\n      uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n      uniforms.clearCoat.value = material.clearCoat;\n      uniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n    }\n\n    function refreshUniformsDepth(uniforms, material) {\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n    }\n\n    function refreshUniformsDistance(uniforms, material) {\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n\n      uniforms.referencePosition.value.copy(material.referencePosition);\n      uniforms.nearDistance.value = material.nearDistance;\n      uniforms.farDistance.value = material.farDistance;\n    }\n\n    function refreshUniformsNormal(uniforms, material) {\n      if (material.bumpMap) {\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.bumpScale.value = material.bumpScale;\n        if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n      }\n\n      if (material.normalMap) {\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.normalScale.value.copy(material.normalScale);\n        if (material.side === BackSide) uniforms.normalScale.value.negate();\n      }\n\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n    }\n\n    // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n    function markUniformsLightsNeedsUpdate(uniforms, value) {\n      uniforms.ambientLightColor.needsUpdate = value;\n\n      uniforms.directionalLights.needsUpdate = value;\n      uniforms.pointLights.needsUpdate = value;\n      uniforms.spotLights.needsUpdate = value;\n      uniforms.rectAreaLights.needsUpdate = value;\n      uniforms.hemisphereLights.needsUpdate = value;\n    }\n\n    // Textures\n\n    function allocTextureUnit() {\n      var textureUnit = _usedTextureUnits;\n\n      if (textureUnit >= capabilities.maxTextures) {\n        console.warn(\n          \"THREE.WebGLRenderer: Trying to use \" +\n            textureUnit +\n            \" texture units while this GPU supports only \" +\n            capabilities.maxTextures\n        );\n      }\n\n      _usedTextureUnits += 1;\n\n      return textureUnit;\n    }\n\n    this.allocTextureUnit = allocTextureUnit;\n\n    // this.setTexture2D = setTexture2D;\n    this.setTexture2D = (function () {\n      var warned = false;\n\n      // backwards compatibility: peel texture.texture\n      return function setTexture2D(texture, slot) {\n        if (texture && texture.isWebGLRenderTarget) {\n          if (!warned) {\n            console.warn(\n              \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\"\n            );\n            warned = true;\n          }\n\n          texture = texture.texture;\n        }\n\n        textures.setTexture2D(texture, slot);\n      };\n    })();\n\n    this.setTexture = (function () {\n      var warned = false;\n\n      return function setTexture(texture, slot) {\n        if (!warned) {\n          console.warn(\n            \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\"\n          );\n          warned = true;\n        }\n\n        textures.setTexture2D(texture, slot);\n      };\n    })();\n\n    this.setTextureCube = (function () {\n      var warned = false;\n\n      return function setTextureCube(texture, slot) {\n        // backwards compatibility: peel texture.texture\n        if (texture && texture.isWebGLRenderTargetCube) {\n          if (!warned) {\n            console.warn(\n              \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\"\n            );\n            warned = true;\n          }\n\n          texture = texture.texture;\n        }\n\n        // currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n        // TODO: unify these code paths\n        if (\n          (texture && texture.isCubeTexture) ||\n          (Array.isArray(texture.image) && texture.image.length === 6)\n        ) {\n          // CompressedTexture can have Array in image :/\n\n          // this function alone should take care of cube textures\n          textures.setTextureCube(texture, slot);\n        } else {\n          // assumed: texture property of THREE.WebGLRenderTargetCube\n\n          textures.setTextureCubeDynamic(texture, slot);\n        }\n      };\n    })();\n\n    //\n\n    this.setFramebuffer = function (value) {\n      _framebuffer = value;\n    };\n\n    this.getRenderTarget = function () {\n      return _currentRenderTarget;\n    };\n\n    this.setRenderTarget = function (renderTarget) {\n      _currentRenderTarget = renderTarget;\n\n      if (\n        renderTarget &&\n        properties.get(renderTarget).__webglFramebuffer === undefined\n      ) {\n        textures.setupRenderTarget(renderTarget);\n      }\n\n      var framebuffer = _framebuffer;\n      var isCube = false;\n\n      if (renderTarget) {\n        var __webglFramebuffer =\n          properties.get(renderTarget).__webglFramebuffer;\n\n        if (renderTarget.isWebGLRenderTargetCube) {\n          framebuffer = __webglFramebuffer[renderTarget.activeCubeFace];\n          isCube = true;\n        } else {\n          framebuffer = __webglFramebuffer;\n        }\n\n        _currentViewport.copy(renderTarget.viewport);\n        _currentScissor.copy(renderTarget.scissor);\n        _currentScissorTest = renderTarget.scissorTest;\n      } else {\n        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio);\n        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio);\n        _currentScissorTest = _scissorTest;\n      }\n\n      if (_currentFramebuffer !== framebuffer) {\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n        _currentFramebuffer = framebuffer;\n      }\n\n      state.viewport(_currentViewport);\n      state.scissor(_currentScissor);\n      state.setScissorTest(_currentScissorTest);\n\n      if (isCube) {\n        var textureProperties = properties.get(renderTarget.texture);\n        _gl.framebufferTexture2D(\n          _gl.FRAMEBUFFER,\n          _gl.COLOR_ATTACHMENT0,\n          _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace,\n          textureProperties.__webglTexture,\n          renderTarget.activeMipMapLevel\n        );\n      }\n    };\n\n    this.readRenderTargetPixels = function (\n      renderTarget,\n      x,\n      y,\n      width,\n      height,\n      buffer\n    ) {\n      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n        console.error(\n          \"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\"\n        );\n        return;\n      }\n\n      var framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n      if (framebuffer) {\n        var restore = false;\n\n        if (framebuffer !== _currentFramebuffer) {\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n          restore = true;\n        }\n\n        try {\n          var texture = renderTarget.texture;\n          var textureFormat = texture.format;\n          var textureType = texture.type;\n\n          if (\n            textureFormat !== RGBAFormat &&\n            utils.convert(textureFormat) !==\n              _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)\n          ) {\n            console.error(\n              \"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\"\n            );\n            return;\n          }\n\n          if (\n            textureType !== UnsignedByteType &&\n            utils.convert(textureType) !==\n              _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // IE11, Edge and Chrome Mac < 52 (#9513)\n            !(\n              textureType === FloatType &&\n              (capabilities.isWebGL2 ||\n                extensions.get(\"OES_texture_float\") ||\n                extensions.get(\"WEBGL_color_buffer_float\"))\n            ) && // Chrome Mac >= 52 and Firefox\n            !(\n              textureType === HalfFloatType &&\n              (capabilities.isWebGL2\n                ? extensions.get(\"EXT_color_buffer_float\")\n                : extensions.get(\"EXT_color_buffer_half_float\"))\n            )\n          ) {\n            console.error(\n              \"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\"\n            );\n            return;\n          }\n\n          if (\n            _gl.checkFramebufferStatus(_gl.FRAMEBUFFER) ===\n            _gl.FRAMEBUFFER_COMPLETE\n          ) {\n            // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n            if (\n              x >= 0 &&\n              x <= renderTarget.width - width &&\n              y >= 0 &&\n              y <= renderTarget.height - height\n            ) {\n              _gl.readPixels(\n                x,\n                y,\n                width,\n                height,\n                utils.convert(textureFormat),\n                utils.convert(textureType),\n                buffer\n              );\n            }\n          } else {\n            console.error(\n              \"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\"\n            );\n          }\n        } finally {\n          if (restore) {\n            _gl.bindFramebuffer(_gl.FRAMEBUFFER, _currentFramebuffer);\n          }\n        }\n      }\n    };\n\n    this.copyFramebufferToTexture = function (position, texture, level) {\n      var width = texture.image.width;\n      var height = texture.image.height;\n      var glFormat = utils.convert(texture.format);\n\n      this.setTexture2D(texture, 0);\n\n      _gl.copyTexImage2D(\n        _gl.TEXTURE_2D,\n        level || 0,\n        glFormat,\n        position.x,\n        position.y,\n        width,\n        height,\n        0\n      );\n    };\n\n    this.copyTextureToTexture = function (\n      position,\n      srcTexture,\n      dstTexture,\n      level\n    ) {\n      var width = srcTexture.image.width;\n      var height = srcTexture.image.height;\n      var glFormat = utils.convert(dstTexture.format);\n      var glType = utils.convert(dstTexture.type);\n\n      this.setTexture2D(dstTexture, 0);\n\n      if (srcTexture.isDataTexture) {\n        _gl.texSubImage2D(\n          _gl.TEXTURE_2D,\n          level || 0,\n          position.x,\n          position.y,\n          width,\n          height,\n          glFormat,\n          glType,\n          srcTexture.image.data\n        );\n      } else {\n        _gl.texSubImage2D(\n          _gl.TEXTURE_2D,\n          level || 0,\n          position.x,\n          position.y,\n          glFormat,\n          glType,\n          srcTexture.image\n        );\n      }\n    };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function FogExp2(color, density) {\n    this.name = \"\";\n\n    this.color = new Color(color);\n    this.density = density !== undefined ? density : 0.00025;\n  }\n\n  FogExp2.prototype.isFogExp2 = true;\n\n  FogExp2.prototype.clone = function () {\n    return new FogExp2(this.color, this.density);\n  };\n\n  FogExp2.prototype.toJSON = function (/* meta */) {\n    return {\n      type: \"FogExp2\",\n      color: this.color.getHex(),\n      density: this.density,\n    };\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function Fog(color, near, far) {\n    this.name = \"\";\n\n    this.color = new Color(color);\n\n    this.near = near !== undefined ? near : 1;\n    this.far = far !== undefined ? far : 1000;\n  }\n\n  Fog.prototype.isFog = true;\n\n  Fog.prototype.clone = function () {\n    return new Fog(this.color, this.near, this.far);\n  };\n\n  Fog.prototype.toJSON = function (/* meta */) {\n    return {\n      type: \"Fog\",\n      color: this.color.getHex(),\n      near: this.near,\n      far: this.far,\n    };\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function Scene() {\n    Object3D.call(this);\n\n    this.type = \"Scene\";\n\n    this.background = null;\n    this.fog = null;\n    this.overrideMaterial = null;\n\n    this.autoUpdate = true; // checked by the renderer\n  }\n\n  Scene.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Scene,\n\n    copy: function (source, recursive) {\n      Object3D.prototype.copy.call(this, source, recursive);\n\n      if (source.background !== null)\n        this.background = source.background.clone();\n      if (source.fog !== null) this.fog = source.fog.clone();\n      if (source.overrideMaterial !== null)\n        this.overrideMaterial = source.overrideMaterial.clone();\n\n      this.autoUpdate = source.autoUpdate;\n      this.matrixAutoUpdate = source.matrixAutoUpdate;\n\n      return this;\n    },\n\n    toJSON: function (meta) {\n      var data = Object3D.prototype.toJSON.call(this, meta);\n\n      if (this.background !== null)\n        data.object.background = this.background.toJSON(meta);\n      if (this.fog !== null) data.object.fog = this.fog.toJSON();\n\n      return data;\n    },\n  });\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n  function InterleavedBuffer(array, stride) {\n    this.array = array;\n    this.stride = stride;\n    this.count = array !== undefined ? array.length / stride : 0;\n\n    this.dynamic = false;\n    this.updateRange = { offset: 0, count: -1 };\n\n    this.version = 0;\n  }\n\n  Object.defineProperty(InterleavedBuffer.prototype, \"needsUpdate\", {\n    set: function (value) {\n      if (value === true) this.version++;\n    },\n  });\n\n  Object.assign(InterleavedBuffer.prototype, {\n    isInterleavedBuffer: true,\n\n    onUploadCallback: function () {},\n\n    setArray: function (array) {\n      if (Array.isArray(array)) {\n        throw new TypeError(\n          \"THREE.BufferAttribute: array should be a Typed Array.\"\n        );\n      }\n\n      this.count = array !== undefined ? array.length / this.stride : 0;\n      this.array = array;\n\n      return this;\n    },\n\n    setDynamic: function (value) {\n      this.dynamic = value;\n\n      return this;\n    },\n\n    copy: function (source) {\n      this.array = new source.array.constructor(source.array);\n      this.count = source.count;\n      this.stride = source.stride;\n      this.dynamic = source.dynamic;\n\n      return this;\n    },\n\n    copyAt: function (index1, attribute, index2) {\n      index1 *= this.stride;\n      index2 *= attribute.stride;\n\n      for (var i = 0, l = this.stride; i < l; i++) {\n        this.array[index1 + i] = attribute.array[index2 + i];\n      }\n\n      return this;\n    },\n\n    set: function (value, offset) {\n      if (offset === undefined) offset = 0;\n\n      this.array.set(value, offset);\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    onUpload: function (callback) {\n      this.onUploadCallback = callback;\n\n      return this;\n    },\n  });\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n  function InterleavedBufferAttribute(\n    interleavedBuffer,\n    itemSize,\n    offset,\n    normalized\n  ) {\n    this.data = interleavedBuffer;\n    this.itemSize = itemSize;\n    this.offset = offset;\n\n    this.normalized = normalized === true;\n  }\n\n  Object.defineProperties(InterleavedBufferAttribute.prototype, {\n    count: {\n      get: function () {\n        return this.data.count;\n      },\n    },\n\n    array: {\n      get: function () {\n        return this.data.array;\n      },\n    },\n  });\n\n  Object.assign(InterleavedBufferAttribute.prototype, {\n    isInterleavedBufferAttribute: true,\n\n    setX: function (index, x) {\n      this.data.array[index * this.data.stride + this.offset] = x;\n\n      return this;\n    },\n\n    setY: function (index, y) {\n      this.data.array[index * this.data.stride + this.offset + 1] = y;\n\n      return this;\n    },\n\n    setZ: function (index, z) {\n      this.data.array[index * this.data.stride + this.offset + 2] = z;\n\n      return this;\n    },\n\n    setW: function (index, w) {\n      this.data.array[index * this.data.stride + this.offset + 3] = w;\n\n      return this;\n    },\n\n    getX: function (index) {\n      return this.data.array[index * this.data.stride + this.offset];\n    },\n\n    getY: function (index) {\n      return this.data.array[index * this.data.stride + this.offset + 1];\n    },\n\n    getZ: function (index) {\n      return this.data.array[index * this.data.stride + this.offset + 2];\n    },\n\n    getW: function (index) {\n      return this.data.array[index * this.data.stride + this.offset + 3];\n    },\n\n    setXY: function (index, x, y) {\n      index = index * this.data.stride + this.offset;\n\n      this.data.array[index + 0] = x;\n      this.data.array[index + 1] = y;\n\n      return this;\n    },\n\n    setXYZ: function (index, x, y, z) {\n      index = index * this.data.stride + this.offset;\n\n      this.data.array[index + 0] = x;\n      this.data.array[index + 1] = y;\n      this.data.array[index + 2] = z;\n\n      return this;\n    },\n\n    setXYZW: function (index, x, y, z, w) {\n      index = index * this.data.stride + this.offset;\n\n      this.data.array[index + 0] = x;\n      this.data.array[index + 1] = y;\n      this.data.array[index + 2] = z;\n      this.data.array[index + 3] = w;\n\n      return this;\n    },\n  });\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *\tuvOffset: new THREE.Vector2(),\n   *\tuvScale: new THREE.Vector2()\n   * }\n   */\n\n  function SpriteMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"SpriteMaterial\";\n\n    this.color = new Color(0xffffff);\n    this.map = null;\n\n    this.rotation = 0;\n\n    this.lights = false;\n    this.transparent = true;\n\n    this.setValues(parameters);\n  }\n\n  SpriteMaterial.prototype = Object.create(Material.prototype);\n  SpriteMaterial.prototype.constructor = SpriteMaterial;\n  SpriteMaterial.prototype.isSpriteMaterial = true;\n\n  SpriteMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.color.copy(source.color);\n    this.map = source.map;\n\n    this.rotation = source.rotation;\n\n    return this;\n  };\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  var geometry;\n\n  function Sprite(material) {\n    Object3D.call(this);\n\n    this.type = \"Sprite\";\n\n    if (geometry === undefined) {\n      geometry = new BufferGeometry();\n\n      var float32Array = new Float32Array([\n        -0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5,\n        0, 0, 1,\n      ]);\n\n      var interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n      geometry.setIndex([0, 1, 2, 0, 2, 3]);\n      geometry.addAttribute(\n        \"position\",\n        new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false)\n      );\n      geometry.addAttribute(\n        \"uv\",\n        new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false)\n      );\n    }\n\n    this.geometry = geometry;\n    this.material = material !== undefined ? material : new SpriteMaterial();\n\n    this.center = new Vector2(0.5, 0.5);\n  }\n\n  Sprite.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Sprite,\n\n    isSprite: true,\n\n    raycast: (function () {\n      var intersectPoint = new Vector3();\n      var worldScale = new Vector3();\n      var mvPosition = new Vector3();\n\n      var alignedPosition = new Vector2();\n      var rotatedPosition = new Vector2();\n      var viewWorldMatrix = new Matrix4();\n\n      var vA = new Vector3();\n      var vB = new Vector3();\n      var vC = new Vector3();\n\n      function transformVertex(\n        vertexPosition,\n        mvPosition,\n        center,\n        scale,\n        sin,\n        cos\n      ) {\n        // compute position in camera space\n        alignedPosition\n          .subVectors(vertexPosition, center)\n          .addScalar(0.5)\n          .multiply(scale);\n\n        // to check if rotation is not zero\n        if (sin !== undefined) {\n          rotatedPosition.x = cos * alignedPosition.x - sin * alignedPosition.y;\n          rotatedPosition.y = sin * alignedPosition.x + cos * alignedPosition.y;\n        } else {\n          rotatedPosition.copy(alignedPosition);\n        }\n\n        vertexPosition.copy(mvPosition);\n        vertexPosition.x += rotatedPosition.x;\n        vertexPosition.y += rotatedPosition.y;\n\n        // transform to world space\n        vertexPosition.applyMatrix4(viewWorldMatrix);\n      }\n\n      return function raycast(raycaster, intersects) {\n        worldScale.setFromMatrixScale(this.matrixWorld);\n        viewWorldMatrix\n          .getInverse(this.modelViewMatrix)\n          .premultiply(this.matrixWorld);\n        mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n        var rotation = this.material.rotation;\n        var sin, cos;\n        if (rotation !== 0) {\n          cos = Math.cos(rotation);\n          sin = Math.sin(rotation);\n        }\n\n        var center = this.center;\n\n        transformVertex(\n          vA.set(-0.5, -0.5, 0),\n          mvPosition,\n          center,\n          worldScale,\n          sin,\n          cos\n        );\n        transformVertex(\n          vB.set(0.5, -0.5, 0),\n          mvPosition,\n          center,\n          worldScale,\n          sin,\n          cos\n        );\n        transformVertex(\n          vC.set(0.5, 0.5, 0),\n          mvPosition,\n          center,\n          worldScale,\n          sin,\n          cos\n        );\n\n        // check first triangle\n        var intersect = raycaster.ray.intersectTriangle(\n          vA,\n          vB,\n          vC,\n          false,\n          intersectPoint\n        );\n\n        if (intersect === null) {\n          // check second triangle\n          transformVertex(\n            vB.set(-0.5, 0.5, 0),\n            mvPosition,\n            center,\n            worldScale,\n            sin,\n            cos\n          );\n          intersect = raycaster.ray.intersectTriangle(\n            vA,\n            vC,\n            vB,\n            false,\n            intersectPoint\n          );\n          if (intersect === null) {\n            return;\n          }\n        }\n\n        var distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\n        if (distance < raycaster.near || distance > raycaster.far) return;\n\n        intersects.push({\n          distance: distance,\n          point: intersectPoint.clone(),\n          face: null,\n          object: this,\n        });\n      };\n    })(),\n\n    clone: function () {\n      return new this.constructor(this.material).copy(this);\n    },\n\n    copy: function (source) {\n      Object3D.prototype.copy.call(this, source);\n\n      if (source.center !== undefined) this.center.copy(source.center);\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function LOD() {\n    Object3D.call(this);\n\n    this.type = \"LOD\";\n\n    Object.defineProperties(this, {\n      levels: {\n        enumerable: true,\n        value: [],\n      },\n    });\n  }\n\n  LOD.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: LOD,\n\n    copy: function (source) {\n      Object3D.prototype.copy.call(this, source, false);\n\n      var levels = source.levels;\n\n      for (var i = 0, l = levels.length; i < l; i++) {\n        var level = levels[i];\n\n        this.addLevel(level.object.clone(), level.distance);\n      }\n\n      return this;\n    },\n\n    addLevel: function (object, distance) {\n      if (distance === undefined) distance = 0;\n\n      distance = Math.abs(distance);\n\n      var levels = this.levels;\n\n      for (var l = 0; l < levels.length; l++) {\n        if (distance < levels[l].distance) {\n          break;\n        }\n      }\n\n      levels.splice(l, 0, { distance: distance, object: object });\n\n      this.add(object);\n    },\n\n    getObjectForDistance: function (distance) {\n      var levels = this.levels;\n\n      for (var i = 1, l = levels.length; i < l; i++) {\n        if (distance < levels[i].distance) {\n          break;\n        }\n      }\n\n      return levels[i - 1].object;\n    },\n\n    raycast: (function () {\n      var matrixPosition = new Vector3();\n\n      return function raycast(raycaster, intersects) {\n        matrixPosition.setFromMatrixPosition(this.matrixWorld);\n\n        var distance = raycaster.ray.origin.distanceTo(matrixPosition);\n\n        this.getObjectForDistance(distance).raycast(raycaster, intersects);\n      };\n    })(),\n\n    update: (function () {\n      var v1 = new Vector3();\n      var v2 = new Vector3();\n\n      return function update(camera) {\n        var levels = this.levels;\n\n        if (levels.length > 1) {\n          v1.setFromMatrixPosition(camera.matrixWorld);\n          v2.setFromMatrixPosition(this.matrixWorld);\n\n          var distance = v1.distanceTo(v2);\n\n          levels[0].object.visible = true;\n\n          for (var i = 1, l = levels.length; i < l; i++) {\n            if (distance >= levels[i].distance) {\n              levels[i - 1].object.visible = false;\n              levels[i].object.visible = true;\n            } else {\n              break;\n            }\n          }\n\n          for (; i < l; i++) {\n            levels[i].object.visible = false;\n          }\n        }\n      };\n    })(),\n\n    toJSON: function (meta) {\n      var data = Object3D.prototype.toJSON.call(this, meta);\n\n      data.object.levels = [];\n\n      var levels = this.levels;\n\n      for (var i = 0, l = levels.length; i < l; i++) {\n        var level = levels[i];\n\n        data.object.levels.push({\n          object: level.object.uuid,\n          distance: level.distance,\n        });\n      }\n\n      return data;\n    },\n  });\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author michael guerrero / http://realitymeltdown.com\n   * @author ikerr / http://verold.com\n   */\n\n  function Skeleton(bones, boneInverses) {\n    // copy the bone array\n\n    bones = bones || [];\n\n    this.bones = bones.slice(0);\n    this.boneMatrices = new Float32Array(this.bones.length * 16);\n\n    // use the supplied bone inverses or calculate the inverses\n\n    if (boneInverses === undefined) {\n      this.calculateInverses();\n    } else {\n      if (this.bones.length === boneInverses.length) {\n        this.boneInverses = boneInverses.slice(0);\n      } else {\n        console.warn(\"THREE.Skeleton boneInverses is the wrong length.\");\n\n        this.boneInverses = [];\n\n        for (var i = 0, il = this.bones.length; i < il; i++) {\n          this.boneInverses.push(new Matrix4());\n        }\n      }\n    }\n  }\n\n  Object.assign(Skeleton.prototype, {\n    calculateInverses: function () {\n      this.boneInverses = [];\n\n      for (var i = 0, il = this.bones.length; i < il; i++) {\n        var inverse = new Matrix4();\n\n        if (this.bones[i]) {\n          inverse.getInverse(this.bones[i].matrixWorld);\n        }\n\n        this.boneInverses.push(inverse);\n      }\n    },\n\n    pose: function () {\n      var bone, i, il;\n\n      // recover the bind-time world matrices\n\n      for (i = 0, il = this.bones.length; i < il; i++) {\n        bone = this.bones[i];\n\n        if (bone) {\n          bone.matrixWorld.getInverse(this.boneInverses[i]);\n        }\n      }\n\n      // compute the local matrices, positions, rotations and scales\n\n      for (i = 0, il = this.bones.length; i < il; i++) {\n        bone = this.bones[i];\n\n        if (bone) {\n          if (bone.parent && bone.parent.isBone) {\n            bone.matrix.getInverse(bone.parent.matrixWorld);\n            bone.matrix.multiply(bone.matrixWorld);\n          } else {\n            bone.matrix.copy(bone.matrixWorld);\n          }\n\n          bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n        }\n      }\n    },\n\n    update: (function () {\n      var offsetMatrix = new Matrix4();\n      var identityMatrix = new Matrix4();\n\n      return function update() {\n        var bones = this.bones;\n        var boneInverses = this.boneInverses;\n        var boneMatrices = this.boneMatrices;\n        var boneTexture = this.boneTexture;\n\n        // flatten bone matrices to array\n\n        for (var i = 0, il = bones.length; i < il; i++) {\n          // compute the offset between the current and the original transform\n\n          var matrix = bones[i] ? bones[i].matrixWorld : identityMatrix;\n\n          offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n          offsetMatrix.toArray(boneMatrices, i * 16);\n        }\n\n        if (boneTexture !== undefined) {\n          boneTexture.needsUpdate = true;\n        }\n      };\n    })(),\n\n    clone: function () {\n      return new Skeleton(this.bones, this.boneInverses);\n    },\n\n    getBoneByName: function (name) {\n      for (var i = 0, il = this.bones.length; i < il; i++) {\n        var bone = this.bones[i];\n\n        if (bone.name === name) {\n          return bone;\n        }\n      }\n\n      return undefined;\n    },\n  });\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author ikerr / http://verold.com\n   */\n\n  function Bone() {\n    Object3D.call(this);\n\n    this.type = \"Bone\";\n  }\n\n  Bone.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Bone,\n\n    isBone: true,\n  });\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author ikerr / http://verold.com\n   */\n\n  function SkinnedMesh(geometry, material) {\n    Mesh.call(this, geometry, material);\n\n    this.type = \"SkinnedMesh\";\n\n    this.bindMode = \"attached\";\n    this.bindMatrix = new Matrix4();\n    this.bindMatrixInverse = new Matrix4();\n\n    var bones = this.initBones();\n    var skeleton = new Skeleton(bones);\n\n    this.bind(skeleton, this.matrixWorld);\n\n    this.normalizeSkinWeights();\n  }\n\n  SkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n    constructor: SkinnedMesh,\n\n    isSkinnedMesh: true,\n\n    initBones: function () {\n      var bones = [],\n        bone,\n        gbone;\n      var i, il;\n\n      if (this.geometry && this.geometry.bones !== undefined) {\n        // first, create array of 'Bone' objects from geometry data\n\n        for (i = 0, il = this.geometry.bones.length; i < il; i++) {\n          gbone = this.geometry.bones[i];\n\n          // create new 'Bone' object\n\n          bone = new Bone();\n          bones.push(bone);\n\n          // apply values\n\n          bone.name = gbone.name;\n          bone.position.fromArray(gbone.pos);\n          bone.quaternion.fromArray(gbone.rotq);\n          if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl);\n        }\n\n        // second, create bone hierarchy\n\n        for (i = 0, il = this.geometry.bones.length; i < il; i++) {\n          gbone = this.geometry.bones[i];\n\n          if (\n            gbone.parent !== -1 &&\n            gbone.parent !== null &&\n            bones[gbone.parent] !== undefined\n          ) {\n            // subsequent bones in the hierarchy\n\n            bones[gbone.parent].add(bones[i]);\n          } else {\n            // topmost bone, immediate child of the skinned mesh\n\n            this.add(bones[i]);\n          }\n        }\n      }\n\n      // now the bones are part of the scene graph and children of the skinned mesh.\n      // let's update the corresponding matrices\n\n      this.updateMatrixWorld(true);\n\n      return bones;\n    },\n\n    bind: function (skeleton, bindMatrix) {\n      this.skeleton = skeleton;\n\n      if (bindMatrix === undefined) {\n        this.updateMatrixWorld(true);\n\n        this.skeleton.calculateInverses();\n\n        bindMatrix = this.matrixWorld;\n      }\n\n      this.bindMatrix.copy(bindMatrix);\n      this.bindMatrixInverse.getInverse(bindMatrix);\n    },\n\n    pose: function () {\n      this.skeleton.pose();\n    },\n\n    normalizeSkinWeights: function () {\n      var scale, i;\n\n      if (this.geometry && this.geometry.isGeometry) {\n        for (i = 0; i < this.geometry.skinWeights.length; i++) {\n          var sw = this.geometry.skinWeights[i];\n\n          scale = 1.0 / sw.manhattanLength();\n\n          if (scale !== Infinity) {\n            sw.multiplyScalar(scale);\n          } else {\n            sw.set(1, 0, 0, 0); // do something reasonable\n          }\n        }\n      } else if (this.geometry && this.geometry.isBufferGeometry) {\n        var vec = new Vector4();\n\n        var skinWeight = this.geometry.attributes.skinWeight;\n\n        for (i = 0; i < skinWeight.count; i++) {\n          vec.x = skinWeight.getX(i);\n          vec.y = skinWeight.getY(i);\n          vec.z = skinWeight.getZ(i);\n          vec.w = skinWeight.getW(i);\n\n          scale = 1.0 / vec.manhattanLength();\n\n          if (scale !== Infinity) {\n            vec.multiplyScalar(scale);\n          } else {\n            vec.set(1, 0, 0, 0); // do something reasonable\n          }\n\n          skinWeight.setXYZW(i, vec.x, vec.y, vec.z, vec.w);\n        }\n      }\n    },\n\n    updateMatrixWorld: function (force) {\n      Mesh.prototype.updateMatrixWorld.call(this, force);\n\n      if (this.bindMode === \"attached\") {\n        this.bindMatrixInverse.getInverse(this.matrixWorld);\n      } else if (this.bindMode === \"detached\") {\n        this.bindMatrixInverse.getInverse(this.bindMatrix);\n      } else {\n        console.warn(\n          \"THREE.SkinnedMesh: Unrecognized bindMode: \" + this.bindMode\n        );\n      }\n    },\n\n    clone: function () {\n      return new this.constructor(this.geometry, this.material).copy(this);\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *\n   *  linewidth: <float>,\n   *  linecap: \"round\",\n   *  linejoin: \"round\"\n   * }\n   */\n\n  function LineBasicMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"LineBasicMaterial\";\n\n    this.color = new Color(0xffffff);\n\n    this.linewidth = 1;\n    this.linecap = \"round\";\n    this.linejoin = \"round\";\n\n    this.lights = false;\n\n    this.setValues(parameters);\n  }\n\n  LineBasicMaterial.prototype = Object.create(Material.prototype);\n  LineBasicMaterial.prototype.constructor = LineBasicMaterial;\n\n  LineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n  LineBasicMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.color.copy(source.color);\n\n    this.linewidth = source.linewidth;\n    this.linecap = source.linecap;\n    this.linejoin = source.linejoin;\n\n    return this;\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function Line(geometry, material, mode) {\n    if (mode === 1) {\n      console.error(\n        \"THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.\"\n      );\n    }\n\n    Object3D.call(this);\n\n    this.type = \"Line\";\n\n    this.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    this.material =\n      material !== undefined\n        ? material\n        : new LineBasicMaterial({ color: Math.random() * 0xffffff });\n  }\n\n  Line.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Line,\n\n    isLine: true,\n\n    computeLineDistances: (function () {\n      var start = new Vector3();\n      var end = new Vector3();\n\n      return function computeLineDistances() {\n        var geometry = this.geometry;\n\n        if (geometry.isBufferGeometry) {\n          // we assume non-indexed geometry\n\n          if (geometry.index === null) {\n            var positionAttribute = geometry.attributes.position;\n            var lineDistances = [0];\n\n            for (var i = 1, l = positionAttribute.count; i < l; i++) {\n              start.fromBufferAttribute(positionAttribute, i - 1);\n              end.fromBufferAttribute(positionAttribute, i);\n\n              lineDistances[i] = lineDistances[i - 1];\n              lineDistances[i] += start.distanceTo(end);\n            }\n\n            geometry.addAttribute(\n              \"lineDistance\",\n              new Float32BufferAttribute(lineDistances, 1)\n            );\n          } else {\n            console.warn(\n              \"THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\"\n            );\n          }\n        } else if (geometry.isGeometry) {\n          var vertices = geometry.vertices;\n          var lineDistances = geometry.lineDistances;\n\n          lineDistances[0] = 0;\n\n          for (var i = 1, l = vertices.length; i < l; i++) {\n            lineDistances[i] = lineDistances[i - 1];\n            lineDistances[i] += vertices[i - 1].distanceTo(vertices[i]);\n          }\n        }\n\n        return this;\n      };\n    })(),\n\n    raycast: (function () {\n      var inverseMatrix = new Matrix4();\n      var ray = new Ray();\n      var sphere = new Sphere();\n\n      return function raycast(raycaster, intersects) {\n        var precision = raycaster.linePrecision;\n        var precisionSq = precision * precision;\n\n        var geometry = this.geometry;\n        var matrixWorld = this.matrixWorld;\n\n        // Checking boundingSphere distance to ray\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n        sphere.copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n\n        if (raycaster.ray.intersectsSphere(sphere) === false) return;\n\n        //\n\n        inverseMatrix.getInverse(matrixWorld);\n        ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n\n        var vStart = new Vector3();\n        var vEnd = new Vector3();\n        var interSegment = new Vector3();\n        var interRay = new Vector3();\n        var step = this && this.isLineSegments ? 2 : 1;\n\n        if (geometry.isBufferGeometry) {\n          var index = geometry.index;\n          var attributes = geometry.attributes;\n          var positions = attributes.position.array;\n\n          if (index !== null) {\n            var indices = index.array;\n\n            for (var i = 0, l = indices.length - 1; i < l; i += step) {\n              var a = indices[i];\n              var b = indices[i + 1];\n\n              vStart.fromArray(positions, a * 3);\n              vEnd.fromArray(positions, b * 3);\n\n              var distSq = ray.distanceSqToSegment(\n                vStart,\n                vEnd,\n                interRay,\n                interSegment\n              );\n\n              if (distSq > precisionSq) continue;\n\n              interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n              var distance = raycaster.ray.origin.distanceTo(interRay);\n\n              if (distance < raycaster.near || distance > raycaster.far)\n                continue;\n\n              intersects.push({\n                distance: distance,\n                // What do we want? intersection point on the ray or on the segment??\n                // point: raycaster.ray.at( distance ),\n                point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                index: i,\n                face: null,\n                faceIndex: null,\n                object: this,\n              });\n            }\n          } else {\n            for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n              vStart.fromArray(positions, 3 * i);\n              vEnd.fromArray(positions, 3 * i + 3);\n\n              var distSq = ray.distanceSqToSegment(\n                vStart,\n                vEnd,\n                interRay,\n                interSegment\n              );\n\n              if (distSq > precisionSq) continue;\n\n              interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n              var distance = raycaster.ray.origin.distanceTo(interRay);\n\n              if (distance < raycaster.near || distance > raycaster.far)\n                continue;\n\n              intersects.push({\n                distance: distance,\n                // What do we want? intersection point on the ray or on the segment??\n                // point: raycaster.ray.at( distance ),\n                point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                index: i,\n                face: null,\n                faceIndex: null,\n                object: this,\n              });\n            }\n          }\n        } else if (geometry.isGeometry) {\n          var vertices = geometry.vertices;\n          var nbVertices = vertices.length;\n\n          for (var i = 0; i < nbVertices - 1; i += step) {\n            var distSq = ray.distanceSqToSegment(\n              vertices[i],\n              vertices[i + 1],\n              interRay,\n              interSegment\n            );\n\n            if (distSq > precisionSq) continue;\n\n            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n            var distance = raycaster.ray.origin.distanceTo(interRay);\n\n            if (distance < raycaster.near || distance > raycaster.far) continue;\n\n            intersects.push({\n              distance: distance,\n              // What do we want? intersection point on the ray or on the segment??\n              // point: raycaster.ray.at( distance ),\n              point: interSegment.clone().applyMatrix4(this.matrixWorld),\n              index: i,\n              face: null,\n              faceIndex: null,\n              object: this,\n            });\n          }\n        }\n      };\n    })(),\n\n    clone: function () {\n      return new this.constructor(this.geometry, this.material).copy(this);\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function LineSegments(geometry, material) {\n    Line.call(this, geometry, material);\n\n    this.type = \"LineSegments\";\n  }\n\n  LineSegments.prototype = Object.assign(Object.create(Line.prototype), {\n    constructor: LineSegments,\n\n    isLineSegments: true,\n\n    computeLineDistances: (function () {\n      var start = new Vector3();\n      var end = new Vector3();\n\n      return function computeLineDistances() {\n        var geometry = this.geometry;\n\n        if (geometry.isBufferGeometry) {\n          // we assume non-indexed geometry\n\n          if (geometry.index === null) {\n            var positionAttribute = geometry.attributes.position;\n            var lineDistances = [];\n\n            for (var i = 0, l = positionAttribute.count; i < l; i += 2) {\n              start.fromBufferAttribute(positionAttribute, i);\n              end.fromBufferAttribute(positionAttribute, i + 1);\n\n              lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n              lineDistances[i + 1] = lineDistances[i] + start.distanceTo(end);\n            }\n\n            geometry.addAttribute(\n              \"lineDistance\",\n              new Float32BufferAttribute(lineDistances, 1)\n            );\n          } else {\n            console.warn(\n              \"THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\"\n            );\n          }\n        } else if (geometry.isGeometry) {\n          var vertices = geometry.vertices;\n          var lineDistances = geometry.lineDistances;\n\n          for (var i = 0, l = vertices.length; i < l; i += 2) {\n            start.copy(vertices[i]);\n            end.copy(vertices[i + 1]);\n\n            lineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n            lineDistances[i + 1] = lineDistances[i] + start.distanceTo(end);\n          }\n        }\n\n        return this;\n      };\n    })(),\n  });\n\n  /**\n   * @author mgreter / http://github.com/mgreter\n   */\n\n  function LineLoop(geometry, material) {\n    Line.call(this, geometry, material);\n\n    this.type = \"LineLoop\";\n  }\n\n  LineLoop.prototype = Object.assign(Object.create(Line.prototype), {\n    constructor: LineLoop,\n\n    isLineLoop: true,\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  size: <float>,\n   *  sizeAttenuation: <bool>\n   *\n   *  morphTargets: <bool>\n   * }\n   */\n\n  function PointsMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"PointsMaterial\";\n\n    this.color = new Color(0xffffff);\n\n    this.map = null;\n\n    this.size = 1;\n    this.sizeAttenuation = true;\n\n    this.morphTargets = false;\n\n    this.lights = false;\n\n    this.setValues(parameters);\n  }\n\n  PointsMaterial.prototype = Object.create(Material.prototype);\n  PointsMaterial.prototype.constructor = PointsMaterial;\n\n  PointsMaterial.prototype.isPointsMaterial = true;\n\n  PointsMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.color.copy(source.color);\n\n    this.map = source.map;\n\n    this.size = source.size;\n    this.sizeAttenuation = source.sizeAttenuation;\n\n    this.morphTargets = source.morphTargets;\n\n    return this;\n  };\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function Points(geometry, material) {\n    Object3D.call(this);\n\n    this.type = \"Points\";\n\n    this.geometry = geometry !== undefined ? geometry : new BufferGeometry();\n    this.material =\n      material !== undefined\n        ? material\n        : new PointsMaterial({ color: Math.random() * 0xffffff });\n  }\n\n  Points.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Points,\n\n    isPoints: true,\n\n    raycast: (function () {\n      var inverseMatrix = new Matrix4();\n      var ray = new Ray();\n      var sphere = new Sphere();\n\n      return function raycast(raycaster, intersects) {\n        var object = this;\n        var geometry = this.geometry;\n        var matrixWorld = this.matrixWorld;\n        var threshold = raycaster.params.Points.threshold;\n\n        // Checking boundingSphere distance to ray\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n        sphere.copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n        sphere.radius += threshold;\n\n        if (raycaster.ray.intersectsSphere(sphere) === false) return;\n\n        //\n\n        inverseMatrix.getInverse(matrixWorld);\n        ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n\n        var localThreshold =\n          threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n        var localThresholdSq = localThreshold * localThreshold;\n        var position = new Vector3();\n        var intersectPoint = new Vector3();\n\n        function testPoint(point, index) {\n          var rayPointDistanceSq = ray.distanceSqToPoint(point);\n\n          if (rayPointDistanceSq < localThresholdSq) {\n            ray.closestPointToPoint(point, intersectPoint);\n            intersectPoint.applyMatrix4(matrixWorld);\n\n            var distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\n            if (distance < raycaster.near || distance > raycaster.far) return;\n\n            intersects.push({\n              distance: distance,\n              distanceToRay: Math.sqrt(rayPointDistanceSq),\n              point: intersectPoint.clone(),\n              index: index,\n              face: null,\n              object: object,\n            });\n          }\n        }\n\n        if (geometry.isBufferGeometry) {\n          var index = geometry.index;\n          var attributes = geometry.attributes;\n          var positions = attributes.position.array;\n\n          if (index !== null) {\n            var indices = index.array;\n\n            for (var i = 0, il = indices.length; i < il; i++) {\n              var a = indices[i];\n\n              position.fromArray(positions, a * 3);\n\n              testPoint(position, a);\n            }\n          } else {\n            for (var i = 0, l = positions.length / 3; i < l; i++) {\n              position.fromArray(positions, i * 3);\n\n              testPoint(position, i);\n            }\n          }\n        } else {\n          var vertices = geometry.vertices;\n\n          for (var i = 0, l = vertices.length; i < l; i++) {\n            testPoint(vertices[i], i);\n          }\n        }\n      };\n    })(),\n\n    clone: function () {\n      return new this.constructor(this.geometry, this.material).copy(this);\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function VideoTexture(\n    video,\n    mapping,\n    wrapS,\n    wrapT,\n    magFilter,\n    minFilter,\n    format,\n    type,\n    anisotropy\n  ) {\n    Texture.call(\n      this,\n      video,\n      mapping,\n      wrapS,\n      wrapT,\n      magFilter,\n      minFilter,\n      format,\n      type,\n      anisotropy\n    );\n\n    this.generateMipmaps = false;\n  }\n\n  VideoTexture.prototype = Object.assign(Object.create(Texture.prototype), {\n    constructor: VideoTexture,\n\n    isVideoTexture: true,\n\n    update: function () {\n      var video = this.image;\n\n      if (video.readyState >= video.HAVE_CURRENT_DATA) {\n        this.needsUpdate = true;\n      }\n    },\n  });\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function CompressedTexture(\n    mipmaps,\n    width,\n    height,\n    format,\n    type,\n    mapping,\n    wrapS,\n    wrapT,\n    magFilter,\n    minFilter,\n    anisotropy,\n    encoding\n  ) {\n    Texture.call(\n      this,\n      null,\n      mapping,\n      wrapS,\n      wrapT,\n      magFilter,\n      minFilter,\n      format,\n      type,\n      anisotropy,\n      encoding\n    );\n\n    this.image = { width: width, height: height };\n    this.mipmaps = mipmaps;\n\n    // no flipping for cube textures\n    // (also flipping doesn't work for compressed textures )\n\n    this.flipY = false;\n\n    // can't generate mipmaps for compressed textures\n    // mips must be embedded in DDS files\n\n    this.generateMipmaps = false;\n  }\n\n  CompressedTexture.prototype = Object.create(Texture.prototype);\n  CompressedTexture.prototype.constructor = CompressedTexture;\n\n  CompressedTexture.prototype.isCompressedTexture = true;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function CanvasTexture(\n    canvas,\n    mapping,\n    wrapS,\n    wrapT,\n    magFilter,\n    minFilter,\n    format,\n    type,\n    anisotropy\n  ) {\n    Texture.call(\n      this,\n      canvas,\n      mapping,\n      wrapS,\n      wrapT,\n      magFilter,\n      minFilter,\n      format,\n      type,\n      anisotropy\n    );\n\n    this.needsUpdate = true;\n  }\n\n  CanvasTexture.prototype = Object.create(Texture.prototype);\n  CanvasTexture.prototype.constructor = CanvasTexture;\n  CanvasTexture.prototype.isCanvasTexture = true;\n\n  /**\n   * @author Matt DesLauriers / @mattdesl\n   * @author atix / arthursilber.de\n   */\n\n  function DepthTexture(\n    width,\n    height,\n    type,\n    mapping,\n    wrapS,\n    wrapT,\n    magFilter,\n    minFilter,\n    anisotropy,\n    format\n  ) {\n    format = format !== undefined ? format : DepthFormat;\n\n    if (format !== DepthFormat && format !== DepthStencilFormat) {\n      throw new Error(\n        \"DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat\"\n      );\n    }\n\n    if (type === undefined && format === DepthFormat) type = UnsignedShortType;\n    if (type === undefined && format === DepthStencilFormat)\n      type = UnsignedInt248Type;\n\n    Texture.call(\n      this,\n      null,\n      mapping,\n      wrapS,\n      wrapT,\n      magFilter,\n      minFilter,\n      format,\n      type,\n      anisotropy\n    );\n\n    this.image = { width: width, height: height };\n\n    this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n    this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n    this.flipY = false;\n    this.generateMipmaps = false;\n  }\n\n  DepthTexture.prototype = Object.create(Texture.prototype);\n  DepthTexture.prototype.constructor = DepthTexture;\n  DepthTexture.prototype.isDepthTexture = true;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  function WireframeGeometry(geometry) {\n    BufferGeometry.call(this);\n\n    this.type = \"WireframeGeometry\";\n\n    // buffer\n\n    var vertices = [];\n\n    // helper variables\n\n    var i, j, l, o, ol;\n    var edge = [0, 0],\n      edges = {},\n      e,\n      edge1,\n      edge2;\n    var key,\n      keys = [\"a\", \"b\", \"c\"];\n    var vertex;\n\n    // different logic for Geometry and BufferGeometry\n\n    if (geometry && geometry.isGeometry) {\n      // create a data structure that contains all edges without duplicates\n\n      var faces = geometry.faces;\n\n      for (i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i];\n\n        for (j = 0; j < 3; j++) {\n          edge1 = face[keys[j]];\n          edge2 = face[keys[(j + 1) % 3]];\n          edge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n          edge[1] = Math.max(edge1, edge2);\n\n          key = edge[0] + \",\" + edge[1];\n\n          if (edges[key] === undefined) {\n            edges[key] = { index1: edge[0], index2: edge[1] };\n          }\n        }\n      }\n\n      // generate vertices\n\n      for (key in edges) {\n        e = edges[key];\n\n        vertex = geometry.vertices[e.index1];\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        vertex = geometry.vertices[e.index2];\n        vertices.push(vertex.x, vertex.y, vertex.z);\n      }\n    } else if (geometry && geometry.isBufferGeometry) {\n      var position, indices, groups;\n      var group, start, count;\n      var index1, index2;\n\n      vertex = new Vector3();\n\n      if (geometry.index !== null) {\n        // indexed BufferGeometry\n\n        position = geometry.attributes.position;\n        indices = geometry.index;\n        groups = geometry.groups;\n\n        if (groups.length === 0) {\n          groups = [{ start: 0, count: indices.count, materialIndex: 0 }];\n        }\n\n        // create a data structure that contains all eges without duplicates\n\n        for (o = 0, ol = groups.length; o < ol; ++o) {\n          group = groups[o];\n\n          start = group.start;\n          count = group.count;\n\n          for (i = start, l = start + count; i < l; i += 3) {\n            for (j = 0; j < 3; j++) {\n              edge1 = indices.getX(i + j);\n              edge2 = indices.getX(i + ((j + 1) % 3));\n              edge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n              edge[1] = Math.max(edge1, edge2);\n\n              key = edge[0] + \",\" + edge[1];\n\n              if (edges[key] === undefined) {\n                edges[key] = { index1: edge[0], index2: edge[1] };\n              }\n            }\n          }\n        }\n\n        // generate vertices\n\n        for (key in edges) {\n          e = edges[key];\n\n          vertex.fromBufferAttribute(position, e.index1);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n\n          vertex.fromBufferAttribute(position, e.index2);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      } else {\n        // non-indexed BufferGeometry\n\n        position = geometry.attributes.position;\n\n        for (i = 0, l = position.count / 3; i < l; i++) {\n          for (j = 0; j < 3; j++) {\n            // three edges per triangle, an edge is represented as (index1, index2)\n            // e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n            index1 = 3 * i + j;\n            vertex.fromBufferAttribute(position, index1);\n            vertices.push(vertex.x, vertex.y, vertex.z);\n\n            index2 = 3 * i + ((j + 1) % 3);\n            vertex.fromBufferAttribute(position, index2);\n            vertices.push(vertex.x, vertex.y, vertex.z);\n          }\n        }\n      }\n    }\n\n    // build geometry\n\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n  }\n\n  WireframeGeometry.prototype = Object.create(BufferGeometry.prototype);\n  WireframeGeometry.prototype.constructor = WireframeGeometry;\n\n  /**\n   * @author zz85 / https://github.com/zz85\n   * @author Mugen87 / https://github.com/Mugen87\n   *\n   * Parametric Surfaces Geometry\n   * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n   */\n\n  // ParametricGeometry\n\n  function ParametricGeometry(func, slices, stacks) {\n    Geometry.call(this);\n\n    this.type = \"ParametricGeometry\";\n\n    this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks,\n    };\n\n    this.fromBufferGeometry(new ParametricBufferGeometry(func, slices, stacks));\n    this.mergeVertices();\n  }\n\n  ParametricGeometry.prototype = Object.create(Geometry.prototype);\n  ParametricGeometry.prototype.constructor = ParametricGeometry;\n\n  // ParametricBufferGeometry\n\n  function ParametricBufferGeometry(func, slices, stacks) {\n    BufferGeometry.call(this);\n\n    this.type = \"ParametricBufferGeometry\";\n\n    this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks,\n    };\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    var EPS = 0.00001;\n\n    var normal = new Vector3();\n\n    var p0 = new Vector3(),\n      p1 = new Vector3();\n    var pu = new Vector3(),\n      pv = new Vector3();\n\n    var i, j;\n\n    if (func.length < 3) {\n      console.error(\n        \"THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.\"\n      );\n    }\n\n    // generate vertices, normals and uvs\n\n    var sliceCount = slices + 1;\n\n    for (i = 0; i <= stacks; i++) {\n      var v = i / stacks;\n\n      for (j = 0; j <= slices; j++) {\n        var u = j / slices;\n\n        // vertex\n\n        func(u, v, p0);\n        vertices.push(p0.x, p0.y, p0.z);\n\n        // normal\n\n        // approximate tangent vectors via finite differences\n\n        if (u - EPS >= 0) {\n          func(u - EPS, v, p1);\n          pu.subVectors(p0, p1);\n        } else {\n          func(u + EPS, v, p1);\n          pu.subVectors(p1, p0);\n        }\n\n        if (v - EPS >= 0) {\n          func(u, v - EPS, p1);\n          pv.subVectors(p0, p1);\n        } else {\n          func(u, v + EPS, p1);\n          pv.subVectors(p1, p0);\n        }\n\n        // cross product of tangent vectors returns surface normal\n\n        normal.crossVectors(pu, pv).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(u, v);\n      }\n    }\n\n    // generate indices\n\n    for (i = 0; i < stacks; i++) {\n      for (j = 0; j < slices; j++) {\n        var a = i * sliceCount + j;\n        var b = i * sliceCount + j + 1;\n        var c = (i + 1) * sliceCount + j + 1;\n        var d = (i + 1) * sliceCount + j;\n\n        // faces one and two\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n\n  ParametricBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\n\n  /**\n   * @author clockworkgeek / https://github.com/clockworkgeek\n   * @author timothypratley / https://github.com/timothypratley\n   * @author WestLangley / http://github.com/WestLangley\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // PolyhedronGeometry\n\n  function PolyhedronGeometry(vertices, indices, radius, detail) {\n    Geometry.call(this);\n\n    this.type = \"PolyhedronGeometry\";\n\n    this.parameters = {\n      vertices: vertices,\n      indices: indices,\n      radius: radius,\n      detail: detail,\n    };\n\n    this.fromBufferGeometry(\n      new PolyhedronBufferGeometry(vertices, indices, radius, detail)\n    );\n    this.mergeVertices();\n  }\n\n  PolyhedronGeometry.prototype = Object.create(Geometry.prototype);\n  PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\n\n  // PolyhedronBufferGeometry\n\n  function PolyhedronBufferGeometry(vertices, indices, radius, detail) {\n    BufferGeometry.call(this);\n\n    this.type = \"PolyhedronBufferGeometry\";\n\n    this.parameters = {\n      vertices: vertices,\n      indices: indices,\n      radius: radius,\n      detail: detail,\n    };\n\n    radius = radius || 1;\n    detail = detail || 0;\n\n    // default buffer data\n\n    var vertexBuffer = [];\n    var uvBuffer = [];\n\n    // the subdivision creates the vertex buffer data\n\n    subdivide(detail);\n\n    // all vertices should lie on a conceptual sphere with a given radius\n\n    appplyRadius(radius);\n\n    // finally, create the uv data\n\n    generateUVs();\n\n    // build non-indexed geometry\n\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertexBuffer, 3));\n    this.addAttribute(\n      \"normal\",\n      new Float32BufferAttribute(vertexBuffer.slice(), 3)\n    );\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvBuffer, 2));\n\n    if (detail === 0) {\n      this.computeVertexNormals(); // flat normals\n    } else {\n      this.normalizeNormals(); // smooth normals\n    }\n\n    // helper functions\n\n    function subdivide(detail) {\n      var a = new Vector3();\n      var b = new Vector3();\n      var c = new Vector3();\n\n      // iterate over all faces and apply a subdivison with the given detail value\n\n      for (var i = 0; i < indices.length; i += 3) {\n        // get the vertices of the face\n\n        getVertexByIndex(indices[i + 0], a);\n        getVertexByIndex(indices[i + 1], b);\n        getVertexByIndex(indices[i + 2], c);\n\n        // perform subdivision\n\n        subdivideFace(a, b, c, detail);\n      }\n    }\n\n    function subdivideFace(a, b, c, detail) {\n      var cols = Math.pow(2, detail);\n\n      // we use this multidimensional array as a data structure for creating the subdivision\n\n      var v = [];\n\n      var i, j;\n\n      // construct all of the vertices for this subdivision\n\n      for (i = 0; i <= cols; i++) {\n        v[i] = [];\n\n        var aj = a.clone().lerp(c, i / cols);\n        var bj = b.clone().lerp(c, i / cols);\n\n        var rows = cols - i;\n\n        for (j = 0; j <= rows; j++) {\n          if (j === 0 && i === cols) {\n            v[i][j] = aj;\n          } else {\n            v[i][j] = aj.clone().lerp(bj, j / rows);\n          }\n        }\n      }\n\n      // construct all of the faces\n\n      for (i = 0; i < cols; i++) {\n        for (j = 0; j < 2 * (cols - i) - 1; j++) {\n          var k = Math.floor(j / 2);\n\n          if (j % 2 === 0) {\n            pushVertex(v[i][k + 1]);\n            pushVertex(v[i + 1][k]);\n            pushVertex(v[i][k]);\n          } else {\n            pushVertex(v[i][k + 1]);\n            pushVertex(v[i + 1][k + 1]);\n            pushVertex(v[i + 1][k]);\n          }\n        }\n      }\n    }\n\n    function appplyRadius(radius) {\n      var vertex = new Vector3();\n\n      // iterate over the entire buffer and apply the radius to each vertex\n\n      for (var i = 0; i < vertexBuffer.length; i += 3) {\n        vertex.x = vertexBuffer[i + 0];\n        vertex.y = vertexBuffer[i + 1];\n        vertex.z = vertexBuffer[i + 2];\n\n        vertex.normalize().multiplyScalar(radius);\n\n        vertexBuffer[i + 0] = vertex.x;\n        vertexBuffer[i + 1] = vertex.y;\n        vertexBuffer[i + 2] = vertex.z;\n      }\n    }\n\n    function generateUVs() {\n      var vertex = new Vector3();\n\n      for (var i = 0; i < vertexBuffer.length; i += 3) {\n        vertex.x = vertexBuffer[i + 0];\n        vertex.y = vertexBuffer[i + 1];\n        vertex.z = vertexBuffer[i + 2];\n\n        var u = azimuth(vertex) / 2 / Math.PI + 0.5;\n        var v = inclination(vertex) / Math.PI + 0.5;\n        uvBuffer.push(u, 1 - v);\n      }\n\n      correctUVs();\n\n      correctSeam();\n    }\n\n    function correctSeam() {\n      // handle case when face straddles the seam, see #3269\n\n      for (var i = 0; i < uvBuffer.length; i += 6) {\n        // uv data of a single face\n\n        var x0 = uvBuffer[i + 0];\n        var x1 = uvBuffer[i + 2];\n        var x2 = uvBuffer[i + 4];\n\n        var max = Math.max(x0, x1, x2);\n        var min = Math.min(x0, x1, x2);\n\n        // 0.9 is somewhat arbitrary\n\n        if (max > 0.9 && min < 0.1) {\n          if (x0 < 0.2) uvBuffer[i + 0] += 1;\n          if (x1 < 0.2) uvBuffer[i + 2] += 1;\n          if (x2 < 0.2) uvBuffer[i + 4] += 1;\n        }\n      }\n    }\n\n    function pushVertex(vertex) {\n      vertexBuffer.push(vertex.x, vertex.y, vertex.z);\n    }\n\n    function getVertexByIndex(index, vertex) {\n      var stride = index * 3;\n\n      vertex.x = vertices[stride + 0];\n      vertex.y = vertices[stride + 1];\n      vertex.z = vertices[stride + 2];\n    }\n\n    function correctUVs() {\n      var a = new Vector3();\n      var b = new Vector3();\n      var c = new Vector3();\n\n      var centroid = new Vector3();\n\n      var uvA = new Vector2();\n      var uvB = new Vector2();\n      var uvC = new Vector2();\n\n      for (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n        a.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n        b.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n        c.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\n        uvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n        uvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n        uvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\n        centroid.copy(a).add(b).add(c).divideScalar(3);\n\n        var azi = azimuth(centroid);\n\n        correctUV(uvA, j + 0, a, azi);\n        correctUV(uvB, j + 2, b, azi);\n        correctUV(uvC, j + 4, c, azi);\n      }\n    }\n\n    function correctUV(uv, stride, vector, azimuth) {\n      if (azimuth < 0 && uv.x === 1) {\n        uvBuffer[stride] = uv.x - 1;\n      }\n\n      if (vector.x === 0 && vector.z === 0) {\n        uvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n      }\n    }\n\n    // Angle around the Y axis, counter-clockwise when looking from above.\n\n    function azimuth(vector) {\n      return Math.atan2(vector.z, -vector.x);\n    }\n\n    // Angle above the XZ plane.\n\n    function inclination(vector) {\n      return Math.atan2(\n        -vector.y,\n        Math.sqrt(vector.x * vector.x + vector.z * vector.z)\n      );\n    }\n  }\n\n  PolyhedronBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\n\n  /**\n   * @author timothypratley / https://github.com/timothypratley\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // TetrahedronGeometry\n\n  function TetrahedronGeometry(radius, detail) {\n    Geometry.call(this);\n\n    this.type = \"TetrahedronGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      detail: detail,\n    };\n\n    this.fromBufferGeometry(new TetrahedronBufferGeometry(radius, detail));\n    this.mergeVertices();\n  }\n\n  TetrahedronGeometry.prototype = Object.create(Geometry.prototype);\n  TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\n\n  // TetrahedronBufferGeometry\n\n  function TetrahedronBufferGeometry(radius, detail) {\n    var vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\n    var indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\n    PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);\n\n    this.type = \"TetrahedronBufferGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      detail: detail,\n    };\n  }\n\n  TetrahedronBufferGeometry.prototype = Object.create(\n    PolyhedronBufferGeometry.prototype\n  );\n  TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\n\n  /**\n   * @author timothypratley / https://github.com/timothypratley\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // OctahedronGeometry\n\n  function OctahedronGeometry(radius, detail) {\n    Geometry.call(this);\n\n    this.type = \"OctahedronGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      detail: detail,\n    };\n\n    this.fromBufferGeometry(new OctahedronBufferGeometry(radius, detail));\n    this.mergeVertices();\n  }\n\n  OctahedronGeometry.prototype = Object.create(Geometry.prototype);\n  OctahedronGeometry.prototype.constructor = OctahedronGeometry;\n\n  // OctahedronBufferGeometry\n\n  function OctahedronBufferGeometry(radius, detail) {\n    var vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\n    var indices = [\n      0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2,\n    ];\n\n    PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);\n\n    this.type = \"OctahedronBufferGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      detail: detail,\n    };\n  }\n\n  OctahedronBufferGeometry.prototype = Object.create(\n    PolyhedronBufferGeometry.prototype\n  );\n  OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\n\n  /**\n   * @author timothypratley / https://github.com/timothypratley\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // IcosahedronGeometry\n\n  function IcosahedronGeometry(radius, detail) {\n    Geometry.call(this);\n\n    this.type = \"IcosahedronGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      detail: detail,\n    };\n\n    this.fromBufferGeometry(new IcosahedronBufferGeometry(radius, detail));\n    this.mergeVertices();\n  }\n\n  IcosahedronGeometry.prototype = Object.create(Geometry.prototype);\n  IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\n\n  // IcosahedronBufferGeometry\n\n  function IcosahedronBufferGeometry(radius, detail) {\n    var t = (1 + Math.sqrt(5)) / 2;\n\n    var vertices = [\n      -1,\n      t,\n      0,\n      1,\n      t,\n      0,\n      -1,\n      -t,\n      0,\n      1,\n      -t,\n      0,\n      0,\n      -1,\n      t,\n      0,\n      1,\n      t,\n      0,\n      -1,\n      -t,\n      0,\n      1,\n      -t,\n      t,\n      0,\n      -1,\n      t,\n      0,\n      1,\n      -t,\n      0,\n      -1,\n      -t,\n      0,\n      1,\n    ];\n\n    var indices = [\n      0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11,\n      10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4,\n      9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1,\n    ];\n\n    PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);\n\n    this.type = \"IcosahedronBufferGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      detail: detail,\n    };\n  }\n\n  IcosahedronBufferGeometry.prototype = Object.create(\n    PolyhedronBufferGeometry.prototype\n  );\n  IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\n\n  /**\n   * @author Abe Pazos / https://hamoid.com\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // DodecahedronGeometry\n\n  function DodecahedronGeometry(radius, detail) {\n    Geometry.call(this);\n\n    this.type = \"DodecahedronGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      detail: detail,\n    };\n\n    this.fromBufferGeometry(new DodecahedronBufferGeometry(radius, detail));\n    this.mergeVertices();\n  }\n\n  DodecahedronGeometry.prototype = Object.create(Geometry.prototype);\n  DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\n\n  // DodecahedronBufferGeometry\n\n  function DodecahedronBufferGeometry(radius, detail) {\n    var t = (1 + Math.sqrt(5)) / 2;\n    var r = 1 / t;\n\n    var vertices = [\n      // (±1, ±1, ±1)\n      -1,\n      -1,\n      -1,\n      -1,\n      -1,\n      1,\n      -1,\n      1,\n      -1,\n      -1,\n      1,\n      1,\n      1,\n      -1,\n      -1,\n      1,\n      -1,\n      1,\n      1,\n      1,\n      -1,\n      1,\n      1,\n      1,\n\n      // (0, ±1/φ, ±φ)\n      0,\n      -r,\n      -t,\n      0,\n      -r,\n      t,\n      0,\n      r,\n      -t,\n      0,\n      r,\n      t,\n\n      // (±1/φ, ±φ, 0)\n      -r,\n      -t,\n      0,\n      -r,\n      t,\n      0,\n      r,\n      -t,\n      0,\n      r,\n      t,\n      0,\n\n      // (±φ, 0, ±1/φ)\n      -t,\n      0,\n      -r,\n      t,\n      0,\n      -r,\n      -t,\n      0,\n      r,\n      t,\n      0,\n      r,\n    ];\n\n    var indices = [\n      3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8,\n      17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0,\n      18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18,\n      1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5,\n      19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5,\n      9,\n    ];\n\n    PolyhedronBufferGeometry.call(this, vertices, indices, radius, detail);\n\n    this.type = \"DodecahedronBufferGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      detail: detail,\n    };\n  }\n\n  DodecahedronBufferGeometry.prototype = Object.create(\n    PolyhedronBufferGeometry.prototype\n  );\n  DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\n\n  /**\n   * @author oosmoxiecode / https://github.com/oosmoxiecode\n   * @author WestLangley / https://github.com/WestLangley\n   * @author zz85 / https://github.com/zz85\n   * @author miningold / https://github.com/miningold\n   * @author jonobr1 / https://github.com/jonobr1\n   * @author Mugen87 / https://github.com/Mugen87\n   *\n   */\n\n  // TubeGeometry\n\n  function TubeGeometry(\n    path,\n    tubularSegments,\n    radius,\n    radialSegments,\n    closed,\n    taper\n  ) {\n    Geometry.call(this);\n\n    this.type = \"TubeGeometry\";\n\n    this.parameters = {\n      path: path,\n      tubularSegments: tubularSegments,\n      radius: radius,\n      radialSegments: radialSegments,\n      closed: closed,\n    };\n\n    if (taper !== undefined)\n      console.warn(\"THREE.TubeGeometry: taper has been removed.\");\n\n    var bufferGeometry = new TubeBufferGeometry(\n      path,\n      tubularSegments,\n      radius,\n      radialSegments,\n      closed\n    );\n\n    // expose internals\n\n    this.tangents = bufferGeometry.tangents;\n    this.normals = bufferGeometry.normals;\n    this.binormals = bufferGeometry.binormals;\n\n    // create geometry\n\n    this.fromBufferGeometry(bufferGeometry);\n    this.mergeVertices();\n  }\n\n  TubeGeometry.prototype = Object.create(Geometry.prototype);\n  TubeGeometry.prototype.constructor = TubeGeometry;\n\n  // TubeBufferGeometry\n\n  function TubeBufferGeometry(\n    path,\n    tubularSegments,\n    radius,\n    radialSegments,\n    closed\n  ) {\n    BufferGeometry.call(this);\n\n    this.type = \"TubeBufferGeometry\";\n\n    this.parameters = {\n      path: path,\n      tubularSegments: tubularSegments,\n      radius: radius,\n      radialSegments: radialSegments,\n      closed: closed,\n    };\n\n    tubularSegments = tubularSegments || 64;\n    radius = radius || 1;\n    radialSegments = radialSegments || 8;\n    closed = closed || false;\n\n    var frames = path.computeFrenetFrames(tubularSegments, closed);\n\n    // expose internals\n\n    this.tangents = frames.tangents;\n    this.normals = frames.normals;\n    this.binormals = frames.binormals;\n\n    // helper variables\n\n    var vertex = new Vector3();\n    var normal = new Vector3();\n    var uv = new Vector2();\n    var P = new Vector3();\n\n    var i, j;\n\n    // buffer\n\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n    var indices = [];\n\n    // create buffer data\n\n    generateBufferData();\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n\n    // functions\n\n    function generateBufferData() {\n      for (i = 0; i < tubularSegments; i++) {\n        generateSegment(i);\n      }\n\n      // if the geometry is not closed, generate the last row of vertices and normals\n      // at the regular position on the given path\n      //\n      // if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n      generateSegment(closed === false ? tubularSegments : 0);\n\n      // uvs are generated in a separate function.\n      // this makes it easy compute correct values for closed geometries\n\n      generateUVs();\n\n      // finally create faces\n\n      generateIndices();\n    }\n\n    function generateSegment(i) {\n      // we use getPointAt to sample evenly distributed points from the given path\n\n      P = path.getPointAt(i / tubularSegments, P);\n\n      // retrieve corresponding normal and binormal\n\n      var N = frames.normals[i];\n      var B = frames.binormals[i];\n\n      // generate normals and vertices for the current segment\n\n      for (j = 0; j <= radialSegments; j++) {\n        var v = (j / radialSegments) * Math.PI * 2;\n\n        var sin = Math.sin(v);\n        var cos = -Math.cos(v);\n\n        // normal\n\n        normal.x = cos * N.x + sin * B.x;\n        normal.y = cos * N.y + sin * B.y;\n        normal.z = cos * N.z + sin * B.z;\n        normal.normalize();\n\n        normals.push(normal.x, normal.y, normal.z);\n\n        // vertex\n\n        vertex.x = P.x + radius * normal.x;\n        vertex.y = P.y + radius * normal.y;\n        vertex.z = P.z + radius * normal.z;\n\n        vertices.push(vertex.x, vertex.y, vertex.z);\n      }\n    }\n\n    function generateIndices() {\n      for (j = 1; j <= tubularSegments; j++) {\n        for (i = 1; i <= radialSegments; i++) {\n          var a = (radialSegments + 1) * (j - 1) + (i - 1);\n          var b = (radialSegments + 1) * j + (i - 1);\n          var c = (radialSegments + 1) * j + i;\n          var d = (radialSegments + 1) * (j - 1) + i;\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n        }\n      }\n    }\n\n    function generateUVs() {\n      for (i = 0; i <= tubularSegments; i++) {\n        for (j = 0; j <= radialSegments; j++) {\n          uv.x = i / tubularSegments;\n          uv.y = j / radialSegments;\n\n          uvs.push(uv.x, uv.y);\n        }\n      }\n    }\n  }\n\n  TubeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\n\n  /**\n   * @author oosmoxiecode\n   * @author Mugen87 / https://github.com/Mugen87\n   *\n   * based on http://www.blackpawn.com/texts/pqtorus/\n   */\n\n  // TorusKnotGeometry\n\n  function TorusKnotGeometry(\n    radius,\n    tube,\n    tubularSegments,\n    radialSegments,\n    p,\n    q,\n    heightScale\n  ) {\n    Geometry.call(this);\n\n    this.type = \"TorusKnotGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      tubularSegments: tubularSegments,\n      radialSegments: radialSegments,\n      p: p,\n      q: q,\n    };\n\n    if (heightScale !== undefined)\n      console.warn(\n        \"THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.\"\n      );\n\n    this.fromBufferGeometry(\n      new TorusKnotBufferGeometry(\n        radius,\n        tube,\n        tubularSegments,\n        radialSegments,\n        p,\n        q\n      )\n    );\n    this.mergeVertices();\n  }\n\n  TorusKnotGeometry.prototype = Object.create(Geometry.prototype);\n  TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\n\n  // TorusKnotBufferGeometry\n\n  function TorusKnotBufferGeometry(\n    radius,\n    tube,\n    tubularSegments,\n    radialSegments,\n    p,\n    q\n  ) {\n    BufferGeometry.call(this);\n\n    this.type = \"TorusKnotBufferGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      tubularSegments: tubularSegments,\n      radialSegments: radialSegments,\n      p: p,\n      q: q,\n    };\n\n    radius = radius || 1;\n    tube = tube || 0.4;\n    tubularSegments = Math.floor(tubularSegments) || 64;\n    radialSegments = Math.floor(radialSegments) || 8;\n    p = p || 2;\n    q = q || 3;\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    // helper variables\n\n    var i, j;\n\n    var vertex = new Vector3();\n    var normal = new Vector3();\n\n    var P1 = new Vector3();\n    var P2 = new Vector3();\n\n    var B = new Vector3();\n    var T = new Vector3();\n    var N = new Vector3();\n\n    // generate vertices, normals and uvs\n\n    for (i = 0; i <= tubularSegments; ++i) {\n      // the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n      var u = (i / tubularSegments) * p * Math.PI * 2;\n\n      // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n      // these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n      calculatePositionOnCurve(u, p, q, radius, P1);\n      calculatePositionOnCurve(u + 0.01, p, q, radius, P2);\n\n      // calculate orthonormal basis\n\n      T.subVectors(P2, P1);\n      N.addVectors(P2, P1);\n      B.crossVectors(T, N);\n      N.crossVectors(B, T);\n\n      // normalize B, N. T can be ignored, we don't use it\n\n      B.normalize();\n      N.normalize();\n\n      for (j = 0; j <= radialSegments; ++j) {\n        // now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n        // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n        var v = (j / radialSegments) * Math.PI * 2;\n        var cx = -tube * Math.cos(v);\n        var cy = tube * Math.sin(v);\n\n        // now calculate the final vertex position.\n        // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n        vertex.x = P1.x + (cx * N.x + cy * B.x);\n        vertex.y = P1.y + (cx * N.y + cy * B.y);\n        vertex.z = P1.z + (cx * N.z + cy * B.z);\n\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n        normal.subVectors(vertex, P1).normalize();\n\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(i / tubularSegments);\n        uvs.push(j / radialSegments);\n      }\n    }\n\n    // generate indices\n\n    for (j = 1; j <= tubularSegments; j++) {\n      for (i = 1; i <= radialSegments; i++) {\n        // indices\n\n        var a = (radialSegments + 1) * (j - 1) + (i - 1);\n        var b = (radialSegments + 1) * j + (i - 1);\n        var c = (radialSegments + 1) * j + i;\n        var d = (radialSegments + 1) * (j - 1) + i;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n\n    // this function calculates the current position on the torus curve\n\n    function calculatePositionOnCurve(u, p, q, radius, position) {\n      var cu = Math.cos(u);\n      var su = Math.sin(u);\n      var quOverP = (q / p) * u;\n      var cs = Math.cos(quOverP);\n\n      position.x = radius * (2 + cs) * 0.5 * cu;\n      position.y = radius * (2 + cs) * su * 0.5;\n      position.z = radius * Math.sin(quOverP) * 0.5;\n    }\n  }\n\n  TorusKnotBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\n\n  /**\n   * @author oosmoxiecode\n   * @author mrdoob / http://mrdoob.com/\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // TorusGeometry\n\n  function TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n    Geometry.call(this);\n\n    this.type = \"TorusGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      radialSegments: radialSegments,\n      tubularSegments: tubularSegments,\n      arc: arc,\n    };\n\n    this.fromBufferGeometry(\n      new TorusBufferGeometry(\n        radius,\n        tube,\n        radialSegments,\n        tubularSegments,\n        arc\n      )\n    );\n    this.mergeVertices();\n  }\n\n  TorusGeometry.prototype = Object.create(Geometry.prototype);\n  TorusGeometry.prototype.constructor = TorusGeometry;\n\n  // TorusBufferGeometry\n\n  function TorusBufferGeometry(\n    radius,\n    tube,\n    radialSegments,\n    tubularSegments,\n    arc\n  ) {\n    BufferGeometry.call(this);\n\n    this.type = \"TorusBufferGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      radialSegments: radialSegments,\n      tubularSegments: tubularSegments,\n      arc: arc,\n    };\n\n    radius = radius || 1;\n    tube = tube || 0.4;\n    radialSegments = Math.floor(radialSegments) || 8;\n    tubularSegments = Math.floor(tubularSegments) || 6;\n    arc = arc || Math.PI * 2;\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    // helper variables\n\n    var center = new Vector3();\n    var vertex = new Vector3();\n    var normal = new Vector3();\n\n    var j, i;\n\n    // generate vertices, normals and uvs\n\n    for (j = 0; j <= radialSegments; j++) {\n      for (i = 0; i <= tubularSegments; i++) {\n        var u = (i / tubularSegments) * arc;\n        var v = (j / radialSegments) * Math.PI * 2;\n\n        // vertex\n\n        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertex.z = tube * Math.sin(v);\n\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        center.x = radius * Math.cos(u);\n        center.y = radius * Math.sin(u);\n        normal.subVectors(vertex, center).normalize();\n\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(i / tubularSegments);\n        uvs.push(j / radialSegments);\n      }\n    }\n\n    // generate indices\n\n    for (j = 1; j <= radialSegments; j++) {\n      for (i = 1; i <= tubularSegments; i++) {\n        // indices\n\n        var a = (tubularSegments + 1) * j + i - 1;\n        var b = (tubularSegments + 1) * (j - 1) + i - 1;\n        var c = (tubularSegments + 1) * (j - 1) + i;\n        var d = (tubularSegments + 1) * j + i;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n\n  TorusBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\n\n  /**\n   * @author Mugen87 / https://github.com/Mugen87\n   * Port from https://github.com/mapbox/earcut (v2.1.2)\n   */\n\n  var Earcut = {\n    triangulate: function (data, holeIndices, dim) {\n      dim = dim || 2;\n\n      var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n      if (!outerNode) return triangles;\n\n      var minX, minY, maxX, maxY, x, y, invSize;\n\n      if (hasHoles)\n        outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n      // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n      if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n          x = data[i];\n          y = data[i + 1];\n          if (x < minX) minX = x;\n          if (y < minY) minY = y;\n          if (x > maxX) maxX = x;\n          if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n      }\n\n      earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n      return triangles;\n    },\n  };\n\n  // create a circular doubly linked list from polygon points in the specified winding order\n\n  function linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === signedArea(data, start, end, dim) > 0) {\n      for (i = start; i < end; i += dim)\n        last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n      for (i = end - dim; i >= start; i -= dim)\n        last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n      removeNode(last);\n      last = last.next;\n    }\n\n    return last;\n  }\n\n  // eliminate colinear or duplicate points\n\n  function filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n      again;\n\n    do {\n      again = false;\n\n      if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n        removeNode(p);\n        p = end = p.prev;\n        if (p === p.next) break;\n        again = true;\n      } else {\n        p = p.next;\n      }\n    } while (again || p !== end);\n\n    return end;\n  }\n\n  // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n  function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n      prev,\n      next;\n\n    // iterate through ears, slicing them one by one\n\n    while (ear.prev !== ear.next) {\n      prev = ear.prev;\n      next = ear.next;\n\n      if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n        // cut off the triangle\n        triangles.push(prev.i / dim);\n        triangles.push(ear.i / dim);\n        triangles.push(next.i / dim);\n\n        removeNode(ear);\n\n        // skipping the next vertice leads to less sliver triangles\n        ear = next.next;\n        stop = next.next;\n\n        continue;\n      }\n\n      ear = next;\n\n      // if we looped through the whole remaining polygon and can't find any more ears\n\n      if (ear === stop) {\n        // try filtering points and slicing again\n\n        if (!pass) {\n          earcutLinked(\n            filterPoints(ear),\n            triangles,\n            dim,\n            minX,\n            minY,\n            invSize,\n            1\n          );\n\n          // if this didn't work, try curing all small self-intersections locally\n        } else if (pass === 1) {\n          ear = cureLocalIntersections(ear, triangles, dim);\n          earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n          // as a last resort, try splitting the remaining polygon into two\n        } else if (pass === 2) {\n          splitEarcut(ear, triangles, dim, minX, minY, invSize);\n        }\n\n        break;\n      }\n    }\n  }\n\n  // check whether a polygon node forms a valid ear with adjacent nodes\n\n  function isEar(ear) {\n    var a = ear.prev,\n      b = ear,\n      c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n      if (\n        pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n        area(p.prev, p, p.next) >= 0\n      ) {\n        return false;\n      }\n\n      p = p.next;\n    }\n\n    return true;\n  }\n\n  function isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n      b = ear,\n      c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : b.x < c.x ? b.x : c.x,\n      minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : b.y < c.y ? b.y : c.y,\n      maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : b.x > c.x ? b.x : c.x,\n      maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : b.y > c.y ? b.y : c.y;\n\n    // z-order range for the current triangle bbox;\n\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n      maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    // first look for points inside the triangle in increasing z-order\n\n    var p = ear.nextZ;\n\n    while (p && p.z <= maxZ) {\n      if (\n        p !== ear.prev &&\n        p !== ear.next &&\n        pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n        area(p.prev, p, p.next) >= 0\n      )\n        return false;\n      p = p.nextZ;\n    }\n\n    // then look for points in decreasing z-order\n\n    p = ear.prevZ;\n\n    while (p && p.z >= minZ) {\n      if (\n        p !== ear.prev &&\n        p !== ear.next &&\n        pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n        area(p.prev, p, p.next) >= 0\n      )\n        return false;\n\n      p = p.prevZ;\n    }\n\n    return true;\n  }\n\n  // go through all polygon nodes and cure small local self-intersections\n\n  function cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n\n    do {\n      var a = p.prev,\n        b = p.next.next;\n\n      if (\n        !equals(a, b) &&\n        intersects(a, p, p.next, b) &&\n        locallyInside(a, b) &&\n        locallyInside(b, a)\n      ) {\n        triangles.push(a.i / dim);\n        triangles.push(p.i / dim);\n        triangles.push(b.i / dim);\n\n        // remove two nodes involved\n\n        removeNode(p);\n        removeNode(p.next);\n\n        p = start = b;\n      }\n\n      p = p.next;\n    } while (p !== start);\n\n    return p;\n  }\n\n  // try splitting polygon into two and triangulate them independently\n\n  function splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n\n    var a = start;\n\n    do {\n      var b = a.next.next;\n\n      while (b !== a.prev) {\n        if (a.i !== b.i && isValidDiagonal(a, b)) {\n          // split the polygon in two by the diagonal\n\n          var c = splitPolygon(a, b);\n\n          // filter colinear points around the cuts\n\n          a = filterPoints(a, a.next);\n          c = filterPoints(c, c.next);\n\n          // run earcut on each half\n\n          earcutLinked(a, triangles, dim, minX, minY, invSize);\n          earcutLinked(c, triangles, dim, minX, minY, invSize);\n          return;\n        }\n\n        b = b.next;\n      }\n\n      a = a.next;\n    } while (a !== start);\n  }\n\n  // link every hole into the outer loop, producing a single-ring polygon without holes\n\n  function eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n      i,\n      len,\n      start,\n      end,\n      list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n      start = holeIndices[i] * dim;\n      end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n      list = linkedList(data, start, end, dim, false);\n      if (list === list.next) list.steiner = true;\n      queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n\n    for (i = 0; i < queue.length; i++) {\n      eliminateHole(queue[i], outerNode);\n      outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n  }\n\n  function compareX(a, b) {\n    return a.x - b.x;\n  }\n\n  // find a bridge between vertices that connects hole with an outer ring and and link it\n\n  function eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n\n    if (outerNode) {\n      var b = splitPolygon(outerNode, hole);\n\n      filterPoints(b, b.next);\n    }\n  }\n\n  // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n  function findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n      hx = hole.x,\n      hy = hole.y,\n      qx = -Infinity,\n      m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n\n    do {\n      if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n        var x = p.x + ((hy - p.y) * (p.next.x - p.x)) / (p.next.y - p.y);\n\n        if (x <= hx && x > qx) {\n          qx = x;\n\n          if (x === hx) {\n            if (hy === p.y) return p;\n            if (hy === p.next.y) return p.next;\n          }\n\n          m = p.x < p.next.x ? p : p.next;\n        }\n      }\n\n      p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n      mx = m.x,\n      my = m.y,\n      tanMin = Infinity,\n      tan;\n\n    p = m.next;\n\n    while (p !== stop) {\n      if (\n        hx >= p.x &&\n        p.x >= mx &&\n        hx !== p.x &&\n        pointInTriangle(\n          hy < my ? hx : qx,\n          hy,\n          mx,\n          my,\n          hy < my ? qx : hx,\n          hy,\n          p.x,\n          p.y\n        )\n      ) {\n        tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n        if (\n          (tan < tanMin || (tan === tanMin && p.x > m.x)) &&\n          locallyInside(p, hole)\n        ) {\n          m = p;\n          tanMin = tan;\n        }\n      }\n\n      p = p.next;\n    }\n\n    return m;\n  }\n\n  // interlink polygon nodes in z-order\n\n  function indexCurve(start, minX, minY, invSize) {\n    var p = start;\n\n    do {\n      if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n      p.prevZ = p.prev;\n      p.nextZ = p.next;\n      p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n  }\n\n  // Simon Tatham's linked list merge sort algorithm\n  // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n  function sortLinked(list) {\n    var i,\n      p,\n      q,\n      e,\n      tail,\n      numMerges,\n      pSize,\n      qSize,\n      inSize = 1;\n\n    do {\n      p = list;\n      list = null;\n      tail = null;\n      numMerges = 0;\n\n      while (p) {\n        numMerges++;\n        q = p;\n        pSize = 0;\n\n        for (i = 0; i < inSize; i++) {\n          pSize++;\n          q = q.nextZ;\n          if (!q) break;\n        }\n\n        qSize = inSize;\n\n        while (pSize > 0 || (qSize > 0 && q)) {\n          if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n            e = p;\n            p = p.nextZ;\n            pSize--;\n          } else {\n            e = q;\n            q = q.nextZ;\n            qSize--;\n          }\n\n          if (tail) tail.nextZ = e;\n          else list = e;\n\n          e.prevZ = tail;\n          tail = e;\n        }\n\n        p = q;\n      }\n\n      tail.nextZ = null;\n      inSize *= 2;\n    } while (numMerges > 1);\n\n    return list;\n  }\n\n  // z-order of a point given coords and inverse of the longer side of data bbox\n\n  function zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00ff00ff;\n    x = (x | (x << 4)) & 0x0f0f0f0f;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00ff00ff;\n    y = (y | (y << 4)) & 0x0f0f0f0f;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n  }\n\n  // find the leftmost node of a polygon ring\n\n  function getLeftmost(start) {\n    var p = start,\n      leftmost = start;\n\n    do {\n      if (p.x < leftmost.x) leftmost = p;\n      p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n  }\n\n  // check if a point lies within a convex triangle\n\n  function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (\n      (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n      (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n      (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0\n    );\n  }\n\n  // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n  function isValidDiagonal(a, b) {\n    return (\n      a.next.i !== b.i &&\n      a.prev.i !== b.i &&\n      !intersectsPolygon(a, b) &&\n      locallyInside(a, b) &&\n      locallyInside(b, a) &&\n      middleInside(a, b)\n    );\n  }\n\n  // signed area of a triangle\n\n  function area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n  }\n\n  // check if two points are equal\n\n  function equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n  }\n\n  // check if two segments intersect\n\n  function intersects(p1, q1, p2, q2) {\n    if (\n      (equals(p1, q1) && equals(p2, q2)) ||\n      (equals(p1, q2) && equals(p2, q1))\n    )\n      return true;\n\n    return (\n      area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&\n      area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0\n    );\n  }\n\n  // check if a polygon diagonal intersects any polygon segments\n\n  function intersectsPolygon(a, b) {\n    var p = a;\n\n    do {\n      if (\n        p.i !== a.i &&\n        p.next.i !== a.i &&\n        p.i !== b.i &&\n        p.next.i !== b.i &&\n        intersects(p, p.next, a, b)\n      ) {\n        return true;\n      }\n\n      p = p.next;\n    } while (p !== a);\n\n    return false;\n  }\n\n  // check if a polygon diagonal is locally inside the polygon\n\n  function locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0\n      ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0\n      : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n  }\n\n  // check if the middle point of a polygon diagonal is inside the polygon\n\n  function middleInside(a, b) {\n    var p = a,\n      inside = false,\n      px = (a.x + b.x) / 2,\n      py = (a.y + b.y) / 2;\n\n    do {\n      if (\n        p.y > py !== p.next.y > py &&\n        p.next.y !== p.y &&\n        px < ((p.next.x - p.x) * (py - p.y)) / (p.next.y - p.y) + p.x\n      ) {\n        inside = !inside;\n      }\n\n      p = p.next;\n    } while (p !== a);\n\n    return inside;\n  }\n\n  // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n  // if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n  function splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n      b2 = new Node(b.i, b.x, b.y),\n      an = a.next,\n      bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n  }\n\n  // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n  function insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n      p.prev = p;\n      p.next = p;\n    } else {\n      p.next = last.next;\n      p.prev = last;\n      last.next.prev = p;\n      last.next = p;\n    }\n\n    return p;\n  }\n\n  function removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n  }\n\n  function Node(i, x, y) {\n    // vertice index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertice nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n  }\n\n  function signedArea(data, start, end, dim) {\n    var sum = 0;\n\n    for (var i = start, j = end - dim; i < end; i += dim) {\n      sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n      j = i;\n    }\n\n    return sum;\n  }\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   */\n\n  var ShapeUtils = {\n    // calculate area of the contour polygon\n\n    area: function (contour) {\n      var n = contour.length;\n      var a = 0.0;\n\n      for (var p = n - 1, q = 0; q < n; p = q++) {\n        a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n      }\n\n      return a * 0.5;\n    },\n\n    isClockWise: function (pts) {\n      return ShapeUtils.area(pts) < 0;\n    },\n\n    triangulateShape: function (contour, holes) {\n      var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n      var holeIndices = []; // array of hole indices\n      var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n      removeDupEndPts(contour);\n      addContour(vertices, contour);\n\n      //\n\n      var holeIndex = contour.length;\n\n      holes.forEach(removeDupEndPts);\n\n      for (var i = 0; i < holes.length; i++) {\n        holeIndices.push(holeIndex);\n        holeIndex += holes[i].length;\n        addContour(vertices, holes[i]);\n      }\n\n      //\n\n      var triangles = Earcut.triangulate(vertices, holeIndices);\n\n      //\n\n      for (var i = 0; i < triangles.length; i += 3) {\n        faces.push(triangles.slice(i, i + 3));\n      }\n\n      return faces;\n    },\n  };\n\n  function removeDupEndPts(points) {\n    var l = points.length;\n\n    if (l > 2 && points[l - 1].equals(points[0])) {\n      points.pop();\n    }\n  }\n\n  function addContour(vertices, contour) {\n    for (var i = 0; i < contour.length; i++) {\n      vertices.push(contour[i].x);\n      vertices.push(contour[i].y);\n    }\n  }\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   *\n   * Creates extruded geometry from a path shape.\n   *\n   * parameters = {\n   *\n   *  curveSegments: <int>, // number of points on the curves\n   *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n   *  depth: <float>, // Depth to extrude the shape\n   *\n   *  bevelEnabled: <bool>, // turn on bevel\n   *  bevelThickness: <float>, // how deep into the original shape bevel goes\n   *  bevelSize: <float>, // how far from shape outline is bevel\n   *  bevelSegments: <int>, // number of bevel layers\n   *\n   *  extrudePath: <THREE.Curve> // curve to extrude shape along\n   *\n   *  UVGenerator: <Object> // object that provides UV generator functions\n   *\n   * }\n   */\n\n  // ExtrudeGeometry\n\n  function ExtrudeGeometry(shapes, options) {\n    Geometry.call(this);\n\n    this.type = \"ExtrudeGeometry\";\n\n    this.parameters = {\n      shapes: shapes,\n      options: options,\n    };\n\n    this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes, options));\n    this.mergeVertices();\n  }\n\n  ExtrudeGeometry.prototype = Object.create(Geometry.prototype);\n  ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\n\n  ExtrudeGeometry.prototype.toJSON = function () {\n    var data = Geometry.prototype.toJSON.call(this);\n\n    var shapes = this.parameters.shapes;\n    var options = this.parameters.options;\n\n    return toJSON(shapes, options, data);\n  };\n\n  // ExtrudeBufferGeometry\n\n  function ExtrudeBufferGeometry(shapes, options) {\n    BufferGeometry.call(this);\n\n    this.type = \"ExtrudeBufferGeometry\";\n\n    this.parameters = {\n      shapes: shapes,\n      options: options,\n    };\n\n    shapes = Array.isArray(shapes) ? shapes : [shapes];\n\n    var scope = this;\n\n    var verticesArray = [];\n    var uvArray = [];\n\n    for (var i = 0, l = shapes.length; i < l; i++) {\n      var shape = shapes[i];\n      addShape(shape);\n    }\n\n    // build geometry\n\n    this.addAttribute(\"position\", new Float32BufferAttribute(verticesArray, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvArray, 2));\n\n    this.computeVertexNormals();\n\n    // functions\n\n    function addShape(shape) {\n      var placeholder = [];\n\n      // options\n\n      var curveSegments =\n        options.curveSegments !== undefined ? options.curveSegments : 12;\n      var steps = options.steps !== undefined ? options.steps : 1;\n      var depth = options.depth !== undefined ? options.depth : 100;\n\n      var bevelEnabled =\n        options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n      var bevelThickness =\n        options.bevelThickness !== undefined ? options.bevelThickness : 6;\n      var bevelSize =\n        options.bevelSize !== undefined\n          ? options.bevelSize\n          : bevelThickness - 2;\n      var bevelSegments =\n        options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n      var extrudePath = options.extrudePath;\n\n      var uvgen =\n        options.UVGenerator !== undefined\n          ? options.UVGenerator\n          : WorldUVGenerator;\n\n      // deprecated options\n\n      if (options.amount !== undefined) {\n        console.warn(\n          \"THREE.ExtrudeBufferGeometry: amount has been renamed to depth.\"\n        );\n        depth = options.amount;\n      }\n\n      //\n\n      var extrudePts,\n        extrudeByPath = false;\n      var splineTube, binormal, normal, position2;\n\n      if (extrudePath) {\n        extrudePts = extrudePath.getSpacedPoints(steps);\n\n        extrudeByPath = true;\n        bevelEnabled = false; // bevels not supported for path extrusion\n\n        // SETUP TNB variables\n\n        // TODO1 - have a .isClosed in spline?\n\n        splineTube = extrudePath.computeFrenetFrames(steps, false);\n\n        // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n        binormal = new Vector3();\n        normal = new Vector3();\n        position2 = new Vector3();\n      }\n\n      // Safeguards if bevels are not enabled\n\n      if (!bevelEnabled) {\n        bevelSegments = 0;\n        bevelThickness = 0;\n        bevelSize = 0;\n      }\n\n      // Variables initialization\n\n      var ahole, h, hl; // looping of holes\n\n      var shapePoints = shape.extractPoints(curveSegments);\n\n      var vertices = shapePoints.shape;\n      var holes = shapePoints.holes;\n\n      var reverse = !ShapeUtils.isClockWise(vertices);\n\n      if (reverse) {\n        vertices = vertices.reverse();\n\n        // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n        for (h = 0, hl = holes.length; h < hl; h++) {\n          ahole = holes[h];\n\n          if (ShapeUtils.isClockWise(ahole)) {\n            holes[h] = ahole.reverse();\n          }\n        }\n      }\n\n      var faces = ShapeUtils.triangulateShape(vertices, holes);\n\n      /* Vertices */\n\n      var contour = vertices; // vertices has all points but contour has only points of circumference\n\n      for (h = 0, hl = holes.length; h < hl; h++) {\n        ahole = holes[h];\n\n        vertices = vertices.concat(ahole);\n      }\n\n      function scalePt2(pt, vec, size) {\n        if (!vec) console.error(\"THREE.ExtrudeGeometry: vec does not exist\");\n\n        return vec.clone().multiplyScalar(size).add(pt);\n      }\n\n      var b,\n        bs,\n        t,\n        z,\n        vert,\n        vlen = vertices.length,\n        face,\n        flen = faces.length;\n\n      // Find directions for point movement\n\n      function getBevelVec(inPt, inPrev, inNext) {\n        // computes for inPt the corresponding point inPt' on a new contour\n        //   shifted by 1 unit (length of normalized vector) to the left\n        // if we walk along contour clockwise, this new contour is outside the old one\n        //\n        // inPt' is the intersection of the two lines parallel to the two\n        //  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n        var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n        // good reading for geometry algorithms (here: line-line intersection)\n        // http://geomalgorithms.com/a05-_intersect-1.html\n\n        var v_prev_x = inPt.x - inPrev.x,\n          v_prev_y = inPt.y - inPrev.y;\n        var v_next_x = inNext.x - inPt.x,\n          v_next_y = inNext.y - inPt.y;\n\n        var v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;\n\n        // check for collinear edges\n        var collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n        if (Math.abs(collinear0) > Number.EPSILON) {\n          // not collinear\n\n          // length of vectors for normalizing\n\n          var v_prev_len = Math.sqrt(v_prev_lensq);\n          var v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);\n\n          // shift adjacent points by unit vectors to the left\n\n          var ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n          var ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\n          var ptNextShift_x = inNext.x - v_next_y / v_next_len;\n          var ptNextShift_y = inNext.y + v_next_x / v_next_len;\n\n          // scaling factor for v_prev to intersection point\n\n          var sf =\n            ((ptNextShift_x - ptPrevShift_x) * v_next_y -\n              (ptNextShift_y - ptPrevShift_y) * v_next_x) /\n            (v_prev_x * v_next_y - v_prev_y * v_next_x);\n\n          // vector from inPt to intersection point\n\n          v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n          v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;\n\n          // Don't normalize!, otherwise sharp corners become ugly\n          //  but prevent crazy spikes\n          var v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n          if (v_trans_lensq <= 2) {\n            return new Vector2(v_trans_x, v_trans_y);\n          } else {\n            shrink_by = Math.sqrt(v_trans_lensq / 2);\n          }\n        } else {\n          // handle special case of collinear edges\n\n          var direction_eq = false; // assumes: opposite\n          if (v_prev_x > Number.EPSILON) {\n            if (v_next_x > Number.EPSILON) {\n              direction_eq = true;\n            }\n          } else {\n            if (v_prev_x < -Number.EPSILON) {\n              if (v_next_x < -Number.EPSILON) {\n                direction_eq = true;\n              }\n            } else {\n              if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n                direction_eq = true;\n              }\n            }\n          }\n\n          if (direction_eq) {\n            // console.log(\"Warning: lines are a straight sequence\");\n            v_trans_x = -v_prev_y;\n            v_trans_y = v_prev_x;\n            shrink_by = Math.sqrt(v_prev_lensq);\n          } else {\n            // console.log(\"Warning: lines are a straight spike\");\n            v_trans_x = v_prev_x;\n            v_trans_y = v_prev_y;\n            shrink_by = Math.sqrt(v_prev_lensq / 2);\n          }\n        }\n\n        return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n      }\n\n      var contourMovements = [];\n\n      for (\n        var i = 0, il = contour.length, j = il - 1, k = i + 1;\n        i < il;\n        i++, j++, k++\n      ) {\n        if (j === il) j = 0;\n        if (k === il) k = 0;\n\n        //  (j)---(i)---(k)\n        // console.log('i,j,k', i, j , k)\n\n        contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n      }\n\n      var holesMovements = [],\n        oneHoleMovements,\n        verticesMovements = contourMovements.concat();\n\n      for (h = 0, hl = holes.length; h < hl; h++) {\n        ahole = holes[h];\n\n        oneHoleMovements = [];\n\n        for (\n          i = 0, il = ahole.length, j = il - 1, k = i + 1;\n          i < il;\n          i++, j++, k++\n        ) {\n          if (j === il) j = 0;\n          if (k === il) k = 0;\n\n          //  (j)---(i)---(k)\n          oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n        }\n\n        holesMovements.push(oneHoleMovements);\n        verticesMovements = verticesMovements.concat(oneHoleMovements);\n      }\n\n      // Loop bevelSegments, 1 for the front, 1 for the back\n\n      for (b = 0; b < bevelSegments; b++) {\n        //for ( b = bevelSegments; b > 0; b -- ) {\n\n        t = b / bevelSegments;\n        z = bevelThickness * Math.cos((t * Math.PI) / 2);\n        bs = bevelSize * Math.sin((t * Math.PI) / 2);\n\n        // contract shape\n\n        for (i = 0, il = contour.length; i < il; i++) {\n          vert = scalePt2(contour[i], contourMovements[i], bs);\n\n          v(vert.x, vert.y, -z);\n        }\n\n        // expand holes\n\n        for (h = 0, hl = holes.length; h < hl; h++) {\n          ahole = holes[h];\n          oneHoleMovements = holesMovements[h];\n\n          for (i = 0, il = ahole.length; i < il; i++) {\n            vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n            v(vert.x, vert.y, -z);\n          }\n        }\n      }\n\n      bs = bevelSize;\n\n      // Back facing vertices\n\n      for (i = 0; i < vlen; i++) {\n        vert = bevelEnabled\n          ? scalePt2(vertices[i], verticesMovements[i], bs)\n          : vertices[i];\n\n        if (!extrudeByPath) {\n          v(vert.x, vert.y, 0);\n        } else {\n          // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n          normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n          binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n\n          position2.copy(extrudePts[0]).add(normal).add(binormal);\n\n          v(position2.x, position2.y, position2.z);\n        }\n      }\n\n      // Add stepped vertices...\n      // Including front facing vertices\n\n      var s;\n\n      for (s = 1; s <= steps; s++) {\n        for (i = 0; i < vlen; i++) {\n          vert = bevelEnabled\n            ? scalePt2(vertices[i], verticesMovements[i], bs)\n            : vertices[i];\n\n          if (!extrudeByPath) {\n            v(vert.x, vert.y, (depth / steps) * s);\n          } else {\n            // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n            normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n            binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n\n            position2.copy(extrudePts[s]).add(normal).add(binormal);\n\n            v(position2.x, position2.y, position2.z);\n          }\n        }\n      }\n\n      // Add bevel segments planes\n\n      //for ( b = 1; b <= bevelSegments; b ++ ) {\n      for (b = bevelSegments - 1; b >= 0; b--) {\n        t = b / bevelSegments;\n        z = bevelThickness * Math.cos((t * Math.PI) / 2);\n        bs = bevelSize * Math.sin((t * Math.PI) / 2);\n\n        // contract shape\n\n        for (i = 0, il = contour.length; i < il; i++) {\n          vert = scalePt2(contour[i], contourMovements[i], bs);\n          v(vert.x, vert.y, depth + z);\n        }\n\n        // expand holes\n\n        for (h = 0, hl = holes.length; h < hl; h++) {\n          ahole = holes[h];\n          oneHoleMovements = holesMovements[h];\n\n          for (i = 0, il = ahole.length; i < il; i++) {\n            vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n            if (!extrudeByPath) {\n              v(vert.x, vert.y, depth + z);\n            } else {\n              v(\n                vert.x,\n                vert.y + extrudePts[steps - 1].y,\n                extrudePts[steps - 1].x + z\n              );\n            }\n          }\n        }\n      }\n\n      /* Faces */\n\n      // Top and bottom faces\n\n      buildLidFaces();\n\n      // Sides faces\n\n      buildSideFaces();\n\n      /////  Internal functions\n\n      function buildLidFaces() {\n        var start = verticesArray.length / 3;\n\n        if (bevelEnabled) {\n          var layer = 0; // steps + 1\n          var offset = vlen * layer;\n\n          // Bottom faces\n\n          for (i = 0; i < flen; i++) {\n            face = faces[i];\n            f3(face[2] + offset, face[1] + offset, face[0] + offset);\n          }\n\n          layer = steps + bevelSegments * 2;\n          offset = vlen * layer;\n\n          // Top faces\n\n          for (i = 0; i < flen; i++) {\n            face = faces[i];\n            f3(face[0] + offset, face[1] + offset, face[2] + offset);\n          }\n        } else {\n          // Bottom faces\n\n          for (i = 0; i < flen; i++) {\n            face = faces[i];\n            f3(face[2], face[1], face[0]);\n          }\n\n          // Top faces\n\n          for (i = 0; i < flen; i++) {\n            face = faces[i];\n            f3(\n              face[0] + vlen * steps,\n              face[1] + vlen * steps,\n              face[2] + vlen * steps\n            );\n          }\n        }\n\n        scope.addGroup(start, verticesArray.length / 3 - start, 0);\n      }\n\n      // Create faces for the z-sides of the shape\n\n      function buildSideFaces() {\n        var start = verticesArray.length / 3;\n        var layeroffset = 0;\n        sidewalls(contour, layeroffset);\n        layeroffset += contour.length;\n\n        for (h = 0, hl = holes.length; h < hl; h++) {\n          ahole = holes[h];\n          sidewalls(ahole, layeroffset);\n\n          //, true\n          layeroffset += ahole.length;\n        }\n\n        scope.addGroup(start, verticesArray.length / 3 - start, 1);\n      }\n\n      function sidewalls(contour, layeroffset) {\n        var j, k;\n        i = contour.length;\n\n        while (--i >= 0) {\n          j = i;\n          k = i - 1;\n          if (k < 0) k = contour.length - 1;\n\n          //console.log('b', i,j, i-1, k,vertices.length);\n\n          var s = 0,\n            sl = steps + bevelSegments * 2;\n\n          for (s = 0; s < sl; s++) {\n            var slen1 = vlen * s;\n            var slen2 = vlen * (s + 1);\n\n            var a = layeroffset + j + slen1,\n              b = layeroffset + k + slen1,\n              c = layeroffset + k + slen2,\n              d = layeroffset + j + slen2;\n\n            f4(a, b, c, d);\n          }\n        }\n      }\n\n      function v(x, y, z) {\n        placeholder.push(x);\n        placeholder.push(y);\n        placeholder.push(z);\n      }\n\n      function f3(a, b, c) {\n        addVertex(a);\n        addVertex(b);\n        addVertex(c);\n\n        var nextIndex = verticesArray.length / 3;\n        var uvs = uvgen.generateTopUV(\n          scope,\n          verticesArray,\n          nextIndex - 3,\n          nextIndex - 2,\n          nextIndex - 1\n        );\n\n        addUV(uvs[0]);\n        addUV(uvs[1]);\n        addUV(uvs[2]);\n      }\n\n      function f4(a, b, c, d) {\n        addVertex(a);\n        addVertex(b);\n        addVertex(d);\n\n        addVertex(b);\n        addVertex(c);\n        addVertex(d);\n\n        var nextIndex = verticesArray.length / 3;\n        var uvs = uvgen.generateSideWallUV(\n          scope,\n          verticesArray,\n          nextIndex - 6,\n          nextIndex - 3,\n          nextIndex - 2,\n          nextIndex - 1\n        );\n\n        addUV(uvs[0]);\n        addUV(uvs[1]);\n        addUV(uvs[3]);\n\n        addUV(uvs[1]);\n        addUV(uvs[2]);\n        addUV(uvs[3]);\n      }\n\n      function addVertex(index) {\n        verticesArray.push(placeholder[index * 3 + 0]);\n        verticesArray.push(placeholder[index * 3 + 1]);\n        verticesArray.push(placeholder[index * 3 + 2]);\n      }\n\n      function addUV(vector2) {\n        uvArray.push(vector2.x);\n        uvArray.push(vector2.y);\n      }\n    }\n  }\n\n  ExtrudeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\n\n  ExtrudeBufferGeometry.prototype.toJSON = function () {\n    var data = BufferGeometry.prototype.toJSON.call(this);\n\n    var shapes = this.parameters.shapes;\n    var options = this.parameters.options;\n\n    return toJSON(shapes, options, data);\n  };\n\n  //\n\n  var WorldUVGenerator = {\n    generateTopUV: function (geometry, vertices, indexA, indexB, indexC) {\n      var a_x = vertices[indexA * 3];\n      var a_y = vertices[indexA * 3 + 1];\n      var b_x = vertices[indexB * 3];\n      var b_y = vertices[indexB * 3 + 1];\n      var c_x = vertices[indexC * 3];\n      var c_y = vertices[indexC * 3 + 1];\n\n      return [\n        new Vector2(a_x, a_y),\n        new Vector2(b_x, b_y),\n        new Vector2(c_x, c_y),\n      ];\n    },\n\n    generateSideWallUV: function (\n      geometry,\n      vertices,\n      indexA,\n      indexB,\n      indexC,\n      indexD\n    ) {\n      var a_x = vertices[indexA * 3];\n      var a_y = vertices[indexA * 3 + 1];\n      var a_z = vertices[indexA * 3 + 2];\n      var b_x = vertices[indexB * 3];\n      var b_y = vertices[indexB * 3 + 1];\n      var b_z = vertices[indexB * 3 + 2];\n      var c_x = vertices[indexC * 3];\n      var c_y = vertices[indexC * 3 + 1];\n      var c_z = vertices[indexC * 3 + 2];\n      var d_x = vertices[indexD * 3];\n      var d_y = vertices[indexD * 3 + 1];\n      var d_z = vertices[indexD * 3 + 2];\n\n      if (Math.abs(a_y - b_y) < 0.01) {\n        return [\n          new Vector2(a_x, 1 - a_z),\n          new Vector2(b_x, 1 - b_z),\n          new Vector2(c_x, 1 - c_z),\n          new Vector2(d_x, 1 - d_z),\n        ];\n      } else {\n        return [\n          new Vector2(a_y, 1 - a_z),\n          new Vector2(b_y, 1 - b_z),\n          new Vector2(c_y, 1 - c_z),\n          new Vector2(d_y, 1 - d_z),\n        ];\n      }\n    },\n  };\n\n  function toJSON(shapes, options, data) {\n    //\n\n    data.shapes = [];\n\n    if (Array.isArray(shapes)) {\n      for (var i = 0, l = shapes.length; i < l; i++) {\n        var shape = shapes[i];\n\n        data.shapes.push(shape.uuid);\n      }\n    } else {\n      data.shapes.push(shapes.uuid);\n    }\n\n    //\n\n    if (options.extrudePath !== undefined)\n      data.options.extrudePath = options.extrudePath.toJSON();\n\n    return data;\n  }\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Text = 3D Text\n   *\n   * parameters = {\n   *  font: <THREE.Font>, // font\n   *\n   *  size: <float>, // size of the text\n   *  height: <float>, // thickness to extrude text\n   *  curveSegments: <int>, // number of points on the curves\n   *\n   *  bevelEnabled: <bool>, // turn on bevel\n   *  bevelThickness: <float>, // how deep into text bevel goes\n   *  bevelSize: <float> // how far from text outline is bevel\n   * }\n   */\n\n  // TextGeometry\n\n  function TextGeometry(text, parameters) {\n    Geometry.call(this);\n\n    this.type = \"TextGeometry\";\n\n    this.parameters = {\n      text: text,\n      parameters: parameters,\n    };\n\n    this.fromBufferGeometry(new TextBufferGeometry(text, parameters));\n    this.mergeVertices();\n  }\n\n  TextGeometry.prototype = Object.create(Geometry.prototype);\n  TextGeometry.prototype.constructor = TextGeometry;\n\n  // TextBufferGeometry\n\n  function TextBufferGeometry(text, parameters) {\n    parameters = parameters || {};\n\n    var font = parameters.font;\n\n    if (!(font && font.isFont)) {\n      console.error(\n        \"THREE.TextGeometry: font parameter is not an instance of THREE.Font.\"\n      );\n      return new Geometry();\n    }\n\n    var shapes = font.generateShapes(text, parameters.size);\n\n    // translate parameters to ExtrudeGeometry API\n\n    parameters.depth = parameters.height !== undefined ? parameters.height : 50;\n\n    // defaults\n\n    if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n    if (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n    if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\n    ExtrudeBufferGeometry.call(this, shapes, parameters);\n\n    this.type = \"TextBufferGeometry\";\n  }\n\n  TextBufferGeometry.prototype = Object.create(ExtrudeBufferGeometry.prototype);\n  TextBufferGeometry.prototype.constructor = TextBufferGeometry;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author benaadams / https://twitter.com/ben_a_adams\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // SphereGeometry\n\n  function SphereGeometry(\n    radius,\n    widthSegments,\n    heightSegments,\n    phiStart,\n    phiLength,\n    thetaStart,\n    thetaLength\n  ) {\n    Geometry.call(this);\n\n    this.type = \"SphereGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      phiStart: phiStart,\n      phiLength: phiLength,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength,\n    };\n\n    this.fromBufferGeometry(\n      new SphereBufferGeometry(\n        radius,\n        widthSegments,\n        heightSegments,\n        phiStart,\n        phiLength,\n        thetaStart,\n        thetaLength\n      )\n    );\n    this.mergeVertices();\n  }\n\n  SphereGeometry.prototype = Object.create(Geometry.prototype);\n  SphereGeometry.prototype.constructor = SphereGeometry;\n\n  // SphereBufferGeometry\n\n  function SphereBufferGeometry(\n    radius,\n    widthSegments,\n    heightSegments,\n    phiStart,\n    phiLength,\n    thetaStart,\n    thetaLength\n  ) {\n    BufferGeometry.call(this);\n\n    this.type = \"SphereBufferGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      phiStart: phiStart,\n      phiLength: phiLength,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength,\n    };\n\n    radius = radius || 1;\n\n    widthSegments = Math.max(3, Math.floor(widthSegments) || 8);\n    heightSegments = Math.max(2, Math.floor(heightSegments) || 6);\n\n    phiStart = phiStart !== undefined ? phiStart : 0;\n    phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n\n    var thetaEnd = thetaStart + thetaLength;\n\n    var ix, iy;\n\n    var index = 0;\n    var grid = [];\n\n    var vertex = new Vector3();\n    var normal = new Vector3();\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    // generate vertices, normals and uvs\n\n    for (iy = 0; iy <= heightSegments; iy++) {\n      var verticesRow = [];\n\n      var v = iy / heightSegments;\n\n      for (ix = 0; ix <= widthSegments; ix++) {\n        var u = ix / widthSegments;\n\n        // vertex\n\n        vertex.x =\n          -radius *\n          Math.cos(phiStart + u * phiLength) *\n          Math.sin(thetaStart + v * thetaLength);\n        vertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n        vertex.z =\n          radius *\n          Math.sin(phiStart + u * phiLength) *\n          Math.sin(thetaStart + v * thetaLength);\n\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normal.set(vertex.x, vertex.y, vertex.z).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n\n        // uv\n\n        uvs.push(u, 1 - v);\n\n        verticesRow.push(index++);\n      }\n\n      grid.push(verticesRow);\n    }\n\n    // indices\n\n    for (iy = 0; iy < heightSegments; iy++) {\n      for (ix = 0; ix < widthSegments; ix++) {\n        var a = grid[iy][ix + 1];\n        var b = grid[iy][ix];\n        var c = grid[iy + 1][ix];\n        var d = grid[iy + 1][ix + 1];\n\n        if (iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n        if (iy !== heightSegments - 1 || thetaEnd < Math.PI)\n          indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n\n  SphereBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\n\n  /**\n   * @author Kaleb Murphy\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // RingGeometry\n\n  function RingGeometry(\n    innerRadius,\n    outerRadius,\n    thetaSegments,\n    phiSegments,\n    thetaStart,\n    thetaLength\n  ) {\n    Geometry.call(this);\n\n    this.type = \"RingGeometry\";\n\n    this.parameters = {\n      innerRadius: innerRadius,\n      outerRadius: outerRadius,\n      thetaSegments: thetaSegments,\n      phiSegments: phiSegments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength,\n    };\n\n    this.fromBufferGeometry(\n      new RingBufferGeometry(\n        innerRadius,\n        outerRadius,\n        thetaSegments,\n        phiSegments,\n        thetaStart,\n        thetaLength\n      )\n    );\n    this.mergeVertices();\n  }\n\n  RingGeometry.prototype = Object.create(Geometry.prototype);\n  RingGeometry.prototype.constructor = RingGeometry;\n\n  // RingBufferGeometry\n\n  function RingBufferGeometry(\n    innerRadius,\n    outerRadius,\n    thetaSegments,\n    phiSegments,\n    thetaStart,\n    thetaLength\n  ) {\n    BufferGeometry.call(this);\n\n    this.type = \"RingBufferGeometry\";\n\n    this.parameters = {\n      innerRadius: innerRadius,\n      outerRadius: outerRadius,\n      thetaSegments: thetaSegments,\n      phiSegments: phiSegments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength,\n    };\n\n    innerRadius = innerRadius || 0.5;\n    outerRadius = outerRadius || 1;\n\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    thetaSegments =\n      thetaSegments !== undefined ? Math.max(3, thetaSegments) : 8;\n    phiSegments = phiSegments !== undefined ? Math.max(1, phiSegments) : 1;\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    // some helper variables\n\n    var segment;\n    var radius = innerRadius;\n    var radiusStep = (outerRadius - innerRadius) / phiSegments;\n    var vertex = new Vector3();\n    var uv = new Vector2();\n    var j, i;\n\n    // generate vertices, normals and uvs\n\n    for (j = 0; j <= phiSegments; j++) {\n      for (i = 0; i <= thetaSegments; i++) {\n        // values are generate from the inside of the ring to the outside\n\n        segment = thetaStart + (i / thetaSegments) * thetaLength;\n\n        // vertex\n\n        vertex.x = radius * Math.cos(segment);\n        vertex.y = radius * Math.sin(segment);\n\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normals.push(0, 0, 1);\n\n        // uv\n\n        uv.x = (vertex.x / outerRadius + 1) / 2;\n        uv.y = (vertex.y / outerRadius + 1) / 2;\n\n        uvs.push(uv.x, uv.y);\n      }\n\n      // increase the radius for next row of vertices\n\n      radius += radiusStep;\n    }\n\n    // indices\n\n    for (j = 0; j < phiSegments; j++) {\n      var thetaSegmentLevel = j * (thetaSegments + 1);\n\n      for (i = 0; i < thetaSegments; i++) {\n        segment = i + thetaSegmentLevel;\n\n        var a = segment;\n        var b = segment + thetaSegments + 1;\n        var c = segment + thetaSegments + 2;\n        var d = segment + 1;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n\n  RingBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  RingBufferGeometry.prototype.constructor = RingBufferGeometry;\n\n  /**\n   * @author astrodud / http://astrodud.isgreat.org/\n   * @author zz85 / https://github.com/zz85\n   * @author bhouston / http://clara.io\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // LatheGeometry\n\n  function LatheGeometry(points, segments, phiStart, phiLength) {\n    Geometry.call(this);\n\n    this.type = \"LatheGeometry\";\n\n    this.parameters = {\n      points: points,\n      segments: segments,\n      phiStart: phiStart,\n      phiLength: phiLength,\n    };\n\n    this.fromBufferGeometry(\n      new LatheBufferGeometry(points, segments, phiStart, phiLength)\n    );\n    this.mergeVertices();\n  }\n\n  LatheGeometry.prototype = Object.create(Geometry.prototype);\n  LatheGeometry.prototype.constructor = LatheGeometry;\n\n  // LatheBufferGeometry\n\n  function LatheBufferGeometry(points, segments, phiStart, phiLength) {\n    BufferGeometry.call(this);\n\n    this.type = \"LatheBufferGeometry\";\n\n    this.parameters = {\n      points: points,\n      segments: segments,\n      phiStart: phiStart,\n      phiLength: phiLength,\n    };\n\n    segments = Math.floor(segments) || 12;\n    phiStart = phiStart || 0;\n    phiLength = phiLength || Math.PI * 2;\n\n    // clamp phiLength so it's in range of [ 0, 2PI ]\n\n    phiLength = _Math.clamp(phiLength, 0, Math.PI * 2);\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var uvs = [];\n\n    // helper variables\n\n    var base;\n    var inverseSegments = 1.0 / segments;\n    var vertex = new Vector3();\n    var uv = new Vector2();\n    var i, j;\n\n    // generate vertices and uvs\n\n    for (i = 0; i <= segments; i++) {\n      var phi = phiStart + i * inverseSegments * phiLength;\n\n      var sin = Math.sin(phi);\n      var cos = Math.cos(phi);\n\n      for (j = 0; j <= points.length - 1; j++) {\n        // vertex\n\n        vertex.x = points[j].x * sin;\n        vertex.y = points[j].y;\n        vertex.z = points[j].x * cos;\n\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // uv\n\n        uv.x = i / segments;\n        uv.y = j / (points.length - 1);\n\n        uvs.push(uv.x, uv.y);\n      }\n    }\n\n    // indices\n\n    for (i = 0; i < segments; i++) {\n      for (j = 0; j < points.length - 1; j++) {\n        base = j + i * points.length;\n\n        var a = base;\n        var b = base + points.length;\n        var c = base + points.length + 1;\n        var d = base + 1;\n\n        // faces\n\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n\n    // generate normals\n\n    this.computeVertexNormals();\n\n    // if the geometry is closed, we need to average the normals along the seam.\n    // because the corresponding vertices are identical (but still have different UVs).\n\n    if (phiLength === Math.PI * 2) {\n      var normals = this.attributes.normal.array;\n      var n1 = new Vector3();\n      var n2 = new Vector3();\n      var n = new Vector3();\n\n      // this is the buffer offset for the last line of vertices\n\n      base = segments * points.length * 3;\n\n      for (i = 0, j = 0; i < points.length; i++, j += 3) {\n        // select the normal of the vertex in the first line\n\n        n1.x = normals[j + 0];\n        n1.y = normals[j + 1];\n        n1.z = normals[j + 2];\n\n        // select the normal of the vertex in the last line\n\n        n2.x = normals[base + j + 0];\n        n2.y = normals[base + j + 1];\n        n2.z = normals[base + j + 2];\n\n        // average normals\n\n        n.addVectors(n1, n2).normalize();\n\n        // assign the new values to both normals\n\n        normals[j + 0] = normals[base + j + 0] = n.x;\n        normals[j + 1] = normals[base + j + 1] = n.y;\n        normals[j + 2] = normals[base + j + 2] = n.z;\n      }\n    }\n  }\n\n  LatheBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\n\n  /**\n   * @author jonobr1 / http://jonobr1.com\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // ShapeGeometry\n\n  function ShapeGeometry(shapes, curveSegments) {\n    Geometry.call(this);\n\n    this.type = \"ShapeGeometry\";\n\n    if (typeof curveSegments === \"object\") {\n      console.warn(\"THREE.ShapeGeometry: Options parameter has been removed.\");\n\n      curveSegments = curveSegments.curveSegments;\n    }\n\n    this.parameters = {\n      shapes: shapes,\n      curveSegments: curveSegments,\n    };\n\n    this.fromBufferGeometry(new ShapeBufferGeometry(shapes, curveSegments));\n    this.mergeVertices();\n  }\n\n  ShapeGeometry.prototype = Object.create(Geometry.prototype);\n  ShapeGeometry.prototype.constructor = ShapeGeometry;\n\n  ShapeGeometry.prototype.toJSON = function () {\n    var data = Geometry.prototype.toJSON.call(this);\n\n    var shapes = this.parameters.shapes;\n\n    return toJSON$1(shapes, data);\n  };\n\n  // ShapeBufferGeometry\n\n  function ShapeBufferGeometry(shapes, curveSegments) {\n    BufferGeometry.call(this);\n\n    this.type = \"ShapeBufferGeometry\";\n\n    this.parameters = {\n      shapes: shapes,\n      curveSegments: curveSegments,\n    };\n\n    curveSegments = curveSegments || 12;\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    // helper variables\n\n    var groupStart = 0;\n    var groupCount = 0;\n\n    // allow single and array values for \"shapes\" parameter\n\n    if (Array.isArray(shapes) === false) {\n      addShape(shapes);\n    } else {\n      for (var i = 0; i < shapes.length; i++) {\n        addShape(shapes[i]);\n\n        this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n        groupStart += groupCount;\n        groupCount = 0;\n      }\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n\n    // helper functions\n\n    function addShape(shape) {\n      var i, l, shapeHole;\n\n      var indexOffset = vertices.length / 3;\n      var points = shape.extractPoints(curveSegments);\n\n      var shapeVertices = points.shape;\n      var shapeHoles = points.holes;\n\n      // check direction of vertices\n\n      if (ShapeUtils.isClockWise(shapeVertices) === false) {\n        shapeVertices = shapeVertices.reverse();\n\n        // also check if holes are in the opposite direction\n\n        for (i = 0, l = shapeHoles.length; i < l; i++) {\n          shapeHole = shapeHoles[i];\n\n          if (ShapeUtils.isClockWise(shapeHole) === true) {\n            shapeHoles[i] = shapeHole.reverse();\n          }\n        }\n      }\n\n      var faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);\n\n      // join vertices of inner and outer paths to a single array\n\n      for (i = 0, l = shapeHoles.length; i < l; i++) {\n        shapeHole = shapeHoles[i];\n        shapeVertices = shapeVertices.concat(shapeHole);\n      }\n\n      // vertices, normals, uvs\n\n      for (i = 0, l = shapeVertices.length; i < l; i++) {\n        var vertex = shapeVertices[i];\n\n        vertices.push(vertex.x, vertex.y, 0);\n        normals.push(0, 0, 1);\n        uvs.push(vertex.x, vertex.y); // world uvs\n      }\n\n      // incides\n\n      for (i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i];\n\n        var a = face[0] + indexOffset;\n        var b = face[1] + indexOffset;\n        var c = face[2] + indexOffset;\n\n        indices.push(a, b, c);\n        groupCount += 3;\n      }\n    }\n  }\n\n  ShapeBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\n\n  ShapeBufferGeometry.prototype.toJSON = function () {\n    var data = BufferGeometry.prototype.toJSON.call(this);\n\n    var shapes = this.parameters.shapes;\n\n    return toJSON$1(shapes, data);\n  };\n\n  //\n\n  function toJSON$1(shapes, data) {\n    data.shapes = [];\n\n    if (Array.isArray(shapes)) {\n      for (var i = 0, l = shapes.length; i < l; i++) {\n        var shape = shapes[i];\n\n        data.shapes.push(shape.uuid);\n      }\n    } else {\n      data.shapes.push(shapes.uuid);\n    }\n\n    return data;\n  }\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  function EdgesGeometry(geometry, thresholdAngle) {\n    BufferGeometry.call(this);\n\n    this.type = \"EdgesGeometry\";\n\n    this.parameters = {\n      thresholdAngle: thresholdAngle,\n    };\n\n    thresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n    // buffer\n\n    var vertices = [];\n\n    // helper variables\n\n    var thresholdDot = Math.cos(_Math.DEG2RAD * thresholdAngle);\n    var edge = [0, 0],\n      edges = {},\n      edge1,\n      edge2;\n    var key,\n      keys = [\"a\", \"b\", \"c\"];\n\n    // prepare source geometry\n\n    var geometry2;\n\n    if (geometry.isBufferGeometry) {\n      geometry2 = new Geometry();\n      geometry2.fromBufferGeometry(geometry);\n    } else {\n      geometry2 = geometry.clone();\n    }\n\n    geometry2.mergeVertices();\n    geometry2.computeFaceNormals();\n\n    var sourceVertices = geometry2.vertices;\n    var faces = geometry2.faces;\n\n    // now create a data structure where each entry represents an edge with its adjoining faces\n\n    for (var i = 0, l = faces.length; i < l; i++) {\n      var face = faces[i];\n\n      for (var j = 0; j < 3; j++) {\n        edge1 = face[keys[j]];\n        edge2 = face[keys[(j + 1) % 3]];\n        edge[0] = Math.min(edge1, edge2);\n        edge[1] = Math.max(edge1, edge2);\n\n        key = edge[0] + \",\" + edge[1];\n\n        if (edges[key] === undefined) {\n          edges[key] = {\n            index1: edge[0],\n            index2: edge[1],\n            face1: i,\n            face2: undefined,\n          };\n        } else {\n          edges[key].face2 = i;\n        }\n      }\n    }\n\n    // generate vertices\n\n    for (key in edges) {\n      var e = edges[key];\n\n      // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n\n      if (\n        e.face2 === undefined ||\n        faces[e.face1].normal.dot(faces[e.face2].normal) <= thresholdDot\n      ) {\n        var vertex = sourceVertices[e.index1];\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        vertex = sourceVertices[e.index2];\n        vertices.push(vertex.x, vertex.y, vertex.z);\n      }\n    }\n\n    // build geometry\n\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n  }\n\n  EdgesGeometry.prototype = Object.create(BufferGeometry.prototype);\n  EdgesGeometry.prototype.constructor = EdgesGeometry;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  // CylinderGeometry\n\n  function CylinderGeometry(\n    radiusTop,\n    radiusBottom,\n    height,\n    radialSegments,\n    heightSegments,\n    openEnded,\n    thetaStart,\n    thetaLength\n  ) {\n    Geometry.call(this);\n\n    this.type = \"CylinderGeometry\";\n\n    this.parameters = {\n      radiusTop: radiusTop,\n      radiusBottom: radiusBottom,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength,\n    };\n\n    this.fromBufferGeometry(\n      new CylinderBufferGeometry(\n        radiusTop,\n        radiusBottom,\n        height,\n        radialSegments,\n        heightSegments,\n        openEnded,\n        thetaStart,\n        thetaLength\n      )\n    );\n    this.mergeVertices();\n  }\n\n  CylinderGeometry.prototype = Object.create(Geometry.prototype);\n  CylinderGeometry.prototype.constructor = CylinderGeometry;\n\n  // CylinderBufferGeometry\n\n  function CylinderBufferGeometry(\n    radiusTop,\n    radiusBottom,\n    height,\n    radialSegments,\n    heightSegments,\n    openEnded,\n    thetaStart,\n    thetaLength\n  ) {\n    BufferGeometry.call(this);\n\n    this.type = \"CylinderBufferGeometry\";\n\n    this.parameters = {\n      radiusTop: radiusTop,\n      radiusBottom: radiusBottom,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength,\n    };\n\n    var scope = this;\n\n    radiusTop = radiusTop !== undefined ? radiusTop : 1;\n    radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\n    height = height || 1;\n\n    radialSegments = Math.floor(radialSegments) || 8;\n    heightSegments = Math.floor(heightSegments) || 1;\n\n    openEnded = openEnded !== undefined ? openEnded : false;\n    thetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    // helper variables\n\n    var index = 0;\n    var indexArray = [];\n    var halfHeight = height / 2;\n    var groupStart = 0;\n\n    // generate geometry\n\n    generateTorso();\n\n    if (openEnded === false) {\n      if (radiusTop > 0) generateCap(true);\n      if (radiusBottom > 0) generateCap(false);\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n\n    function generateTorso() {\n      var x, y;\n      var normal = new Vector3();\n      var vertex = new Vector3();\n\n      var groupCount = 0;\n\n      // this will be used to calculate the normal\n      var slope = (radiusBottom - radiusTop) / height;\n\n      // generate vertices, normals and uvs\n\n      for (y = 0; y <= heightSegments; y++) {\n        var indexRow = [];\n\n        var v = y / heightSegments;\n\n        // calculate the radius of the current row\n\n        var radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n        for (x = 0; x <= radialSegments; x++) {\n          var u = x / radialSegments;\n\n          var theta = u * thetaLength + thetaStart;\n\n          var sinTheta = Math.sin(theta);\n          var cosTheta = Math.cos(theta);\n\n          // vertex\n\n          vertex.x = radius * sinTheta;\n          vertex.y = -v * height + halfHeight;\n          vertex.z = radius * cosTheta;\n          vertices.push(vertex.x, vertex.y, vertex.z);\n\n          // normal\n\n          normal.set(sinTheta, slope, cosTheta).normalize();\n          normals.push(normal.x, normal.y, normal.z);\n\n          // uv\n\n          uvs.push(u, 1 - v);\n\n          // save index of vertex in respective row\n\n          indexRow.push(index++);\n        }\n\n        // now save vertices of the row in our index array\n\n        indexArray.push(indexRow);\n      }\n\n      // generate indices\n\n      for (x = 0; x < radialSegments; x++) {\n        for (y = 0; y < heightSegments; y++) {\n          // we use the index array to access the correct indices\n\n          var a = indexArray[y][x];\n          var b = indexArray[y + 1][x];\n          var c = indexArray[y + 1][x + 1];\n          var d = indexArray[y][x + 1];\n\n          // faces\n\n          indices.push(a, b, d);\n          indices.push(b, c, d);\n\n          // update group counter\n\n          groupCount += 6;\n        }\n      }\n\n      // add a group to the geometry. this will ensure multi material support\n\n      scope.addGroup(groupStart, groupCount, 0);\n\n      // calculate new start value for groups\n\n      groupStart += groupCount;\n    }\n\n    function generateCap(top) {\n      var x, centerIndexStart, centerIndexEnd;\n\n      var uv = new Vector2();\n      var vertex = new Vector3();\n\n      var groupCount = 0;\n\n      var radius = top === true ? radiusTop : radiusBottom;\n      var sign = top === true ? 1 : -1;\n\n      // save the index of the first center vertex\n      centerIndexStart = index;\n\n      // first we generate the center vertex data of the cap.\n      // because the geometry needs one set of uvs per face,\n      // we must generate a center vertex per face/segment\n\n      for (x = 1; x <= radialSegments; x++) {\n        // vertex\n\n        vertices.push(0, halfHeight * sign, 0);\n\n        // normal\n\n        normals.push(0, sign, 0);\n\n        // uv\n\n        uvs.push(0.5, 0.5);\n\n        // increase index\n\n        index++;\n      }\n\n      // save the index of the last center vertex\n\n      centerIndexEnd = index;\n\n      // now we generate the surrounding vertices, normals and uvs\n\n      for (x = 0; x <= radialSegments; x++) {\n        var u = x / radialSegments;\n        var theta = u * thetaLength + thetaStart;\n\n        var cosTheta = Math.cos(theta);\n        var sinTheta = Math.sin(theta);\n\n        // vertex\n\n        vertex.x = radius * sinTheta;\n        vertex.y = halfHeight * sign;\n        vertex.z = radius * cosTheta;\n        vertices.push(vertex.x, vertex.y, vertex.z);\n\n        // normal\n\n        normals.push(0, sign, 0);\n\n        // uv\n\n        uv.x = cosTheta * 0.5 + 0.5;\n        uv.y = sinTheta * 0.5 * sign + 0.5;\n        uvs.push(uv.x, uv.y);\n\n        // increase index\n\n        index++;\n      }\n\n      // generate indices\n\n      for (x = 0; x < radialSegments; x++) {\n        var c = centerIndexStart + x;\n        var i = centerIndexEnd + x;\n\n        if (top === true) {\n          // face top\n\n          indices.push(i, i + 1, c);\n        } else {\n          // face bottom\n\n          indices.push(i + 1, i, c);\n        }\n\n        groupCount += 3;\n      }\n\n      // add a group to the geometry. this will ensure multi material support\n\n      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);\n\n      // calculate new start value for groups\n\n      groupStart += groupCount;\n    }\n  }\n\n  CylinderBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\n\n  /**\n   * @author abelnation / http://github.com/abelnation\n   */\n\n  // ConeGeometry\n\n  function ConeGeometry(\n    radius,\n    height,\n    radialSegments,\n    heightSegments,\n    openEnded,\n    thetaStart,\n    thetaLength\n  ) {\n    CylinderGeometry.call(\n      this,\n      0,\n      radius,\n      height,\n      radialSegments,\n      heightSegments,\n      openEnded,\n      thetaStart,\n      thetaLength\n    );\n\n    this.type = \"ConeGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength,\n    };\n  }\n\n  ConeGeometry.prototype = Object.create(CylinderGeometry.prototype);\n  ConeGeometry.prototype.constructor = ConeGeometry;\n\n  // ConeBufferGeometry\n\n  function ConeBufferGeometry(\n    radius,\n    height,\n    radialSegments,\n    heightSegments,\n    openEnded,\n    thetaStart,\n    thetaLength\n  ) {\n    CylinderBufferGeometry.call(\n      this,\n      0,\n      radius,\n      height,\n      radialSegments,\n      heightSegments,\n      openEnded,\n      thetaStart,\n      thetaLength\n    );\n\n    this.type = \"ConeBufferGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength,\n    };\n  }\n\n  ConeBufferGeometry.prototype = Object.create(\n    CylinderBufferGeometry.prototype\n  );\n  ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   * @author Mugen87 / https://github.com/Mugen87\n   * @author hughes\n   */\n\n  // CircleGeometry\n\n  function CircleGeometry(radius, segments, thetaStart, thetaLength) {\n    Geometry.call(this);\n\n    this.type = \"CircleGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      segments: segments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength,\n    };\n\n    this.fromBufferGeometry(\n      new CircleBufferGeometry(radius, segments, thetaStart, thetaLength)\n    );\n    this.mergeVertices();\n  }\n\n  CircleGeometry.prototype = Object.create(Geometry.prototype);\n  CircleGeometry.prototype.constructor = CircleGeometry;\n\n  // CircleBufferGeometry\n\n  function CircleBufferGeometry(radius, segments, thetaStart, thetaLength) {\n    BufferGeometry.call(this);\n\n    this.type = \"CircleBufferGeometry\";\n\n    this.parameters = {\n      radius: radius,\n      segments: segments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength,\n    };\n\n    radius = radius || 1;\n    segments = segments !== undefined ? Math.max(3, segments) : 8;\n\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n\n    // buffers\n\n    var indices = [];\n    var vertices = [];\n    var normals = [];\n    var uvs = [];\n\n    // helper variables\n\n    var i, s;\n    var vertex = new Vector3();\n    var uv = new Vector2();\n\n    // center point\n\n    vertices.push(0, 0, 0);\n    normals.push(0, 0, 1);\n    uvs.push(0.5, 0.5);\n\n    for (s = 0, i = 3; s <= segments; s++, i += 3) {\n      var segment = thetaStart + (s / segments) * thetaLength;\n\n      // vertex\n\n      vertex.x = radius * Math.cos(segment);\n      vertex.y = radius * Math.sin(segment);\n\n      vertices.push(vertex.x, vertex.y, vertex.z);\n\n      // normal\n\n      normals.push(0, 0, 1);\n\n      // uvs\n\n      uv.x = (vertices[i] / radius + 1) / 2;\n      uv.y = (vertices[i + 1] / radius + 1) / 2;\n\n      uvs.push(uv.x, uv.y);\n    }\n\n    // indices\n\n    for (i = 1; i <= segments; i++) {\n      indices.push(i, i + 1, 0);\n    }\n\n    // build geometry\n\n    this.setIndex(indices);\n    this.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.addAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    this.addAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n  }\n\n  CircleBufferGeometry.prototype = Object.create(BufferGeometry.prototype);\n  CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\n\n  var Geometries = /*#__PURE__*/ Object.freeze({\n    WireframeGeometry: WireframeGeometry,\n    ParametricGeometry: ParametricGeometry,\n    ParametricBufferGeometry: ParametricBufferGeometry,\n    TetrahedronGeometry: TetrahedronGeometry,\n    TetrahedronBufferGeometry: TetrahedronBufferGeometry,\n    OctahedronGeometry: OctahedronGeometry,\n    OctahedronBufferGeometry: OctahedronBufferGeometry,\n    IcosahedronGeometry: IcosahedronGeometry,\n    IcosahedronBufferGeometry: IcosahedronBufferGeometry,\n    DodecahedronGeometry: DodecahedronGeometry,\n    DodecahedronBufferGeometry: DodecahedronBufferGeometry,\n    PolyhedronGeometry: PolyhedronGeometry,\n    PolyhedronBufferGeometry: PolyhedronBufferGeometry,\n    TubeGeometry: TubeGeometry,\n    TubeBufferGeometry: TubeBufferGeometry,\n    TorusKnotGeometry: TorusKnotGeometry,\n    TorusKnotBufferGeometry: TorusKnotBufferGeometry,\n    TorusGeometry: TorusGeometry,\n    TorusBufferGeometry: TorusBufferGeometry,\n    TextGeometry: TextGeometry,\n    TextBufferGeometry: TextBufferGeometry,\n    SphereGeometry: SphereGeometry,\n    SphereBufferGeometry: SphereBufferGeometry,\n    RingGeometry: RingGeometry,\n    RingBufferGeometry: RingBufferGeometry,\n    PlaneGeometry: PlaneGeometry,\n    PlaneBufferGeometry: PlaneBufferGeometry,\n    LatheGeometry: LatheGeometry,\n    LatheBufferGeometry: LatheBufferGeometry,\n    ShapeGeometry: ShapeGeometry,\n    ShapeBufferGeometry: ShapeBufferGeometry,\n    ExtrudeGeometry: ExtrudeGeometry,\n    ExtrudeBufferGeometry: ExtrudeBufferGeometry,\n    EdgesGeometry: EdgesGeometry,\n    ConeGeometry: ConeGeometry,\n    ConeBufferGeometry: ConeBufferGeometry,\n    CylinderGeometry: CylinderGeometry,\n    CylinderBufferGeometry: CylinderBufferGeometry,\n    CircleGeometry: CircleGeometry,\n    CircleBufferGeometry: CircleBufferGeometry,\n    BoxGeometry: BoxGeometry,\n    BoxBufferGeometry: BoxBufferGeometry,\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   *\n   * parameters = {\n   *  color: <THREE.Color>\n   * }\n   */\n\n  function ShadowMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"ShadowMaterial\";\n\n    this.color = new Color(0x000000);\n    this.transparent = true;\n\n    this.setValues(parameters);\n  }\n\n  ShadowMaterial.prototype = Object.create(Material.prototype);\n  ShadowMaterial.prototype.constructor = ShadowMaterial;\n\n  ShadowMaterial.prototype.isShadowMaterial = true;\n\n  ShadowMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.color.copy(source.color);\n\n    return this;\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function RawShaderMaterial(parameters) {\n    ShaderMaterial.call(this, parameters);\n\n    this.type = \"RawShaderMaterial\";\n  }\n\n  RawShaderMaterial.prototype = Object.create(ShaderMaterial.prototype);\n  RawShaderMaterial.prototype.constructor = RawShaderMaterial;\n\n  RawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  roughness: <float>,\n   *  metalness: <float>,\n   *  opacity: <float>,\n   *\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  lightMap: new THREE.Texture( <Image> ),\n   *  lightMapIntensity: <float>\n   *\n   *  aoMap: new THREE.Texture( <Image> ),\n   *  aoMapIntensity: <float>\n   *\n   *  emissive: <hex>,\n   *  emissiveIntensity: <float>\n   *  emissiveMap: new THREE.Texture( <Image> ),\n   *\n   *  bumpMap: new THREE.Texture( <Image> ),\n   *  bumpScale: <float>,\n   *\n   *  normalMap: new THREE.Texture( <Image> ),\n   *  normalMapType: THREE.TangentSpaceNormalMap,\n   *  normalScale: <Vector2>,\n   *\n   *  displacementMap: new THREE.Texture( <Image> ),\n   *  displacementScale: <float>,\n   *  displacementBias: <float>,\n   *\n   *  roughnessMap: new THREE.Texture( <Image> ),\n   *\n   *  metalnessMap: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n   *  envMapIntensity: <float>\n   *\n   *  refractionRatio: <float>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>,\n   *  morphNormals: <bool>\n   * }\n   */\n\n  function MeshStandardMaterial(parameters) {\n    Material.call(this);\n\n    this.defines = { STANDARD: \"\" };\n\n    this.type = \"MeshStandardMaterial\";\n\n    this.color = new Color(0xffffff); // diffuse\n    this.roughness = 0.5;\n    this.metalness = 0.5;\n\n    this.map = null;\n\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n\n    this.emissive = new Color(0x000000);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n\n    this.bumpMap = null;\n    this.bumpScale = 1;\n\n    this.normalMap = null;\n    this.normalMapType = TangentSpaceNormalMap;\n    this.normalScale = new Vector2(1, 1);\n\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n\n    this.roughnessMap = null;\n\n    this.metalnessMap = null;\n\n    this.alphaMap = null;\n\n    this.envMap = null;\n    this.envMapIntensity = 1.0;\n\n    this.refractionRatio = 0.98;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = \"round\";\n    this.wireframeLinejoin = \"round\";\n\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n\n    this.setValues(parameters);\n  }\n\n  MeshStandardMaterial.prototype = Object.create(Material.prototype);\n  MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\n  MeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n  MeshStandardMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.defines = { STANDARD: \"\" };\n\n    this.color.copy(source.color);\n    this.roughness = source.roughness;\n    this.metalness = source.metalness;\n\n    this.map = source.map;\n\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n\n    this.roughnessMap = source.roughnessMap;\n\n    this.metalnessMap = source.metalnessMap;\n\n    this.alphaMap = source.alphaMap;\n\n    this.envMap = source.envMap;\n    this.envMapIntensity = source.envMapIntensity;\n\n    this.refractionRatio = source.refractionRatio;\n\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n\n    return this;\n  };\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * parameters = {\n   *  reflectivity: <float>\n   * }\n   */\n\n  function MeshPhysicalMaterial(parameters) {\n    MeshStandardMaterial.call(this);\n\n    this.defines = { PHYSICAL: \"\" };\n\n    this.type = \"MeshPhysicalMaterial\";\n\n    this.reflectivity = 0.5; // maps to F0 = 0.04\n\n    this.clearCoat = 0.0;\n    this.clearCoatRoughness = 0.0;\n\n    this.setValues(parameters);\n  }\n\n  MeshPhysicalMaterial.prototype = Object.create(\n    MeshStandardMaterial.prototype\n  );\n  MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\n  MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n  MeshPhysicalMaterial.prototype.copy = function (source) {\n    MeshStandardMaterial.prototype.copy.call(this, source);\n\n    this.defines = { PHYSICAL: \"\" };\n\n    this.reflectivity = source.reflectivity;\n\n    this.clearCoat = source.clearCoat;\n    this.clearCoatRoughness = source.clearCoatRoughness;\n\n    return this;\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  specular: <hex>,\n   *  shininess: <float>,\n   *  opacity: <float>,\n   *\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  lightMap: new THREE.Texture( <Image> ),\n   *  lightMapIntensity: <float>\n   *\n   *  aoMap: new THREE.Texture( <Image> ),\n   *  aoMapIntensity: <float>\n   *\n   *  emissive: <hex>,\n   *  emissiveIntensity: <float>\n   *  emissiveMap: new THREE.Texture( <Image> ),\n   *\n   *  bumpMap: new THREE.Texture( <Image> ),\n   *  bumpScale: <float>,\n   *\n   *  normalMap: new THREE.Texture( <Image> ),\n   *  normalMapType: THREE.TangentSpaceNormalMap,\n   *  normalScale: <Vector2>,\n   *\n   *  displacementMap: new THREE.Texture( <Image> ),\n   *  displacementScale: <float>,\n   *  displacementBias: <float>,\n   *\n   *  specularMap: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n   *  combine: THREE.Multiply,\n   *  reflectivity: <float>,\n   *  refractionRatio: <float>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>,\n   *  morphNormals: <bool>\n   * }\n   */\n\n  function MeshPhongMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"MeshPhongMaterial\";\n\n    this.color = new Color(0xffffff); // diffuse\n    this.specular = new Color(0x111111);\n    this.shininess = 30;\n\n    this.map = null;\n\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n\n    this.emissive = new Color(0x000000);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n\n    this.bumpMap = null;\n    this.bumpScale = 1;\n\n    this.normalMap = null;\n    this.normalMapType = TangentSpaceNormalMap;\n    this.normalScale = new Vector2(1, 1);\n\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n\n    this.specularMap = null;\n\n    this.alphaMap = null;\n\n    this.envMap = null;\n    this.combine = MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = \"round\";\n    this.wireframeLinejoin = \"round\";\n\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n\n    this.setValues(parameters);\n  }\n\n  MeshPhongMaterial.prototype = Object.create(Material.prototype);\n  MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\n\n  MeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n  MeshPhongMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.color.copy(source.color);\n    this.specular.copy(source.specular);\n    this.shininess = source.shininess;\n\n    this.map = source.map;\n\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n\n    this.specularMap = source.specularMap;\n\n    this.alphaMap = source.alphaMap;\n\n    this.envMap = source.envMap;\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n\n    return this;\n  };\n\n  /**\n   * @author takahirox / http://github.com/takahirox\n   *\n   * parameters = {\n   *  gradientMap: new THREE.Texture( <Image> )\n   * }\n   */\n\n  function MeshToonMaterial(parameters) {\n    MeshPhongMaterial.call(this);\n\n    this.defines = { TOON: \"\" };\n\n    this.type = \"MeshToonMaterial\";\n\n    this.gradientMap = null;\n\n    this.setValues(parameters);\n  }\n\n  MeshToonMaterial.prototype = Object.create(MeshPhongMaterial.prototype);\n  MeshToonMaterial.prototype.constructor = MeshToonMaterial;\n\n  MeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n  MeshToonMaterial.prototype.copy = function (source) {\n    MeshPhongMaterial.prototype.copy.call(this, source);\n\n    this.gradientMap = source.gradientMap;\n\n    return this;\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * parameters = {\n   *  opacity: <float>,\n   *\n   *  bumpMap: new THREE.Texture( <Image> ),\n   *  bumpScale: <float>,\n   *\n   *  normalMap: new THREE.Texture( <Image> ),\n   *  normalMapType: THREE.TangentSpaceNormalMap,\n   *  normalScale: <Vector2>,\n   *\n   *  displacementMap: new THREE.Texture( <Image> ),\n   *  displacementScale: <float>,\n   *  displacementBias: <float>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>,\n   *  morphNormals: <bool>\n   * }\n   */\n\n  function MeshNormalMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"MeshNormalMaterial\";\n\n    this.bumpMap = null;\n    this.bumpScale = 1;\n\n    this.normalMap = null;\n    this.normalMapType = TangentSpaceNormalMap;\n    this.normalScale = new Vector2(1, 1);\n\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n\n    this.fog = false;\n    this.lights = false;\n\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n\n    this.setValues(parameters);\n  }\n\n  MeshNormalMaterial.prototype = Object.create(Material.prototype);\n  MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\n\n  MeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n  MeshNormalMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n\n    this.normalMap = source.normalMap;\n    this.normalMapType = source.normalMapType;\n    this.normalScale.copy(source.normalScale);\n\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n\n    return this;\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  lightMap: new THREE.Texture( <Image> ),\n   *  lightMapIntensity: <float>\n   *\n   *  aoMap: new THREE.Texture( <Image> ),\n   *  aoMapIntensity: <float>\n   *\n   *  emissive: <hex>,\n   *  emissiveIntensity: <float>\n   *  emissiveMap: new THREE.Texture( <Image> ),\n   *\n   *  specularMap: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n   *  combine: THREE.Multiply,\n   *  reflectivity: <float>,\n   *  refractionRatio: <float>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>,\n   *  morphNormals: <bool>\n   * }\n   */\n\n  function MeshLambertMaterial(parameters) {\n    Material.call(this);\n\n    this.type = \"MeshLambertMaterial\";\n\n    this.color = new Color(0xffffff); // diffuse\n\n    this.map = null;\n\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n\n    this.emissive = new Color(0x000000);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n\n    this.specularMap = null;\n\n    this.alphaMap = null;\n\n    this.envMap = null;\n    this.combine = MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = \"round\";\n    this.wireframeLinejoin = \"round\";\n\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n\n    this.setValues(parameters);\n  }\n\n  MeshLambertMaterial.prototype = Object.create(Material.prototype);\n  MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\n\n  MeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n  MeshLambertMaterial.prototype.copy = function (source) {\n    Material.prototype.copy.call(this, source);\n\n    this.color.copy(source.color);\n\n    this.map = source.map;\n\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n\n    this.specularMap = source.specularMap;\n\n    this.alphaMap = source.alphaMap;\n\n    this.envMap = source.envMap;\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n\n    return this;\n  };\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *\n   *  linewidth: <float>,\n   *\n   *  scale: <float>,\n   *  dashSize: <float>,\n   *  gapSize: <float>\n   * }\n   */\n\n  function LineDashedMaterial(parameters) {\n    LineBasicMaterial.call(this);\n\n    this.type = \"LineDashedMaterial\";\n\n    this.scale = 1;\n    this.dashSize = 3;\n    this.gapSize = 1;\n\n    this.setValues(parameters);\n  }\n\n  LineDashedMaterial.prototype = Object.create(LineBasicMaterial.prototype);\n  LineDashedMaterial.prototype.constructor = LineDashedMaterial;\n\n  LineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n  LineDashedMaterial.prototype.copy = function (source) {\n    LineBasicMaterial.prototype.copy.call(this, source);\n\n    this.scale = source.scale;\n    this.dashSize = source.dashSize;\n    this.gapSize = source.gapSize;\n\n    return this;\n  };\n\n  var Materials = /*#__PURE__*/ Object.freeze({\n    ShadowMaterial: ShadowMaterial,\n    SpriteMaterial: SpriteMaterial,\n    RawShaderMaterial: RawShaderMaterial,\n    ShaderMaterial: ShaderMaterial,\n    PointsMaterial: PointsMaterial,\n    MeshPhysicalMaterial: MeshPhysicalMaterial,\n    MeshStandardMaterial: MeshStandardMaterial,\n    MeshPhongMaterial: MeshPhongMaterial,\n    MeshToonMaterial: MeshToonMaterial,\n    MeshNormalMaterial: MeshNormalMaterial,\n    MeshLambertMaterial: MeshLambertMaterial,\n    MeshDepthMaterial: MeshDepthMaterial,\n    MeshDistanceMaterial: MeshDistanceMaterial,\n    MeshBasicMaterial: MeshBasicMaterial,\n    LineDashedMaterial: LineDashedMaterial,\n    LineBasicMaterial: LineBasicMaterial,\n    Material: Material,\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  var Cache = {\n    enabled: false,\n\n    files: {},\n\n    add: function (key, file) {\n      if (this.enabled === false) return;\n\n      // console.log( 'THREE.Cache', 'Adding key:', key );\n\n      this.files[key] = file;\n    },\n\n    get: function (key) {\n      if (this.enabled === false) return;\n\n      // console.log( 'THREE.Cache', 'Checking key:', key );\n\n      return this.files[key];\n    },\n\n    remove: function (key) {\n      delete this.files[key];\n    },\n\n    clear: function () {\n      this.files = {};\n    },\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function LoadingManager(onLoad, onProgress, onError) {\n    var scope = this;\n\n    var isLoading = false;\n    var itemsLoaded = 0;\n    var itemsTotal = 0;\n    var urlModifier = undefined;\n\n    this.onStart = undefined;\n    this.onLoad = onLoad;\n    this.onProgress = onProgress;\n    this.onError = onError;\n\n    this.itemStart = function (url) {\n      itemsTotal++;\n\n      if (isLoading === false) {\n        if (scope.onStart !== undefined) {\n          scope.onStart(url, itemsLoaded, itemsTotal);\n        }\n      }\n\n      isLoading = true;\n    };\n\n    this.itemEnd = function (url) {\n      itemsLoaded++;\n\n      if (scope.onProgress !== undefined) {\n        scope.onProgress(url, itemsLoaded, itemsTotal);\n      }\n\n      if (itemsLoaded === itemsTotal) {\n        isLoading = false;\n\n        if (scope.onLoad !== undefined) {\n          scope.onLoad();\n        }\n      }\n    };\n\n    this.itemError = function (url) {\n      if (scope.onError !== undefined) {\n        scope.onError(url);\n      }\n    };\n\n    this.resolveURL = function (url) {\n      if (urlModifier) {\n        return urlModifier(url);\n      }\n\n      return url;\n    };\n\n    this.setURLModifier = function (transform) {\n      urlModifier = transform;\n      return this;\n    };\n  }\n\n  var DefaultLoadingManager = new LoadingManager();\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  var loading = {};\n\n  function FileLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n  }\n\n  Object.assign(FileLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n      if (url === undefined) url = \"\";\n\n      if (this.path !== undefined) url = this.path + url;\n\n      url = this.manager.resolveURL(url);\n\n      var scope = this;\n\n      var cached = Cache.get(url);\n\n      if (cached !== undefined) {\n        scope.manager.itemStart(url);\n\n        setTimeout(function () {\n          if (onLoad) onLoad(cached);\n\n          scope.manager.itemEnd(url);\n        }, 0);\n\n        return cached;\n      }\n\n      // Check if request is duplicate\n\n      if (loading[url] !== undefined) {\n        loading[url].push({\n          onLoad: onLoad,\n          onProgress: onProgress,\n          onError: onError,\n        });\n\n        return;\n      }\n\n      // Check for data: URI\n      var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n      var dataUriRegexResult = url.match(dataUriRegex);\n\n      // Safari can not handle Data URIs through XMLHttpRequest so process manually\n      if (dataUriRegexResult) {\n        var mimeType = dataUriRegexResult[1];\n        var isBase64 = !!dataUriRegexResult[2];\n        var data = dataUriRegexResult[3];\n\n        data = window.decodeURIComponent(data);\n\n        if (isBase64) data = window.atob(data);\n\n        try {\n          var response;\n          var responseType = (this.responseType || \"\").toLowerCase();\n\n          switch (responseType) {\n            case \"arraybuffer\":\n            case \"blob\":\n              var view = new Uint8Array(data.length);\n\n              for (var i = 0; i < data.length; i++) {\n                view[i] = data.charCodeAt(i);\n              }\n\n              if (responseType === \"blob\") {\n                response = new Blob([view.buffer], { type: mimeType });\n              } else {\n                response = view.buffer;\n              }\n\n              break;\n\n            case \"document\":\n              var parser = new DOMParser();\n              response = parser.parseFromString(data, mimeType);\n\n              break;\n\n            case \"json\":\n              response = JSON.parse(data);\n\n              break;\n\n            default: // 'text' or other\n              response = data;\n\n              break;\n          }\n\n          // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n          window.setTimeout(function () {\n            if (onLoad) onLoad(response);\n\n            scope.manager.itemEnd(url);\n          }, 0);\n        } catch (error) {\n          // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n          window.setTimeout(function () {\n            if (onError) onError(error);\n\n            scope.manager.itemEnd(url);\n            scope.manager.itemError(url);\n          }, 0);\n        }\n      } else {\n        // Initialise array for duplicate requests\n\n        loading[url] = [];\n\n        loading[url].push({\n          onLoad: onLoad,\n          onProgress: onProgress,\n          onError: onError,\n        });\n\n        var request = new XMLHttpRequest();\n\n        request.open(\"GET\", url, true);\n\n        request.addEventListener(\n          \"load\",\n          function (event) {\n            var response = this.response;\n\n            Cache.add(url, response);\n\n            var callbacks = loading[url];\n\n            delete loading[url];\n\n            if (this.status === 200 || this.status === 0) {\n              // Some browsers return HTTP Status 0 when using non-http protocol\n              // e.g. 'file://' or 'data://'. Handle as success.\n\n              if (this.status === 0)\n                console.warn(\"THREE.FileLoader: HTTP Status 0 received.\");\n\n              for (var i = 0, il = callbacks.length; i < il; i++) {\n                var callback = callbacks[i];\n                if (callback.onLoad) callback.onLoad(response);\n              }\n\n              scope.manager.itemEnd(url);\n            } else {\n              for (var i = 0, il = callbacks.length; i < il; i++) {\n                var callback = callbacks[i];\n                if (callback.onError) callback.onError(event);\n              }\n\n              scope.manager.itemEnd(url);\n              scope.manager.itemError(url);\n            }\n          },\n          false\n        );\n\n        request.addEventListener(\n          \"progress\",\n          function (event) {\n            var callbacks = loading[url];\n\n            for (var i = 0, il = callbacks.length; i < il; i++) {\n              var callback = callbacks[i];\n              if (callback.onProgress) callback.onProgress(event);\n            }\n          },\n          false\n        );\n\n        request.addEventListener(\n          \"error\",\n          function (event) {\n            var callbacks = loading[url];\n\n            delete loading[url];\n\n            for (var i = 0, il = callbacks.length; i < il; i++) {\n              var callback = callbacks[i];\n              if (callback.onError) callback.onError(event);\n            }\n\n            scope.manager.itemEnd(url);\n            scope.manager.itemError(url);\n          },\n          false\n        );\n\n        if (this.responseType !== undefined)\n          request.responseType = this.responseType;\n        if (this.withCredentials !== undefined)\n          request.withCredentials = this.withCredentials;\n\n        if (request.overrideMimeType)\n          request.overrideMimeType(\n            this.mimeType !== undefined ? this.mimeType : \"text/plain\"\n          );\n\n        for (var header in this.requestHeader) {\n          request.setRequestHeader(header, this.requestHeader[header]);\n        }\n\n        request.send(null);\n      }\n\n      scope.manager.itemStart(url);\n\n      return request;\n    },\n\n    setPath: function (value) {\n      this.path = value;\n      return this;\n    },\n\n    setResponseType: function (value) {\n      this.responseType = value;\n      return this;\n    },\n\n    setWithCredentials: function (value) {\n      this.withCredentials = value;\n      return this;\n    },\n\n    setMimeType: function (value) {\n      this.mimeType = value;\n      return this;\n    },\n\n    setRequestHeader: function (value) {\n      this.requestHeader = value;\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   *\n   * Abstract Base class to block based textures loader (dds, pvr, ...)\n   */\n\n  function CompressedTextureLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\n    // override in sub classes\n    this._parser = null;\n  }\n\n  Object.assign(CompressedTextureLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n\n      var images = [];\n\n      var texture = new CompressedTexture();\n      texture.image = images;\n\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType(\"arraybuffer\");\n\n      function loadTexture(i) {\n        loader.load(\n          url[i],\n          function (buffer) {\n            var texDatas = scope._parser(buffer, true);\n\n            images[i] = {\n              width: texDatas.width,\n              height: texDatas.height,\n              format: texDatas.format,\n              mipmaps: texDatas.mipmaps,\n            };\n\n            loaded += 1;\n\n            if (loaded === 6) {\n              if (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\n              texture.format = texDatas.format;\n              texture.needsUpdate = true;\n\n              if (onLoad) onLoad(texture);\n            }\n          },\n          onProgress,\n          onError\n        );\n      }\n\n      if (Array.isArray(url)) {\n        var loaded = 0;\n\n        for (var i = 0, il = url.length; i < il; ++i) {\n          loadTexture(i);\n        }\n      } else {\n        // compressed cubemap texture stored in a single DDS file\n\n        loader.load(\n          url,\n          function (buffer) {\n            var texDatas = scope._parser(buffer, true);\n\n            if (texDatas.isCubemap) {\n              var faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n              for (var f = 0; f < faces; f++) {\n                images[f] = { mipmaps: [] };\n\n                for (var i = 0; i < texDatas.mipmapCount; i++) {\n                  images[f].mipmaps.push(\n                    texDatas.mipmaps[f * texDatas.mipmapCount + i]\n                  );\n                  images[f].format = texDatas.format;\n                  images[f].width = texDatas.width;\n                  images[f].height = texDatas.height;\n                }\n              }\n            } else {\n              texture.image.width = texDatas.width;\n              texture.image.height = texDatas.height;\n              texture.mipmaps = texDatas.mipmaps;\n            }\n\n            if (texDatas.mipmapCount === 1) {\n              texture.minFilter = LinearFilter;\n            }\n\n            texture.format = texDatas.format;\n            texture.needsUpdate = true;\n\n            if (onLoad) onLoad(texture);\n          },\n          onProgress,\n          onError\n        );\n      }\n\n      return texture;\n    },\n\n    setPath: function (value) {\n      this.path = value;\n      return this;\n    },\n  });\n\n  /**\n   * @author Nikos M. / https://github.com/foo123/\n   *\n   * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n   */\n\n  function DataTextureLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\n    // override in sub classes\n    this._parser = null;\n  }\n\n  Object.assign(DataTextureLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n\n      var texture = new DataTexture();\n\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType(\"arraybuffer\");\n\n      loader.load(\n        url,\n        function (buffer) {\n          var texData = scope._parser(buffer);\n\n          if (!texData) return;\n\n          if (undefined !== texData.image) {\n            texture.image = texData.image;\n          } else if (undefined !== texData.data) {\n            texture.image.width = texData.width;\n            texture.image.height = texData.height;\n            texture.image.data = texData.data;\n          }\n\n          texture.wrapS =\n            undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;\n          texture.wrapT =\n            undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;\n\n          texture.magFilter =\n            undefined !== texData.magFilter ? texData.magFilter : LinearFilter;\n          texture.minFilter =\n            undefined !== texData.minFilter\n              ? texData.minFilter\n              : LinearMipMapLinearFilter;\n\n          texture.anisotropy =\n            undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n          if (undefined !== texData.format) {\n            texture.format = texData.format;\n          }\n          if (undefined !== texData.type) {\n            texture.type = texData.type;\n          }\n\n          if (undefined !== texData.mipmaps) {\n            texture.mipmaps = texData.mipmaps;\n          }\n\n          if (1 === texData.mipmapCount) {\n            texture.minFilter = LinearFilter;\n          }\n\n          texture.needsUpdate = true;\n\n          if (onLoad) onLoad(texture, texData);\n        },\n        onProgress,\n        onError\n      );\n\n      return texture;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function ImageLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n  }\n\n  Object.assign(ImageLoader.prototype, {\n    crossOrigin: \"anonymous\",\n\n    load: function (url, onLoad, onProgress, onError) {\n      if (url === undefined) url = \"\";\n\n      if (this.path !== undefined) url = this.path + url;\n\n      url = this.manager.resolveURL(url);\n\n      var scope = this;\n\n      var cached = Cache.get(url);\n\n      if (cached !== undefined) {\n        scope.manager.itemStart(url);\n\n        setTimeout(function () {\n          if (onLoad) onLoad(cached);\n\n          scope.manager.itemEnd(url);\n        }, 0);\n\n        return cached;\n      }\n\n      var image = document.createElementNS(\n        \"http://www.w3.org/1999/xhtml\",\n        \"img\"\n      );\n\n      function onImageLoad() {\n        image.removeEventListener(\"load\", onImageLoad, false);\n        image.removeEventListener(\"error\", onImageError, false);\n\n        Cache.add(url, this);\n\n        if (onLoad) onLoad(this);\n\n        scope.manager.itemEnd(url);\n      }\n\n      function onImageError(event) {\n        image.removeEventListener(\"load\", onImageLoad, false);\n        image.removeEventListener(\"error\", onImageError, false);\n\n        if (onError) onError(event);\n\n        scope.manager.itemEnd(url);\n        scope.manager.itemError(url);\n      }\n\n      image.addEventListener(\"load\", onImageLoad, false);\n      image.addEventListener(\"error\", onImageError, false);\n\n      if (url.substr(0, 5) !== \"data:\") {\n        if (this.crossOrigin !== undefined)\n          image.crossOrigin = this.crossOrigin;\n      }\n\n      scope.manager.itemStart(url);\n\n      image.src = url;\n\n      return image;\n    },\n\n    setCrossOrigin: function (value) {\n      this.crossOrigin = value;\n      return this;\n    },\n\n    setPath: function (value) {\n      this.path = value;\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function CubeTextureLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n  }\n\n  Object.assign(CubeTextureLoader.prototype, {\n    crossOrigin: \"anonymous\",\n\n    load: function (urls, onLoad, onProgress, onError) {\n      var texture = new CubeTexture();\n\n      var loader = new ImageLoader(this.manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      loader.setPath(this.path);\n\n      var loaded = 0;\n\n      function loadTexture(i) {\n        loader.load(\n          urls[i],\n          function (image) {\n            texture.images[i] = image;\n\n            loaded++;\n\n            if (loaded === 6) {\n              texture.needsUpdate = true;\n\n              if (onLoad) onLoad(texture);\n            }\n          },\n          undefined,\n          onError\n        );\n      }\n\n      for (var i = 0; i < urls.length; ++i) {\n        loadTexture(i);\n      }\n\n      return texture;\n    },\n\n    setCrossOrigin: function (value) {\n      this.crossOrigin = value;\n      return this;\n    },\n\n    setPath: function (value) {\n      this.path = value;\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function TextureLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n  }\n\n  Object.assign(TextureLoader.prototype, {\n    crossOrigin: \"anonymous\",\n\n    load: function (url, onLoad, onProgress, onError) {\n      var texture = new Texture();\n\n      var loader = new ImageLoader(this.manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      loader.setPath(this.path);\n\n      loader.load(\n        url,\n        function (image) {\n          texture.image = image;\n\n          // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n          var isJPEG =\n            url.search(/\\.(jpg|jpeg)$/) > 0 ||\n            url.search(/^data\\:image\\/jpeg/) === 0;\n\n          texture.format = isJPEG ? RGBFormat : RGBAFormat;\n          texture.needsUpdate = true;\n\n          if (onLoad !== undefined) {\n            onLoad(texture);\n          }\n        },\n        onProgress,\n        onError\n      );\n\n      return texture;\n    },\n\n    setCrossOrigin: function (value) {\n      this.crossOrigin = value;\n      return this;\n    },\n\n    setPath: function (value) {\n      this.path = value;\n      return this;\n    },\n  });\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * Extensible curve object\n   *\n   * Some common of curve methods:\n   * .getPoint( t, optionalTarget ), .getTangent( t )\n   * .getPointAt( u, optionalTarget ), .getTangentAt( u )\n   * .getPoints(), .getSpacedPoints()\n   * .getLength()\n   * .updateArcLengths()\n   *\n   * This following curves inherit from THREE.Curve:\n   *\n   * -- 2D curves --\n   * THREE.ArcCurve\n   * THREE.CubicBezierCurve\n   * THREE.EllipseCurve\n   * THREE.LineCurve\n   * THREE.QuadraticBezierCurve\n   * THREE.SplineCurve\n   *\n   * -- 3D curves --\n   * THREE.CatmullRomCurve3\n   * THREE.CubicBezierCurve3\n   * THREE.LineCurve3\n   * THREE.QuadraticBezierCurve3\n   *\n   * A series of curves can be represented as a THREE.CurvePath.\n   *\n   **/\n\n  /**************************************************************\n   *\tAbstract Curve base class\n   **************************************************************/\n\n  function Curve() {\n    this.type = \"Curve\";\n\n    this.arcLengthDivisions = 200;\n  }\n\n  Object.assign(Curve.prototype, {\n    // Virtual base class method to overwrite and implement in subclasses\n    //\t- t [0 .. 1]\n\n    getPoint: function (/* t, optionalTarget */) {\n      console.warn(\"THREE.Curve: .getPoint() not implemented.\");\n      return null;\n    },\n\n    // Get point at relative position in curve according to arc length\n    // - u [0 .. 1]\n\n    getPointAt: function (u, optionalTarget) {\n      var t = this.getUtoTmapping(u);\n      return this.getPoint(t, optionalTarget);\n    },\n\n    // Get sequence of points using getPoint( t )\n\n    getPoints: function (divisions) {\n      if (divisions === undefined) divisions = 5;\n\n      var points = [];\n\n      for (var d = 0; d <= divisions; d++) {\n        points.push(this.getPoint(d / divisions));\n      }\n\n      return points;\n    },\n\n    // Get sequence of points using getPointAt( u )\n\n    getSpacedPoints: function (divisions) {\n      if (divisions === undefined) divisions = 5;\n\n      var points = [];\n\n      for (var d = 0; d <= divisions; d++) {\n        points.push(this.getPointAt(d / divisions));\n      }\n\n      return points;\n    },\n\n    // Get total curve arc length\n\n    getLength: function () {\n      var lengths = this.getLengths();\n      return lengths[lengths.length - 1];\n    },\n\n    // Get list of cumulative segment lengths\n\n    getLengths: function (divisions) {\n      if (divisions === undefined) divisions = this.arcLengthDivisions;\n\n      if (\n        this.cacheArcLengths &&\n        this.cacheArcLengths.length === divisions + 1 &&\n        !this.needsUpdate\n      ) {\n        return this.cacheArcLengths;\n      }\n\n      this.needsUpdate = false;\n\n      var cache = [];\n      var current,\n        last = this.getPoint(0);\n      var p,\n        sum = 0;\n\n      cache.push(0);\n\n      for (p = 1; p <= divisions; p++) {\n        current = this.getPoint(p / divisions);\n        sum += current.distanceTo(last);\n        cache.push(sum);\n        last = current;\n      }\n\n      this.cacheArcLengths = cache;\n\n      return cache; // { sums: cache, sum: sum }; Sum is in the last element.\n    },\n\n    updateArcLengths: function () {\n      this.needsUpdate = true;\n      this.getLengths();\n    },\n\n    // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n    getUtoTmapping: function (u, distance) {\n      var arcLengths = this.getLengths();\n\n      var i = 0,\n        il = arcLengths.length;\n\n      var targetArcLength; // The targeted u distance value to get\n\n      if (distance) {\n        targetArcLength = distance;\n      } else {\n        targetArcLength = u * arcLengths[il - 1];\n      }\n\n      // binary search for the index with largest value smaller than target u distance\n\n      var low = 0,\n        high = il - 1,\n        comparison;\n\n      while (low <= high) {\n        i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n        comparison = arcLengths[i] - targetArcLength;\n\n        if (comparison < 0) {\n          low = i + 1;\n        } else if (comparison > 0) {\n          high = i - 1;\n        } else {\n          high = i;\n          break;\n\n          // DONE\n        }\n      }\n\n      i = high;\n\n      if (arcLengths[i] === targetArcLength) {\n        return i / (il - 1);\n      }\n\n      // we could get finer grain at lengths, or use simple interpolation between two points\n\n      var lengthBefore = arcLengths[i];\n      var lengthAfter = arcLengths[i + 1];\n\n      var segmentLength = lengthAfter - lengthBefore;\n\n      // determine where we are between the 'before' and 'after' points\n\n      var segmentFraction = (targetArcLength - lengthBefore) / segmentLength;\n\n      // add that fractional amount to t\n\n      var t = (i + segmentFraction) / (il - 1);\n\n      return t;\n    },\n\n    // Returns a unit vector tangent at t\n    // In case any sub curve does not implement its tangent derivation,\n    // 2 points a small delta apart will be used to find its gradient\n    // which seems to give a reasonable approximation\n\n    getTangent: function (t) {\n      var delta = 0.0001;\n      var t1 = t - delta;\n      var t2 = t + delta;\n\n      // Capping in case of danger\n\n      if (t1 < 0) t1 = 0;\n      if (t2 > 1) t2 = 1;\n\n      var pt1 = this.getPoint(t1);\n      var pt2 = this.getPoint(t2);\n\n      var vec = pt2.clone().sub(pt1);\n      return vec.normalize();\n    },\n\n    getTangentAt: function (u) {\n      var t = this.getUtoTmapping(u);\n      return this.getTangent(t);\n    },\n\n    computeFrenetFrames: function (segments, closed) {\n      // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n      var normal = new Vector3();\n\n      var tangents = [];\n      var normals = [];\n      var binormals = [];\n\n      var vec = new Vector3();\n      var mat = new Matrix4();\n\n      var i, u, theta;\n\n      // compute the tangent vectors for each segment on the curve\n\n      for (i = 0; i <= segments; i++) {\n        u = i / segments;\n\n        tangents[i] = this.getTangentAt(u);\n        tangents[i].normalize();\n      }\n\n      // select an initial normal vector perpendicular to the first tangent vector,\n      // and in the direction of the minimum tangent xyz component\n\n      normals[0] = new Vector3();\n      binormals[0] = new Vector3();\n      var min = Number.MAX_VALUE;\n      var tx = Math.abs(tangents[0].x);\n      var ty = Math.abs(tangents[0].y);\n      var tz = Math.abs(tangents[0].z);\n\n      if (tx <= min) {\n        min = tx;\n        normal.set(1, 0, 0);\n      }\n\n      if (ty <= min) {\n        min = ty;\n        normal.set(0, 1, 0);\n      }\n\n      if (tz <= min) {\n        normal.set(0, 0, 1);\n      }\n\n      vec.crossVectors(tangents[0], normal).normalize();\n\n      normals[0].crossVectors(tangents[0], vec);\n      binormals[0].crossVectors(tangents[0], normals[0]);\n\n      // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n      for (i = 1; i <= segments; i++) {\n        normals[i] = normals[i - 1].clone();\n\n        binormals[i] = binormals[i - 1].clone();\n\n        vec.crossVectors(tangents[i - 1], tangents[i]);\n\n        if (vec.length() > Number.EPSILON) {\n          vec.normalize();\n\n          theta = Math.acos(\n            _Math.clamp(tangents[i - 1].dot(tangents[i]), -1, 1)\n          ); // clamp for floating pt errors\n\n          normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n        }\n\n        binormals[i].crossVectors(tangents[i], normals[i]);\n      }\n\n      // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n      if (closed === true) {\n        theta = Math.acos(\n          _Math.clamp(normals[0].dot(normals[segments]), -1, 1)\n        );\n        theta /= segments;\n\n        if (\n          tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0\n        ) {\n          theta = -theta;\n        }\n\n        for (i = 1; i <= segments; i++) {\n          // twist a little...\n          normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n          binormals[i].crossVectors(tangents[i], normals[i]);\n        }\n      }\n\n      return {\n        tangents: tangents,\n        normals: normals,\n        binormals: binormals,\n      };\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (source) {\n      this.arcLengthDivisions = source.arcLengthDivisions;\n\n      return this;\n    },\n\n    toJSON: function () {\n      var data = {\n        metadata: {\n          version: 4.5,\n          type: \"Curve\",\n          generator: \"Curve.toJSON\",\n        },\n      };\n\n      data.arcLengthDivisions = this.arcLengthDivisions;\n      data.type = this.type;\n\n      return data;\n    },\n\n    fromJSON: function (json) {\n      this.arcLengthDivisions = json.arcLengthDivisions;\n\n      return this;\n    },\n  });\n\n  function EllipseCurve(\n    aX,\n    aY,\n    xRadius,\n    yRadius,\n    aStartAngle,\n    aEndAngle,\n    aClockwise,\n    aRotation\n  ) {\n    Curve.call(this);\n\n    this.type = \"EllipseCurve\";\n\n    this.aX = aX || 0;\n    this.aY = aY || 0;\n\n    this.xRadius = xRadius || 1;\n    this.yRadius = yRadius || 1;\n\n    this.aStartAngle = aStartAngle || 0;\n    this.aEndAngle = aEndAngle || 2 * Math.PI;\n\n    this.aClockwise = aClockwise || false;\n\n    this.aRotation = aRotation || 0;\n  }\n\n  EllipseCurve.prototype = Object.create(Curve.prototype);\n  EllipseCurve.prototype.constructor = EllipseCurve;\n\n  EllipseCurve.prototype.isEllipseCurve = true;\n\n  EllipseCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector2();\n\n    var twoPi = Math.PI * 2;\n    var deltaAngle = this.aEndAngle - this.aStartAngle;\n    var samePoints = Math.abs(deltaAngle) < Number.EPSILON;\n\n    // ensures that deltaAngle is 0 .. 2 PI\n    while (deltaAngle < 0) deltaAngle += twoPi;\n    while (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n    if (deltaAngle < Number.EPSILON) {\n      if (samePoints) {\n        deltaAngle = 0;\n      } else {\n        deltaAngle = twoPi;\n      }\n    }\n\n    if (this.aClockwise === true && !samePoints) {\n      if (deltaAngle === twoPi) {\n        deltaAngle = -twoPi;\n      } else {\n        deltaAngle = deltaAngle - twoPi;\n      }\n    }\n\n    var angle = this.aStartAngle + t * deltaAngle;\n    var x = this.aX + this.xRadius * Math.cos(angle);\n    var y = this.aY + this.yRadius * Math.sin(angle);\n\n    if (this.aRotation !== 0) {\n      var cos = Math.cos(this.aRotation);\n      var sin = Math.sin(this.aRotation);\n\n      var tx = x - this.aX;\n      var ty = y - this.aY;\n\n      // Rotate the point about the center of the ellipse.\n      x = tx * cos - ty * sin + this.aX;\n      y = tx * sin + ty * cos + this.aY;\n    }\n\n    return point.set(x, y);\n  };\n\n  EllipseCurve.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n\n    this.aX = source.aX;\n    this.aY = source.aY;\n\n    this.xRadius = source.xRadius;\n    this.yRadius = source.yRadius;\n\n    this.aStartAngle = source.aStartAngle;\n    this.aEndAngle = source.aEndAngle;\n\n    this.aClockwise = source.aClockwise;\n\n    this.aRotation = source.aRotation;\n\n    return this;\n  };\n\n  EllipseCurve.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n\n    data.aX = this.aX;\n    data.aY = this.aY;\n\n    data.xRadius = this.xRadius;\n    data.yRadius = this.yRadius;\n\n    data.aStartAngle = this.aStartAngle;\n    data.aEndAngle = this.aEndAngle;\n\n    data.aClockwise = this.aClockwise;\n\n    data.aRotation = this.aRotation;\n\n    return data;\n  };\n\n  EllipseCurve.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n\n    this.aX = json.aX;\n    this.aY = json.aY;\n\n    this.xRadius = json.xRadius;\n    this.yRadius = json.yRadius;\n\n    this.aStartAngle = json.aStartAngle;\n    this.aEndAngle = json.aEndAngle;\n\n    this.aClockwise = json.aClockwise;\n\n    this.aRotation = json.aRotation;\n\n    return this;\n  };\n\n  function ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    EllipseCurve.call(\n      this,\n      aX,\n      aY,\n      aRadius,\n      aRadius,\n      aStartAngle,\n      aEndAngle,\n      aClockwise\n    );\n\n    this.type = \"ArcCurve\";\n  }\n\n  ArcCurve.prototype = Object.create(EllipseCurve.prototype);\n  ArcCurve.prototype.constructor = ArcCurve;\n\n  ArcCurve.prototype.isArcCurve = true;\n\n  /**\n   * @author zz85 https://github.com/zz85\n   *\n   * Centripetal CatmullRom Curve - which is useful for avoiding\n   * cusps and self-intersections in non-uniform catmull rom curves.\n   * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n   *\n   * curve.type accepts centripetal(default), chordal and catmullrom\n   * curve.tension is used for catmullrom which defaults to 0.5\n   */\n\n  /*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n  function CubicPoly() {\n    var c0 = 0,\n      c1 = 0,\n      c2 = 0,\n      c3 = 0;\n\n    /*\n     * Compute coefficients for a cubic polynomial\n     *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n     * such that\n     *   p(0) = x0, p(1) = x1\n     *  and\n     *   p'(0) = t0, p'(1) = t1.\n     */\n    function init(x0, x1, t0, t1) {\n      c0 = x0;\n      c1 = t0;\n      c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n      c3 = 2 * x0 - 2 * x1 + t0 + t1;\n    }\n\n    return {\n      initCatmullRom: function (x0, x1, x2, x3, tension) {\n        init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n      },\n\n      initNonuniformCatmullRom: function (x0, x1, x2, x3, dt0, dt1, dt2) {\n        // compute tangents when parameterized in [t1,t2]\n        var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n        var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2;\n\n        // rescale tangents for parametrization in [0,1]\n        t1 *= dt1;\n        t2 *= dt1;\n\n        init(x1, x2, t1, t2);\n      },\n\n      calc: function (t) {\n        var t2 = t * t;\n        var t3 = t2 * t;\n        return c0 + c1 * t + c2 * t2 + c3 * t3;\n      },\n    };\n  }\n\n  //\n\n  var tmp = new Vector3();\n  var px = new CubicPoly(),\n    py = new CubicPoly(),\n    pz = new CubicPoly();\n\n  function CatmullRomCurve3(points, closed, curveType, tension) {\n    Curve.call(this);\n\n    this.type = \"CatmullRomCurve3\";\n\n    this.points = points || [];\n    this.closed = closed || false;\n    this.curveType = curveType || \"centripetal\";\n    this.tension = tension || 0.5;\n  }\n\n  CatmullRomCurve3.prototype = Object.create(Curve.prototype);\n  CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\n\n  CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n  CatmullRomCurve3.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n\n    var points = this.points;\n    var l = points.length;\n\n    var p = (l - (this.closed ? 0 : 1)) * t;\n    var intPoint = Math.floor(p);\n    var weight = p - intPoint;\n\n    if (this.closed) {\n      intPoint +=\n        intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n    } else if (weight === 0 && intPoint === l - 1) {\n      intPoint = l - 2;\n      weight = 1;\n    }\n\n    var p0, p1, p2, p3; // 4 points\n\n    if (this.closed || intPoint > 0) {\n      p0 = points[(intPoint - 1) % l];\n    } else {\n      // extrapolate first point\n      tmp.subVectors(points[0], points[1]).add(points[0]);\n      p0 = tmp;\n    }\n\n    p1 = points[intPoint % l];\n    p2 = points[(intPoint + 1) % l];\n\n    if (this.closed || intPoint + 2 < l) {\n      p3 = points[(intPoint + 2) % l];\n    } else {\n      // extrapolate last point\n      tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n      p3 = tmp;\n    }\n\n    if (this.curveType === \"centripetal\" || this.curveType === \"chordal\") {\n      // init Centripetal / Chordal Catmull-Rom\n      var pow = this.curveType === \"chordal\" ? 0.5 : 0.25;\n      var dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n      var dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n      var dt2 = Math.pow(p2.distanceToSquared(p3), pow);\n\n      // safety check for repeated points\n      if (dt1 < 1e-4) dt1 = 1.0;\n      if (dt0 < 1e-4) dt0 = dt1;\n      if (dt2 < 1e-4) dt2 = dt1;\n\n      px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n      py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n      pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n    } else if (this.curveType === \"catmullrom\") {\n      px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n      py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n      pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n    }\n\n    point.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\n    return point;\n  };\n\n  CatmullRomCurve3.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n\n    this.points = [];\n\n    for (var i = 0, l = source.points.length; i < l; i++) {\n      var point = source.points[i];\n\n      this.points.push(point.clone());\n    }\n\n    this.closed = source.closed;\n    this.curveType = source.curveType;\n    this.tension = source.tension;\n\n    return this;\n  };\n\n  CatmullRomCurve3.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n\n    data.points = [];\n\n    for (var i = 0, l = this.points.length; i < l; i++) {\n      var point = this.points[i];\n      data.points.push(point.toArray());\n    }\n\n    data.closed = this.closed;\n    data.curveType = this.curveType;\n    data.tension = this.tension;\n\n    return data;\n  };\n\n  CatmullRomCurve3.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n\n    this.points = [];\n\n    for (var i = 0, l = json.points.length; i < l; i++) {\n      var point = json.points[i];\n      this.points.push(new Vector3().fromArray(point));\n    }\n\n    this.closed = json.closed;\n    this.curveType = json.curveType;\n    this.tension = json.tension;\n\n    return this;\n  };\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   *\n   * Bezier Curves formulas obtained from\n   * http://en.wikipedia.org/wiki/Bézier_curve\n   */\n\n  function CatmullRom(t, p0, p1, p2, p3) {\n    var v0 = (p2 - p0) * 0.5;\n    var v1 = (p3 - p1) * 0.5;\n    var t2 = t * t;\n    var t3 = t * t2;\n    return (\n      (2 * p1 - 2 * p2 + v0 + v1) * t3 +\n      (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 +\n      v0 * t +\n      p1\n    );\n  }\n\n  //\n\n  function QuadraticBezierP0(t, p) {\n    var k = 1 - t;\n    return k * k * p;\n  }\n\n  function QuadraticBezierP1(t, p) {\n    return 2 * (1 - t) * t * p;\n  }\n\n  function QuadraticBezierP2(t, p) {\n    return t * t * p;\n  }\n\n  function QuadraticBezier(t, p0, p1, p2) {\n    return (\n      QuadraticBezierP0(t, p0) +\n      QuadraticBezierP1(t, p1) +\n      QuadraticBezierP2(t, p2)\n    );\n  }\n\n  //\n\n  function CubicBezierP0(t, p) {\n    var k = 1 - t;\n    return k * k * k * p;\n  }\n\n  function CubicBezierP1(t, p) {\n    var k = 1 - t;\n    return 3 * k * k * t * p;\n  }\n\n  function CubicBezierP2(t, p) {\n    return 3 * (1 - t) * t * t * p;\n  }\n\n  function CubicBezierP3(t, p) {\n    return t * t * t * p;\n  }\n\n  function CubicBezier(t, p0, p1, p2, p3) {\n    return (\n      CubicBezierP0(t, p0) +\n      CubicBezierP1(t, p1) +\n      CubicBezierP2(t, p2) +\n      CubicBezierP3(t, p3)\n    );\n  }\n\n  function CubicBezierCurve(v0, v1, v2, v3) {\n    Curve.call(this);\n\n    this.type = \"CubicBezierCurve\";\n\n    this.v0 = v0 || new Vector2();\n    this.v1 = v1 || new Vector2();\n    this.v2 = v2 || new Vector2();\n    this.v3 = v3 || new Vector2();\n  }\n\n  CubicBezierCurve.prototype = Object.create(Curve.prototype);\n  CubicBezierCurve.prototype.constructor = CubicBezierCurve;\n\n  CubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n  CubicBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector2();\n\n    var v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2,\n      v3 = this.v3;\n\n    point.set(\n      CubicBezier(t, v0.x, v1.x, v2.x, v3.x),\n      CubicBezier(t, v0.y, v1.y, v2.y, v3.y)\n    );\n\n    return point;\n  };\n\n  CubicBezierCurve.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    this.v3.copy(source.v3);\n\n    return this;\n  };\n\n  CubicBezierCurve.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    data.v3 = this.v3.toArray();\n\n    return data;\n  };\n\n  CubicBezierCurve.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    this.v3.fromArray(json.v3);\n\n    return this;\n  };\n\n  function CubicBezierCurve3(v0, v1, v2, v3) {\n    Curve.call(this);\n\n    this.type = \"CubicBezierCurve3\";\n\n    this.v0 = v0 || new Vector3();\n    this.v1 = v1 || new Vector3();\n    this.v2 = v2 || new Vector3();\n    this.v3 = v3 || new Vector3();\n  }\n\n  CubicBezierCurve3.prototype = Object.create(Curve.prototype);\n  CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\n  CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n  CubicBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n\n    var v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2,\n      v3 = this.v3;\n\n    point.set(\n      CubicBezier(t, v0.x, v1.x, v2.x, v3.x),\n      CubicBezier(t, v0.y, v1.y, v2.y, v3.y),\n      CubicBezier(t, v0.z, v1.z, v2.z, v3.z)\n    );\n\n    return point;\n  };\n\n  CubicBezierCurve3.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n    this.v3.copy(source.v3);\n\n    return this;\n  };\n\n  CubicBezierCurve3.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n    data.v3 = this.v3.toArray();\n\n    return data;\n  };\n\n  CubicBezierCurve3.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n    this.v3.fromArray(json.v3);\n\n    return this;\n  };\n\n  function LineCurve(v1, v2) {\n    Curve.call(this);\n\n    this.type = \"LineCurve\";\n\n    this.v1 = v1 || new Vector2();\n    this.v2 = v2 || new Vector2();\n  }\n\n  LineCurve.prototype = Object.create(Curve.prototype);\n  LineCurve.prototype.constructor = LineCurve;\n\n  LineCurve.prototype.isLineCurve = true;\n\n  LineCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector2();\n\n    if (t === 1) {\n      point.copy(this.v2);\n    } else {\n      point.copy(this.v2).sub(this.v1);\n      point.multiplyScalar(t).add(this.v1);\n    }\n\n    return point;\n  };\n\n  // Line curve is linear, so we can overwrite default getPointAt\n\n  LineCurve.prototype.getPointAt = function (u, optionalTarget) {\n    return this.getPoint(u, optionalTarget);\n  };\n\n  LineCurve.prototype.getTangent = function (/* t */) {\n    var tangent = this.v2.clone().sub(this.v1);\n\n    return tangent.normalize();\n  };\n\n  LineCurve.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n\n    return this;\n  };\n\n  LineCurve.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n\n    return data;\n  };\n\n  LineCurve.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n\n    return this;\n  };\n\n  function LineCurve3(v1, v2) {\n    Curve.call(this);\n\n    this.type = \"LineCurve3\";\n\n    this.v1 = v1 || new Vector3();\n    this.v2 = v2 || new Vector3();\n  }\n\n  LineCurve3.prototype = Object.create(Curve.prototype);\n  LineCurve3.prototype.constructor = LineCurve3;\n\n  LineCurve3.prototype.isLineCurve3 = true;\n\n  LineCurve3.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n\n    if (t === 1) {\n      point.copy(this.v2);\n    } else {\n      point.copy(this.v2).sub(this.v1);\n      point.multiplyScalar(t).add(this.v1);\n    }\n\n    return point;\n  };\n\n  // Line curve is linear, so we can overwrite default getPointAt\n\n  LineCurve3.prototype.getPointAt = function (u, optionalTarget) {\n    return this.getPoint(u, optionalTarget);\n  };\n\n  LineCurve3.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n\n    return this;\n  };\n\n  LineCurve3.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n\n    return data;\n  };\n\n  LineCurve3.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n\n    return this;\n  };\n\n  function QuadraticBezierCurve(v0, v1, v2) {\n    Curve.call(this);\n\n    this.type = \"QuadraticBezierCurve\";\n\n    this.v0 = v0 || new Vector2();\n    this.v1 = v1 || new Vector2();\n    this.v2 = v2 || new Vector2();\n  }\n\n  QuadraticBezierCurve.prototype = Object.create(Curve.prototype);\n  QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\n\n  QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n  QuadraticBezierCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector2();\n\n    var v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2;\n\n    point.set(\n      QuadraticBezier(t, v0.x, v1.x, v2.x),\n      QuadraticBezier(t, v0.y, v1.y, v2.y)\n    );\n\n    return point;\n  };\n\n  QuadraticBezierCurve.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n\n    return this;\n  };\n\n  QuadraticBezierCurve.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n\n    return data;\n  };\n\n  QuadraticBezierCurve.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n\n    return this;\n  };\n\n  function QuadraticBezierCurve3(v0, v1, v2) {\n    Curve.call(this);\n\n    this.type = \"QuadraticBezierCurve3\";\n\n    this.v0 = v0 || new Vector3();\n    this.v1 = v1 || new Vector3();\n    this.v2 = v2 || new Vector3();\n  }\n\n  QuadraticBezierCurve3.prototype = Object.create(Curve.prototype);\n  QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\n\n  QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n  QuadraticBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector3();\n\n    var v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2;\n\n    point.set(\n      QuadraticBezier(t, v0.x, v1.x, v2.x),\n      QuadraticBezier(t, v0.y, v1.y, v2.y),\n      QuadraticBezier(t, v0.z, v1.z, v2.z)\n    );\n\n    return point;\n  };\n\n  QuadraticBezierCurve3.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n\n    this.v0.copy(source.v0);\n    this.v1.copy(source.v1);\n    this.v2.copy(source.v2);\n\n    return this;\n  };\n\n  QuadraticBezierCurve3.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n\n    data.v0 = this.v0.toArray();\n    data.v1 = this.v1.toArray();\n    data.v2 = this.v2.toArray();\n\n    return data;\n  };\n\n  QuadraticBezierCurve3.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n\n    this.v0.fromArray(json.v0);\n    this.v1.fromArray(json.v1);\n    this.v2.fromArray(json.v2);\n\n    return this;\n  };\n\n  function SplineCurve(points /* array of Vector2 */) {\n    Curve.call(this);\n\n    this.type = \"SplineCurve\";\n\n    this.points = points || [];\n  }\n\n  SplineCurve.prototype = Object.create(Curve.prototype);\n  SplineCurve.prototype.constructor = SplineCurve;\n\n  SplineCurve.prototype.isSplineCurve = true;\n\n  SplineCurve.prototype.getPoint = function (t, optionalTarget) {\n    var point = optionalTarget || new Vector2();\n\n    var points = this.points;\n    var p = (points.length - 1) * t;\n\n    var intPoint = Math.floor(p);\n    var weight = p - intPoint;\n\n    var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n    var p1 = points[intPoint];\n    var p2 =\n      points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n    var p3 =\n      points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\n    point.set(\n      CatmullRom(weight, p0.x, p1.x, p2.x, p3.x),\n      CatmullRom(weight, p0.y, p1.y, p2.y, p3.y)\n    );\n\n    return point;\n  };\n\n  SplineCurve.prototype.copy = function (source) {\n    Curve.prototype.copy.call(this, source);\n\n    this.points = [];\n\n    for (var i = 0, l = source.points.length; i < l; i++) {\n      var point = source.points[i];\n\n      this.points.push(point.clone());\n    }\n\n    return this;\n  };\n\n  SplineCurve.prototype.toJSON = function () {\n    var data = Curve.prototype.toJSON.call(this);\n\n    data.points = [];\n\n    for (var i = 0, l = this.points.length; i < l; i++) {\n      var point = this.points[i];\n      data.points.push(point.toArray());\n    }\n\n    return data;\n  };\n\n  SplineCurve.prototype.fromJSON = function (json) {\n    Curve.prototype.fromJSON.call(this, json);\n\n    this.points = [];\n\n    for (var i = 0, l = json.points.length; i < l; i++) {\n      var point = json.points[i];\n      this.points.push(new Vector2().fromArray(point));\n    }\n\n    return this;\n  };\n\n  var Curves = /*#__PURE__*/ Object.freeze({\n    ArcCurve: ArcCurve,\n    CatmullRomCurve3: CatmullRomCurve3,\n    CubicBezierCurve: CubicBezierCurve,\n    CubicBezierCurve3: CubicBezierCurve3,\n    EllipseCurve: EllipseCurve,\n    LineCurve: LineCurve,\n    LineCurve3: LineCurve3,\n    QuadraticBezierCurve: QuadraticBezierCurve,\n    QuadraticBezierCurve3: QuadraticBezierCurve3,\n    SplineCurve: SplineCurve,\n  });\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   *\n   **/\n\n  /**************************************************************\n   *\tCurved Path - a curve path is simply a array of connected\n   *  curves, but retains the api of a curve\n   **************************************************************/\n\n  function CurvePath() {\n    Curve.call(this);\n\n    this.type = \"CurvePath\";\n\n    this.curves = [];\n    this.autoClose = false; // Automatically closes the path\n  }\n\n  CurvePath.prototype = Object.assign(Object.create(Curve.prototype), {\n    constructor: CurvePath,\n\n    add: function (curve) {\n      this.curves.push(curve);\n    },\n\n    closePath: function () {\n      // Add a line curve if start and end of lines are not connected\n      var startPoint = this.curves[0].getPoint(0);\n      var endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n      if (!startPoint.equals(endPoint)) {\n        this.curves.push(new LineCurve(endPoint, startPoint));\n      }\n    },\n\n    // To get accurate point with reference to\n    // entire path distance at time t,\n    // following has to be done:\n\n    // 1. Length of each sub path have to be known\n    // 2. Locate and identify type of curve\n    // 3. Get t for the curve\n    // 4. Return curve.getPointAt(t')\n\n    getPoint: function (t) {\n      var d = t * this.getLength();\n      var curveLengths = this.getCurveLengths();\n      var i = 0;\n\n      // To think about boundaries points.\n\n      while (i < curveLengths.length) {\n        if (curveLengths[i] >= d) {\n          var diff = curveLengths[i] - d;\n          var curve = this.curves[i];\n\n          var segmentLength = curve.getLength();\n          var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n          return curve.getPointAt(u);\n        }\n\n        i++;\n      }\n\n      return null;\n\n      // loop where sum != 0, sum > d , sum+1 <d\n    },\n\n    // We cannot use the default THREE.Curve getPoint() with getLength() because in\n    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    // getPoint() depends on getLength\n\n    getLength: function () {\n      var lens = this.getCurveLengths();\n      return lens[lens.length - 1];\n    },\n\n    // cacheLengths must be recalculated.\n    updateArcLengths: function () {\n      this.needsUpdate = true;\n      this.cacheLengths = null;\n      this.getCurveLengths();\n    },\n\n    // Compute lengths and cache them\n    // We cannot overwrite getLengths() because UtoT mapping uses it.\n\n    getCurveLengths: function () {\n      // We use cache values if curves and cache array are same length\n\n      if (\n        this.cacheLengths &&\n        this.cacheLengths.length === this.curves.length\n      ) {\n        return this.cacheLengths;\n      }\n\n      // Get length of sub-curve\n      // Push sums into cached array\n\n      var lengths = [],\n        sums = 0;\n\n      for (var i = 0, l = this.curves.length; i < l; i++) {\n        sums += this.curves[i].getLength();\n        lengths.push(sums);\n      }\n\n      this.cacheLengths = lengths;\n\n      return lengths;\n    },\n\n    getSpacedPoints: function (divisions) {\n      if (divisions === undefined) divisions = 40;\n\n      var points = [];\n\n      for (var i = 0; i <= divisions; i++) {\n        points.push(this.getPoint(i / divisions));\n      }\n\n      if (this.autoClose) {\n        points.push(points[0]);\n      }\n\n      return points;\n    },\n\n    getPoints: function (divisions) {\n      divisions = divisions || 12;\n\n      var points = [],\n        last;\n\n      for (var i = 0, curves = this.curves; i < curves.length; i++) {\n        var curve = curves[i];\n        var resolution =\n          curve && curve.isEllipseCurve\n            ? divisions * 2\n            : curve && (curve.isLineCurve || curve.isLineCurve3)\n            ? 1\n            : curve && curve.isSplineCurve\n            ? divisions * curve.points.length\n            : divisions;\n\n        var pts = curve.getPoints(resolution);\n\n        for (var j = 0; j < pts.length; j++) {\n          var point = pts[j];\n\n          if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n          points.push(point);\n          last = point;\n        }\n      }\n\n      if (\n        this.autoClose &&\n        points.length > 1 &&\n        !points[points.length - 1].equals(points[0])\n      ) {\n        points.push(points[0]);\n      }\n\n      return points;\n    },\n\n    copy: function (source) {\n      Curve.prototype.copy.call(this, source);\n\n      this.curves = [];\n\n      for (var i = 0, l = source.curves.length; i < l; i++) {\n        var curve = source.curves[i];\n\n        this.curves.push(curve.clone());\n      }\n\n      this.autoClose = source.autoClose;\n\n      return this;\n    },\n\n    toJSON: function () {\n      var data = Curve.prototype.toJSON.call(this);\n\n      data.autoClose = this.autoClose;\n      data.curves = [];\n\n      for (var i = 0, l = this.curves.length; i < l; i++) {\n        var curve = this.curves[i];\n        data.curves.push(curve.toJSON());\n      }\n\n      return data;\n    },\n\n    fromJSON: function (json) {\n      Curve.prototype.fromJSON.call(this, json);\n\n      this.autoClose = json.autoClose;\n      this.curves = [];\n\n      for (var i = 0, l = json.curves.length; i < l; i++) {\n        var curve = json.curves[i];\n        this.curves.push(new Curves[curve.type]().fromJSON(curve));\n      }\n\n      return this;\n    },\n  });\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * Creates free form 2d path using series of points, lines or curves.\n   **/\n\n  function Path(points) {\n    CurvePath.call(this);\n\n    this.type = \"Path\";\n\n    this.currentPoint = new Vector2();\n\n    if (points) {\n      this.setFromPoints(points);\n    }\n  }\n\n  Path.prototype = Object.assign(Object.create(CurvePath.prototype), {\n    constructor: Path,\n\n    setFromPoints: function (points) {\n      this.moveTo(points[0].x, points[0].y);\n\n      for (var i = 1, l = points.length; i < l; i++) {\n        this.lineTo(points[i].x, points[i].y);\n      }\n    },\n\n    moveTo: function (x, y) {\n      this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n    },\n\n    lineTo: function (x, y) {\n      var curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n      this.curves.push(curve);\n\n      this.currentPoint.set(x, y);\n    },\n\n    quadraticCurveTo: function (aCPx, aCPy, aX, aY) {\n      var curve = new QuadraticBezierCurve(\n        this.currentPoint.clone(),\n        new Vector2(aCPx, aCPy),\n        new Vector2(aX, aY)\n      );\n\n      this.curves.push(curve);\n\n      this.currentPoint.set(aX, aY);\n    },\n\n    bezierCurveTo: function (aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n      var curve = new CubicBezierCurve(\n        this.currentPoint.clone(),\n        new Vector2(aCP1x, aCP1y),\n        new Vector2(aCP2x, aCP2y),\n        new Vector2(aX, aY)\n      );\n\n      this.curves.push(curve);\n\n      this.currentPoint.set(aX, aY);\n    },\n\n    splineThru: function (pts /*Array of Vector*/) {\n      var npts = [this.currentPoint.clone()].concat(pts);\n\n      var curve = new SplineCurve(npts);\n      this.curves.push(curve);\n\n      this.currentPoint.copy(pts[pts.length - 1]);\n    },\n\n    arc: function (aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n      var x0 = this.currentPoint.x;\n      var y0 = this.currentPoint.y;\n\n      this.absarc(\n        aX + x0,\n        aY + y0,\n        aRadius,\n        aStartAngle,\n        aEndAngle,\n        aClockwise\n      );\n    },\n\n    absarc: function (aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n      this.absellipse(\n        aX,\n        aY,\n        aRadius,\n        aRadius,\n        aStartAngle,\n        aEndAngle,\n        aClockwise\n      );\n    },\n\n    ellipse: function (\n      aX,\n      aY,\n      xRadius,\n      yRadius,\n      aStartAngle,\n      aEndAngle,\n      aClockwise,\n      aRotation\n    ) {\n      var x0 = this.currentPoint.x;\n      var y0 = this.currentPoint.y;\n\n      this.absellipse(\n        aX + x0,\n        aY + y0,\n        xRadius,\n        yRadius,\n        aStartAngle,\n        aEndAngle,\n        aClockwise,\n        aRotation\n      );\n    },\n\n    absellipse: function (\n      aX,\n      aY,\n      xRadius,\n      yRadius,\n      aStartAngle,\n      aEndAngle,\n      aClockwise,\n      aRotation\n    ) {\n      var curve = new EllipseCurve(\n        aX,\n        aY,\n        xRadius,\n        yRadius,\n        aStartAngle,\n        aEndAngle,\n        aClockwise,\n        aRotation\n      );\n\n      if (this.curves.length > 0) {\n        // if a previous curve is present, attempt to join\n        var firstPoint = curve.getPoint(0);\n\n        if (!firstPoint.equals(this.currentPoint)) {\n          this.lineTo(firstPoint.x, firstPoint.y);\n        }\n      }\n\n      this.curves.push(curve);\n\n      var lastPoint = curve.getPoint(1);\n      this.currentPoint.copy(lastPoint);\n    },\n\n    copy: function (source) {\n      CurvePath.prototype.copy.call(this, source);\n\n      this.currentPoint.copy(source.currentPoint);\n\n      return this;\n    },\n\n    toJSON: function () {\n      var data = CurvePath.prototype.toJSON.call(this);\n\n      data.currentPoint = this.currentPoint.toArray();\n\n      return data;\n    },\n\n    fromJSON: function (json) {\n      CurvePath.prototype.fromJSON.call(this, json);\n\n      this.currentPoint.fromArray(json.currentPoint);\n\n      return this;\n    },\n  });\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * Defines a 2d shape plane using paths.\n   **/\n\n  // STEP 1 Create a path.\n  // STEP 2 Turn path into shape.\n  // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n  // STEP 3a - Extract points from each shape, turn to vertices\n  // STEP 3b - Triangulate each shape, add faces.\n\n  function Shape(points) {\n    Path.call(this, points);\n\n    this.uuid = _Math.generateUUID();\n\n    this.type = \"Shape\";\n\n    this.holes = [];\n  }\n\n  Shape.prototype = Object.assign(Object.create(Path.prototype), {\n    constructor: Shape,\n\n    getPointsHoles: function (divisions) {\n      var holesPts = [];\n\n      for (var i = 0, l = this.holes.length; i < l; i++) {\n        holesPts[i] = this.holes[i].getPoints(divisions);\n      }\n\n      return holesPts;\n    },\n\n    // get points of shape and holes (keypoints based on segments parameter)\n\n    extractPoints: function (divisions) {\n      return {\n        shape: this.getPoints(divisions),\n        holes: this.getPointsHoles(divisions),\n      };\n    },\n\n    copy: function (source) {\n      Path.prototype.copy.call(this, source);\n\n      this.holes = [];\n\n      for (var i = 0, l = source.holes.length; i < l; i++) {\n        var hole = source.holes[i];\n\n        this.holes.push(hole.clone());\n      }\n\n      return this;\n    },\n\n    toJSON: function () {\n      var data = Path.prototype.toJSON.call(this);\n\n      data.uuid = this.uuid;\n      data.holes = [];\n\n      for (var i = 0, l = this.holes.length; i < l; i++) {\n        var hole = this.holes[i];\n        data.holes.push(hole.toJSON());\n      }\n\n      return data;\n    },\n\n    fromJSON: function (json) {\n      Path.prototype.fromJSON.call(this, json);\n\n      this.uuid = json.uuid;\n      this.holes = [];\n\n      for (var i = 0, l = json.holes.length; i < l; i++) {\n        var hole = json.holes[i];\n        this.holes.push(new Path().fromJSON(hole));\n      }\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function Light(color, intensity) {\n    Object3D.call(this);\n\n    this.type = \"Light\";\n\n    this.color = new Color(color);\n    this.intensity = intensity !== undefined ? intensity : 1;\n\n    this.receiveShadow = undefined;\n  }\n\n  Light.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Light,\n\n    isLight: true,\n\n    copy: function (source) {\n      Object3D.prototype.copy.call(this, source);\n\n      this.color.copy(source.color);\n      this.intensity = source.intensity;\n\n      return this;\n    },\n\n    toJSON: function (meta) {\n      var data = Object3D.prototype.toJSON.call(this, meta);\n\n      data.object.color = this.color.getHex();\n      data.object.intensity = this.intensity;\n\n      if (this.groundColor !== undefined)\n        data.object.groundColor = this.groundColor.getHex();\n\n      if (this.distance !== undefined) data.object.distance = this.distance;\n      if (this.angle !== undefined) data.object.angle = this.angle;\n      if (this.decay !== undefined) data.object.decay = this.decay;\n      if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\n      if (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\n      return data;\n    },\n  });\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function HemisphereLight(skyColor, groundColor, intensity) {\n    Light.call(this, skyColor, intensity);\n\n    this.type = \"HemisphereLight\";\n\n    this.castShadow = undefined;\n\n    this.position.copy(Object3D.DefaultUp);\n    this.updateMatrix();\n\n    this.groundColor = new Color(groundColor);\n  }\n\n  HemisphereLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: HemisphereLight,\n\n    isHemisphereLight: true,\n\n    copy: function (source) {\n      Light.prototype.copy.call(this, source);\n\n      this.groundColor.copy(source.groundColor);\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function LightShadow(camera) {\n    this.camera = camera;\n\n    this.bias = 0;\n    this.radius = 1;\n\n    this.mapSize = new Vector2(512, 512);\n\n    this.map = null;\n    this.matrix = new Matrix4();\n  }\n\n  Object.assign(LightShadow.prototype, {\n    copy: function (source) {\n      this.camera = source.camera.clone();\n\n      this.bias = source.bias;\n      this.radius = source.radius;\n\n      this.mapSize.copy(source.mapSize);\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    toJSON: function () {\n      var object = {};\n\n      if (this.bias !== 0) object.bias = this.bias;\n      if (this.radius !== 1) object.radius = this.radius;\n      if (this.mapSize.x !== 512 || this.mapSize.y !== 512)\n        object.mapSize = this.mapSize.toArray();\n\n      object.camera = this.camera.toJSON(false).object;\n      delete object.camera.matrix;\n\n      return object;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function SpotLightShadow() {\n    LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500));\n  }\n\n  SpotLightShadow.prototype = Object.assign(\n    Object.create(LightShadow.prototype),\n    {\n      constructor: SpotLightShadow,\n\n      isSpotLightShadow: true,\n\n      update: function (light) {\n        var camera = this.camera;\n\n        var fov = _Math.RAD2DEG * 2 * light.angle;\n        var aspect = this.mapSize.width / this.mapSize.height;\n        var far = light.distance || camera.far;\n\n        if (\n          fov !== camera.fov ||\n          aspect !== camera.aspect ||\n          far !== camera.far\n        ) {\n          camera.fov = fov;\n          camera.aspect = aspect;\n          camera.far = far;\n          camera.updateProjectionMatrix();\n        }\n      },\n    }\n  );\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function SpotLight(color, intensity, distance, angle, penumbra, decay) {\n    Light.call(this, color, intensity);\n\n    this.type = \"SpotLight\";\n\n    this.position.copy(Object3D.DefaultUp);\n    this.updateMatrix();\n\n    this.target = new Object3D();\n\n    Object.defineProperty(this, \"power\", {\n      get: function () {\n        // intensity = power per solid angle.\n        // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n        return this.intensity * Math.PI;\n      },\n      set: function (power) {\n        // intensity = power per solid angle.\n        // ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n        this.intensity = power / Math.PI;\n      },\n    });\n\n    this.distance = distance !== undefined ? distance : 0;\n    this.angle = angle !== undefined ? angle : Math.PI / 3;\n    this.penumbra = penumbra !== undefined ? penumbra : 0;\n    this.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n    this.shadow = new SpotLightShadow();\n  }\n\n  SpotLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: SpotLight,\n\n    isSpotLight: true,\n\n    copy: function (source) {\n      Light.prototype.copy.call(this, source);\n\n      this.distance = source.distance;\n      this.angle = source.angle;\n      this.penumbra = source.penumbra;\n      this.decay = source.decay;\n\n      this.target = source.target.clone();\n\n      this.shadow = source.shadow.clone();\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function PointLight(color, intensity, distance, decay) {\n    Light.call(this, color, intensity);\n\n    this.type = \"PointLight\";\n\n    Object.defineProperty(this, \"power\", {\n      get: function () {\n        // intensity = power per solid angle.\n        // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n        return this.intensity * 4 * Math.PI;\n      },\n      set: function (power) {\n        // intensity = power per solid angle.\n        // ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n        this.intensity = power / (4 * Math.PI);\n      },\n    });\n\n    this.distance = distance !== undefined ? distance : 0;\n    this.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n    this.shadow = new LightShadow(new PerspectiveCamera(90, 1, 0.5, 500));\n  }\n\n  PointLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: PointLight,\n\n    isPointLight: true,\n\n    copy: function (source) {\n      Light.prototype.copy.call(this, source);\n\n      this.distance = source.distance;\n      this.decay = source.decay;\n\n      this.shadow = source.shadow.clone();\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function DirectionalLightShadow() {\n    LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n  }\n\n  DirectionalLightShadow.prototype = Object.assign(\n    Object.create(LightShadow.prototype),\n    {\n      constructor: DirectionalLightShadow,\n    }\n  );\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function DirectionalLight(color, intensity) {\n    Light.call(this, color, intensity);\n\n    this.type = \"DirectionalLight\";\n\n    this.position.copy(Object3D.DefaultUp);\n    this.updateMatrix();\n\n    this.target = new Object3D();\n\n    this.shadow = new DirectionalLightShadow();\n  }\n\n  DirectionalLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: DirectionalLight,\n\n    isDirectionalLight: true,\n\n    copy: function (source) {\n      Light.prototype.copy.call(this, source);\n\n      this.target = source.target.clone();\n\n      this.shadow = source.shadow.clone();\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function AmbientLight(color, intensity) {\n    Light.call(this, color, intensity);\n\n    this.type = \"AmbientLight\";\n\n    this.castShadow = undefined;\n  }\n\n  AmbientLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: AmbientLight,\n\n    isAmbientLight: true,\n  });\n\n  /**\n   * @author abelnation / http://github.com/abelnation\n   */\n\n  function RectAreaLight(color, intensity, width, height) {\n    Light.call(this, color, intensity);\n\n    this.type = \"RectAreaLight\";\n\n    this.width = width !== undefined ? width : 10;\n    this.height = height !== undefined ? height : 10;\n  }\n\n  RectAreaLight.prototype = Object.assign(Object.create(Light.prototype), {\n    constructor: RectAreaLight,\n\n    isRectAreaLight: true,\n\n    copy: function (source) {\n      Light.prototype.copy.call(this, source);\n\n      this.width = source.width;\n      this.height = source.height;\n\n      return this;\n    },\n\n    toJSON: function (meta) {\n      var data = Light.prototype.toJSON.call(this, meta);\n\n      data.object.width = this.width;\n      data.object.height = this.height;\n\n      return data;\n    },\n  });\n\n  /**\n   * @author tschw\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   */\n\n  var AnimationUtils = {\n    // same as Array.prototype.slice, but also works on typed arrays\n    arraySlice: function (array, from, to) {\n      if (AnimationUtils.isTypedArray(array)) {\n        // in ios9 array.subarray(from, undefined) will return empty array\n        // but array.subarray(from) or array.subarray(from, len) is correct\n        return new array.constructor(\n          array.subarray(from, to !== undefined ? to : array.length)\n        );\n      }\n\n      return array.slice(from, to);\n    },\n\n    // converts an array to a specific type\n    convertArray: function (array, type, forceClone) {\n      if (\n        !array || // let 'undefined' and 'null' pass\n        (!forceClone && array.constructor === type)\n      )\n        return array;\n\n      if (typeof type.BYTES_PER_ELEMENT === \"number\") {\n        return new type(array); // create typed array\n      }\n\n      return Array.prototype.slice.call(array); // create Array\n    },\n\n    isTypedArray: function (object) {\n      return ArrayBuffer.isView(object) && !(object instanceof DataView);\n    },\n\n    // returns an array by which times and values can be sorted\n    getKeyframeOrder: function (times) {\n      function compareTime(i, j) {\n        return times[i] - times[j];\n      }\n\n      var n = times.length;\n      var result = new Array(n);\n      for (var i = 0; i !== n; ++i) result[i] = i;\n\n      result.sort(compareTime);\n\n      return result;\n    },\n\n    // uses the array previously returned by 'getKeyframeOrder' to sort data\n    sortedArray: function (values, stride, order) {\n      var nValues = values.length;\n      var result = new values.constructor(nValues);\n\n      for (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n        var srcOffset = order[i] * stride;\n\n        for (var j = 0; j !== stride; ++j) {\n          result[dstOffset++] = values[srcOffset + j];\n        }\n      }\n\n      return result;\n    },\n\n    // function for parsing AOS keyframe formats\n    flattenJSON: function (jsonKeys, times, values, valuePropertyName) {\n      var i = 1,\n        key = jsonKeys[0];\n\n      while (key !== undefined && key[valuePropertyName] === undefined) {\n        key = jsonKeys[i++];\n      }\n\n      if (key === undefined) return; // no data\n\n      var value = key[valuePropertyName];\n      if (value === undefined) return; // no data\n\n      if (Array.isArray(value)) {\n        do {\n          value = key[valuePropertyName];\n\n          if (value !== undefined) {\n            times.push(key.time);\n            values.push.apply(values, value); // push all elements\n          }\n\n          key = jsonKeys[i++];\n        } while (key !== undefined);\n      } else if (value.toArray !== undefined) {\n        // ...assume THREE.Math-ish\n\n        do {\n          value = key[valuePropertyName];\n\n          if (value !== undefined) {\n            times.push(key.time);\n            value.toArray(values, values.length);\n          }\n\n          key = jsonKeys[i++];\n        } while (key !== undefined);\n      } else {\n        // otherwise push as-is\n\n        do {\n          value = key[valuePropertyName];\n\n          if (value !== undefined) {\n            times.push(key.time);\n            values.push(value);\n          }\n\n          key = jsonKeys[i++];\n        } while (key !== undefined);\n      }\n    },\n  };\n\n  /**\n   * Abstract base class of interpolants over parametric samples.\n   *\n   * The parameter domain is one dimensional, typically the time or a path\n   * along a curve defined by the data.\n   *\n   * The sample values can have any dimensionality and derived classes may\n   * apply special interpretations to the data.\n   *\n   * This class provides the interval seek in a Template Method, deferring\n   * the actual interpolation to derived classes.\n   *\n   * Time complexity is O(1) for linear access crossing at most two points\n   * and O(log N) for random access, where N is the number of positions.\n   *\n   * References:\n   *\n   * \t\thttp://www.oodesign.com/template-method-pattern.html\n   *\n   * @author tschw\n   */\n\n  function Interpolant(\n    parameterPositions,\n    sampleValues,\n    sampleSize,\n    resultBuffer\n  ) {\n    this.parameterPositions = parameterPositions;\n    this._cachedIndex = 0;\n\n    this.resultBuffer =\n      resultBuffer !== undefined\n        ? resultBuffer\n        : new sampleValues.constructor(sampleSize);\n    this.sampleValues = sampleValues;\n    this.valueSize = sampleSize;\n  }\n\n  Object.assign(Interpolant.prototype, {\n    evaluate: function (t) {\n      var pp = this.parameterPositions,\n        i1 = this._cachedIndex,\n        t1 = pp[i1],\n        t0 = pp[i1 - 1];\n\n      validate_interval: {\n        seek: {\n          var right;\n\n          linear_scan: {\n            //- See http://jsperf.com/comparison-to-undefined/3\n            //- slower code:\n            //-\n            //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n            forward_scan: if (!(t < t1)) {\n              for (var giveUpAt = i1 + 2; ; ) {\n                if (t1 === undefined) {\n                  if (t < t0) break forward_scan;\n\n                  // after end\n\n                  i1 = pp.length;\n                  this._cachedIndex = i1;\n                  return this.afterEnd_(i1 - 1, t, t0);\n                }\n\n                if (i1 === giveUpAt) break; // this loop\n\n                t0 = t1;\n                t1 = pp[++i1];\n\n                if (t < t1) {\n                  // we have arrived at the sought interval\n                  break seek;\n                }\n              }\n\n              // prepare binary search on the right side of the index\n              right = pp.length;\n              break linear_scan;\n            }\n\n            //- slower code:\n            //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n            if (!(t >= t0)) {\n              // looping?\n\n              var t1global = pp[1];\n\n              if (t < t1global) {\n                i1 = 2; // + 1, using the scan for the details\n                t0 = t1global;\n              }\n\n              // linear reverse scan\n\n              for (var giveUpAt = i1 - 2; ; ) {\n                if (t0 === undefined) {\n                  // before start\n\n                  this._cachedIndex = 0;\n                  return this.beforeStart_(0, t, t1);\n                }\n\n                if (i1 === giveUpAt) break; // this loop\n\n                t1 = t0;\n                t0 = pp[--i1 - 1];\n\n                if (t >= t0) {\n                  // we have arrived at the sought interval\n                  break seek;\n                }\n              }\n\n              // prepare binary search on the left side of the index\n              right = i1;\n              i1 = 0;\n              break linear_scan;\n            }\n\n            // the interval is valid\n\n            break validate_interval;\n          } // linear scan\n\n          // binary search\n\n          while (i1 < right) {\n            var mid = (i1 + right) >>> 1;\n\n            if (t < pp[mid]) {\n              right = mid;\n            } else {\n              i1 = mid + 1;\n            }\n          }\n\n          t1 = pp[i1];\n          t0 = pp[i1 - 1];\n\n          // check boundary cases, again\n\n          if (t0 === undefined) {\n            this._cachedIndex = 0;\n            return this.beforeStart_(0, t, t1);\n          }\n\n          if (t1 === undefined) {\n            i1 = pp.length;\n            this._cachedIndex = i1;\n            return this.afterEnd_(i1 - 1, t0, t);\n          }\n        } // seek\n\n        this._cachedIndex = i1;\n\n        this.intervalChanged_(i1, t0, t1);\n      } // validate_interval\n\n      return this.interpolate_(i1, t0, t, t1);\n    },\n\n    settings: null, // optional, subclass-specific settings structure\n    // Note: The indirection allows central control of many interpolants.\n\n    // --- Protected interface\n\n    DefaultSettings_: {},\n\n    getSettings_: function () {\n      return this.settings || this.DefaultSettings_;\n    },\n\n    copySampleValue_: function (index) {\n      // copies a sample value to the result buffer\n\n      var result = this.resultBuffer,\n        values = this.sampleValues,\n        stride = this.valueSize,\n        offset = index * stride;\n\n      for (var i = 0; i !== stride; ++i) {\n        result[i] = values[offset + i];\n      }\n\n      return result;\n    },\n\n    // Template methods for derived classes:\n\n    interpolate_: function (/* i1, t0, t, t1 */) {\n      throw new Error(\"call to abstract method\");\n      // implementations shall return this.resultBuffer\n    },\n\n    intervalChanged_: function (/* i1, t0, t1 */) {\n      // empty\n    },\n  });\n\n  //!\\ DECLARE ALIAS AFTER assign prototype !\n  Object.assign(Interpolant.prototype, {\n    //( 0, t, t0 ), returns this.resultBuffer\n    beforeStart_: Interpolant.prototype.copySampleValue_,\n\n    //( N-1, tN-1, t ), returns this.resultBuffer\n    afterEnd_: Interpolant.prototype.copySampleValue_,\n  });\n\n  /**\n   * Fast and simple cubic spline interpolant.\n   *\n   * It was derived from a Hermitian construction setting the first derivative\n   * at each sample position to the linear slope between neighboring positions\n   * over their parameter interval.\n   *\n   * @author tschw\n   */\n\n  function CubicInterpolant(\n    parameterPositions,\n    sampleValues,\n    sampleSize,\n    resultBuffer\n  ) {\n    Interpolant.call(\n      this,\n      parameterPositions,\n      sampleValues,\n      sampleSize,\n      resultBuffer\n    );\n\n    this._weightPrev = -0;\n    this._offsetPrev = -0;\n    this._weightNext = -0;\n    this._offsetNext = -0;\n  }\n\n  CubicInterpolant.prototype = Object.assign(\n    Object.create(Interpolant.prototype),\n    {\n      constructor: CubicInterpolant,\n\n      DefaultSettings_: {\n        endingStart: ZeroCurvatureEnding,\n        endingEnd: ZeroCurvatureEnding,\n      },\n\n      intervalChanged_: function (i1, t0, t1) {\n        var pp = this.parameterPositions,\n          iPrev = i1 - 2,\n          iNext = i1 + 1,\n          tPrev = pp[iPrev],\n          tNext = pp[iNext];\n\n        if (tPrev === undefined) {\n          switch (this.getSettings_().endingStart) {\n            case ZeroSlopeEnding:\n              // f'(t0) = 0\n              iPrev = i1;\n              tPrev = 2 * t0 - t1;\n\n              break;\n\n            case WrapAroundEnding:\n              // use the other end of the curve\n              iPrev = pp.length - 2;\n              tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\n              break;\n\n            default: // ZeroCurvatureEnding\n              // f''(t0) = 0 a.k.a. Natural Spline\n              iPrev = i1;\n              tPrev = t1;\n          }\n        }\n\n        if (tNext === undefined) {\n          switch (this.getSettings_().endingEnd) {\n            case ZeroSlopeEnding:\n              // f'(tN) = 0\n              iNext = i1;\n              tNext = 2 * t1 - t0;\n\n              break;\n\n            case WrapAroundEnding:\n              // use the other end of the curve\n              iNext = 1;\n              tNext = t1 + pp[1] - pp[0];\n\n              break;\n\n            default: // ZeroCurvatureEnding\n              // f''(tN) = 0, a.k.a. Natural Spline\n              iNext = i1 - 1;\n              tNext = t0;\n          }\n        }\n\n        var halfDt = (t1 - t0) * 0.5,\n          stride = this.valueSize;\n\n        this._weightPrev = halfDt / (t0 - tPrev);\n        this._weightNext = halfDt / (tNext - t1);\n        this._offsetPrev = iPrev * stride;\n        this._offsetNext = iNext * stride;\n      },\n\n      interpolate_: function (i1, t0, t, t1) {\n        var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          o1 = i1 * stride,\n          o0 = o1 - stride,\n          oP = this._offsetPrev,\n          oN = this._offsetNext,\n          wP = this._weightPrev,\n          wN = this._weightNext,\n          p = (t - t0) / (t1 - t0),\n          pp = p * p,\n          ppp = pp * p;\n\n        // evaluate polynomials\n\n        var sP = -wP * ppp + 2 * wP * pp - wP * p;\n        var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n        var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n        var sN = wN * ppp - wN * pp;\n\n        // combine data linearly\n\n        for (var i = 0; i !== stride; ++i) {\n          result[i] =\n            sP * values[oP + i] +\n            s0 * values[o0 + i] +\n            s1 * values[o1 + i] +\n            sN * values[oN + i];\n        }\n\n        return result;\n      },\n    }\n  );\n\n  /**\n   * @author tschw\n   */\n\n  function LinearInterpolant(\n    parameterPositions,\n    sampleValues,\n    sampleSize,\n    resultBuffer\n  ) {\n    Interpolant.call(\n      this,\n      parameterPositions,\n      sampleValues,\n      sampleSize,\n      resultBuffer\n    );\n  }\n\n  LinearInterpolant.prototype = Object.assign(\n    Object.create(Interpolant.prototype),\n    {\n      constructor: LinearInterpolant,\n\n      interpolate_: function (i1, t0, t, t1) {\n        var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          offset1 = i1 * stride,\n          offset0 = offset1 - stride,\n          weight1 = (t - t0) / (t1 - t0),\n          weight0 = 1 - weight1;\n\n        for (var i = 0; i !== stride; ++i) {\n          result[i] =\n            values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n        }\n\n        return result;\n      },\n    }\n  );\n\n  /**\n   *\n   * Interpolant that evaluates to the sample value at the position preceeding\n   * the parameter.\n   *\n   * @author tschw\n   */\n\n  function DiscreteInterpolant(\n    parameterPositions,\n    sampleValues,\n    sampleSize,\n    resultBuffer\n  ) {\n    Interpolant.call(\n      this,\n      parameterPositions,\n      sampleValues,\n      sampleSize,\n      resultBuffer\n    );\n  }\n\n  DiscreteInterpolant.prototype = Object.assign(\n    Object.create(Interpolant.prototype),\n    {\n      constructor: DiscreteInterpolant,\n\n      interpolate_: function (i1 /*, t0, t, t1 */) {\n        return this.copySampleValue_(i1 - 1);\n      },\n    }\n  );\n\n  /**\n   *\n   * A timed sequence of keyframes for a specific property.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  function KeyframeTrack(name, times, values, interpolation) {\n    if (name === undefined)\n      throw new Error(\"THREE.KeyframeTrack: track name is undefined\");\n    if (times === undefined || times.length === 0)\n      throw new Error(\n        \"THREE.KeyframeTrack: no keyframes in track named \" + name\n      );\n\n    this.name = name;\n\n    this.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n    this.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\n    this.setInterpolation(interpolation || this.DefaultInterpolation);\n  }\n\n  // Static methods\n\n  Object.assign(KeyframeTrack, {\n    // Serialization (in static context, because of constructor invocation\n    // and automatic invocation of .toJSON):\n\n    toJSON: function (track) {\n      var trackType = track.constructor;\n\n      var json;\n\n      // derived classes can define a static toJSON method\n      if (trackType.toJSON !== undefined) {\n        json = trackType.toJSON(track);\n      } else {\n        // by default, we assume the data can be serialized as-is\n        json = {\n          name: track.name,\n          times: AnimationUtils.convertArray(track.times, Array),\n          values: AnimationUtils.convertArray(track.values, Array),\n        };\n\n        var interpolation = track.getInterpolation();\n\n        if (interpolation !== track.DefaultInterpolation) {\n          json.interpolation = interpolation;\n        }\n      }\n\n      json.type = track.ValueTypeName; // mandatory\n\n      return json;\n    },\n  });\n\n  Object.assign(KeyframeTrack.prototype, {\n    constructor: KeyframeTrack,\n\n    TimeBufferType: Float32Array,\n\n    ValueBufferType: Float32Array,\n\n    DefaultInterpolation: InterpolateLinear,\n\n    InterpolantFactoryMethodDiscrete: function (result) {\n      return new DiscreteInterpolant(\n        this.times,\n        this.values,\n        this.getValueSize(),\n        result\n      );\n    },\n\n    InterpolantFactoryMethodLinear: function (result) {\n      return new LinearInterpolant(\n        this.times,\n        this.values,\n        this.getValueSize(),\n        result\n      );\n    },\n\n    InterpolantFactoryMethodSmooth: function (result) {\n      return new CubicInterpolant(\n        this.times,\n        this.values,\n        this.getValueSize(),\n        result\n      );\n    },\n\n    setInterpolation: function (interpolation) {\n      var factoryMethod;\n\n      switch (interpolation) {\n        case InterpolateDiscrete:\n          factoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n          break;\n\n        case InterpolateLinear:\n          factoryMethod = this.InterpolantFactoryMethodLinear;\n\n          break;\n\n        case InterpolateSmooth:\n          factoryMethod = this.InterpolantFactoryMethodSmooth;\n\n          break;\n      }\n\n      if (factoryMethod === undefined) {\n        var message =\n          \"unsupported interpolation for \" +\n          this.ValueTypeName +\n          \" keyframe track named \" +\n          this.name;\n\n        if (this.createInterpolant === undefined) {\n          // fall back to default, unless the default itself is messed up\n          if (interpolation !== this.DefaultInterpolation) {\n            this.setInterpolation(this.DefaultInterpolation);\n          } else {\n            throw new Error(message); // fatal, in this case\n          }\n        }\n\n        console.warn(\"THREE.KeyframeTrack:\", message);\n        return this;\n      }\n\n      this.createInterpolant = factoryMethod;\n\n      return this;\n    },\n\n    getInterpolation: function () {\n      switch (this.createInterpolant) {\n        case this.InterpolantFactoryMethodDiscrete:\n          return InterpolateDiscrete;\n\n        case this.InterpolantFactoryMethodLinear:\n          return InterpolateLinear;\n\n        case this.InterpolantFactoryMethodSmooth:\n          return InterpolateSmooth;\n      }\n    },\n\n    getValueSize: function () {\n      return this.values.length / this.times.length;\n    },\n\n    // move all keyframes either forwards or backwards in time\n    shift: function (timeOffset) {\n      if (timeOffset !== 0.0) {\n        var times = this.times;\n\n        for (var i = 0, n = times.length; i !== n; ++i) {\n          times[i] += timeOffset;\n        }\n      }\n\n      return this;\n    },\n\n    // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n    scale: function (timeScale) {\n      if (timeScale !== 1.0) {\n        var times = this.times;\n\n        for (var i = 0, n = times.length; i !== n; ++i) {\n          times[i] *= timeScale;\n        }\n      }\n\n      return this;\n    },\n\n    // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n    trim: function (startTime, endTime) {\n      var times = this.times,\n        nKeys = times.length,\n        from = 0,\n        to = nKeys - 1;\n\n      while (from !== nKeys && times[from] < startTime) {\n        ++from;\n      }\n\n      while (to !== -1 && times[to] > endTime) {\n        --to;\n      }\n\n      ++to; // inclusive -> exclusive bound\n\n      if (from !== 0 || to !== nKeys) {\n        // empty tracks are forbidden, so keep at least one keyframe\n        if (from >= to) (to = Math.max(to, 1)), (from = to - 1);\n\n        var stride = this.getValueSize();\n        this.times = AnimationUtils.arraySlice(times, from, to);\n        this.values = AnimationUtils.arraySlice(\n          this.values,\n          from * stride,\n          to * stride\n        );\n      }\n\n      return this;\n    },\n\n    // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n    validate: function () {\n      var valid = true;\n\n      var valueSize = this.getValueSize();\n      if (valueSize - Math.floor(valueSize) !== 0) {\n        console.error(\n          \"THREE.KeyframeTrack: Invalid value size in track.\",\n          this\n        );\n        valid = false;\n      }\n\n      var times = this.times,\n        values = this.values,\n        nKeys = times.length;\n\n      if (nKeys === 0) {\n        console.error(\"THREE.KeyframeTrack: Track is empty.\", this);\n        valid = false;\n      }\n\n      var prevTime = null;\n\n      for (var i = 0; i !== nKeys; i++) {\n        var currTime = times[i];\n\n        if (typeof currTime === \"number\" && isNaN(currTime)) {\n          console.error(\n            \"THREE.KeyframeTrack: Time is not a valid number.\",\n            this,\n            i,\n            currTime\n          );\n          valid = false;\n          break;\n        }\n\n        if (prevTime !== null && prevTime > currTime) {\n          console.error(\n            \"THREE.KeyframeTrack: Out of order keys.\",\n            this,\n            i,\n            currTime,\n            prevTime\n          );\n          valid = false;\n          break;\n        }\n\n        prevTime = currTime;\n      }\n\n      if (values !== undefined) {\n        if (AnimationUtils.isTypedArray(values)) {\n          for (var i = 0, n = values.length; i !== n; ++i) {\n            var value = values[i];\n\n            if (isNaN(value)) {\n              console.error(\n                \"THREE.KeyframeTrack: Value is not a valid number.\",\n                this,\n                i,\n                value\n              );\n              valid = false;\n              break;\n            }\n          }\n        }\n      }\n\n      return valid;\n    },\n\n    // removes equivalent sequential keys as common in morph target sequences\n    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n    optimize: function () {\n      var times = this.times,\n        values = this.values,\n        stride = this.getValueSize(),\n        smoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n        writeIndex = 1,\n        lastIndex = times.length - 1;\n\n      for (var i = 1; i < lastIndex; ++i) {\n        var keep = false;\n\n        var time = times[i];\n        var timeNext = times[i + 1];\n\n        // remove adjacent keyframes scheduled at the same time\n\n        if (time !== timeNext && (i !== 1 || time !== time[0])) {\n          if (!smoothInterpolation) {\n            // remove unnecessary keyframes same as their neighbors\n\n            var offset = i * stride,\n              offsetP = offset - stride,\n              offsetN = offset + stride;\n\n            for (var j = 0; j !== stride; ++j) {\n              var value = values[offset + j];\n\n              if (\n                value !== values[offsetP + j] ||\n                value !== values[offsetN + j]\n              ) {\n                keep = true;\n                break;\n              }\n            }\n          } else {\n            keep = true;\n          }\n        }\n\n        // in-place compaction\n\n        if (keep) {\n          if (i !== writeIndex) {\n            times[writeIndex] = times[i];\n\n            var readOffset = i * stride,\n              writeOffset = writeIndex * stride;\n\n            for (var j = 0; j !== stride; ++j) {\n              values[writeOffset + j] = values[readOffset + j];\n            }\n          }\n\n          ++writeIndex;\n        }\n      }\n\n      // flush last keyframe (compaction looks ahead)\n\n      if (lastIndex > 0) {\n        times[writeIndex] = times[lastIndex];\n\n        for (\n          var readOffset = lastIndex * stride,\n            writeOffset = writeIndex * stride,\n            j = 0;\n          j !== stride;\n          ++j\n        ) {\n          values[writeOffset + j] = values[readOffset + j];\n        }\n\n        ++writeIndex;\n      }\n\n      if (writeIndex !== times.length) {\n        this.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n        this.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n      }\n\n      return this;\n    },\n  });\n\n  /**\n   *\n   * A Track of Boolean keyframe values.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  function BooleanKeyframeTrack(name, times, values) {\n    KeyframeTrack.call(this, name, times, values);\n  }\n\n  BooleanKeyframeTrack.prototype = Object.assign(\n    Object.create(KeyframeTrack.prototype),\n    {\n      constructor: BooleanKeyframeTrack,\n\n      ValueTypeName: \"bool\",\n      ValueBufferType: Array,\n\n      DefaultInterpolation: InterpolateDiscrete,\n\n      InterpolantFactoryMethodLinear: undefined,\n      InterpolantFactoryMethodSmooth: undefined,\n\n      // Note: Actually this track could have a optimized / compressed\n      // representation of a single value and a custom interpolant that\n      // computes \"firstValue ^ isOdd( index )\".\n    }\n  );\n\n  /**\n   *\n   * A Track of keyframe values that represent color.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  function ColorKeyframeTrack(name, times, values, interpolation) {\n    KeyframeTrack.call(this, name, times, values, interpolation);\n  }\n\n  ColorKeyframeTrack.prototype = Object.assign(\n    Object.create(KeyframeTrack.prototype),\n    {\n      constructor: ColorKeyframeTrack,\n\n      ValueTypeName: \"color\",\n\n      // ValueBufferType is inherited\n\n      // DefaultInterpolation is inherited\n\n      // Note: Very basic implementation and nothing special yet.\n      // However, this is the place for color space parameterization.\n    }\n  );\n\n  /**\n   *\n   * A Track of numeric keyframe values.\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  function NumberKeyframeTrack(name, times, values, interpolation) {\n    KeyframeTrack.call(this, name, times, values, interpolation);\n  }\n\n  NumberKeyframeTrack.prototype = Object.assign(\n    Object.create(KeyframeTrack.prototype),\n    {\n      constructor: NumberKeyframeTrack,\n\n      ValueTypeName: \"number\",\n\n      // ValueBufferType is inherited\n\n      // DefaultInterpolation is inherited\n    }\n  );\n\n  /**\n   * Spherical linear unit quaternion interpolant.\n   *\n   * @author tschw\n   */\n\n  function QuaternionLinearInterpolant(\n    parameterPositions,\n    sampleValues,\n    sampleSize,\n    resultBuffer\n  ) {\n    Interpolant.call(\n      this,\n      parameterPositions,\n      sampleValues,\n      sampleSize,\n      resultBuffer\n    );\n  }\n\n  QuaternionLinearInterpolant.prototype = Object.assign(\n    Object.create(Interpolant.prototype),\n    {\n      constructor: QuaternionLinearInterpolant,\n\n      interpolate_: function (i1, t0, t, t1) {\n        var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          offset = i1 * stride,\n          alpha = (t - t0) / (t1 - t0);\n\n        for (var end = offset + stride; offset !== end; offset += 4) {\n          Quaternion.slerpFlat(\n            result,\n            0,\n            values,\n            offset - stride,\n            values,\n            offset,\n            alpha\n          );\n        }\n\n        return result;\n      },\n    }\n  );\n\n  /**\n   *\n   * A Track of quaternion keyframe values.\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  function QuaternionKeyframeTrack(name, times, values, interpolation) {\n    KeyframeTrack.call(this, name, times, values, interpolation);\n  }\n\n  QuaternionKeyframeTrack.prototype = Object.assign(\n    Object.create(KeyframeTrack.prototype),\n    {\n      constructor: QuaternionKeyframeTrack,\n\n      ValueTypeName: \"quaternion\",\n\n      // ValueBufferType is inherited\n\n      DefaultInterpolation: InterpolateLinear,\n\n      InterpolantFactoryMethodLinear: function (result) {\n        return new QuaternionLinearInterpolant(\n          this.times,\n          this.values,\n          this.getValueSize(),\n          result\n        );\n      },\n\n      InterpolantFactoryMethodSmooth: undefined, // not yet implemented\n    }\n  );\n\n  /**\n   *\n   * A Track that interpolates Strings\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  function StringKeyframeTrack(name, times, values, interpolation) {\n    KeyframeTrack.call(this, name, times, values, interpolation);\n  }\n\n  StringKeyframeTrack.prototype = Object.assign(\n    Object.create(KeyframeTrack.prototype),\n    {\n      constructor: StringKeyframeTrack,\n\n      ValueTypeName: \"string\",\n      ValueBufferType: Array,\n\n      DefaultInterpolation: InterpolateDiscrete,\n\n      InterpolantFactoryMethodLinear: undefined,\n\n      InterpolantFactoryMethodSmooth: undefined,\n    }\n  );\n\n  /**\n   *\n   * A Track of vectored keyframe values.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  function VectorKeyframeTrack(name, times, values, interpolation) {\n    KeyframeTrack.call(this, name, times, values, interpolation);\n  }\n\n  VectorKeyframeTrack.prototype = Object.assign(\n    Object.create(KeyframeTrack.prototype),\n    {\n      constructor: VectorKeyframeTrack,\n\n      ValueTypeName: \"vector\",\n\n      // ValueBufferType is inherited\n\n      // DefaultInterpolation is inherited\n    }\n  );\n\n  /**\n   *\n   * Reusable set of Tracks that represent an animation.\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   */\n\n  function AnimationClip(name, duration, tracks) {\n    this.name = name;\n    this.tracks = tracks;\n    this.duration = duration !== undefined ? duration : -1;\n\n    this.uuid = _Math.generateUUID();\n\n    // this means it should figure out its duration by scanning the tracks\n    if (this.duration < 0) {\n      this.resetDuration();\n    }\n  }\n\n  function getTrackTypeForValueTypeName(typeName) {\n    switch (typeName.toLowerCase()) {\n      case \"scalar\":\n      case \"double\":\n      case \"float\":\n      case \"number\":\n      case \"integer\":\n        return NumberKeyframeTrack;\n\n      case \"vector\":\n      case \"vector2\":\n      case \"vector3\":\n      case \"vector4\":\n        return VectorKeyframeTrack;\n\n      case \"color\":\n        return ColorKeyframeTrack;\n\n      case \"quaternion\":\n        return QuaternionKeyframeTrack;\n\n      case \"bool\":\n      case \"boolean\":\n        return BooleanKeyframeTrack;\n\n      case \"string\":\n        return StringKeyframeTrack;\n    }\n\n    throw new Error(\"THREE.KeyframeTrack: Unsupported typeName: \" + typeName);\n  }\n\n  function parseKeyframeTrack(json) {\n    if (json.type === undefined) {\n      throw new Error(\n        \"THREE.KeyframeTrack: track type undefined, can not parse\"\n      );\n    }\n\n    var trackType = getTrackTypeForValueTypeName(json.type);\n\n    if (json.times === undefined) {\n      var times = [],\n        values = [];\n\n      AnimationUtils.flattenJSON(json.keys, times, values, \"value\");\n\n      json.times = times;\n      json.values = values;\n    }\n\n    // derived classes can define a static parse method\n    if (trackType.parse !== undefined) {\n      return trackType.parse(json);\n    } else {\n      // by default, we assume a constructor compatible with the base\n      return new trackType(\n        json.name,\n        json.times,\n        json.values,\n        json.interpolation\n      );\n    }\n  }\n\n  Object.assign(AnimationClip, {\n    parse: function (json) {\n      var tracks = [],\n        jsonTracks = json.tracks,\n        frameTime = 1.0 / (json.fps || 1.0);\n\n      for (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n        tracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n      }\n\n      return new AnimationClip(json.name, json.duration, tracks);\n    },\n\n    toJSON: function (clip) {\n      var tracks = [],\n        clipTracks = clip.tracks;\n\n      var json = {\n        name: clip.name,\n        duration: clip.duration,\n        tracks: tracks,\n        uuid: clip.uuid,\n      };\n\n      for (var i = 0, n = clipTracks.length; i !== n; ++i) {\n        tracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n      }\n\n      return json;\n    },\n\n    CreateFromMorphTargetSequence: function (\n      name,\n      morphTargetSequence,\n      fps,\n      noLoop\n    ) {\n      var numMorphTargets = morphTargetSequence.length;\n      var tracks = [];\n\n      for (var i = 0; i < numMorphTargets; i++) {\n        var times = [];\n        var values = [];\n\n        times.push(\n          (i + numMorphTargets - 1) % numMorphTargets,\n          i,\n          (i + 1) % numMorphTargets\n        );\n\n        values.push(0, 1, 0);\n\n        var order = AnimationUtils.getKeyframeOrder(times);\n        times = AnimationUtils.sortedArray(times, 1, order);\n        values = AnimationUtils.sortedArray(values, 1, order);\n\n        // if there is a key at the first frame, duplicate it as the\n        // last frame as well for perfect loop.\n        if (!noLoop && times[0] === 0) {\n          times.push(numMorphTargets);\n          values.push(values[0]);\n        }\n\n        tracks.push(\n          new NumberKeyframeTrack(\n            \".morphTargetInfluences[\" + morphTargetSequence[i].name + \"]\",\n            times,\n            values\n          ).scale(1.0 / fps)\n        );\n      }\n\n      return new AnimationClip(name, -1, tracks);\n    },\n\n    findByName: function (objectOrClipArray, name) {\n      var clipArray = objectOrClipArray;\n\n      if (!Array.isArray(objectOrClipArray)) {\n        var o = objectOrClipArray;\n        clipArray = (o.geometry && o.geometry.animations) || o.animations;\n      }\n\n      for (var i = 0; i < clipArray.length; i++) {\n        if (clipArray[i].name === name) {\n          return clipArray[i];\n        }\n      }\n\n      return null;\n    },\n\n    CreateClipsFromMorphTargetSequences: function (morphTargets, fps, noLoop) {\n      var animationToMorphTargets = {};\n\n      // tested with https://regex101.com/ on trick sequences\n      // such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n      var pattern = /^([\\w-]*?)([\\d]+)$/;\n\n      // sort morph target names into animation groups based\n      // patterns like Walk_001, Walk_002, Run_001, Run_002\n      for (var i = 0, il = morphTargets.length; i < il; i++) {\n        var morphTarget = morphTargets[i];\n        var parts = morphTarget.name.match(pattern);\n\n        if (parts && parts.length > 1) {\n          var name = parts[1];\n\n          var animationMorphTargets = animationToMorphTargets[name];\n          if (!animationMorphTargets) {\n            animationToMorphTargets[name] = animationMorphTargets = [];\n          }\n\n          animationMorphTargets.push(morphTarget);\n        }\n      }\n\n      var clips = [];\n\n      for (var name in animationToMorphTargets) {\n        clips.push(\n          AnimationClip.CreateFromMorphTargetSequence(\n            name,\n            animationToMorphTargets[name],\n            fps,\n            noLoop\n          )\n        );\n      }\n\n      return clips;\n    },\n\n    // parse the animation.hierarchy format\n    parseAnimation: function (animation, bones) {\n      if (!animation) {\n        console.error(\"THREE.AnimationClip: No animation in JSONLoader data.\");\n        return null;\n      }\n\n      var addNonemptyTrack = function (\n        trackType,\n        trackName,\n        animationKeys,\n        propertyName,\n        destTracks\n      ) {\n        // only return track if there are actually keys.\n        if (animationKeys.length !== 0) {\n          var times = [];\n          var values = [];\n\n          AnimationUtils.flattenJSON(\n            animationKeys,\n            times,\n            values,\n            propertyName\n          );\n\n          // empty keys are filtered out, so check again\n          if (times.length !== 0) {\n            destTracks.push(new trackType(trackName, times, values));\n          }\n        }\n      };\n\n      var tracks = [];\n\n      var clipName = animation.name || \"default\";\n      // automatic length determination in AnimationClip.\n      var duration = animation.length || -1;\n      var fps = animation.fps || 30;\n\n      var hierarchyTracks = animation.hierarchy || [];\n\n      for (var h = 0; h < hierarchyTracks.length; h++) {\n        var animationKeys = hierarchyTracks[h].keys;\n\n        // skip empty tracks\n        if (!animationKeys || animationKeys.length === 0) continue;\n\n        // process morph targets\n        if (animationKeys[0].morphTargets) {\n          // figure out all morph targets used in this track\n          var morphTargetNames = {};\n\n          for (var k = 0; k < animationKeys.length; k++) {\n            if (animationKeys[k].morphTargets) {\n              for (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n                morphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n              }\n            }\n          }\n\n          // create a track for each morph target with all zero\n          // morphTargetInfluences except for the keys in which\n          // the morphTarget is named.\n          for (var morphTargetName in morphTargetNames) {\n            var times = [];\n            var values = [];\n\n            for (var m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n              var animationKey = animationKeys[k];\n\n              times.push(animationKey.time);\n              values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n            }\n\n            tracks.push(\n              new NumberKeyframeTrack(\n                \".morphTargetInfluence[\" + morphTargetName + \"]\",\n                times,\n                values\n              )\n            );\n          }\n\n          duration = morphTargetNames.length * (fps || 1.0);\n        } else {\n          // ...assume skeletal animation\n\n          var boneName = \".bones[\" + bones[h].name + \"]\";\n\n          addNonemptyTrack(\n            VectorKeyframeTrack,\n            boneName + \".position\",\n            animationKeys,\n            \"pos\",\n            tracks\n          );\n\n          addNonemptyTrack(\n            QuaternionKeyframeTrack,\n            boneName + \".quaternion\",\n            animationKeys,\n            \"rot\",\n            tracks\n          );\n\n          addNonemptyTrack(\n            VectorKeyframeTrack,\n            boneName + \".scale\",\n            animationKeys,\n            \"scl\",\n            tracks\n          );\n        }\n      }\n\n      if (tracks.length === 0) {\n        return null;\n      }\n\n      var clip = new AnimationClip(clipName, duration, tracks);\n\n      return clip;\n    },\n  });\n\n  Object.assign(AnimationClip.prototype, {\n    resetDuration: function () {\n      var tracks = this.tracks,\n        duration = 0;\n\n      for (var i = 0, n = tracks.length; i !== n; ++i) {\n        var track = this.tracks[i];\n\n        duration = Math.max(duration, track.times[track.times.length - 1]);\n      }\n\n      this.duration = duration;\n\n      return this;\n    },\n\n    trim: function () {\n      for (var i = 0; i < this.tracks.length; i++) {\n        this.tracks[i].trim(0, this.duration);\n      }\n\n      return this;\n    },\n\n    validate: function () {\n      var valid = true;\n\n      for (var i = 0; i < this.tracks.length; i++) {\n        valid = valid && this.tracks[i].validate();\n      }\n\n      return valid;\n    },\n\n    optimize: function () {\n      for (var i = 0; i < this.tracks.length; i++) {\n        this.tracks[i].optimize();\n      }\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function MaterialLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n    this.textures = {};\n  }\n\n  Object.assign(MaterialLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n\n      var loader = new FileLoader(scope.manager);\n      loader.load(\n        url,\n        function (text) {\n          onLoad(scope.parse(JSON.parse(text)));\n        },\n        onProgress,\n        onError\n      );\n    },\n\n    setTextures: function (value) {\n      this.textures = value;\n    },\n\n    parse: function (json) {\n      var textures = this.textures;\n\n      function getTexture(name) {\n        if (textures[name] === undefined) {\n          console.warn(\"THREE.MaterialLoader: Undefined texture\", name);\n        }\n\n        return textures[name];\n      }\n\n      var material = new Materials[json.type]();\n\n      if (json.uuid !== undefined) material.uuid = json.uuid;\n      if (json.name !== undefined) material.name = json.name;\n      if (json.color !== undefined) material.color.setHex(json.color);\n      if (json.roughness !== undefined) material.roughness = json.roughness;\n      if (json.metalness !== undefined) material.metalness = json.metalness;\n      if (json.emissive !== undefined) material.emissive.setHex(json.emissive);\n      if (json.specular !== undefined) material.specular.setHex(json.specular);\n      if (json.shininess !== undefined) material.shininess = json.shininess;\n      if (json.clearCoat !== undefined) material.clearCoat = json.clearCoat;\n      if (json.clearCoatRoughness !== undefined)\n        material.clearCoatRoughness = json.clearCoatRoughness;\n      if (json.uniforms !== undefined) material.uniforms = json.uniforms;\n      if (json.vertexShader !== undefined)\n        material.vertexShader = json.vertexShader;\n      if (json.fragmentShader !== undefined)\n        material.fragmentShader = json.fragmentShader;\n      if (json.vertexColors !== undefined)\n        material.vertexColors = json.vertexColors;\n      if (json.fog !== undefined) material.fog = json.fog;\n      if (json.flatShading !== undefined)\n        material.flatShading = json.flatShading;\n      if (json.blending !== undefined) material.blending = json.blending;\n      if (json.side !== undefined) material.side = json.side;\n      if (json.opacity !== undefined) material.opacity = json.opacity;\n      if (json.transparent !== undefined)\n        material.transparent = json.transparent;\n      if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n      if (json.depthTest !== undefined) material.depthTest = json.depthTest;\n      if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n      if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n      if (json.wireframe !== undefined) material.wireframe = json.wireframe;\n      if (json.wireframeLinewidth !== undefined)\n        material.wireframeLinewidth = json.wireframeLinewidth;\n      if (json.wireframeLinecap !== undefined)\n        material.wireframeLinecap = json.wireframeLinecap;\n      if (json.wireframeLinejoin !== undefined)\n        material.wireframeLinejoin = json.wireframeLinejoin;\n\n      if (json.rotation !== undefined) material.rotation = json.rotation;\n\n      if (json.linewidth !== 1) material.linewidth = json.linewidth;\n      if (json.dashSize !== undefined) material.dashSize = json.dashSize;\n      if (json.gapSize !== undefined) material.gapSize = json.gapSize;\n      if (json.scale !== undefined) material.scale = json.scale;\n\n      if (json.polygonOffset !== undefined)\n        material.polygonOffset = json.polygonOffset;\n      if (json.polygonOffsetFactor !== undefined)\n        material.polygonOffsetFactor = json.polygonOffsetFactor;\n      if (json.polygonOffsetUnits !== undefined)\n        material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n      if (json.skinning !== undefined) material.skinning = json.skinning;\n      if (json.morphTargets !== undefined)\n        material.morphTargets = json.morphTargets;\n      if (json.dithering !== undefined) material.dithering = json.dithering;\n\n      if (json.visible !== undefined) material.visible = json.visible;\n      if (json.userData !== undefined) material.userData = json.userData;\n\n      // Deprecated\n\n      if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n      // for PointsMaterial\n\n      if (json.size !== undefined) material.size = json.size;\n      if (json.sizeAttenuation !== undefined)\n        material.sizeAttenuation = json.sizeAttenuation;\n\n      // maps\n\n      if (json.map !== undefined) material.map = getTexture(json.map);\n\n      if (json.alphaMap !== undefined) {\n        material.alphaMap = getTexture(json.alphaMap);\n        material.transparent = true;\n      }\n\n      if (json.bumpMap !== undefined)\n        material.bumpMap = getTexture(json.bumpMap);\n      if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\n      if (json.normalMap !== undefined)\n        material.normalMap = getTexture(json.normalMap);\n      if (json.normalMapType !== undefined)\n        material.normalMapType = json.normalMapType;\n      if (json.normalScale !== undefined) {\n        var normalScale = json.normalScale;\n\n        if (Array.isArray(normalScale) === false) {\n          // Blender exporter used to export a scalar. See #7459\n\n          normalScale = [normalScale, normalScale];\n        }\n\n        material.normalScale = new Vector2().fromArray(normalScale);\n      }\n\n      if (json.displacementMap !== undefined)\n        material.displacementMap = getTexture(json.displacementMap);\n      if (json.displacementScale !== undefined)\n        material.displacementScale = json.displacementScale;\n      if (json.displacementBias !== undefined)\n        material.displacementBias = json.displacementBias;\n\n      if (json.roughnessMap !== undefined)\n        material.roughnessMap = getTexture(json.roughnessMap);\n      if (json.metalnessMap !== undefined)\n        material.metalnessMap = getTexture(json.metalnessMap);\n\n      if (json.emissiveMap !== undefined)\n        material.emissiveMap = getTexture(json.emissiveMap);\n      if (json.emissiveIntensity !== undefined)\n        material.emissiveIntensity = json.emissiveIntensity;\n\n      if (json.specularMap !== undefined)\n        material.specularMap = getTexture(json.specularMap);\n\n      if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\n      if (json.reflectivity !== undefined)\n        material.reflectivity = json.reflectivity;\n\n      if (json.lightMap !== undefined)\n        material.lightMap = getTexture(json.lightMap);\n      if (json.lightMapIntensity !== undefined)\n        material.lightMapIntensity = json.lightMapIntensity;\n\n      if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n      if (json.aoMapIntensity !== undefined)\n        material.aoMapIntensity = json.aoMapIntensity;\n\n      if (json.gradientMap !== undefined)\n        material.gradientMap = getTexture(json.gradientMap);\n\n      return material;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function BufferGeometryLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n  }\n\n  Object.assign(BufferGeometryLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n\n      var loader = new FileLoader(scope.manager);\n      loader.load(\n        url,\n        function (text) {\n          onLoad(scope.parse(JSON.parse(text)));\n        },\n        onProgress,\n        onError\n      );\n    },\n\n    parse: function (json) {\n      var geometry = new BufferGeometry();\n\n      var index = json.data.index;\n\n      if (index !== undefined) {\n        var typedArray = new TYPED_ARRAYS[index.type](index.array);\n        geometry.setIndex(new BufferAttribute(typedArray, 1));\n      }\n\n      var attributes = json.data.attributes;\n\n      for (var key in attributes) {\n        var attribute = attributes[key];\n        var typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);\n\n        geometry.addAttribute(\n          key,\n          new BufferAttribute(\n            typedArray,\n            attribute.itemSize,\n            attribute.normalized\n          )\n        );\n      }\n\n      var groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n      if (groups !== undefined) {\n        for (var i = 0, n = groups.length; i !== n; ++i) {\n          var group = groups[i];\n\n          geometry.addGroup(group.start, group.count, group.materialIndex);\n        }\n      }\n\n      var boundingSphere = json.data.boundingSphere;\n\n      if (boundingSphere !== undefined) {\n        var center = new Vector3();\n\n        if (boundingSphere.center !== undefined) {\n          center.fromArray(boundingSphere.center);\n        }\n\n        geometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n      }\n\n      return geometry;\n    },\n  });\n\n  var TYPED_ARRAYS = {\n    Int8Array: Int8Array,\n    Uint8Array: Uint8Array,\n    // Workaround for IE11 pre KB2929437. See #11440\n    Uint8ClampedArray:\n      typeof Uint8ClampedArray !== \"undefined\" ? Uint8ClampedArray : Uint8Array,\n    Int16Array: Int16Array,\n    Uint16Array: Uint16Array,\n    Int32Array: Int32Array,\n    Uint32Array: Uint32Array,\n    Float32Array: Float32Array,\n    Float64Array: Float64Array,\n  };\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function Loader() {}\n\n  Loader.Handlers = {\n    handlers: [],\n\n    add: function (regex, loader) {\n      this.handlers.push(regex, loader);\n    },\n\n    get: function (file) {\n      var handlers = this.handlers;\n\n      for (var i = 0, l = handlers.length; i < l; i += 2) {\n        var regex = handlers[i];\n        var loader = handlers[i + 1];\n\n        if (regex.test(file)) {\n          return loader;\n        }\n      }\n\n      return null;\n    },\n  };\n\n  Object.assign(Loader.prototype, {\n    crossOrigin: \"anonymous\",\n\n    onLoadStart: function () {},\n\n    onLoadProgress: function () {},\n\n    onLoadComplete: function () {},\n\n    initMaterials: function (materials, texturePath, crossOrigin) {\n      var array = [];\n\n      for (var i = 0; i < materials.length; ++i) {\n        array[i] = this.createMaterial(materials[i], texturePath, crossOrigin);\n      }\n\n      return array;\n    },\n\n    createMaterial: (function () {\n      var BlendingMode = {\n        NoBlending: NoBlending,\n        NormalBlending: NormalBlending,\n        AdditiveBlending: AdditiveBlending,\n        SubtractiveBlending: SubtractiveBlending,\n        MultiplyBlending: MultiplyBlending,\n        CustomBlending: CustomBlending,\n      };\n\n      var color = new Color();\n      var textureLoader = new TextureLoader();\n      var materialLoader = new MaterialLoader();\n\n      return function createMaterial(m, texturePath, crossOrigin) {\n        // convert from old material format\n\n        var textures = {};\n\n        function loadTexture(path, repeat, offset, wrap, anisotropy) {\n          var fullPath = texturePath + path;\n          var loader = Loader.Handlers.get(fullPath);\n\n          var texture;\n\n          if (loader !== null) {\n            texture = loader.load(fullPath);\n          } else {\n            textureLoader.setCrossOrigin(crossOrigin);\n            texture = textureLoader.load(fullPath);\n          }\n\n          if (repeat !== undefined) {\n            texture.repeat.fromArray(repeat);\n\n            if (repeat[0] !== 1) texture.wrapS = RepeatWrapping;\n            if (repeat[1] !== 1) texture.wrapT = RepeatWrapping;\n          }\n\n          if (offset !== undefined) {\n            texture.offset.fromArray(offset);\n          }\n\n          if (wrap !== undefined) {\n            if (wrap[0] === \"repeat\") texture.wrapS = RepeatWrapping;\n            if (wrap[0] === \"mirror\") texture.wrapS = MirroredRepeatWrapping;\n\n            if (wrap[1] === \"repeat\") texture.wrapT = RepeatWrapping;\n            if (wrap[1] === \"mirror\") texture.wrapT = MirroredRepeatWrapping;\n          }\n\n          if (anisotropy !== undefined) {\n            texture.anisotropy = anisotropy;\n          }\n\n          var uuid = _Math.generateUUID();\n\n          textures[uuid] = texture;\n\n          return uuid;\n        }\n\n        //\n\n        var json = {\n          uuid: _Math.generateUUID(),\n          type: \"MeshLambertMaterial\",\n        };\n\n        for (var name in m) {\n          var value = m[name];\n\n          switch (name) {\n            case \"DbgColor\":\n            case \"DbgIndex\":\n            case \"opticalDensity\":\n            case \"illumination\":\n              break;\n            case \"DbgName\":\n              json.name = value;\n              break;\n            case \"blending\":\n              json.blending = BlendingMode[value];\n              break;\n            case \"colorAmbient\":\n            case \"mapAmbient\":\n              console.warn(\n                \"THREE.Loader.createMaterial:\",\n                name,\n                \"is no longer supported.\"\n              );\n              break;\n            case \"colorDiffuse\":\n              json.color = color.fromArray(value).getHex();\n              break;\n            case \"colorSpecular\":\n              json.specular = color.fromArray(value).getHex();\n              break;\n            case \"colorEmissive\":\n              json.emissive = color.fromArray(value).getHex();\n              break;\n            case \"specularCoef\":\n              json.shininess = value;\n              break;\n            case \"shading\":\n              if (value.toLowerCase() === \"basic\")\n                json.type = \"MeshBasicMaterial\";\n              if (value.toLowerCase() === \"phong\")\n                json.type = \"MeshPhongMaterial\";\n              if (value.toLowerCase() === \"standard\")\n                json.type = \"MeshStandardMaterial\";\n              break;\n            case \"mapDiffuse\":\n              json.map = loadTexture(\n                value,\n                m.mapDiffuseRepeat,\n                m.mapDiffuseOffset,\n                m.mapDiffuseWrap,\n                m.mapDiffuseAnisotropy\n              );\n              break;\n            case \"mapDiffuseRepeat\":\n            case \"mapDiffuseOffset\":\n            case \"mapDiffuseWrap\":\n            case \"mapDiffuseAnisotropy\":\n              break;\n            case \"mapEmissive\":\n              json.emissiveMap = loadTexture(\n                value,\n                m.mapEmissiveRepeat,\n                m.mapEmissiveOffset,\n                m.mapEmissiveWrap,\n                m.mapEmissiveAnisotropy\n              );\n              break;\n            case \"mapEmissiveRepeat\":\n            case \"mapEmissiveOffset\":\n            case \"mapEmissiveWrap\":\n            case \"mapEmissiveAnisotropy\":\n              break;\n            case \"mapLight\":\n              json.lightMap = loadTexture(\n                value,\n                m.mapLightRepeat,\n                m.mapLightOffset,\n                m.mapLightWrap,\n                m.mapLightAnisotropy\n              );\n              break;\n            case \"mapLightRepeat\":\n            case \"mapLightOffset\":\n            case \"mapLightWrap\":\n            case \"mapLightAnisotropy\":\n              break;\n            case \"mapAO\":\n              json.aoMap = loadTexture(\n                value,\n                m.mapAORepeat,\n                m.mapAOOffset,\n                m.mapAOWrap,\n                m.mapAOAnisotropy\n              );\n              break;\n            case \"mapAORepeat\":\n            case \"mapAOOffset\":\n            case \"mapAOWrap\":\n            case \"mapAOAnisotropy\":\n              break;\n            case \"mapBump\":\n              json.bumpMap = loadTexture(\n                value,\n                m.mapBumpRepeat,\n                m.mapBumpOffset,\n                m.mapBumpWrap,\n                m.mapBumpAnisotropy\n              );\n              break;\n            case \"mapBumpScale\":\n              json.bumpScale = value;\n              break;\n            case \"mapBumpRepeat\":\n            case \"mapBumpOffset\":\n            case \"mapBumpWrap\":\n            case \"mapBumpAnisotropy\":\n              break;\n            case \"mapNormal\":\n              json.normalMap = loadTexture(\n                value,\n                m.mapNormalRepeat,\n                m.mapNormalOffset,\n                m.mapNormalWrap,\n                m.mapNormalAnisotropy\n              );\n              break;\n            case \"mapNormalFactor\":\n              json.normalScale = value;\n              break;\n            case \"mapNormalRepeat\":\n            case \"mapNormalOffset\":\n            case \"mapNormalWrap\":\n            case \"mapNormalAnisotropy\":\n              break;\n            case \"mapSpecular\":\n              json.specularMap = loadTexture(\n                value,\n                m.mapSpecularRepeat,\n                m.mapSpecularOffset,\n                m.mapSpecularWrap,\n                m.mapSpecularAnisotropy\n              );\n              break;\n            case \"mapSpecularRepeat\":\n            case \"mapSpecularOffset\":\n            case \"mapSpecularWrap\":\n            case \"mapSpecularAnisotropy\":\n              break;\n            case \"mapMetalness\":\n              json.metalnessMap = loadTexture(\n                value,\n                m.mapMetalnessRepeat,\n                m.mapMetalnessOffset,\n                m.mapMetalnessWrap,\n                m.mapMetalnessAnisotropy\n              );\n              break;\n            case \"mapMetalnessRepeat\":\n            case \"mapMetalnessOffset\":\n            case \"mapMetalnessWrap\":\n            case \"mapMetalnessAnisotropy\":\n              break;\n            case \"mapRoughness\":\n              json.roughnessMap = loadTexture(\n                value,\n                m.mapRoughnessRepeat,\n                m.mapRoughnessOffset,\n                m.mapRoughnessWrap,\n                m.mapRoughnessAnisotropy\n              );\n              break;\n            case \"mapRoughnessRepeat\":\n            case \"mapRoughnessOffset\":\n            case \"mapRoughnessWrap\":\n            case \"mapRoughnessAnisotropy\":\n              break;\n            case \"mapAlpha\":\n              json.alphaMap = loadTexture(\n                value,\n                m.mapAlphaRepeat,\n                m.mapAlphaOffset,\n                m.mapAlphaWrap,\n                m.mapAlphaAnisotropy\n              );\n              break;\n            case \"mapAlphaRepeat\":\n            case \"mapAlphaOffset\":\n            case \"mapAlphaWrap\":\n            case \"mapAlphaAnisotropy\":\n              break;\n            case \"flipSided\":\n              json.side = BackSide;\n              break;\n            case \"doubleSided\":\n              json.side = DoubleSide;\n              break;\n            case \"transparency\":\n              console.warn(\n                \"THREE.Loader.createMaterial: transparency has been renamed to opacity\"\n              );\n              json.opacity = value;\n              break;\n            case \"depthTest\":\n            case \"depthWrite\":\n            case \"colorWrite\":\n            case \"opacity\":\n            case \"reflectivity\":\n            case \"transparent\":\n            case \"visible\":\n            case \"wireframe\":\n              json[name] = value;\n              break;\n            case \"vertexColors\":\n              if (value === true) json.vertexColors = VertexColors;\n              if (value === \"face\") json.vertexColors = FaceColors;\n              break;\n            default:\n              console.error(\n                \"THREE.Loader.createMaterial: Unsupported\",\n                name,\n                value\n              );\n              break;\n          }\n        }\n\n        if (json.type === \"MeshBasicMaterial\") delete json.emissive;\n        if (json.type !== \"MeshPhongMaterial\") delete json.specular;\n\n        if (json.opacity < 1) json.transparent = true;\n\n        materialLoader.setTextures(textures);\n\n        return materialLoader.parse(json);\n      };\n    })(),\n  });\n\n  /**\n   * @author Don McCurdy / https://www.donmccurdy.com\n   */\n\n  var LoaderUtils = {\n    decodeText: function (array) {\n      if (typeof TextDecoder !== \"undefined\") {\n        return new TextDecoder().decode(array);\n      }\n\n      // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n      // throws a \"maximum call stack size exceeded\" error for large arrays.\n\n      var s = \"\";\n\n      for (var i = 0, il = array.length; i < il; i++) {\n        // Implicitly assumes little-endian.\n        s += String.fromCharCode(array[i]);\n      }\n\n      // Merges multi-byte utf-8 characters.\n      return decodeURIComponent(escape(s));\n    },\n\n    extractUrlBase: function (url) {\n      var index = url.lastIndexOf(\"/\");\n\n      if (index === -1) return \"./\";\n\n      return url.substr(0, index + 1);\n    },\n  };\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function JSONLoader(manager) {\n    if (typeof manager === \"boolean\") {\n      console.warn(\n        \"THREE.JSONLoader: showStatus parameter has been removed from constructor.\"\n      );\n      manager = undefined;\n    }\n\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\n    this.withCredentials = false;\n  }\n\n  Object.assign(JSONLoader.prototype, {\n    crossOrigin: \"anonymous\",\n\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n\n      var texturePath =\n        this.texturePath && typeof this.texturePath === \"string\"\n          ? this.texturePath\n          : LoaderUtils.extractUrlBase(url);\n\n      var loader = new FileLoader(this.manager);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(\n        url,\n        function (text) {\n          var json = JSON.parse(text);\n          var metadata = json.metadata;\n\n          if (metadata !== undefined) {\n            var type = metadata.type;\n\n            if (type !== undefined) {\n              if (type.toLowerCase() === \"object\") {\n                console.error(\n                  \"THREE.JSONLoader: \" +\n                    url +\n                    \" should be loaded with THREE.ObjectLoader instead.\"\n                );\n                return;\n              }\n            }\n          }\n\n          var object = scope.parse(json, texturePath);\n          onLoad(object.geometry, object.materials);\n        },\n        onProgress,\n        onError\n      );\n    },\n\n    setCrossOrigin: function (value) {\n      this.crossOrigin = value;\n      return this;\n    },\n\n    setTexturePath: function (value) {\n      this.texturePath = value;\n      return this;\n    },\n\n    parse: (function () {\n      function parseModel(json, geometry) {\n        function isBitSet(value, position) {\n          return value & (1 << position);\n        }\n\n        var i,\n          j,\n          fi,\n          offset,\n          zLength,\n          colorIndex,\n          normalIndex,\n          uvIndex,\n          materialIndex,\n          type,\n          isQuad,\n          hasMaterial,\n          hasFaceVertexUv,\n          hasFaceNormal,\n          hasFaceVertexNormal,\n          hasFaceColor,\n          hasFaceVertexColor,\n          vertex,\n          face,\n          faceA,\n          faceB,\n          hex,\n          normal,\n          uvLayer,\n          uv,\n          u,\n          v,\n          faces = json.faces,\n          vertices = json.vertices,\n          normals = json.normals,\n          colors = json.colors,\n          scale = json.scale,\n          nUvLayers = 0;\n\n        if (json.uvs !== undefined) {\n          // disregard empty arrays\n\n          for (i = 0; i < json.uvs.length; i++) {\n            if (json.uvs[i].length) nUvLayers++;\n          }\n\n          for (i = 0; i < nUvLayers; i++) {\n            geometry.faceVertexUvs[i] = [];\n          }\n        }\n\n        offset = 0;\n        zLength = vertices.length;\n\n        while (offset < zLength) {\n          vertex = new Vector3();\n\n          vertex.x = vertices[offset++] * scale;\n          vertex.y = vertices[offset++] * scale;\n          vertex.z = vertices[offset++] * scale;\n\n          geometry.vertices.push(vertex);\n        }\n\n        offset = 0;\n        zLength = faces.length;\n\n        while (offset < zLength) {\n          type = faces[offset++];\n\n          isQuad = isBitSet(type, 0);\n          hasMaterial = isBitSet(type, 1);\n          hasFaceVertexUv = isBitSet(type, 3);\n          hasFaceNormal = isBitSet(type, 4);\n          hasFaceVertexNormal = isBitSet(type, 5);\n          hasFaceColor = isBitSet(type, 6);\n          hasFaceVertexColor = isBitSet(type, 7);\n\n          // console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n          if (isQuad) {\n            faceA = new Face3();\n            faceA.a = faces[offset];\n            faceA.b = faces[offset + 1];\n            faceA.c = faces[offset + 3];\n\n            faceB = new Face3();\n            faceB.a = faces[offset + 1];\n            faceB.b = faces[offset + 2];\n            faceB.c = faces[offset + 3];\n\n            offset += 4;\n\n            if (hasMaterial) {\n              materialIndex = faces[offset++];\n              faceA.materialIndex = materialIndex;\n              faceB.materialIndex = materialIndex;\n            }\n\n            // to get face <=> uv index correspondence\n\n            fi = geometry.faces.length;\n\n            if (hasFaceVertexUv) {\n              for (i = 0; i < nUvLayers; i++) {\n                uvLayer = json.uvs[i];\n\n                geometry.faceVertexUvs[i][fi] = [];\n                geometry.faceVertexUvs[i][fi + 1] = [];\n\n                for (j = 0; j < 4; j++) {\n                  uvIndex = faces[offset++];\n\n                  u = uvLayer[uvIndex * 2];\n                  v = uvLayer[uvIndex * 2 + 1];\n\n                  uv = new Vector2(u, v);\n\n                  if (j !== 2) geometry.faceVertexUvs[i][fi].push(uv);\n                  if (j !== 0) geometry.faceVertexUvs[i][fi + 1].push(uv);\n                }\n              }\n            }\n\n            if (hasFaceNormal) {\n              normalIndex = faces[offset++] * 3;\n\n              faceA.normal.set(\n                normals[normalIndex++],\n                normals[normalIndex++],\n                normals[normalIndex]\n              );\n\n              faceB.normal.copy(faceA.normal);\n            }\n\n            if (hasFaceVertexNormal) {\n              for (i = 0; i < 4; i++) {\n                normalIndex = faces[offset++] * 3;\n\n                normal = new Vector3(\n                  normals[normalIndex++],\n                  normals[normalIndex++],\n                  normals[normalIndex]\n                );\n\n                if (i !== 2) faceA.vertexNormals.push(normal);\n                if (i !== 0) faceB.vertexNormals.push(normal);\n              }\n            }\n\n            if (hasFaceColor) {\n              colorIndex = faces[offset++];\n              hex = colors[colorIndex];\n\n              faceA.color.setHex(hex);\n              faceB.color.setHex(hex);\n            }\n\n            if (hasFaceVertexColor) {\n              for (i = 0; i < 4; i++) {\n                colorIndex = faces[offset++];\n                hex = colors[colorIndex];\n\n                if (i !== 2) faceA.vertexColors.push(new Color(hex));\n                if (i !== 0) faceB.vertexColors.push(new Color(hex));\n              }\n            }\n\n            geometry.faces.push(faceA);\n            geometry.faces.push(faceB);\n          } else {\n            face = new Face3();\n            face.a = faces[offset++];\n            face.b = faces[offset++];\n            face.c = faces[offset++];\n\n            if (hasMaterial) {\n              materialIndex = faces[offset++];\n              face.materialIndex = materialIndex;\n            }\n\n            // to get face <=> uv index correspondence\n\n            fi = geometry.faces.length;\n\n            if (hasFaceVertexUv) {\n              for (i = 0; i < nUvLayers; i++) {\n                uvLayer = json.uvs[i];\n\n                geometry.faceVertexUvs[i][fi] = [];\n\n                for (j = 0; j < 3; j++) {\n                  uvIndex = faces[offset++];\n\n                  u = uvLayer[uvIndex * 2];\n                  v = uvLayer[uvIndex * 2 + 1];\n\n                  uv = new Vector2(u, v);\n\n                  geometry.faceVertexUvs[i][fi].push(uv);\n                }\n              }\n            }\n\n            if (hasFaceNormal) {\n              normalIndex = faces[offset++] * 3;\n\n              face.normal.set(\n                normals[normalIndex++],\n                normals[normalIndex++],\n                normals[normalIndex]\n              );\n            }\n\n            if (hasFaceVertexNormal) {\n              for (i = 0; i < 3; i++) {\n                normalIndex = faces[offset++] * 3;\n\n                normal = new Vector3(\n                  normals[normalIndex++],\n                  normals[normalIndex++],\n                  normals[normalIndex]\n                );\n\n                face.vertexNormals.push(normal);\n              }\n            }\n\n            if (hasFaceColor) {\n              colorIndex = faces[offset++];\n              face.color.setHex(colors[colorIndex]);\n            }\n\n            if (hasFaceVertexColor) {\n              for (i = 0; i < 3; i++) {\n                colorIndex = faces[offset++];\n                face.vertexColors.push(new Color(colors[colorIndex]));\n              }\n            }\n\n            geometry.faces.push(face);\n          }\n        }\n      }\n\n      function parseSkin(json, geometry) {\n        var influencesPerVertex =\n          json.influencesPerVertex !== undefined ? json.influencesPerVertex : 2;\n\n        if (json.skinWeights) {\n          for (\n            var i = 0, l = json.skinWeights.length;\n            i < l;\n            i += influencesPerVertex\n          ) {\n            var x = json.skinWeights[i];\n            var y = influencesPerVertex > 1 ? json.skinWeights[i + 1] : 0;\n            var z = influencesPerVertex > 2 ? json.skinWeights[i + 2] : 0;\n            var w = influencesPerVertex > 3 ? json.skinWeights[i + 3] : 0;\n\n            geometry.skinWeights.push(new Vector4(x, y, z, w));\n          }\n        }\n\n        if (json.skinIndices) {\n          for (\n            var i = 0, l = json.skinIndices.length;\n            i < l;\n            i += influencesPerVertex\n          ) {\n            var a = json.skinIndices[i];\n            var b = influencesPerVertex > 1 ? json.skinIndices[i + 1] : 0;\n            var c = influencesPerVertex > 2 ? json.skinIndices[i + 2] : 0;\n            var d = influencesPerVertex > 3 ? json.skinIndices[i + 3] : 0;\n\n            geometry.skinIndices.push(new Vector4(a, b, c, d));\n          }\n        }\n\n        geometry.bones = json.bones;\n\n        if (\n          geometry.bones &&\n          geometry.bones.length > 0 &&\n          (geometry.skinWeights.length !== geometry.skinIndices.length ||\n            geometry.skinIndices.length !== geometry.vertices.length)\n        ) {\n          console.warn(\n            \"When skinning, number of vertices (\" +\n              geometry.vertices.length +\n              \"), skinIndices (\" +\n              geometry.skinIndices.length +\n              \"), and skinWeights (\" +\n              geometry.skinWeights.length +\n              \") should match.\"\n          );\n        }\n      }\n\n      function parseMorphing(json, geometry) {\n        var scale = json.scale;\n\n        if (json.morphTargets !== undefined) {\n          for (var i = 0, l = json.morphTargets.length; i < l; i++) {\n            geometry.morphTargets[i] = {};\n            geometry.morphTargets[i].name = json.morphTargets[i].name;\n            geometry.morphTargets[i].vertices = [];\n\n            var dstVertices = geometry.morphTargets[i].vertices;\n            var srcVertices = json.morphTargets[i].vertices;\n\n            for (var v = 0, vl = srcVertices.length; v < vl; v += 3) {\n              var vertex = new Vector3();\n              vertex.x = srcVertices[v] * scale;\n              vertex.y = srcVertices[v + 1] * scale;\n              vertex.z = srcVertices[v + 2] * scale;\n\n              dstVertices.push(vertex);\n            }\n          }\n        }\n\n        if (json.morphColors !== undefined && json.morphColors.length > 0) {\n          console.warn(\n            'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.'\n          );\n\n          var faces = geometry.faces;\n          var morphColors = json.morphColors[0].colors;\n\n          for (var i = 0, l = faces.length; i < l; i++) {\n            faces[i].color.fromArray(morphColors, i * 3);\n          }\n        }\n      }\n\n      function parseAnimations(json, geometry) {\n        var outputAnimations = [];\n\n        // parse old style Bone/Hierarchy animations\n        var animations = [];\n\n        if (json.animation !== undefined) {\n          animations.push(json.animation);\n        }\n\n        if (json.animations !== undefined) {\n          if (json.animations.length) {\n            animations = animations.concat(json.animations);\n          } else {\n            animations.push(json.animations);\n          }\n        }\n\n        for (var i = 0; i < animations.length; i++) {\n          var clip = AnimationClip.parseAnimation(\n            animations[i],\n            geometry.bones\n          );\n          if (clip) outputAnimations.push(clip);\n        }\n\n        // parse implicit morph animations\n        if (geometry.morphTargets) {\n          // TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n          var morphAnimationClips =\n            AnimationClip.CreateClipsFromMorphTargetSequences(\n              geometry.morphTargets,\n              10\n            );\n          outputAnimations = outputAnimations.concat(morphAnimationClips);\n        }\n\n        if (outputAnimations.length > 0) geometry.animations = outputAnimations;\n      }\n\n      return function parse(json, texturePath) {\n        if (json.data !== undefined) {\n          // Geometry 4.0 spec\n          json = json.data;\n        }\n\n        if (json.scale !== undefined) {\n          json.scale = 1.0 / json.scale;\n        } else {\n          json.scale = 1.0;\n        }\n\n        var geometry = new Geometry();\n\n        parseModel(json, geometry);\n        parseSkin(json, geometry);\n        parseMorphing(json, geometry);\n        parseAnimations(json, geometry);\n\n        geometry.computeFaceNormals();\n        geometry.computeBoundingSphere();\n\n        if (json.materials === undefined || json.materials.length === 0) {\n          return { geometry: geometry };\n        } else {\n          var materials = Loader.prototype.initMaterials(\n            json.materials,\n            texturePath,\n            this.crossOrigin\n          );\n\n          return { geometry: geometry, materials: materials };\n        }\n      };\n    })(),\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function ObjectLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n    this.texturePath = \"\";\n  }\n\n  Object.assign(ObjectLoader.prototype, {\n    crossOrigin: \"anonymous\",\n\n    load: function (url, onLoad, onProgress, onError) {\n      if (this.texturePath === \"\") {\n        this.texturePath = url.substring(0, url.lastIndexOf(\"/\") + 1);\n      }\n\n      var scope = this;\n\n      var loader = new FileLoader(scope.manager);\n      loader.load(\n        url,\n        function (text) {\n          var json = null;\n\n          try {\n            json = JSON.parse(text);\n          } catch (error) {\n            if (onError !== undefined) onError(error);\n\n            console.error(\n              \"THREE:ObjectLoader: Can't parse \" + url + \".\",\n              error.message\n            );\n\n            return;\n          }\n\n          var metadata = json.metadata;\n\n          if (\n            metadata === undefined ||\n            metadata.type === undefined ||\n            metadata.type.toLowerCase() === \"geometry\"\n          ) {\n            console.error(\n              \"THREE.ObjectLoader: Can't load \" +\n                url +\n                \". Use THREE.JSONLoader instead.\"\n            );\n            return;\n          }\n\n          scope.parse(json, onLoad);\n        },\n        onProgress,\n        onError\n      );\n    },\n\n    setTexturePath: function (value) {\n      this.texturePath = value;\n      return this;\n    },\n\n    setCrossOrigin: function (value) {\n      this.crossOrigin = value;\n      return this;\n    },\n\n    parse: function (json, onLoad) {\n      var shapes = this.parseShape(json.shapes);\n      var geometries = this.parseGeometries(json.geometries, shapes);\n\n      var images = this.parseImages(json.images, function () {\n        if (onLoad !== undefined) onLoad(object);\n      });\n\n      var textures = this.parseTextures(json.textures, images);\n      var materials = this.parseMaterials(json.materials, textures);\n\n      var object = this.parseObject(json.object, geometries, materials);\n\n      if (json.animations) {\n        object.animations = this.parseAnimations(json.animations);\n      }\n\n      if (json.images === undefined || json.images.length === 0) {\n        if (onLoad !== undefined) onLoad(object);\n      }\n\n      return object;\n    },\n\n    parseShape: function (json) {\n      var shapes = {};\n\n      if (json !== undefined) {\n        for (var i = 0, l = json.length; i < l; i++) {\n          var shape = new Shape().fromJSON(json[i]);\n\n          shapes[shape.uuid] = shape;\n        }\n      }\n\n      return shapes;\n    },\n\n    parseGeometries: function (json, shapes) {\n      var geometries = {};\n\n      if (json !== undefined) {\n        var geometryLoader = new JSONLoader();\n        var bufferGeometryLoader = new BufferGeometryLoader();\n\n        for (var i = 0, l = json.length; i < l; i++) {\n          var geometry;\n          var data = json[i];\n\n          switch (data.type) {\n            case \"PlaneGeometry\":\n            case \"PlaneBufferGeometry\":\n              geometry = new Geometries[data.type](\n                data.width,\n                data.height,\n                data.widthSegments,\n                data.heightSegments\n              );\n\n              break;\n\n            case \"BoxGeometry\":\n            case \"BoxBufferGeometry\":\n            case \"CubeGeometry\": // backwards compatible\n              geometry = new Geometries[data.type](\n                data.width,\n                data.height,\n                data.depth,\n                data.widthSegments,\n                data.heightSegments,\n                data.depthSegments\n              );\n\n              break;\n\n            case \"CircleGeometry\":\n            case \"CircleBufferGeometry\":\n              geometry = new Geometries[data.type](\n                data.radius,\n                data.segments,\n                data.thetaStart,\n                data.thetaLength\n              );\n\n              break;\n\n            case \"CylinderGeometry\":\n            case \"CylinderBufferGeometry\":\n              geometry = new Geometries[data.type](\n                data.radiusTop,\n                data.radiusBottom,\n                data.height,\n                data.radialSegments,\n                data.heightSegments,\n                data.openEnded,\n                data.thetaStart,\n                data.thetaLength\n              );\n\n              break;\n\n            case \"ConeGeometry\":\n            case \"ConeBufferGeometry\":\n              geometry = new Geometries[data.type](\n                data.radius,\n                data.height,\n                data.radialSegments,\n                data.heightSegments,\n                data.openEnded,\n                data.thetaStart,\n                data.thetaLength\n              );\n\n              break;\n\n            case \"SphereGeometry\":\n            case \"SphereBufferGeometry\":\n              geometry = new Geometries[data.type](\n                data.radius,\n                data.widthSegments,\n                data.heightSegments,\n                data.phiStart,\n                data.phiLength,\n                data.thetaStart,\n                data.thetaLength\n              );\n\n              break;\n\n            case \"DodecahedronGeometry\":\n            case \"DodecahedronBufferGeometry\":\n            case \"IcosahedronGeometry\":\n            case \"IcosahedronBufferGeometry\":\n            case \"OctahedronGeometry\":\n            case \"OctahedronBufferGeometry\":\n            case \"TetrahedronGeometry\":\n            case \"TetrahedronBufferGeometry\":\n              geometry = new Geometries[data.type](data.radius, data.detail);\n\n              break;\n\n            case \"RingGeometry\":\n            case \"RingBufferGeometry\":\n              geometry = new Geometries[data.type](\n                data.innerRadius,\n                data.outerRadius,\n                data.thetaSegments,\n                data.phiSegments,\n                data.thetaStart,\n                data.thetaLength\n              );\n\n              break;\n\n            case \"TorusGeometry\":\n            case \"TorusBufferGeometry\":\n              geometry = new Geometries[data.type](\n                data.radius,\n                data.tube,\n                data.radialSegments,\n                data.tubularSegments,\n                data.arc\n              );\n\n              break;\n\n            case \"TorusKnotGeometry\":\n            case \"TorusKnotBufferGeometry\":\n              geometry = new Geometries[data.type](\n                data.radius,\n                data.tube,\n                data.tubularSegments,\n                data.radialSegments,\n                data.p,\n                data.q\n              );\n\n              break;\n\n            case \"LatheGeometry\":\n            case \"LatheBufferGeometry\":\n              geometry = new Geometries[data.type](\n                data.points,\n                data.segments,\n                data.phiStart,\n                data.phiLength\n              );\n\n              break;\n\n            case \"PolyhedronGeometry\":\n            case \"PolyhedronBufferGeometry\":\n              geometry = new Geometries[data.type](\n                data.vertices,\n                data.indices,\n                data.radius,\n                data.details\n              );\n\n              break;\n\n            case \"ShapeGeometry\":\n            case \"ShapeBufferGeometry\":\n              var geometryShapes = [];\n\n              for (var j = 0, jl = data.shapes.length; j < jl; j++) {\n                var shape = shapes[data.shapes[j]];\n\n                geometryShapes.push(shape);\n              }\n\n              geometry = new Geometries[data.type](\n                geometryShapes,\n                data.curveSegments\n              );\n\n              break;\n\n            case \"ExtrudeGeometry\":\n            case \"ExtrudeBufferGeometry\":\n              var geometryShapes = [];\n\n              for (var j = 0, jl = data.shapes.length; j < jl; j++) {\n                var shape = shapes[data.shapes[j]];\n\n                geometryShapes.push(shape);\n              }\n\n              var extrudePath = data.options.extrudePath;\n\n              if (extrudePath !== undefined) {\n                data.options.extrudePath = new Curves[\n                  extrudePath.type\n                ]().fromJSON(extrudePath);\n              }\n\n              geometry = new Geometries[data.type](\n                geometryShapes,\n                data.options\n              );\n\n              break;\n\n            case \"BufferGeometry\":\n              geometry = bufferGeometryLoader.parse(data);\n\n              break;\n\n            case \"Geometry\":\n              geometry = geometryLoader.parse(data, this.texturePath).geometry;\n\n              break;\n\n            default:\n              console.warn(\n                'THREE.ObjectLoader: Unsupported geometry type \"' +\n                  data.type +\n                  '\"'\n              );\n\n              continue;\n          }\n\n          geometry.uuid = data.uuid;\n\n          if (data.name !== undefined) geometry.name = data.name;\n          if (geometry.isBufferGeometry === true && data.userData !== undefined)\n            geometry.userData = data.userData;\n\n          geometries[data.uuid] = geometry;\n        }\n      }\n\n      return geometries;\n    },\n\n    parseMaterials: function (json, textures) {\n      var materials = {};\n\n      if (json !== undefined) {\n        var loader = new MaterialLoader();\n        loader.setTextures(textures);\n\n        for (var i = 0, l = json.length; i < l; i++) {\n          var data = json[i];\n\n          if (data.type === \"MultiMaterial\") {\n            // Deprecated\n\n            var array = [];\n\n            for (var j = 0; j < data.materials.length; j++) {\n              array.push(loader.parse(data.materials[j]));\n            }\n\n            materials[data.uuid] = array;\n          } else {\n            materials[data.uuid] = loader.parse(data);\n          }\n        }\n      }\n\n      return materials;\n    },\n\n    parseAnimations: function (json) {\n      var animations = [];\n\n      for (var i = 0; i < json.length; i++) {\n        var data = json[i];\n\n        var clip = AnimationClip.parse(data);\n\n        if (data.uuid !== undefined) clip.uuid = data.uuid;\n\n        animations.push(clip);\n      }\n\n      return animations;\n    },\n\n    parseImages: function (json, onLoad) {\n      var scope = this;\n      var images = {};\n\n      function loadImage(url) {\n        scope.manager.itemStart(url);\n\n        return loader.load(\n          url,\n          function () {\n            scope.manager.itemEnd(url);\n          },\n          undefined,\n          function () {\n            scope.manager.itemEnd(url);\n            scope.manager.itemError(url);\n          }\n        );\n      }\n\n      if (json !== undefined && json.length > 0) {\n        var manager = new LoadingManager(onLoad);\n\n        var loader = new ImageLoader(manager);\n        loader.setCrossOrigin(this.crossOrigin);\n\n        for (var i = 0, il = json.length; i < il; i++) {\n          var image = json[i];\n          var url = image.url;\n\n          if (Array.isArray(url)) {\n            // load array of images e.g CubeTexture\n\n            images[image.uuid] = [];\n\n            for (var j = 0, jl = url.length; j < jl; j++) {\n              var currentUrl = url[j];\n\n              var path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(currentUrl)\n                ? currentUrl\n                : scope.texturePath + currentUrl;\n\n              images[image.uuid].push(loadImage(path));\n            }\n          } else {\n            // load single image\n\n            var path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(image.url)\n              ? image.url\n              : scope.texturePath + image.url;\n\n            images[image.uuid] = loadImage(path);\n          }\n        }\n      }\n\n      return images;\n    },\n\n    parseTextures: function (json, images) {\n      function parseConstant(value, type) {\n        if (typeof value === \"number\") return value;\n\n        console.warn(\n          \"THREE.ObjectLoader.parseTexture: Constant should be in numeric form.\",\n          value\n        );\n\n        return type[value];\n      }\n\n      var textures = {};\n\n      if (json !== undefined) {\n        for (var i = 0, l = json.length; i < l; i++) {\n          var data = json[i];\n\n          if (data.image === undefined) {\n            console.warn(\n              'THREE.ObjectLoader: No \"image\" specified for',\n              data.uuid\n            );\n          }\n\n          if (images[data.image] === undefined) {\n            console.warn(\"THREE.ObjectLoader: Undefined image\", data.image);\n          }\n\n          var texture;\n\n          if (Array.isArray(images[data.image])) {\n            texture = new CubeTexture(images[data.image]);\n          } else {\n            texture = new Texture(images[data.image]);\n          }\n\n          texture.needsUpdate = true;\n\n          texture.uuid = data.uuid;\n\n          if (data.name !== undefined) texture.name = data.name;\n\n          if (data.mapping !== undefined)\n            texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\n          if (data.offset !== undefined) texture.offset.fromArray(data.offset);\n          if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n          if (data.center !== undefined) texture.center.fromArray(data.center);\n          if (data.rotation !== undefined) texture.rotation = data.rotation;\n\n          if (data.wrap !== undefined) {\n            texture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n            texture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n          }\n\n          if (data.format !== undefined) texture.format = data.format;\n\n          if (data.minFilter !== undefined)\n            texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n          if (data.magFilter !== undefined)\n            texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n          if (data.anisotropy !== undefined)\n            texture.anisotropy = data.anisotropy;\n\n          if (data.flipY !== undefined) texture.flipY = data.flipY;\n\n          textures[data.uuid] = texture;\n        }\n      }\n\n      return textures;\n    },\n\n    parseObject: function (data, geometries, materials) {\n      var object;\n\n      function getGeometry(name) {\n        if (geometries[name] === undefined) {\n          console.warn(\"THREE.ObjectLoader: Undefined geometry\", name);\n        }\n\n        return geometries[name];\n      }\n\n      function getMaterial(name) {\n        if (name === undefined) return undefined;\n\n        if (Array.isArray(name)) {\n          var array = [];\n\n          for (var i = 0, l = name.length; i < l; i++) {\n            var uuid = name[i];\n\n            if (materials[uuid] === undefined) {\n              console.warn(\"THREE.ObjectLoader: Undefined material\", uuid);\n            }\n\n            array.push(materials[uuid]);\n          }\n\n          return array;\n        }\n\n        if (materials[name] === undefined) {\n          console.warn(\"THREE.ObjectLoader: Undefined material\", name);\n        }\n\n        return materials[name];\n      }\n\n      switch (data.type) {\n        case \"Scene\":\n          object = new Scene();\n\n          if (data.background !== undefined) {\n            if (Number.isInteger(data.background)) {\n              object.background = new Color(data.background);\n            }\n          }\n\n          if (data.fog !== undefined) {\n            if (data.fog.type === \"Fog\") {\n              object.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n            } else if (data.fog.type === \"FogExp2\") {\n              object.fog = new FogExp2(data.fog.color, data.fog.density);\n            }\n          }\n\n          break;\n\n        case \"PerspectiveCamera\":\n          object = new PerspectiveCamera(\n            data.fov,\n            data.aspect,\n            data.near,\n            data.far\n          );\n\n          if (data.focus !== undefined) object.focus = data.focus;\n          if (data.zoom !== undefined) object.zoom = data.zoom;\n          if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n          if (data.filmOffset !== undefined)\n            object.filmOffset = data.filmOffset;\n          if (data.view !== undefined)\n            object.view = Object.assign({}, data.view);\n\n          break;\n\n        case \"OrthographicCamera\":\n          object = new OrthographicCamera(\n            data.left,\n            data.right,\n            data.top,\n            data.bottom,\n            data.near,\n            data.far\n          );\n\n          if (data.zoom !== undefined) object.zoom = data.zoom;\n          if (data.view !== undefined)\n            object.view = Object.assign({}, data.view);\n\n          break;\n\n        case \"AmbientLight\":\n          object = new AmbientLight(data.color, data.intensity);\n\n          break;\n\n        case \"DirectionalLight\":\n          object = new DirectionalLight(data.color, data.intensity);\n\n          break;\n\n        case \"PointLight\":\n          object = new PointLight(\n            data.color,\n            data.intensity,\n            data.distance,\n            data.decay\n          );\n\n          break;\n\n        case \"RectAreaLight\":\n          object = new RectAreaLight(\n            data.color,\n            data.intensity,\n            data.width,\n            data.height\n          );\n\n          break;\n\n        case \"SpotLight\":\n          object = new SpotLight(\n            data.color,\n            data.intensity,\n            data.distance,\n            data.angle,\n            data.penumbra,\n            data.decay\n          );\n\n          break;\n\n        case \"HemisphereLight\":\n          object = new HemisphereLight(\n            data.color,\n            data.groundColor,\n            data.intensity\n          );\n\n          break;\n\n        case \"SkinnedMesh\":\n          console.warn(\n            \"THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.\"\n          );\n\n        case \"Mesh\":\n          var geometry = getGeometry(data.geometry);\n          var material = getMaterial(data.material);\n\n          if (geometry.bones && geometry.bones.length > 0) {\n            object = new SkinnedMesh(geometry, material);\n          } else {\n            object = new Mesh(geometry, material);\n          }\n\n          break;\n\n        case \"LOD\":\n          object = new LOD();\n\n          break;\n\n        case \"Line\":\n          object = new Line(\n            getGeometry(data.geometry),\n            getMaterial(data.material),\n            data.mode\n          );\n\n          break;\n\n        case \"LineLoop\":\n          object = new LineLoop(\n            getGeometry(data.geometry),\n            getMaterial(data.material)\n          );\n\n          break;\n\n        case \"LineSegments\":\n          object = new LineSegments(\n            getGeometry(data.geometry),\n            getMaterial(data.material)\n          );\n\n          break;\n\n        case \"PointCloud\":\n        case \"Points\":\n          object = new Points(\n            getGeometry(data.geometry),\n            getMaterial(data.material)\n          );\n\n          break;\n\n        case \"Sprite\":\n          object = new Sprite(getMaterial(data.material));\n\n          break;\n\n        case \"Group\":\n          object = new Group();\n\n          break;\n\n        default:\n          object = new Object3D();\n      }\n\n      object.uuid = data.uuid;\n\n      if (data.name !== undefined) object.name = data.name;\n\n      if (data.matrix !== undefined) {\n        object.matrix.fromArray(data.matrix);\n\n        if (data.matrixAutoUpdate !== undefined)\n          object.matrixAutoUpdate = data.matrixAutoUpdate;\n        if (object.matrixAutoUpdate)\n          object.matrix.decompose(\n            object.position,\n            object.quaternion,\n            object.scale\n          );\n        object.matrixNeedsUpdate = false;\n      } else {\n        if (data.position !== undefined)\n          object.position.fromArray(data.position);\n        if (data.rotation !== undefined)\n          object.rotation.fromArray(data.rotation);\n        if (data.quaternion !== undefined)\n          object.quaternion.fromArray(data.quaternion);\n        if (data.scale !== undefined) object.scale.fromArray(data.scale);\n      }\n\n      if (data.castShadow !== undefined) object.castShadow = data.castShadow;\n      if (data.receiveShadow !== undefined)\n        object.receiveShadow = data.receiveShadow;\n\n      if (data.shadow) {\n        if (data.shadow.bias !== undefined)\n          object.shadow.bias = data.shadow.bias;\n        if (data.shadow.radius !== undefined)\n          object.shadow.radius = data.shadow.radius;\n        if (data.shadow.mapSize !== undefined)\n          object.shadow.mapSize.fromArray(data.shadow.mapSize);\n        if (data.shadow.camera !== undefined)\n          object.shadow.camera = this.parseObject(data.shadow.camera);\n      }\n\n      if (data.visible !== undefined) object.visible = data.visible;\n      if (data.frustumCulled !== undefined)\n        object.frustumCulled = data.frustumCulled;\n      if (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n      if (data.userData !== undefined) object.userData = data.userData;\n      if (data.layers !== undefined) object.layers.mask = data.layers;\n\n      if (data.children !== undefined) {\n        var children = data.children;\n\n        for (var i = 0; i < children.length; i++) {\n          object.add(this.parseObject(children[i], geometries, materials));\n        }\n      }\n\n      if (data.type === \"LOD\") {\n        var levels = data.levels;\n\n        for (var l = 0; l < levels.length; l++) {\n          var level = levels[l];\n          var child = object.getObjectByProperty(\"uuid\", level.object);\n\n          if (child !== undefined) {\n            object.addLevel(child, level.distance);\n          }\n        }\n      }\n\n      return object;\n    },\n  });\n\n  var TEXTURE_MAPPING = {\n    UVMapping: UVMapping,\n    CubeReflectionMapping: CubeReflectionMapping,\n    CubeRefractionMapping: CubeRefractionMapping,\n    EquirectangularReflectionMapping: EquirectangularReflectionMapping,\n    EquirectangularRefractionMapping: EquirectangularRefractionMapping,\n    SphericalReflectionMapping: SphericalReflectionMapping,\n    CubeUVReflectionMapping: CubeUVReflectionMapping,\n    CubeUVRefractionMapping: CubeUVRefractionMapping,\n  };\n\n  var TEXTURE_WRAPPING = {\n    RepeatWrapping: RepeatWrapping,\n    ClampToEdgeWrapping: ClampToEdgeWrapping,\n    MirroredRepeatWrapping: MirroredRepeatWrapping,\n  };\n\n  var TEXTURE_FILTER = {\n    NearestFilter: NearestFilter,\n    NearestMipMapNearestFilter: NearestMipMapNearestFilter,\n    NearestMipMapLinearFilter: NearestMipMapLinearFilter,\n    LinearFilter: LinearFilter,\n    LinearMipMapNearestFilter: LinearMipMapNearestFilter,\n    LinearMipMapLinearFilter: LinearMipMapLinearFilter,\n  };\n\n  /**\n   * @author thespite / http://clicktorelease.com/\n   */\n\n  function ImageBitmapLoader(manager) {\n    if (typeof createImageBitmap === \"undefined\") {\n      console.warn(\n        \"THREE.ImageBitmapLoader: createImageBitmap() not supported.\"\n      );\n    }\n\n    if (typeof fetch === \"undefined\") {\n      console.warn(\"THREE.ImageBitmapLoader: fetch() not supported.\");\n    }\n\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n    this.options = undefined;\n  }\n\n  ImageBitmapLoader.prototype = {\n    constructor: ImageBitmapLoader,\n\n    setOptions: function setOptions(options) {\n      this.options = options;\n\n      return this;\n    },\n\n    load: function (url, onLoad, onProgress, onError) {\n      if (url === undefined) url = \"\";\n\n      if (this.path !== undefined) url = this.path + url;\n\n      url = this.manager.resolveURL(url);\n\n      var scope = this;\n\n      var cached = Cache.get(url);\n\n      if (cached !== undefined) {\n        scope.manager.itemStart(url);\n\n        setTimeout(function () {\n          if (onLoad) onLoad(cached);\n\n          scope.manager.itemEnd(url);\n        }, 0);\n\n        return cached;\n      }\n\n      fetch(url)\n        .then(function (res) {\n          return res.blob();\n        })\n        .then(function (blob) {\n          return createImageBitmap(blob, scope.options);\n        })\n        .then(function (imageBitmap) {\n          Cache.add(url, imageBitmap);\n\n          if (onLoad) onLoad(imageBitmap);\n\n          scope.manager.itemEnd(url);\n        })\n        .catch(function (e) {\n          if (onError) onError(e);\n\n          scope.manager.itemEnd(url);\n          scope.manager.itemError(url);\n        });\n    },\n\n    setCrossOrigin: function (/* value */) {\n      return this;\n    },\n\n    setPath: function (value) {\n      this.path = value;\n      return this;\n    },\n  };\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n   **/\n\n  function ShapePath() {\n    this.type = \"ShapePath\";\n\n    this.color = new Color();\n\n    this.subPaths = [];\n    this.currentPath = null;\n  }\n\n  Object.assign(ShapePath.prototype, {\n    moveTo: function (x, y) {\n      this.currentPath = new Path();\n      this.subPaths.push(this.currentPath);\n      this.currentPath.moveTo(x, y);\n    },\n\n    lineTo: function (x, y) {\n      this.currentPath.lineTo(x, y);\n    },\n\n    quadraticCurveTo: function (aCPx, aCPy, aX, aY) {\n      this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n    },\n\n    bezierCurveTo: function (aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n      this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n    },\n\n    splineThru: function (pts) {\n      this.currentPath.splineThru(pts);\n    },\n\n    toShapes: function (isCCW, noHoles) {\n      function toShapesNoHoles(inSubpaths) {\n        var shapes = [];\n\n        for (var i = 0, l = inSubpaths.length; i < l; i++) {\n          var tmpPath = inSubpaths[i];\n\n          var tmpShape = new Shape();\n          tmpShape.curves = tmpPath.curves;\n\n          shapes.push(tmpShape);\n        }\n\n        return shapes;\n      }\n\n      function isPointInsidePolygon(inPt, inPolygon) {\n        var polyLen = inPolygon.length;\n\n        // inPt on polygon contour => immediate success    or\n        // toggling of inside/outside at every single! intersection point of an edge\n        //  with the horizontal line through inPt, left of inPt\n        //  not counting lowerY endpoints of edges and whole edges on that line\n        var inside = false;\n        for (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n          var edgeLowPt = inPolygon[p];\n          var edgeHighPt = inPolygon[q];\n\n          var edgeDx = edgeHighPt.x - edgeLowPt.x;\n          var edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n          if (Math.abs(edgeDy) > Number.EPSILON) {\n            // not parallel\n            if (edgeDy < 0) {\n              edgeLowPt = inPolygon[q];\n              edgeDx = -edgeDx;\n              edgeHighPt = inPolygon[p];\n              edgeDy = -edgeDy;\n            }\n            if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n            if (inPt.y === edgeLowPt.y) {\n              if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n              // continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n            } else {\n              var perpEdge =\n                edgeDy * (inPt.x - edgeLowPt.x) -\n                edgeDx * (inPt.y - edgeLowPt.y);\n              if (perpEdge === 0) return true; // inPt is on contour ?\n              if (perpEdge < 0) continue;\n              inside = !inside; // true intersection left of inPt\n            }\n          } else {\n            // parallel or collinear\n            if (inPt.y !== edgeLowPt.y) continue; // parallel\n            // edge lies on the same horizontal line as inPt\n            if (\n              (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x) ||\n              (edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x)\n            )\n              return true; // inPt: Point on contour !\n            // continue;\n          }\n        }\n\n        return inside;\n      }\n\n      var isClockWise = ShapeUtils.isClockWise;\n\n      var subPaths = this.subPaths;\n      if (subPaths.length === 0) return [];\n\n      if (noHoles === true) return toShapesNoHoles(subPaths);\n\n      var solid,\n        tmpPath,\n        tmpShape,\n        shapes = [];\n\n      if (subPaths.length === 1) {\n        tmpPath = subPaths[0];\n        tmpShape = new Shape();\n        tmpShape.curves = tmpPath.curves;\n        shapes.push(tmpShape);\n        return shapes;\n      }\n\n      var holesFirst = !isClockWise(subPaths[0].getPoints());\n      holesFirst = isCCW ? !holesFirst : holesFirst;\n\n      // console.log(\"Holes first\", holesFirst);\n\n      var betterShapeHoles = [];\n      var newShapes = [];\n      var newShapeHoles = [];\n      var mainIdx = 0;\n      var tmpPoints;\n\n      newShapes[mainIdx] = undefined;\n      newShapeHoles[mainIdx] = [];\n\n      for (var i = 0, l = subPaths.length; i < l; i++) {\n        tmpPath = subPaths[i];\n        tmpPoints = tmpPath.getPoints();\n        solid = isClockWise(tmpPoints);\n        solid = isCCW ? !solid : solid;\n\n        if (solid) {\n          if (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\n          newShapes[mainIdx] = { s: new Shape(), p: tmpPoints };\n          newShapes[mainIdx].s.curves = tmpPath.curves;\n\n          if (holesFirst) mainIdx++;\n          newShapeHoles[mainIdx] = [];\n\n          //console.log('cw', i);\n        } else {\n          newShapeHoles[mainIdx].push({ h: tmpPath, p: tmpPoints[0] });\n\n          //console.log('ccw', i);\n        }\n      }\n\n      // only Holes? -> probably all Shapes with wrong orientation\n      if (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n      if (newShapes.length > 1) {\n        var ambiguous = false;\n        var toChange = [];\n\n        for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n          betterShapeHoles[sIdx] = [];\n        }\n\n        for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n          var sho = newShapeHoles[sIdx];\n\n          for (var hIdx = 0; hIdx < sho.length; hIdx++) {\n            var ho = sho[hIdx];\n            var hole_unassigned = true;\n\n            for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n              if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n                if (sIdx !== s2Idx)\n                  toChange.push({ froms: sIdx, tos: s2Idx, hole: hIdx });\n                if (hole_unassigned) {\n                  hole_unassigned = false;\n                  betterShapeHoles[s2Idx].push(ho);\n                } else {\n                  ambiguous = true;\n                }\n              }\n            }\n            if (hole_unassigned) {\n              betterShapeHoles[sIdx].push(ho);\n            }\n          }\n        }\n        // console.log(\"ambiguous: \", ambiguous);\n        if (toChange.length > 0) {\n          // console.log(\"to change: \", toChange);\n          if (!ambiguous) newShapeHoles = betterShapeHoles;\n        }\n      }\n\n      var tmpHoles;\n\n      for (var i = 0, il = newShapes.length; i < il; i++) {\n        tmpShape = newShapes[i].s;\n        shapes.push(tmpShape);\n        tmpHoles = newShapeHoles[i];\n\n        for (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n          tmpShape.holes.push(tmpHoles[j].h);\n        }\n      }\n\n      //console.log(\"shape\", shapes);\n\n      return shapes;\n    },\n  });\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function Font(data) {\n    this.type = \"Font\";\n\n    this.data = data;\n  }\n\n  Object.assign(Font.prototype, {\n    isFont: true,\n\n    generateShapes: function (text, size) {\n      if (size === undefined) size = 100;\n\n      var shapes = [];\n      var paths = createPaths(text, size, this.data);\n\n      for (var p = 0, pl = paths.length; p < pl; p++) {\n        Array.prototype.push.apply(shapes, paths[p].toShapes());\n      }\n\n      return shapes;\n    },\n  });\n\n  function createPaths(text, size, data) {\n    var chars = Array.from ? Array.from(text) : String(text).split(\"\"); // see #13988\n    var scale = size / data.resolution;\n    var line_height =\n      (data.boundingBox.yMax -\n        data.boundingBox.yMin +\n        data.underlineThickness) *\n      scale;\n\n    var paths = [];\n\n    var offsetX = 0,\n      offsetY = 0;\n\n    for (var i = 0; i < chars.length; i++) {\n      var char = chars[i];\n\n      if (char === \"\\n\") {\n        offsetX = 0;\n        offsetY -= line_height;\n      } else {\n        var ret = createPath(char, scale, offsetX, offsetY, data);\n        offsetX += ret.offsetX;\n        paths.push(ret.path);\n      }\n    }\n\n    return paths;\n  }\n\n  function createPath(char, scale, offsetX, offsetY, data) {\n    var glyph = data.glyphs[char] || data.glyphs[\"?\"];\n\n    if (!glyph) return;\n\n    var path = new ShapePath();\n\n    var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n    if (glyph.o) {\n      var outline =\n        glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(\" \"));\n\n      for (var i = 0, l = outline.length; i < l; ) {\n        var action = outline[i++];\n\n        switch (action) {\n          case \"m\": // moveTo\n            x = outline[i++] * scale + offsetX;\n            y = outline[i++] * scale + offsetY;\n\n            path.moveTo(x, y);\n\n            break;\n\n          case \"l\": // lineTo\n            x = outline[i++] * scale + offsetX;\n            y = outline[i++] * scale + offsetY;\n\n            path.lineTo(x, y);\n\n            break;\n\n          case \"q\": // quadraticCurveTo\n            cpx = outline[i++] * scale + offsetX;\n            cpy = outline[i++] * scale + offsetY;\n            cpx1 = outline[i++] * scale + offsetX;\n            cpy1 = outline[i++] * scale + offsetY;\n\n            path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\n            break;\n\n          case \"b\": // bezierCurveTo\n            cpx = outline[i++] * scale + offsetX;\n            cpy = outline[i++] * scale + offsetY;\n            cpx1 = outline[i++] * scale + offsetX;\n            cpy1 = outline[i++] * scale + offsetY;\n            cpx2 = outline[i++] * scale + offsetX;\n            cpy2 = outline[i++] * scale + offsetY;\n\n            path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\n            break;\n        }\n      }\n    }\n\n    return { offsetX: glyph.ha * scale, path: path };\n  }\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function FontLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n  }\n\n  Object.assign(FontLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.load(\n        url,\n        function (text) {\n          var json;\n\n          try {\n            json = JSON.parse(text);\n          } catch (e) {\n            console.warn(\n              \"THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.\"\n            );\n            json = JSON.parse(text.substring(65, text.length - 2));\n          }\n\n          var font = scope.parse(json);\n\n          if (onLoad) onLoad(font);\n        },\n        onProgress,\n        onError\n      );\n    },\n\n    parse: function (json) {\n      return new Font(json);\n    },\n\n    setPath: function (value) {\n      this.path = value;\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  var context;\n\n  var AudioContext = {\n    getContext: function () {\n      if (context === undefined) {\n        context = new (window.AudioContext || window.webkitAudioContext)();\n      }\n\n      return context;\n    },\n\n    setContext: function (value) {\n      context = value;\n    },\n  };\n\n  /**\n   * @author Reece Aaron Lecrivain / http://reecenotes.com/\n   */\n\n  function AudioLoader(manager) {\n    this.manager = manager !== undefined ? manager : DefaultLoadingManager;\n  }\n\n  Object.assign(AudioLoader.prototype, {\n    load: function (url, onLoad, onProgress, onError) {\n      var loader = new FileLoader(this.manager);\n      loader.setResponseType(\"arraybuffer\");\n      loader.load(\n        url,\n        function (buffer) {\n          // Create a copy of the buffer. The `decodeAudioData` method\n          // detaches the buffer when complete, preventing reuse.\n          var bufferCopy = buffer.slice(0);\n\n          var context = AudioContext.getContext();\n          context.decodeAudioData(bufferCopy, function (audioBuffer) {\n            onLoad(audioBuffer);\n          });\n        },\n        onProgress,\n        onError\n      );\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function StereoCamera() {\n    this.type = \"StereoCamera\";\n\n    this.aspect = 1;\n\n    this.eyeSep = 0.064;\n\n    this.cameraL = new PerspectiveCamera();\n    this.cameraL.layers.enable(1);\n    this.cameraL.matrixAutoUpdate = false;\n\n    this.cameraR = new PerspectiveCamera();\n    this.cameraR.layers.enable(2);\n    this.cameraR.matrixAutoUpdate = false;\n  }\n\n  Object.assign(StereoCamera.prototype, {\n    update: (function () {\n      var instance, focus, fov, aspect, near, far, zoom, eyeSep;\n\n      var eyeRight = new Matrix4();\n      var eyeLeft = new Matrix4();\n\n      return function update(camera) {\n        var needsUpdate =\n          instance !== this ||\n          focus !== camera.focus ||\n          fov !== camera.fov ||\n          aspect !== camera.aspect * this.aspect ||\n          near !== camera.near ||\n          far !== camera.far ||\n          zoom !== camera.zoom ||\n          eyeSep !== this.eyeSep;\n\n        if (needsUpdate) {\n          instance = this;\n          focus = camera.focus;\n          fov = camera.fov;\n          aspect = camera.aspect * this.aspect;\n          near = camera.near;\n          far = camera.far;\n          zoom = camera.zoom;\n\n          // Off-axis stereoscopic effect based on\n          // http://paulbourke.net/stereographics/stereorender/\n\n          var projectionMatrix = camera.projectionMatrix.clone();\n          eyeSep = this.eyeSep / 2;\n          var eyeSepOnProjection = (eyeSep * near) / focus;\n          var ymax = (near * Math.tan(_Math.DEG2RAD * fov * 0.5)) / zoom;\n          var xmin, xmax;\n\n          // translate xOffset\n\n          eyeLeft.elements[12] = -eyeSep;\n          eyeRight.elements[12] = eyeSep;\n\n          // for left eye\n\n          xmin = -ymax * aspect + eyeSepOnProjection;\n          xmax = ymax * aspect + eyeSepOnProjection;\n\n          projectionMatrix.elements[0] = (2 * near) / (xmax - xmin);\n          projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\n          this.cameraL.projectionMatrix.copy(projectionMatrix);\n\n          // for right eye\n\n          xmin = -ymax * aspect - eyeSepOnProjection;\n          xmax = ymax * aspect - eyeSepOnProjection;\n\n          projectionMatrix.elements[0] = (2 * near) / (xmax - xmin);\n          projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\n          this.cameraR.projectionMatrix.copy(projectionMatrix);\n        }\n\n        this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(eyeLeft);\n        this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(eyeRight);\n      };\n    })(),\n  });\n\n  /**\n   * Camera for rendering cube maps\n   *\t- renders scene into axis-aligned cube\n   *\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function CubeCamera(near, far, cubeResolution) {\n    Object3D.call(this);\n\n    this.type = \"CubeCamera\";\n\n    var fov = 90,\n      aspect = 1;\n\n    var cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPX.up.set(0, -1, 0);\n    cameraPX.lookAt(new Vector3(1, 0, 0));\n    this.add(cameraPX);\n\n    var cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNX.up.set(0, -1, 0);\n    cameraNX.lookAt(new Vector3(-1, 0, 0));\n    this.add(cameraNX);\n\n    var cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPY.up.set(0, 0, 1);\n    cameraPY.lookAt(new Vector3(0, 1, 0));\n    this.add(cameraPY);\n\n    var cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNY.up.set(0, 0, -1);\n    cameraNY.lookAt(new Vector3(0, -1, 0));\n    this.add(cameraNY);\n\n    var cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n    cameraPZ.up.set(0, -1, 0);\n    cameraPZ.lookAt(new Vector3(0, 0, 1));\n    this.add(cameraPZ);\n\n    var cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n    cameraNZ.up.set(0, -1, 0);\n    cameraNZ.lookAt(new Vector3(0, 0, -1));\n    this.add(cameraNZ);\n\n    var options = {\n      format: RGBFormat,\n      magFilter: LinearFilter,\n      minFilter: LinearFilter,\n    };\n\n    this.renderTarget = new WebGLRenderTargetCube(\n      cubeResolution,\n      cubeResolution,\n      options\n    );\n    this.renderTarget.texture.name = \"CubeCamera\";\n\n    this.update = function (renderer, scene) {\n      if (this.parent === null) this.updateMatrixWorld();\n\n      var renderTarget = this.renderTarget;\n      var generateMipmaps = renderTarget.texture.generateMipmaps;\n\n      renderTarget.texture.generateMipmaps = false;\n\n      renderTarget.activeCubeFace = 0;\n      renderer.render(scene, cameraPX, renderTarget);\n\n      renderTarget.activeCubeFace = 1;\n      renderer.render(scene, cameraNX, renderTarget);\n\n      renderTarget.activeCubeFace = 2;\n      renderer.render(scene, cameraPY, renderTarget);\n\n      renderTarget.activeCubeFace = 3;\n      renderer.render(scene, cameraNY, renderTarget);\n\n      renderTarget.activeCubeFace = 4;\n      renderer.render(scene, cameraPZ, renderTarget);\n\n      renderTarget.texture.generateMipmaps = generateMipmaps;\n\n      renderTarget.activeCubeFace = 5;\n      renderer.render(scene, cameraNZ, renderTarget);\n\n      renderer.setRenderTarget(null);\n    };\n\n    this.clear = function (renderer, color, depth, stencil) {\n      var renderTarget = this.renderTarget;\n\n      for (var i = 0; i < 6; i++) {\n        renderTarget.activeCubeFace = i;\n        renderer.setRenderTarget(renderTarget);\n\n        renderer.clear(color, depth, stencil);\n      }\n\n      renderer.setRenderTarget(null);\n    };\n  }\n\n  CubeCamera.prototype = Object.create(Object3D.prototype);\n  CubeCamera.prototype.constructor = CubeCamera;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function AudioListener() {\n    Object3D.call(this);\n\n    this.type = \"AudioListener\";\n\n    this.context = AudioContext.getContext();\n\n    this.gain = this.context.createGain();\n    this.gain.connect(this.context.destination);\n\n    this.filter = null;\n  }\n\n  AudioListener.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: AudioListener,\n\n    getInput: function () {\n      return this.gain;\n    },\n\n    removeFilter: function () {\n      if (this.filter !== null) {\n        this.gain.disconnect(this.filter);\n        this.filter.disconnect(this.context.destination);\n        this.gain.connect(this.context.destination);\n        this.filter = null;\n      }\n\n      return this;\n    },\n\n    getFilter: function () {\n      return this.filter;\n    },\n\n    setFilter: function (value) {\n      if (this.filter !== null) {\n        this.gain.disconnect(this.filter);\n        this.filter.disconnect(this.context.destination);\n      } else {\n        this.gain.disconnect(this.context.destination);\n      }\n\n      this.filter = value;\n      this.gain.connect(this.filter);\n      this.filter.connect(this.context.destination);\n\n      return this;\n    },\n\n    getMasterVolume: function () {\n      return this.gain.gain.value;\n    },\n\n    setMasterVolume: function (value) {\n      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\n      return this;\n    },\n\n    updateMatrixWorld: (function () {\n      var position = new Vector3();\n      var quaternion = new Quaternion();\n      var scale = new Vector3();\n\n      var orientation = new Vector3();\n\n      return function updateMatrixWorld(force) {\n        Object3D.prototype.updateMatrixWorld.call(this, force);\n\n        var listener = this.context.listener;\n        var up = this.up;\n\n        this.matrixWorld.decompose(position, quaternion, scale);\n\n        orientation.set(0, 0, -1).applyQuaternion(quaternion);\n\n        if (listener.positionX) {\n          listener.positionX.setValueAtTime(\n            position.x,\n            this.context.currentTime\n          );\n          listener.positionY.setValueAtTime(\n            position.y,\n            this.context.currentTime\n          );\n          listener.positionZ.setValueAtTime(\n            position.z,\n            this.context.currentTime\n          );\n          listener.forwardX.setValueAtTime(\n            orientation.x,\n            this.context.currentTime\n          );\n          listener.forwardY.setValueAtTime(\n            orientation.y,\n            this.context.currentTime\n          );\n          listener.forwardZ.setValueAtTime(\n            orientation.z,\n            this.context.currentTime\n          );\n          listener.upX.setValueAtTime(up.x, this.context.currentTime);\n          listener.upY.setValueAtTime(up.y, this.context.currentTime);\n          listener.upZ.setValueAtTime(up.z, this.context.currentTime);\n        } else {\n          listener.setPosition(position.x, position.y, position.z);\n          listener.setOrientation(\n            orientation.x,\n            orientation.y,\n            orientation.z,\n            up.x,\n            up.y,\n            up.z\n          );\n        }\n      };\n    })(),\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author Reece Aaron Lecrivain / http://reecenotes.com/\n   */\n\n  function Audio(listener) {\n    Object3D.call(this);\n\n    this.type = \"Audio\";\n\n    this.context = listener.context;\n\n    this.gain = this.context.createGain();\n    this.gain.connect(listener.getInput());\n\n    this.autoplay = false;\n\n    this.buffer = null;\n    this.loop = false;\n    this.startTime = 0;\n    this.offset = 0;\n    this.playbackRate = 1;\n    this.isPlaying = false;\n    this.hasPlaybackControl = true;\n    this.sourceType = \"empty\";\n\n    this.filters = [];\n  }\n\n  Audio.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: Audio,\n\n    getOutput: function () {\n      return this.gain;\n    },\n\n    setNodeSource: function (audioNode) {\n      this.hasPlaybackControl = false;\n      this.sourceType = \"audioNode\";\n      this.source = audioNode;\n      this.connect();\n\n      return this;\n    },\n\n    setMediaElementSource: function (mediaElement) {\n      this.hasPlaybackControl = false;\n      this.sourceType = \"mediaNode\";\n      this.source = this.context.createMediaElementSource(mediaElement);\n      this.connect();\n\n      return this;\n    },\n\n    setBuffer: function (audioBuffer) {\n      this.buffer = audioBuffer;\n      this.sourceType = \"buffer\";\n\n      if (this.autoplay) this.play();\n\n      return this;\n    },\n\n    play: function () {\n      if (this.isPlaying === true) {\n        console.warn(\"THREE.Audio: Audio is already playing.\");\n        return;\n      }\n\n      if (this.hasPlaybackControl === false) {\n        console.warn(\"THREE.Audio: this Audio has no playback control.\");\n        return;\n      }\n\n      var source = this.context.createBufferSource();\n\n      source.buffer = this.buffer;\n      source.loop = this.loop;\n      source.onended = this.onEnded.bind(this);\n      source.playbackRate.setValueAtTime(this.playbackRate, this.startTime);\n      this.startTime = this.context.currentTime;\n      source.start(this.startTime, this.offset);\n\n      this.isPlaying = true;\n\n      this.source = source;\n\n      return this.connect();\n    },\n\n    pause: function () {\n      if (this.hasPlaybackControl === false) {\n        console.warn(\"THREE.Audio: this Audio has no playback control.\");\n        return;\n      }\n\n      if (this.isPlaying === true) {\n        this.source.stop();\n        this.source.onended = null;\n        this.offset +=\n          (this.context.currentTime - this.startTime) * this.playbackRate;\n        this.isPlaying = false;\n      }\n\n      return this;\n    },\n\n    stop: function () {\n      if (this.hasPlaybackControl === false) {\n        console.warn(\"THREE.Audio: this Audio has no playback control.\");\n        return;\n      }\n\n      this.source.stop();\n      this.source.onended = null;\n      this.offset = 0;\n      this.isPlaying = false;\n\n      return this;\n    },\n\n    connect: function () {\n      if (this.filters.length > 0) {\n        this.source.connect(this.filters[0]);\n\n        for (var i = 1, l = this.filters.length; i < l; i++) {\n          this.filters[i - 1].connect(this.filters[i]);\n        }\n\n        this.filters[this.filters.length - 1].connect(this.getOutput());\n      } else {\n        this.source.connect(this.getOutput());\n      }\n\n      return this;\n    },\n\n    disconnect: function () {\n      if (this.filters.length > 0) {\n        this.source.disconnect(this.filters[0]);\n\n        for (var i = 1, l = this.filters.length; i < l; i++) {\n          this.filters[i - 1].disconnect(this.filters[i]);\n        }\n\n        this.filters[this.filters.length - 1].disconnect(this.getOutput());\n      } else {\n        this.source.disconnect(this.getOutput());\n      }\n\n      return this;\n    },\n\n    getFilters: function () {\n      return this.filters;\n    },\n\n    setFilters: function (value) {\n      if (!value) value = [];\n\n      if (this.isPlaying === true) {\n        this.disconnect();\n        this.filters = value;\n        this.connect();\n      } else {\n        this.filters = value;\n      }\n\n      return this;\n    },\n\n    getFilter: function () {\n      return this.getFilters()[0];\n    },\n\n    setFilter: function (filter) {\n      return this.setFilters(filter ? [filter] : []);\n    },\n\n    setPlaybackRate: function (value) {\n      if (this.hasPlaybackControl === false) {\n        console.warn(\"THREE.Audio: this Audio has no playback control.\");\n        return;\n      }\n\n      this.playbackRate = value;\n\n      if (this.isPlaying === true) {\n        this.source.playbackRate.setValueAtTime(\n          this.playbackRate,\n          this.context.currentTime\n        );\n      }\n\n      return this;\n    },\n\n    getPlaybackRate: function () {\n      return this.playbackRate;\n    },\n\n    onEnded: function () {\n      this.isPlaying = false;\n    },\n\n    getLoop: function () {\n      if (this.hasPlaybackControl === false) {\n        console.warn(\"THREE.Audio: this Audio has no playback control.\");\n        return false;\n      }\n\n      return this.loop;\n    },\n\n    setLoop: function (value) {\n      if (this.hasPlaybackControl === false) {\n        console.warn(\"THREE.Audio: this Audio has no playback control.\");\n        return;\n      }\n\n      this.loop = value;\n\n      if (this.isPlaying === true) {\n        this.source.loop = this.loop;\n      }\n\n      return this;\n    },\n\n    getVolume: function () {\n      return this.gain.gain.value;\n    },\n\n    setVolume: function (value) {\n      this.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\n      return this;\n    },\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function PositionalAudio(listener) {\n    Audio.call(this, listener);\n\n    this.panner = this.context.createPanner();\n    this.panner.connect(this.gain);\n  }\n\n  PositionalAudio.prototype = Object.assign(Object.create(Audio.prototype), {\n    constructor: PositionalAudio,\n\n    getOutput: function () {\n      return this.panner;\n    },\n\n    getRefDistance: function () {\n      return this.panner.refDistance;\n    },\n\n    setRefDistance: function (value) {\n      this.panner.refDistance = value;\n\n      return this;\n    },\n\n    getRolloffFactor: function () {\n      return this.panner.rolloffFactor;\n    },\n\n    setRolloffFactor: function (value) {\n      this.panner.rolloffFactor = value;\n\n      return this;\n    },\n\n    getDistanceModel: function () {\n      return this.panner.distanceModel;\n    },\n\n    setDistanceModel: function (value) {\n      this.panner.distanceModel = value;\n\n      return this;\n    },\n\n    getMaxDistance: function () {\n      return this.panner.maxDistance;\n    },\n\n    setMaxDistance: function (value) {\n      this.panner.maxDistance = value;\n\n      return this;\n    },\n\n    setDirectionalCone: function (\n      coneInnerAngle,\n      coneOuterAngle,\n      coneOuterGain\n    ) {\n      this.panner.coneInnerAngle = coneInnerAngle;\n      this.panner.coneOuterAngle = coneOuterAngle;\n      this.panner.coneOuterGain = coneOuterGain;\n\n      return this;\n    },\n\n    updateMatrixWorld: (function () {\n      var position = new Vector3();\n      var quaternion = new Quaternion();\n      var scale = new Vector3();\n\n      var orientation = new Vector3();\n\n      return function updateMatrixWorld(force) {\n        if (this.matrixWorldNeedsUpdate || force) {\n          Object3D.prototype.updateMatrixWorld.call(this, force);\n\n          var panner = this.panner;\n          this.matrixWorld.decompose(position, quaternion, scale);\n\n          orientation.set(0, 0, 1).applyQuaternion(quaternion);\n\n          panner.setPosition(position.x, position.y, position.z);\n          panner.setOrientation(orientation.x, orientation.y, orientation.z);\n        }\n      };\n    })(),\n  });\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function AudioAnalyser(audio, fftSize) {\n    this.analyser = audio.context.createAnalyser();\n    this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n\n    this.data = new Uint8Array(this.analyser.frequencyBinCount);\n\n    audio.getOutput().connect(this.analyser);\n  }\n\n  Object.assign(AudioAnalyser.prototype, {\n    getFrequencyData: function () {\n      this.analyser.getByteFrequencyData(this.data);\n\n      return this.data;\n    },\n\n    getAverageFrequency: function () {\n      var value = 0,\n        data = this.getFrequencyData();\n\n      for (var i = 0; i < data.length; i++) {\n        value += data[i];\n      }\n\n      return value / data.length;\n    },\n  });\n\n  /**\n   *\n   * Buffered scene graph property that allows weighted accumulation.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  function PropertyMixer(binding, typeName, valueSize) {\n    this.binding = binding;\n    this.valueSize = valueSize;\n\n    var bufferType = Float64Array,\n      mixFunction;\n\n    switch (typeName) {\n      case \"quaternion\":\n        mixFunction = this._slerp;\n        break;\n\n      case \"string\":\n      case \"bool\":\n        bufferType = Array;\n        mixFunction = this._select;\n        break;\n\n      default:\n        mixFunction = this._lerp;\n    }\n\n    this.buffer = new bufferType(valueSize * 4);\n    // layout: [ incoming | accu0 | accu1 | orig ]\n    //\n    // interpolators can use .buffer as their .result\n    // the data then goes to 'incoming'\n    //\n    // 'accu0' and 'accu1' are used frame-interleaved for\n    // the cumulative result and are compared to detect\n    // changes\n    //\n    // 'orig' stores the original state of the property\n\n    this._mixBufferRegion = mixFunction;\n\n    this.cumulativeWeight = 0;\n\n    this.useCount = 0;\n    this.referenceCount = 0;\n  }\n\n  Object.assign(PropertyMixer.prototype, {\n    // accumulate data in the 'incoming' region into 'accu<i>'\n    accumulate: function (accuIndex, weight) {\n      // note: happily accumulating nothing when weight = 0, the caller knows\n      // the weight and shouldn't have made the call in the first place\n\n      var buffer = this.buffer,\n        stride = this.valueSize,\n        offset = accuIndex * stride + stride,\n        currentWeight = this.cumulativeWeight;\n\n      if (currentWeight === 0) {\n        // accuN := incoming * weight\n\n        for (var i = 0; i !== stride; ++i) {\n          buffer[offset + i] = buffer[i];\n        }\n\n        currentWeight = weight;\n      } else {\n        // accuN := accuN + incoming * weight\n\n        currentWeight += weight;\n        var mix = weight / currentWeight;\n        this._mixBufferRegion(buffer, offset, 0, mix, stride);\n      }\n\n      this.cumulativeWeight = currentWeight;\n    },\n\n    // apply the state of 'accu<i>' to the binding when accus differ\n    apply: function (accuIndex) {\n      var stride = this.valueSize,\n        buffer = this.buffer,\n        offset = accuIndex * stride + stride,\n        weight = this.cumulativeWeight,\n        binding = this.binding;\n\n      this.cumulativeWeight = 0;\n\n      if (weight < 1) {\n        // accuN := accuN + original * ( 1 - cumulativeWeight )\n\n        var originalValueOffset = stride * 3;\n\n        this._mixBufferRegion(\n          buffer,\n          offset,\n          originalValueOffset,\n          1 - weight,\n          stride\n        );\n      }\n\n      for (var i = stride, e = stride + stride; i !== e; ++i) {\n        if (buffer[i] !== buffer[i + stride]) {\n          // value has changed -> update scene graph\n\n          binding.setValue(buffer, offset);\n          break;\n        }\n      }\n    },\n\n    // remember the state of the bound property and copy it to both accus\n    saveOriginalState: function () {\n      var binding = this.binding;\n\n      var buffer = this.buffer,\n        stride = this.valueSize,\n        originalValueOffset = stride * 3;\n\n      binding.getValue(buffer, originalValueOffset);\n\n      // accu[0..1] := orig -- initially detect changes against the original\n      for (var i = stride, e = originalValueOffset; i !== e; ++i) {\n        buffer[i] = buffer[originalValueOffset + (i % stride)];\n      }\n\n      this.cumulativeWeight = 0;\n    },\n\n    // apply the state previously taken via 'saveOriginalState' to the binding\n    restoreOriginalState: function () {\n      var originalValueOffset = this.valueSize * 3;\n      this.binding.setValue(this.buffer, originalValueOffset);\n    },\n\n    // mix functions\n\n    _select: function (buffer, dstOffset, srcOffset, t, stride) {\n      if (t >= 0.5) {\n        for (var i = 0; i !== stride; ++i) {\n          buffer[dstOffset + i] = buffer[srcOffset + i];\n        }\n      }\n    },\n\n    _slerp: function (buffer, dstOffset, srcOffset, t) {\n      Quaternion.slerpFlat(\n        buffer,\n        dstOffset,\n        buffer,\n        dstOffset,\n        buffer,\n        srcOffset,\n        t\n      );\n    },\n\n    _lerp: function (buffer, dstOffset, srcOffset, t, stride) {\n      var s = 1 - t;\n\n      for (var i = 0; i !== stride; ++i) {\n        var j = dstOffset + i;\n\n        buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n      }\n    },\n  });\n\n  /**\n   *\n   * A reference to a real property in the scene graph.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  // Characters [].:/ are reserved for track binding syntax.\n  var RESERVED_CHARS_RE = \"\\\\[\\\\]\\\\.:\\\\/\";\n\n  function Composite(targetGroup, path, optionalParsedPath) {\n    var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\n    this._targetGroup = targetGroup;\n    this._bindings = targetGroup.subscribe_(path, parsedPath);\n  }\n\n  Object.assign(Composite.prototype, {\n    getValue: function (array, offset) {\n      this.bind(); // bind all binding\n\n      var firstValidIndex = this._targetGroup.nCachedObjects_,\n        binding = this._bindings[firstValidIndex];\n\n      // and only call .getValue on the first\n      if (binding !== undefined) binding.getValue(array, offset);\n    },\n\n    setValue: function (array, offset) {\n      var bindings = this._bindings;\n\n      for (\n        var i = this._targetGroup.nCachedObjects_, n = bindings.length;\n        i !== n;\n        ++i\n      ) {\n        bindings[i].setValue(array, offset);\n      }\n    },\n\n    bind: function () {\n      var bindings = this._bindings;\n\n      for (\n        var i = this._targetGroup.nCachedObjects_, n = bindings.length;\n        i !== n;\n        ++i\n      ) {\n        bindings[i].bind();\n      }\n    },\n\n    unbind: function () {\n      var bindings = this._bindings;\n\n      for (\n        var i = this._targetGroup.nCachedObjects_, n = bindings.length;\n        i !== n;\n        ++i\n      ) {\n        bindings[i].unbind();\n      }\n    },\n  });\n\n  function PropertyBinding(rootNode, path, parsedPath) {\n    this.path = path;\n    this.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\n    this.node =\n      PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\n    this.rootNode = rootNode;\n  }\n\n  Object.assign(PropertyBinding, {\n    Composite: Composite,\n\n    create: function (root, path, parsedPath) {\n      if (!(root && root.isAnimationObjectGroup)) {\n        return new PropertyBinding(root, path, parsedPath);\n      } else {\n        return new PropertyBinding.Composite(root, path, parsedPath);\n      }\n    },\n\n    /**\n     * Replaces spaces with underscores and removes unsupported characters from\n     * node names, to ensure compatibility with parseTrackName().\n     *\n     * @param  {string} name Node name to be sanitized.\n     * @return {string}\n     */\n    sanitizeNodeName: (function () {\n      var reservedRe = new RegExp(\"[\" + RESERVED_CHARS_RE + \"]\", \"g\");\n\n      return function sanitizeNodeName(name) {\n        return name.replace(/\\s/g, \"_\").replace(reservedRe, \"\");\n      };\n    })(),\n\n    parseTrackName: (function () {\n      // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n      // only latin characters, and the unicode \\p{L} is not yet supported. So\n      // instead, we exclude reserved characters and match everything else.\n      var wordChar = \"[^\" + RESERVED_CHARS_RE + \"]\";\n      var wordCharOrDot = \"[^\" + RESERVED_CHARS_RE.replace(\"\\\\.\", \"\") + \"]\";\n\n      // Parent directories, delimited by '/' or ':'. Currently unused, but must\n      // be matched to parse the rest of the track name.\n      var directoryRe = /((?:WC+[\\/:])*)/.source.replace(\"WC\", wordChar);\n\n      // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n      var nodeRe = /(WCOD+)?/.source.replace(\"WCOD\", wordCharOrDot);\n\n      // Object on target node, and accessor. May not contain reserved\n      // characters. Accessor may contain any character except closing bracket.\n      var objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace(\"WC\", wordChar);\n\n      // Property and accessor. May not contain reserved characters. Accessor may\n      // contain any non-bracket characters.\n      var propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace(\"WC\", wordChar);\n\n      var trackRe = new RegExp(\n        \"\" + \"^\" + directoryRe + nodeRe + objectRe + propertyRe + \"$\"\n      );\n\n      var supportedObjectNames = [\"material\", \"materials\", \"bones\"];\n\n      return function parseTrackName(trackName) {\n        var matches = trackRe.exec(trackName);\n\n        if (!matches) {\n          throw new Error(\n            \"PropertyBinding: Cannot parse trackName: \" + trackName\n          );\n        }\n\n        var results = {\n          // directoryName: matches[ 1 ], // (tschw) currently unused\n          nodeName: matches[2],\n          objectName: matches[3],\n          objectIndex: matches[4],\n          propertyName: matches[5], // required\n          propertyIndex: matches[6],\n        };\n\n        var lastDot = results.nodeName && results.nodeName.lastIndexOf(\".\");\n\n        if (lastDot !== undefined && lastDot !== -1) {\n          var objectName = results.nodeName.substring(lastDot + 1);\n\n          // Object names must be checked against a whitelist. Otherwise, there\n          // is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n          // 'bar' could be the objectName, or part of a nodeName (which can\n          // include '.' characters).\n          if (supportedObjectNames.indexOf(objectName) !== -1) {\n            results.nodeName = results.nodeName.substring(0, lastDot);\n            results.objectName = objectName;\n          }\n        }\n\n        if (\n          results.propertyName === null ||\n          results.propertyName.length === 0\n        ) {\n          throw new Error(\n            \"PropertyBinding: can not parse propertyName from trackName: \" +\n              trackName\n          );\n        }\n\n        return results;\n      };\n    })(),\n\n    findNode: function (root, nodeName) {\n      if (\n        !nodeName ||\n        nodeName === \"\" ||\n        nodeName === \"root\" ||\n        nodeName === \".\" ||\n        nodeName === -1 ||\n        nodeName === root.name ||\n        nodeName === root.uuid\n      ) {\n        return root;\n      }\n\n      // search into skeleton bones.\n      if (root.skeleton) {\n        var bone = root.skeleton.getBoneByName(nodeName);\n\n        if (bone !== undefined) {\n          return bone;\n        }\n      }\n\n      // search into node subtree.\n      if (root.children) {\n        var searchNodeSubtree = function (children) {\n          for (var i = 0; i < children.length; i++) {\n            var childNode = children[i];\n\n            if (childNode.name === nodeName || childNode.uuid === nodeName) {\n              return childNode;\n            }\n\n            var result = searchNodeSubtree(childNode.children);\n\n            if (result) return result;\n          }\n\n          return null;\n        };\n\n        var subTreeNode = searchNodeSubtree(root.children);\n\n        if (subTreeNode) {\n          return subTreeNode;\n        }\n      }\n\n      return null;\n    },\n  });\n\n  Object.assign(PropertyBinding.prototype, {\n    // prototype, continued\n\n    // these are used to \"bind\" a nonexistent property\n    _getValue_unavailable: function () {},\n    _setValue_unavailable: function () {},\n\n    BindingType: {\n      Direct: 0,\n      EntireArray: 1,\n      ArrayElement: 2,\n      HasFromToArray: 3,\n    },\n\n    Versioning: {\n      None: 0,\n      NeedsUpdate: 1,\n      MatrixWorldNeedsUpdate: 2,\n    },\n\n    GetterByBindingType: [\n      function getValue_direct(buffer, offset) {\n        buffer[offset] = this.node[this.propertyName];\n      },\n\n      function getValue_array(buffer, offset) {\n        var source = this.resolvedProperty;\n\n        for (var i = 0, n = source.length; i !== n; ++i) {\n          buffer[offset++] = source[i];\n        }\n      },\n\n      function getValue_arrayElement(buffer, offset) {\n        buffer[offset] = this.resolvedProperty[this.propertyIndex];\n      },\n\n      function getValue_toArray(buffer, offset) {\n        this.resolvedProperty.toArray(buffer, offset);\n      },\n    ],\n\n    SetterByBindingTypeAndVersioning: [\n      [\n        // Direct\n\n        function setValue_direct(buffer, offset) {\n          this.targetObject[this.propertyName] = buffer[offset];\n        },\n\n        function setValue_direct_setNeedsUpdate(buffer, offset) {\n          this.targetObject[this.propertyName] = buffer[offset];\n          this.targetObject.needsUpdate = true;\n        },\n\n        function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n          this.targetObject[this.propertyName] = buffer[offset];\n          this.targetObject.matrixWorldNeedsUpdate = true;\n        },\n      ],\n      [\n        // EntireArray\n\n        function setValue_array(buffer, offset) {\n          var dest = this.resolvedProperty;\n\n          for (var i = 0, n = dest.length; i !== n; ++i) {\n            dest[i] = buffer[offset++];\n          }\n        },\n\n        function setValue_array_setNeedsUpdate(buffer, offset) {\n          var dest = this.resolvedProperty;\n\n          for (var i = 0, n = dest.length; i !== n; ++i) {\n            dest[i] = buffer[offset++];\n          }\n\n          this.targetObject.needsUpdate = true;\n        },\n\n        function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n          var dest = this.resolvedProperty;\n\n          for (var i = 0, n = dest.length; i !== n; ++i) {\n            dest[i] = buffer[offset++];\n          }\n\n          this.targetObject.matrixWorldNeedsUpdate = true;\n        },\n      ],\n      [\n        // ArrayElement\n\n        function setValue_arrayElement(buffer, offset) {\n          this.resolvedProperty[this.propertyIndex] = buffer[offset];\n        },\n\n        function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n          this.resolvedProperty[this.propertyIndex] = buffer[offset];\n          this.targetObject.needsUpdate = true;\n        },\n\n        function setValue_arrayElement_setMatrixWorldNeedsUpdate(\n          buffer,\n          offset\n        ) {\n          this.resolvedProperty[this.propertyIndex] = buffer[offset];\n          this.targetObject.matrixWorldNeedsUpdate = true;\n        },\n      ],\n      [\n        // HasToFromArray\n\n        function setValue_fromArray(buffer, offset) {\n          this.resolvedProperty.fromArray(buffer, offset);\n        },\n\n        function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n          this.resolvedProperty.fromArray(buffer, offset);\n          this.targetObject.needsUpdate = true;\n        },\n\n        function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n          this.resolvedProperty.fromArray(buffer, offset);\n          this.targetObject.matrixWorldNeedsUpdate = true;\n        },\n      ],\n    ],\n\n    getValue: function getValue_unbound(targetArray, offset) {\n      this.bind();\n      this.getValue(targetArray, offset);\n\n      // Note: This class uses a State pattern on a per-method basis:\n      // 'bind' sets 'this.getValue' / 'setValue' and shadows the\n      // prototype version of these methods with one that represents\n      // the bound state. When the property is not found, the methods\n      // become no-ops.\n    },\n\n    setValue: function getValue_unbound(sourceArray, offset) {\n      this.bind();\n      this.setValue(sourceArray, offset);\n    },\n\n    // create getter / setter pair for a property in the scene graph\n    bind: function () {\n      var targetObject = this.node,\n        parsedPath = this.parsedPath,\n        objectName = parsedPath.objectName,\n        propertyName = parsedPath.propertyName,\n        propertyIndex = parsedPath.propertyIndex;\n\n      if (!targetObject) {\n        targetObject =\n          PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) ||\n          this.rootNode;\n\n        this.node = targetObject;\n      }\n\n      // set fail state so we can just 'return' on error\n      this.getValue = this._getValue_unavailable;\n      this.setValue = this._setValue_unavailable;\n\n      // ensure there is a value node\n      if (!targetObject) {\n        console.error(\n          \"THREE.PropertyBinding: Trying to update node for track: \" +\n            this.path +\n            \" but it wasn't found.\"\n        );\n        return;\n      }\n\n      if (objectName) {\n        var objectIndex = parsedPath.objectIndex;\n\n        // special cases were we need to reach deeper into the hierarchy to get the face materials....\n        switch (objectName) {\n          case \"materials\":\n            if (!targetObject.material) {\n              console.error(\n                \"THREE.PropertyBinding: Can not bind to material as node does not have a material.\",\n                this\n              );\n              return;\n            }\n\n            if (!targetObject.material.materials) {\n              console.error(\n                \"THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.\",\n                this\n              );\n              return;\n            }\n\n            targetObject = targetObject.material.materials;\n\n            break;\n\n          case \"bones\":\n            if (!targetObject.skeleton) {\n              console.error(\n                \"THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.\",\n                this\n              );\n              return;\n            }\n\n            // potential future optimization: skip this if propertyIndex is already an integer\n            // and convert the integer string to a true integer.\n\n            targetObject = targetObject.skeleton.bones;\n\n            // support resolving morphTarget names into indices.\n            for (var i = 0; i < targetObject.length; i++) {\n              if (targetObject[i].name === objectIndex) {\n                objectIndex = i;\n                break;\n              }\n            }\n\n            break;\n\n          default:\n            if (targetObject[objectName] === undefined) {\n              console.error(\n                \"THREE.PropertyBinding: Can not bind to objectName of node undefined.\",\n                this\n              );\n              return;\n            }\n\n            targetObject = targetObject[objectName];\n        }\n\n        if (objectIndex !== undefined) {\n          if (targetObject[objectIndex] === undefined) {\n            console.error(\n              \"THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.\",\n              this,\n              targetObject\n            );\n            return;\n          }\n\n          targetObject = targetObject[objectIndex];\n        }\n      }\n\n      // resolve property\n      var nodeProperty = targetObject[propertyName];\n\n      if (nodeProperty === undefined) {\n        var nodeName = parsedPath.nodeName;\n\n        console.error(\n          \"THREE.PropertyBinding: Trying to update property for track: \" +\n            nodeName +\n            \".\" +\n            propertyName +\n            \" but it wasn't found.\",\n          targetObject\n        );\n        return;\n      }\n\n      // determine versioning scheme\n      var versioning = this.Versioning.None;\n\n      if (targetObject.needsUpdate !== undefined) {\n        // material\n\n        versioning = this.Versioning.NeedsUpdate;\n        this.targetObject = targetObject;\n      } else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n        // node transform\n\n        versioning = this.Versioning.MatrixWorldNeedsUpdate;\n        this.targetObject = targetObject;\n      }\n\n      // determine how the property gets bound\n      var bindingType = this.BindingType.Direct;\n\n      if (propertyIndex !== undefined) {\n        // access a sub element of the property array (only primitives are supported right now)\n\n        if (propertyName === \"morphTargetInfluences\") {\n          // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n          // support resolving morphTarget names into indices.\n          if (!targetObject.geometry) {\n            console.error(\n              \"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.\",\n              this\n            );\n            return;\n          }\n\n          if (targetObject.geometry.isBufferGeometry) {\n            if (!targetObject.geometry.morphAttributes) {\n              console.error(\n                \"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.\",\n                this\n              );\n              return;\n            }\n\n            for (\n              var i = 0;\n              i < this.node.geometry.morphAttributes.position.length;\n              i++\n            ) {\n              if (\n                targetObject.geometry.morphAttributes.position[i].name ===\n                propertyIndex\n              ) {\n                propertyIndex = i;\n                break;\n              }\n            }\n          } else {\n            if (!targetObject.geometry.morphTargets) {\n              console.error(\n                \"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.\",\n                this\n              );\n              return;\n            }\n\n            for (var i = 0; i < this.node.geometry.morphTargets.length; i++) {\n              if (\n                targetObject.geometry.morphTargets[i].name === propertyIndex\n              ) {\n                propertyIndex = i;\n                break;\n              }\n            }\n          }\n        }\n\n        bindingType = this.BindingType.ArrayElement;\n\n        this.resolvedProperty = nodeProperty;\n        this.propertyIndex = propertyIndex;\n      } else if (\n        nodeProperty.fromArray !== undefined &&\n        nodeProperty.toArray !== undefined\n      ) {\n        // must use copy for Object3D.Euler/Quaternion\n\n        bindingType = this.BindingType.HasFromToArray;\n\n        this.resolvedProperty = nodeProperty;\n      } else if (Array.isArray(nodeProperty)) {\n        bindingType = this.BindingType.EntireArray;\n\n        this.resolvedProperty = nodeProperty;\n      } else {\n        this.propertyName = propertyName;\n      }\n\n      // select getter / setter\n      this.getValue = this.GetterByBindingType[bindingType];\n      this.setValue =\n        this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n    },\n\n    unbind: function () {\n      this.node = null;\n\n      // back to the prototype version of getValue / setValue\n      // note: avoiding to mutate the shape of 'this' via 'delete'\n      this.getValue = this._getValue_unbound;\n      this.setValue = this._setValue_unbound;\n    },\n  });\n\n  //!\\ DECLARE ALIAS AFTER assign prototype !\n  Object.assign(PropertyBinding.prototype, {\n    // initial state of these methods that calls 'bind'\n    _getValue_unbound: PropertyBinding.prototype.getValue,\n    _setValue_unbound: PropertyBinding.prototype.setValue,\n  });\n\n  /**\n   *\n   * A group of objects that receives a shared animation state.\n   *\n   * Usage:\n   *\n   * \t-\tAdd objects you would otherwise pass as 'root' to the\n   * \t\tconstructor or the .clipAction method of AnimationMixer.\n   *\n   * \t-\tInstead pass this object as 'root'.\n   *\n   * \t-\tYou can also add and remove objects later when the mixer\n   * \t\tis running.\n   *\n   * Note:\n   *\n   *  \tObjects of this class appear as one object to the mixer,\n   *  \tso cache control of the individual objects must be done\n   *  \ton the group.\n   *\n   * Limitation:\n   *\n   * \t- \tThe animated properties must be compatible among the\n   * \t\tall objects in the group.\n   *\n   *  -\tA single property can either be controlled through a\n   *  \ttarget group or directly, but not both.\n   *\n   * @author tschw\n   */\n\n  function AnimationObjectGroup() {\n    this.uuid = _Math.generateUUID();\n\n    // cached objects followed by the active ones\n    this._objects = Array.prototype.slice.call(arguments);\n\n    this.nCachedObjects_ = 0; // threshold\n    // note: read by PropertyBinding.Composite\n\n    var indices = {};\n    this._indicesByUUID = indices; // for bookkeeping\n\n    for (var i = 0, n = arguments.length; i !== n; ++i) {\n      indices[arguments[i].uuid] = i;\n    }\n\n    this._paths = []; // inside: string\n    this._parsedPaths = []; // inside: { we don't care, here }\n    this._bindings = []; // inside: Array< PropertyBinding >\n    this._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n    var scope = this;\n\n    this.stats = {\n      objects: {\n        get total() {\n          return scope._objects.length;\n        },\n        get inUse() {\n          return this.total - scope.nCachedObjects_;\n        },\n      },\n      get bindingsPerObject() {\n        return scope._bindings.length;\n      },\n    };\n  }\n\n  Object.assign(AnimationObjectGroup.prototype, {\n    isAnimationObjectGroup: true,\n\n    add: function () {\n      var objects = this._objects,\n        nObjects = objects.length,\n        nCachedObjects = this.nCachedObjects_,\n        indicesByUUID = this._indicesByUUID,\n        paths = this._paths,\n        parsedPaths = this._parsedPaths,\n        bindings = this._bindings,\n        nBindings = bindings.length,\n        knownObject = undefined;\n\n      for (var i = 0, n = arguments.length; i !== n; ++i) {\n        var object = arguments[i],\n          uuid = object.uuid,\n          index = indicesByUUID[uuid];\n\n        if (index === undefined) {\n          // unknown object -> add it to the ACTIVE region\n\n          index = nObjects++;\n          indicesByUUID[uuid] = index;\n          objects.push(object);\n\n          // accounting is done, now do the same for all bindings\n\n          for (var j = 0, m = nBindings; j !== m; ++j) {\n            bindings[j].push(\n              new PropertyBinding(object, paths[j], parsedPaths[j])\n            );\n          }\n        } else if (index < nCachedObjects) {\n          knownObject = objects[index];\n\n          // move existing object to the ACTIVE region\n\n          var firstActiveIndex = --nCachedObjects,\n            lastCachedObject = objects[firstActiveIndex];\n\n          indicesByUUID[lastCachedObject.uuid] = index;\n          objects[index] = lastCachedObject;\n\n          indicesByUUID[uuid] = firstActiveIndex;\n          objects[firstActiveIndex] = object;\n\n          // accounting is done, now do the same for all bindings\n\n          for (var j = 0, m = nBindings; j !== m; ++j) {\n            var bindingsForPath = bindings[j],\n              lastCached = bindingsForPath[firstActiveIndex],\n              binding = bindingsForPath[index];\n\n            bindingsForPath[index] = lastCached;\n\n            if (binding === undefined) {\n              // since we do not bother to create new bindings\n              // for objects that are cached, the binding may\n              // or may not exist\n\n              binding = new PropertyBinding(object, paths[j], parsedPaths[j]);\n            }\n\n            bindingsForPath[firstActiveIndex] = binding;\n          }\n        } else if (objects[index] !== knownObject) {\n          console.error(\n            \"THREE.AnimationObjectGroup: Different objects with the same UUID \" +\n              \"detected. Clean the caches or recreate your infrastructure when reloading scenes.\"\n          );\n        } // else the object is already where we want it to be\n      } // for arguments\n\n      this.nCachedObjects_ = nCachedObjects;\n    },\n\n    remove: function () {\n      var objects = this._objects,\n        nCachedObjects = this.nCachedObjects_,\n        indicesByUUID = this._indicesByUUID,\n        bindings = this._bindings,\n        nBindings = bindings.length;\n\n      for (var i = 0, n = arguments.length; i !== n; ++i) {\n        var object = arguments[i],\n          uuid = object.uuid,\n          index = indicesByUUID[uuid];\n\n        if (index !== undefined && index >= nCachedObjects) {\n          // move existing object into the CACHED region\n\n          var lastCachedIndex = nCachedObjects++,\n            firstActiveObject = objects[lastCachedIndex];\n\n          indicesByUUID[firstActiveObject.uuid] = index;\n          objects[index] = firstActiveObject;\n\n          indicesByUUID[uuid] = lastCachedIndex;\n          objects[lastCachedIndex] = object;\n\n          // accounting is done, now do the same for all bindings\n\n          for (var j = 0, m = nBindings; j !== m; ++j) {\n            var bindingsForPath = bindings[j],\n              firstActive = bindingsForPath[lastCachedIndex],\n              binding = bindingsForPath[index];\n\n            bindingsForPath[index] = firstActive;\n            bindingsForPath[lastCachedIndex] = binding;\n          }\n        }\n      } // for arguments\n\n      this.nCachedObjects_ = nCachedObjects;\n    },\n\n    // remove & forget\n    uncache: function () {\n      var objects = this._objects,\n        nObjects = objects.length,\n        nCachedObjects = this.nCachedObjects_,\n        indicesByUUID = this._indicesByUUID,\n        bindings = this._bindings,\n        nBindings = bindings.length;\n\n      for (var i = 0, n = arguments.length; i !== n; ++i) {\n        var object = arguments[i],\n          uuid = object.uuid,\n          index = indicesByUUID[uuid];\n\n        if (index !== undefined) {\n          delete indicesByUUID[uuid];\n\n          if (index < nCachedObjects) {\n            // object is cached, shrink the CACHED region\n\n            var firstActiveIndex = --nCachedObjects,\n              lastCachedObject = objects[firstActiveIndex],\n              lastIndex = --nObjects,\n              lastObject = objects[lastIndex];\n\n            // last cached object takes this object's place\n            indicesByUUID[lastCachedObject.uuid] = index;\n            objects[index] = lastCachedObject;\n\n            // last object goes to the activated slot and pop\n            indicesByUUID[lastObject.uuid] = firstActiveIndex;\n            objects[firstActiveIndex] = lastObject;\n            objects.pop();\n\n            // accounting is done, now do the same for all bindings\n\n            for (var j = 0, m = nBindings; j !== m; ++j) {\n              var bindingsForPath = bindings[j],\n                lastCached = bindingsForPath[firstActiveIndex],\n                last = bindingsForPath[lastIndex];\n\n              bindingsForPath[index] = lastCached;\n              bindingsForPath[firstActiveIndex] = last;\n              bindingsForPath.pop();\n            }\n          } else {\n            // object is active, just swap with the last and pop\n\n            var lastIndex = --nObjects,\n              lastObject = objects[lastIndex];\n\n            indicesByUUID[lastObject.uuid] = index;\n            objects[index] = lastObject;\n            objects.pop();\n\n            // accounting is done, now do the same for all bindings\n\n            for (var j = 0, m = nBindings; j !== m; ++j) {\n              var bindingsForPath = bindings[j];\n\n              bindingsForPath[index] = bindingsForPath[lastIndex];\n              bindingsForPath.pop();\n            }\n          } // cached or active\n        } // if object is known\n      } // for arguments\n\n      this.nCachedObjects_ = nCachedObjects;\n    },\n\n    // Internal interface used by befriended PropertyBinding.Composite:\n\n    subscribe_: function (path, parsedPath) {\n      // returns an array of bindings for the given path that is changed\n      // according to the contained objects in the group\n\n      var indicesByPath = this._bindingsIndicesByPath,\n        index = indicesByPath[path],\n        bindings = this._bindings;\n\n      if (index !== undefined) return bindings[index];\n\n      var paths = this._paths,\n        parsedPaths = this._parsedPaths,\n        objects = this._objects,\n        nObjects = objects.length,\n        nCachedObjects = this.nCachedObjects_,\n        bindingsForPath = new Array(nObjects);\n\n      index = bindings.length;\n\n      indicesByPath[path] = index;\n\n      paths.push(path);\n      parsedPaths.push(parsedPath);\n      bindings.push(bindingsForPath);\n\n      for (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n        var object = objects[i];\n        bindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n      }\n\n      return bindingsForPath;\n    },\n\n    unsubscribe_: function (path) {\n      // tells the group to forget about a property path and no longer\n      // update the array previously obtained with 'subscribe_'\n\n      var indicesByPath = this._bindingsIndicesByPath,\n        index = indicesByPath[path];\n\n      if (index !== undefined) {\n        var paths = this._paths,\n          parsedPaths = this._parsedPaths,\n          bindings = this._bindings,\n          lastBindingsIndex = bindings.length - 1,\n          lastBindings = bindings[lastBindingsIndex],\n          lastBindingsPath = path[lastBindingsIndex];\n\n        indicesByPath[lastBindingsPath] = index;\n\n        bindings[index] = lastBindings;\n        bindings.pop();\n\n        parsedPaths[index] = parsedPaths[lastBindingsIndex];\n        parsedPaths.pop();\n\n        paths[index] = paths[lastBindingsIndex];\n        paths.pop();\n      }\n    },\n  });\n\n  /**\n   *\n   * Action provided by AnimationMixer for scheduling clip playback on specific\n   * objects.\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   *\n   */\n\n  function AnimationAction(mixer, clip, localRoot) {\n    this._mixer = mixer;\n    this._clip = clip;\n    this._localRoot = localRoot || null;\n\n    var tracks = clip.tracks,\n      nTracks = tracks.length,\n      interpolants = new Array(nTracks);\n\n    var interpolantSettings = {\n      endingStart: ZeroCurvatureEnding,\n      endingEnd: ZeroCurvatureEnding,\n    };\n\n    for (var i = 0; i !== nTracks; ++i) {\n      var interpolant = tracks[i].createInterpolant(null);\n      interpolants[i] = interpolant;\n      interpolant.settings = interpolantSettings;\n    }\n\n    this._interpolantSettings = interpolantSettings;\n\n    this._interpolants = interpolants; // bound by the mixer\n\n    // inside: PropertyMixer (managed by the mixer)\n    this._propertyBindings = new Array(nTracks);\n\n    this._cacheIndex = null; // for the memory manager\n    this._byClipCacheIndex = null; // for the memory manager\n\n    this._timeScaleInterpolant = null;\n    this._weightInterpolant = null;\n\n    this.loop = LoopRepeat;\n    this._loopCount = -1;\n\n    // global mixer time when the action is to be started\n    // it's set back to 'null' upon start of the action\n    this._startTime = null;\n\n    // scaled local time of the action\n    // gets clamped or wrapped to 0..clip.duration according to loop\n    this.time = 0;\n\n    this.timeScale = 1;\n    this._effectiveTimeScale = 1;\n\n    this.weight = 1;\n    this._effectiveWeight = 1;\n\n    this.repetitions = Infinity; // no. of repetitions when looping\n\n    this.paused = false; // true -> zero effective time scale\n    this.enabled = true; // false -> zero effective weight\n\n    this.clampWhenFinished = false; // keep feeding the last frame?\n\n    this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n    this.zeroSlopeAtEnd = true; // clips for start, loop and end\n  }\n\n  Object.assign(AnimationAction.prototype, {\n    // State & Scheduling\n\n    play: function () {\n      this._mixer._activateAction(this);\n\n      return this;\n    },\n\n    stop: function () {\n      this._mixer._deactivateAction(this);\n\n      return this.reset();\n    },\n\n    reset: function () {\n      this.paused = false;\n      this.enabled = true;\n\n      this.time = 0; // restart clip\n      this._loopCount = -1; // forget previous loops\n      this._startTime = null; // forget scheduling\n\n      return this.stopFading().stopWarping();\n    },\n\n    isRunning: function () {\n      return (\n        this.enabled &&\n        !this.paused &&\n        this.timeScale !== 0 &&\n        this._startTime === null &&\n        this._mixer._isActiveAction(this)\n      );\n    },\n\n    // return true when play has been called\n    isScheduled: function () {\n      return this._mixer._isActiveAction(this);\n    },\n\n    startAt: function (time) {\n      this._startTime = time;\n\n      return this;\n    },\n\n    setLoop: function (mode, repetitions) {\n      this.loop = mode;\n      this.repetitions = repetitions;\n\n      return this;\n    },\n\n    // Weight\n\n    // set the weight stopping any scheduled fading\n    // although .enabled = false yields an effective weight of zero, this\n    // method does *not* change .enabled, because it would be confusing\n    setEffectiveWeight: function (weight) {\n      this.weight = weight;\n\n      // note: same logic as when updated at runtime\n      this._effectiveWeight = this.enabled ? weight : 0;\n\n      return this.stopFading();\n    },\n\n    // return the weight considering fading and .enabled\n    getEffectiveWeight: function () {\n      return this._effectiveWeight;\n    },\n\n    fadeIn: function (duration) {\n      return this._scheduleFading(duration, 0, 1);\n    },\n\n    fadeOut: function (duration) {\n      return this._scheduleFading(duration, 1, 0);\n    },\n\n    crossFadeFrom: function (fadeOutAction, duration, warp) {\n      fadeOutAction.fadeOut(duration);\n      this.fadeIn(duration);\n\n      if (warp) {\n        var fadeInDuration = this._clip.duration,\n          fadeOutDuration = fadeOutAction._clip.duration,\n          startEndRatio = fadeOutDuration / fadeInDuration,\n          endStartRatio = fadeInDuration / fadeOutDuration;\n\n        fadeOutAction.warp(1.0, startEndRatio, duration);\n        this.warp(endStartRatio, 1.0, duration);\n      }\n\n      return this;\n    },\n\n    crossFadeTo: function (fadeInAction, duration, warp) {\n      return fadeInAction.crossFadeFrom(this, duration, warp);\n    },\n\n    stopFading: function () {\n      var weightInterpolant = this._weightInterpolant;\n\n      if (weightInterpolant !== null) {\n        this._weightInterpolant = null;\n        this._mixer._takeBackControlInterpolant(weightInterpolant);\n      }\n\n      return this;\n    },\n\n    // Time Scale Control\n\n    // set the time scale stopping any scheduled warping\n    // although .paused = true yields an effective time scale of zero, this\n    // method does *not* change .paused, because it would be confusing\n    setEffectiveTimeScale: function (timeScale) {\n      this.timeScale = timeScale;\n      this._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n      return this.stopWarping();\n    },\n\n    // return the time scale considering warping and .paused\n    getEffectiveTimeScale: function () {\n      return this._effectiveTimeScale;\n    },\n\n    setDuration: function (duration) {\n      this.timeScale = this._clip.duration / duration;\n\n      return this.stopWarping();\n    },\n\n    syncWith: function (action) {\n      this.time = action.time;\n      this.timeScale = action.timeScale;\n\n      return this.stopWarping();\n    },\n\n    halt: function (duration) {\n      return this.warp(this._effectiveTimeScale, 0, duration);\n    },\n\n    warp: function (startTimeScale, endTimeScale, duration) {\n      var mixer = this._mixer,\n        now = mixer.time,\n        interpolant = this._timeScaleInterpolant,\n        timeScale = this.timeScale;\n\n      if (interpolant === null) {\n        interpolant = mixer._lendControlInterpolant();\n        this._timeScaleInterpolant = interpolant;\n      }\n\n      var times = interpolant.parameterPositions,\n        values = interpolant.sampleValues;\n\n      times[0] = now;\n      times[1] = now + duration;\n\n      values[0] = startTimeScale / timeScale;\n      values[1] = endTimeScale / timeScale;\n\n      return this;\n    },\n\n    stopWarping: function () {\n      var timeScaleInterpolant = this._timeScaleInterpolant;\n\n      if (timeScaleInterpolant !== null) {\n        this._timeScaleInterpolant = null;\n        this._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n      }\n\n      return this;\n    },\n\n    // Object Accessors\n\n    getMixer: function () {\n      return this._mixer;\n    },\n\n    getClip: function () {\n      return this._clip;\n    },\n\n    getRoot: function () {\n      return this._localRoot || this._mixer._root;\n    },\n\n    // Interna\n\n    _update: function (time, deltaTime, timeDirection, accuIndex) {\n      // called by the mixer\n\n      if (!this.enabled) {\n        // call ._updateWeight() to update ._effectiveWeight\n\n        this._updateWeight(time);\n        return;\n      }\n\n      var startTime = this._startTime;\n\n      if (startTime !== null) {\n        // check for scheduled start of action\n\n        var timeRunning = (time - startTime) * timeDirection;\n        if (timeRunning < 0 || timeDirection === 0) {\n          return; // yet to come / don't decide when delta = 0\n        }\n\n        // start\n\n        this._startTime = null; // unschedule\n        deltaTime = timeDirection * timeRunning;\n      }\n\n      // apply time scale and advance time\n\n      deltaTime *= this._updateTimeScale(time);\n      var clipTime = this._updateTime(deltaTime);\n\n      // note: _updateTime may disable the action resulting in\n      // an effective weight of 0\n\n      var weight = this._updateWeight(time);\n\n      if (weight > 0) {\n        var interpolants = this._interpolants;\n        var propertyMixers = this._propertyBindings;\n\n        for (var j = 0, m = interpolants.length; j !== m; ++j) {\n          interpolants[j].evaluate(clipTime);\n          propertyMixers[j].accumulate(accuIndex, weight);\n        }\n      }\n    },\n\n    _updateWeight: function (time) {\n      var weight = 0;\n\n      if (this.enabled) {\n        weight = this.weight;\n        var interpolant = this._weightInterpolant;\n\n        if (interpolant !== null) {\n          var interpolantValue = interpolant.evaluate(time)[0];\n\n          weight *= interpolantValue;\n\n          if (time > interpolant.parameterPositions[1]) {\n            this.stopFading();\n\n            if (interpolantValue === 0) {\n              // faded out, disable\n              this.enabled = false;\n            }\n          }\n        }\n      }\n\n      this._effectiveWeight = weight;\n      return weight;\n    },\n\n    _updateTimeScale: function (time) {\n      var timeScale = 0;\n\n      if (!this.paused) {\n        timeScale = this.timeScale;\n\n        var interpolant = this._timeScaleInterpolant;\n\n        if (interpolant !== null) {\n          var interpolantValue = interpolant.evaluate(time)[0];\n\n          timeScale *= interpolantValue;\n\n          if (time > interpolant.parameterPositions[1]) {\n            this.stopWarping();\n\n            if (timeScale === 0) {\n              // motion has halted, pause\n              this.paused = true;\n            } else {\n              // warp done - apply final time scale\n              this.timeScale = timeScale;\n            }\n          }\n        }\n      }\n\n      this._effectiveTimeScale = timeScale;\n      return timeScale;\n    },\n\n    _updateTime: function (deltaTime) {\n      var time = this.time + deltaTime;\n      var duration = this._clip.duration;\n      var loop = this.loop;\n      var loopCount = this._loopCount;\n\n      var pingPong = loop === LoopPingPong;\n\n      if (deltaTime === 0) {\n        if (loopCount === -1) return time;\n\n        return pingPong && (loopCount & 1) === 1 ? duration - time : time;\n      }\n\n      if (loop === LoopOnce) {\n        if (loopCount === -1) {\n          // just started\n\n          this._loopCount = 0;\n          this._setEndings(true, true, false);\n        }\n\n        handle_stop: {\n          if (time >= duration) {\n            time = duration;\n          } else if (time < 0) {\n            time = 0;\n          } else break handle_stop;\n\n          if (this.clampWhenFinished) this.paused = true;\n          else this.enabled = false;\n\n          this._mixer.dispatchEvent({\n            type: \"finished\",\n            action: this,\n            direction: deltaTime < 0 ? -1 : 1,\n          });\n        }\n      } else {\n        // repetitive Repeat or PingPong\n\n        if (loopCount === -1) {\n          // just started\n\n          if (deltaTime >= 0) {\n            loopCount = 0;\n\n            this._setEndings(true, this.repetitions === 0, pingPong);\n          } else {\n            // when looping in reverse direction, the initial\n            // transition through zero counts as a repetition,\n            // so leave loopCount at -1\n\n            this._setEndings(this.repetitions === 0, true, pingPong);\n          }\n        }\n\n        if (time >= duration || time < 0) {\n          // wrap around\n\n          var loopDelta = Math.floor(time / duration); // signed\n          time -= duration * loopDelta;\n\n          loopCount += Math.abs(loopDelta);\n\n          var pending = this.repetitions - loopCount;\n\n          if (pending <= 0) {\n            // have to stop (switch state, clamp time, fire event)\n\n            if (this.clampWhenFinished) this.paused = true;\n            else this.enabled = false;\n\n            time = deltaTime > 0 ? duration : 0;\n\n            this._mixer.dispatchEvent({\n              type: \"finished\",\n              action: this,\n              direction: deltaTime > 0 ? 1 : -1,\n            });\n          } else {\n            // keep running\n\n            if (pending === 1) {\n              // entering the last round\n\n              var atStart = deltaTime < 0;\n              this._setEndings(atStart, !atStart, pingPong);\n            } else {\n              this._setEndings(false, false, pingPong);\n            }\n\n            this._loopCount = loopCount;\n\n            this._mixer.dispatchEvent({\n              type: \"loop\",\n              action: this,\n              loopDelta: loopDelta,\n            });\n          }\n        }\n\n        if (pingPong && (loopCount & 1) === 1) {\n          // invert time for the \"pong round\"\n\n          this.time = time;\n          return duration - time;\n        }\n      }\n\n      this.time = time;\n      return time;\n    },\n\n    _setEndings: function (atStart, atEnd, pingPong) {\n      var settings = this._interpolantSettings;\n\n      if (pingPong) {\n        settings.endingStart = ZeroSlopeEnding;\n        settings.endingEnd = ZeroSlopeEnding;\n      } else {\n        // assuming for LoopOnce atStart == atEnd == true\n\n        if (atStart) {\n          settings.endingStart = this.zeroSlopeAtStart\n            ? ZeroSlopeEnding\n            : ZeroCurvatureEnding;\n        } else {\n          settings.endingStart = WrapAroundEnding;\n        }\n\n        if (atEnd) {\n          settings.endingEnd = this.zeroSlopeAtEnd\n            ? ZeroSlopeEnding\n            : ZeroCurvatureEnding;\n        } else {\n          settings.endingEnd = WrapAroundEnding;\n        }\n      }\n    },\n\n    _scheduleFading: function (duration, weightNow, weightThen) {\n      var mixer = this._mixer,\n        now = mixer.time,\n        interpolant = this._weightInterpolant;\n\n      if (interpolant === null) {\n        interpolant = mixer._lendControlInterpolant();\n        this._weightInterpolant = interpolant;\n      }\n\n      var times = interpolant.parameterPositions,\n        values = interpolant.sampleValues;\n\n      times[0] = now;\n      values[0] = weightNow;\n      times[1] = now + duration;\n      values[1] = weightThen;\n\n      return this;\n    },\n  });\n\n  /**\n   *\n   * Player for AnimationClips.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  function AnimationMixer(root) {\n    this._root = root;\n    this._initMemoryManager();\n    this._accuIndex = 0;\n\n    this.time = 0;\n\n    this.timeScale = 1.0;\n  }\n\n  AnimationMixer.prototype = Object.assign(\n    Object.create(EventDispatcher.prototype),\n    {\n      constructor: AnimationMixer,\n\n      _bindAction: function (action, prototypeAction) {\n        var root = action._localRoot || this._root,\n          tracks = action._clip.tracks,\n          nTracks = tracks.length,\n          bindings = action._propertyBindings,\n          interpolants = action._interpolants,\n          rootUuid = root.uuid,\n          bindingsByRoot = this._bindingsByRootAndName,\n          bindingsByName = bindingsByRoot[rootUuid];\n\n        if (bindingsByName === undefined) {\n          bindingsByName = {};\n          bindingsByRoot[rootUuid] = bindingsByName;\n        }\n\n        for (var i = 0; i !== nTracks; ++i) {\n          var track = tracks[i],\n            trackName = track.name,\n            binding = bindingsByName[trackName];\n\n          if (binding !== undefined) {\n            bindings[i] = binding;\n          } else {\n            binding = bindings[i];\n\n            if (binding !== undefined) {\n              // existing binding, make sure the cache knows\n\n              if (binding._cacheIndex === null) {\n                ++binding.referenceCount;\n                this._addInactiveBinding(binding, rootUuid, trackName);\n              }\n\n              continue;\n            }\n\n            var path =\n              prototypeAction &&\n              prototypeAction._propertyBindings[i].binding.parsedPath;\n\n            binding = new PropertyMixer(\n              PropertyBinding.create(root, trackName, path),\n              track.ValueTypeName,\n              track.getValueSize()\n            );\n\n            ++binding.referenceCount;\n            this._addInactiveBinding(binding, rootUuid, trackName);\n\n            bindings[i] = binding;\n          }\n\n          interpolants[i].resultBuffer = binding.buffer;\n        }\n      },\n\n      _activateAction: function (action) {\n        if (!this._isActiveAction(action)) {\n          if (action._cacheIndex === null) {\n            // this action has been forgotten by the cache, but the user\n            // appears to be still using it -> rebind\n\n            var rootUuid = (action._localRoot || this._root).uuid,\n              clipUuid = action._clip.uuid,\n              actionsForClip = this._actionsByClip[clipUuid];\n\n            this._bindAction(\n              action,\n              actionsForClip && actionsForClip.knownActions[0]\n            );\n\n            this._addInactiveAction(action, clipUuid, rootUuid);\n          }\n\n          var bindings = action._propertyBindings;\n\n          // increment reference counts / sort out state\n          for (var i = 0, n = bindings.length; i !== n; ++i) {\n            var binding = bindings[i];\n\n            if (binding.useCount++ === 0) {\n              this._lendBinding(binding);\n              binding.saveOriginalState();\n            }\n          }\n\n          this._lendAction(action);\n        }\n      },\n\n      _deactivateAction: function (action) {\n        if (this._isActiveAction(action)) {\n          var bindings = action._propertyBindings;\n\n          // decrement reference counts / sort out state\n          for (var i = 0, n = bindings.length; i !== n; ++i) {\n            var binding = bindings[i];\n\n            if (--binding.useCount === 0) {\n              binding.restoreOriginalState();\n              this._takeBackBinding(binding);\n            }\n          }\n\n          this._takeBackAction(action);\n        }\n      },\n\n      // Memory manager\n\n      _initMemoryManager: function () {\n        this._actions = []; // 'nActiveActions' followed by inactive ones\n        this._nActiveActions = 0;\n\n        this._actionsByClip = {};\n        // inside:\n        // {\n        // \t\tknownActions: Array< AnimationAction >\t- used as prototypes\n        // \t\tactionByRoot: AnimationAction\t\t\t- lookup\n        // }\n\n        this._bindings = []; // 'nActiveBindings' followed by inactive ones\n        this._nActiveBindings = 0;\n\n        this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n        this._controlInterpolants = []; // same game as above\n        this._nActiveControlInterpolants = 0;\n\n        var scope = this;\n\n        this.stats = {\n          actions: {\n            get total() {\n              return scope._actions.length;\n            },\n            get inUse() {\n              return scope._nActiveActions;\n            },\n          },\n          bindings: {\n            get total() {\n              return scope._bindings.length;\n            },\n            get inUse() {\n              return scope._nActiveBindings;\n            },\n          },\n          controlInterpolants: {\n            get total() {\n              return scope._controlInterpolants.length;\n            },\n            get inUse() {\n              return scope._nActiveControlInterpolants;\n            },\n          },\n        };\n      },\n\n      // Memory management for AnimationAction objects\n\n      _isActiveAction: function (action) {\n        var index = action._cacheIndex;\n        return index !== null && index < this._nActiveActions;\n      },\n\n      _addInactiveAction: function (action, clipUuid, rootUuid) {\n        var actions = this._actions,\n          actionsByClip = this._actionsByClip,\n          actionsForClip = actionsByClip[clipUuid];\n\n        if (actionsForClip === undefined) {\n          actionsForClip = {\n            knownActions: [action],\n            actionByRoot: {},\n          };\n\n          action._byClipCacheIndex = 0;\n\n          actionsByClip[clipUuid] = actionsForClip;\n        } else {\n          var knownActions = actionsForClip.knownActions;\n\n          action._byClipCacheIndex = knownActions.length;\n          knownActions.push(action);\n        }\n\n        action._cacheIndex = actions.length;\n        actions.push(action);\n\n        actionsForClip.actionByRoot[rootUuid] = action;\n      },\n\n      _removeInactiveAction: function (action) {\n        var actions = this._actions,\n          lastInactiveAction = actions[actions.length - 1],\n          cacheIndex = action._cacheIndex;\n\n        lastInactiveAction._cacheIndex = cacheIndex;\n        actions[cacheIndex] = lastInactiveAction;\n        actions.pop();\n\n        action._cacheIndex = null;\n\n        var clipUuid = action._clip.uuid,\n          actionsByClip = this._actionsByClip,\n          actionsForClip = actionsByClip[clipUuid],\n          knownActionsForClip = actionsForClip.knownActions,\n          lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n          byClipCacheIndex = action._byClipCacheIndex;\n\n        lastKnownAction._byClipCacheIndex = byClipCacheIndex;\n        knownActionsForClip[byClipCacheIndex] = lastKnownAction;\n        knownActionsForClip.pop();\n\n        action._byClipCacheIndex = null;\n\n        var actionByRoot = actionsForClip.actionByRoot,\n          rootUuid = (action._localRoot || this._root).uuid;\n\n        delete actionByRoot[rootUuid];\n\n        if (knownActionsForClip.length === 0) {\n          delete actionsByClip[clipUuid];\n        }\n\n        this._removeInactiveBindingsForAction(action);\n      },\n\n      _removeInactiveBindingsForAction: function (action) {\n        var bindings = action._propertyBindings;\n        for (var i = 0, n = bindings.length; i !== n; ++i) {\n          var binding = bindings[i];\n\n          if (--binding.referenceCount === 0) {\n            this._removeInactiveBinding(binding);\n          }\n        }\n      },\n\n      _lendAction: function (action) {\n        // [ active actions |  inactive actions  ]\n        // [  active actions >| inactive actions ]\n        //                 s        a\n        //                  <-swap->\n        //                 a        s\n\n        var actions = this._actions,\n          prevIndex = action._cacheIndex,\n          lastActiveIndex = this._nActiveActions++,\n          firstInactiveAction = actions[lastActiveIndex];\n\n        action._cacheIndex = lastActiveIndex;\n        actions[lastActiveIndex] = action;\n\n        firstInactiveAction._cacheIndex = prevIndex;\n        actions[prevIndex] = firstInactiveAction;\n      },\n\n      _takeBackAction: function (action) {\n        // [  active actions  | inactive actions ]\n        // [ active actions |< inactive actions  ]\n        //        a        s\n        //         <-swap->\n        //        s        a\n\n        var actions = this._actions,\n          prevIndex = action._cacheIndex,\n          firstInactiveIndex = --this._nActiveActions,\n          lastActiveAction = actions[firstInactiveIndex];\n\n        action._cacheIndex = firstInactiveIndex;\n        actions[firstInactiveIndex] = action;\n\n        lastActiveAction._cacheIndex = prevIndex;\n        actions[prevIndex] = lastActiveAction;\n      },\n\n      // Memory management for PropertyMixer objects\n\n      _addInactiveBinding: function (binding, rootUuid, trackName) {\n        var bindingsByRoot = this._bindingsByRootAndName,\n          bindingByName = bindingsByRoot[rootUuid],\n          bindings = this._bindings;\n\n        if (bindingByName === undefined) {\n          bindingByName = {};\n          bindingsByRoot[rootUuid] = bindingByName;\n        }\n\n        bindingByName[trackName] = binding;\n\n        binding._cacheIndex = bindings.length;\n        bindings.push(binding);\n      },\n\n      _removeInactiveBinding: function (binding) {\n        var bindings = this._bindings,\n          propBinding = binding.binding,\n          rootUuid = propBinding.rootNode.uuid,\n          trackName = propBinding.path,\n          bindingsByRoot = this._bindingsByRootAndName,\n          bindingByName = bindingsByRoot[rootUuid],\n          lastInactiveBinding = bindings[bindings.length - 1],\n          cacheIndex = binding._cacheIndex;\n\n        lastInactiveBinding._cacheIndex = cacheIndex;\n        bindings[cacheIndex] = lastInactiveBinding;\n        bindings.pop();\n\n        delete bindingByName[trackName];\n\n        remove_empty_map: {\n          for (var _ in bindingByName) break remove_empty_map; // eslint-disable-line no-unused-vars\n\n          delete bindingsByRoot[rootUuid];\n        }\n      },\n\n      _lendBinding: function (binding) {\n        var bindings = this._bindings,\n          prevIndex = binding._cacheIndex,\n          lastActiveIndex = this._nActiveBindings++,\n          firstInactiveBinding = bindings[lastActiveIndex];\n\n        binding._cacheIndex = lastActiveIndex;\n        bindings[lastActiveIndex] = binding;\n\n        firstInactiveBinding._cacheIndex = prevIndex;\n        bindings[prevIndex] = firstInactiveBinding;\n      },\n\n      _takeBackBinding: function (binding) {\n        var bindings = this._bindings,\n          prevIndex = binding._cacheIndex,\n          firstInactiveIndex = --this._nActiveBindings,\n          lastActiveBinding = bindings[firstInactiveIndex];\n\n        binding._cacheIndex = firstInactiveIndex;\n        bindings[firstInactiveIndex] = binding;\n\n        lastActiveBinding._cacheIndex = prevIndex;\n        bindings[prevIndex] = lastActiveBinding;\n      },\n\n      // Memory management of Interpolants for weight and time scale\n\n      _lendControlInterpolant: function () {\n        var interpolants = this._controlInterpolants,\n          lastActiveIndex = this._nActiveControlInterpolants++,\n          interpolant = interpolants[lastActiveIndex];\n\n        if (interpolant === undefined) {\n          interpolant = new LinearInterpolant(\n            new Float32Array(2),\n            new Float32Array(2),\n            1,\n            this._controlInterpolantsResultBuffer\n          );\n\n          interpolant.__cacheIndex = lastActiveIndex;\n          interpolants[lastActiveIndex] = interpolant;\n        }\n\n        return interpolant;\n      },\n\n      _takeBackControlInterpolant: function (interpolant) {\n        var interpolants = this._controlInterpolants,\n          prevIndex = interpolant.__cacheIndex,\n          firstInactiveIndex = --this._nActiveControlInterpolants,\n          lastActiveInterpolant = interpolants[firstInactiveIndex];\n\n        interpolant.__cacheIndex = firstInactiveIndex;\n        interpolants[firstInactiveIndex] = interpolant;\n\n        lastActiveInterpolant.__cacheIndex = prevIndex;\n        interpolants[prevIndex] = lastActiveInterpolant;\n      },\n\n      _controlInterpolantsResultBuffer: new Float32Array(1),\n\n      // return an action for a clip optionally using a custom root target\n      // object (this method allocates a lot of dynamic memory in case a\n      // previously unknown clip/root combination is specified)\n      clipAction: function (clip, optionalRoot) {\n        var root = optionalRoot || this._root,\n          rootUuid = root.uuid,\n          clipObject =\n            typeof clip === \"string\"\n              ? AnimationClip.findByName(root, clip)\n              : clip,\n          clipUuid = clipObject !== null ? clipObject.uuid : clip,\n          actionsForClip = this._actionsByClip[clipUuid],\n          prototypeAction = null;\n\n        if (actionsForClip !== undefined) {\n          var existingAction = actionsForClip.actionByRoot[rootUuid];\n\n          if (existingAction !== undefined) {\n            return existingAction;\n          }\n\n          // we know the clip, so we don't have to parse all\n          // the bindings again but can just copy\n          prototypeAction = actionsForClip.knownActions[0];\n\n          // also, take the clip from the prototype action\n          if (clipObject === null) clipObject = prototypeAction._clip;\n        }\n\n        // clip must be known when specified via string\n        if (clipObject === null) return null;\n\n        // allocate all resources required to run it\n        var newAction = new AnimationAction(this, clipObject, optionalRoot);\n\n        this._bindAction(newAction, prototypeAction);\n\n        // and make the action known to the memory manager\n        this._addInactiveAction(newAction, clipUuid, rootUuid);\n\n        return newAction;\n      },\n\n      // get an existing action\n      existingAction: function (clip, optionalRoot) {\n        var root = optionalRoot || this._root,\n          rootUuid = root.uuid,\n          clipObject =\n            typeof clip === \"string\"\n              ? AnimationClip.findByName(root, clip)\n              : clip,\n          clipUuid = clipObject ? clipObject.uuid : clip,\n          actionsForClip = this._actionsByClip[clipUuid];\n\n        if (actionsForClip !== undefined) {\n          return actionsForClip.actionByRoot[rootUuid] || null;\n        }\n\n        return null;\n      },\n\n      // deactivates all previously scheduled actions\n      stopAllAction: function () {\n        var actions = this._actions,\n          nActions = this._nActiveActions,\n          bindings = this._bindings,\n          nBindings = this._nActiveBindings;\n\n        this._nActiveActions = 0;\n        this._nActiveBindings = 0;\n\n        for (var i = 0; i !== nActions; ++i) {\n          actions[i].reset();\n        }\n\n        for (var i = 0; i !== nBindings; ++i) {\n          bindings[i].useCount = 0;\n        }\n\n        return this;\n      },\n\n      // advance the time and update apply the animation\n      update: function (deltaTime) {\n        deltaTime *= this.timeScale;\n\n        var actions = this._actions,\n          nActions = this._nActiveActions,\n          time = (this.time += deltaTime),\n          timeDirection = Math.sign(deltaTime),\n          accuIndex = (this._accuIndex ^= 1);\n\n        // run active actions\n\n        for (var i = 0; i !== nActions; ++i) {\n          var action = actions[i];\n\n          action._update(time, deltaTime, timeDirection, accuIndex);\n        }\n\n        // update scene graph\n\n        var bindings = this._bindings,\n          nBindings = this._nActiveBindings;\n\n        for (var i = 0; i !== nBindings; ++i) {\n          bindings[i].apply(accuIndex);\n        }\n\n        return this;\n      },\n\n      // return this mixer's root target object\n      getRoot: function () {\n        return this._root;\n      },\n\n      // free all resources specific to a particular clip\n      uncacheClip: function (clip) {\n        var actions = this._actions,\n          clipUuid = clip.uuid,\n          actionsByClip = this._actionsByClip,\n          actionsForClip = actionsByClip[clipUuid];\n\n        if (actionsForClip !== undefined) {\n          // note: just calling _removeInactiveAction would mess up the\n          // iteration state and also require updating the state we can\n          // just throw away\n\n          var actionsToRemove = actionsForClip.knownActions;\n\n          for (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n            var action = actionsToRemove[i];\n\n            this._deactivateAction(action);\n\n            var cacheIndex = action._cacheIndex,\n              lastInactiveAction = actions[actions.length - 1];\n\n            action._cacheIndex = null;\n            action._byClipCacheIndex = null;\n\n            lastInactiveAction._cacheIndex = cacheIndex;\n            actions[cacheIndex] = lastInactiveAction;\n            actions.pop();\n\n            this._removeInactiveBindingsForAction(action);\n          }\n\n          delete actionsByClip[clipUuid];\n        }\n      },\n\n      // free all resources specific to a particular root target object\n      uncacheRoot: function (root) {\n        var rootUuid = root.uuid,\n          actionsByClip = this._actionsByClip;\n\n        for (var clipUuid in actionsByClip) {\n          var actionByRoot = actionsByClip[clipUuid].actionByRoot,\n            action = actionByRoot[rootUuid];\n\n          if (action !== undefined) {\n            this._deactivateAction(action);\n            this._removeInactiveAction(action);\n          }\n        }\n\n        var bindingsByRoot = this._bindingsByRootAndName,\n          bindingByName = bindingsByRoot[rootUuid];\n\n        if (bindingByName !== undefined) {\n          for (var trackName in bindingByName) {\n            var binding = bindingByName[trackName];\n            binding.restoreOriginalState();\n            this._removeInactiveBinding(binding);\n          }\n        }\n      },\n\n      // remove a targeted clip from the cache\n      uncacheAction: function (clip, optionalRoot) {\n        var action = this.existingAction(clip, optionalRoot);\n\n        if (action !== null) {\n          this._deactivateAction(action);\n          this._removeInactiveAction(action);\n        }\n      },\n    }\n  );\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function Uniform(value) {\n    if (typeof value === \"string\") {\n      console.warn(\"THREE.Uniform: Type parameter is no longer needed.\");\n      value = arguments[1];\n    }\n\n    this.value = value;\n  }\n\n  Uniform.prototype.clone = function () {\n    return new Uniform(\n      this.value.clone === undefined ? this.value : this.value.clone()\n    );\n  };\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n  function InstancedBufferGeometry() {\n    BufferGeometry.call(this);\n\n    this.type = \"InstancedBufferGeometry\";\n    this.maxInstancedCount = undefined;\n  }\n\n  InstancedBufferGeometry.prototype = Object.assign(\n    Object.create(BufferGeometry.prototype),\n    {\n      constructor: InstancedBufferGeometry,\n\n      isInstancedBufferGeometry: true,\n\n      copy: function (source) {\n        BufferGeometry.prototype.copy.call(this, source);\n\n        this.maxInstancedCount = source.maxInstancedCount;\n\n        return this;\n      },\n\n      clone: function () {\n        return new this.constructor().copy(this);\n      },\n    }\n  );\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n  function InstancedInterleavedBuffer(array, stride, meshPerAttribute) {\n    InterleavedBuffer.call(this, array, stride);\n\n    this.meshPerAttribute = meshPerAttribute || 1;\n  }\n\n  InstancedInterleavedBuffer.prototype = Object.assign(\n    Object.create(InterleavedBuffer.prototype),\n    {\n      constructor: InstancedInterleavedBuffer,\n\n      isInstancedInterleavedBuffer: true,\n\n      copy: function (source) {\n        InterleavedBuffer.prototype.copy.call(this, source);\n\n        this.meshPerAttribute = source.meshPerAttribute;\n\n        return this;\n      },\n    }\n  );\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n  function InstancedBufferAttribute(array, itemSize, meshPerAttribute) {\n    BufferAttribute.call(this, array, itemSize);\n\n    this.meshPerAttribute = meshPerAttribute || 1;\n  }\n\n  InstancedBufferAttribute.prototype = Object.assign(\n    Object.create(BufferAttribute.prototype),\n    {\n      constructor: InstancedBufferAttribute,\n\n      isInstancedBufferAttribute: true,\n\n      copy: function (source) {\n        BufferAttribute.prototype.copy.call(this, source);\n\n        this.meshPerAttribute = source.meshPerAttribute;\n\n        return this;\n      },\n    }\n  );\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author bhouston / http://clara.io/\n   * @author stephomi / http://stephaneginier.com/\n   */\n\n  function Raycaster(origin, direction, near, far) {\n    this.ray = new Ray(origin, direction);\n    // direction is assumed to be normalized (for accurate distance calculations)\n\n    this.near = near || 0;\n    this.far = far || Infinity;\n\n    this.params = {\n      Mesh: {},\n      Line: {},\n      LOD: {},\n      Points: { threshold: 1 },\n      Sprite: {},\n    };\n\n    Object.defineProperties(this.params, {\n      PointCloud: {\n        get: function () {\n          console.warn(\n            \"THREE.Raycaster: params.PointCloud has been renamed to params.Points.\"\n          );\n          return this.Points;\n        },\n      },\n    });\n  }\n\n  function ascSort(a, b) {\n    return a.distance - b.distance;\n  }\n\n  function intersectObject(object, raycaster, intersects, recursive) {\n    if (object.visible === false) return;\n\n    object.raycast(raycaster, intersects);\n\n    if (recursive === true) {\n      var children = object.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        intersectObject(children[i], raycaster, intersects, true);\n      }\n    }\n  }\n\n  Object.assign(Raycaster.prototype, {\n    linePrecision: 1,\n\n    set: function (origin, direction) {\n      // direction is assumed to be normalized (for accurate distance calculations)\n\n      this.ray.set(origin, direction);\n    },\n\n    setFromCamera: function (coords, camera) {\n      if (camera && camera.isPerspectiveCamera) {\n        this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n        this.ray.direction\n          .set(coords.x, coords.y, 0.5)\n          .unproject(camera)\n          .sub(this.ray.origin)\n          .normalize();\n      } else if (camera && camera.isOrthographicCamera) {\n        this.ray.origin\n          .set(\n            coords.x,\n            coords.y,\n            (camera.near + camera.far) / (camera.near - camera.far)\n          )\n          .unproject(camera); // set origin in plane of camera\n        this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n      } else {\n        console.error(\"THREE.Raycaster: Unsupported camera type.\");\n      }\n    },\n\n    intersectObject: function (object, recursive, optionalTarget) {\n      var intersects = optionalTarget || [];\n\n      intersectObject(object, this, intersects, recursive);\n\n      intersects.sort(ascSort);\n\n      return intersects;\n    },\n\n    intersectObjects: function (objects, recursive, optionalTarget) {\n      var intersects = optionalTarget || [];\n\n      if (Array.isArray(objects) === false) {\n        console.warn(\n          \"THREE.Raycaster.intersectObjects: objects is not an Array.\"\n        );\n        return intersects;\n      }\n\n      for (var i = 0, l = objects.length; i < l; i++) {\n        intersectObject(objects[i], this, intersects, recursive);\n      }\n\n      intersects.sort(ascSort);\n\n      return intersects;\n    },\n  });\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function Clock(autoStart) {\n    this.autoStart = autoStart !== undefined ? autoStart : true;\n\n    this.startTime = 0;\n    this.oldTime = 0;\n    this.elapsedTime = 0;\n\n    this.running = false;\n  }\n\n  Object.assign(Clock.prototype, {\n    start: function () {\n      this.startTime = (\n        typeof performance === \"undefined\" ? Date : performance\n      ).now(); // see #10732\n\n      this.oldTime = this.startTime;\n      this.elapsedTime = 0;\n      this.running = true;\n    },\n\n    stop: function () {\n      this.getElapsedTime();\n      this.running = false;\n      this.autoStart = false;\n    },\n\n    getElapsedTime: function () {\n      this.getDelta();\n      return this.elapsedTime;\n    },\n\n    getDelta: function () {\n      var diff = 0;\n\n      if (this.autoStart && !this.running) {\n        this.start();\n        return 0;\n      }\n\n      if (this.running) {\n        var newTime = (\n          typeof performance === \"undefined\" ? Date : performance\n        ).now();\n\n        diff = (newTime - this.oldTime) / 1000;\n        this.oldTime = newTime;\n\n        this.elapsedTime += diff;\n      }\n\n      return diff;\n    },\n  });\n\n  /**\n   * @author bhouston / http://clara.io\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n   *\n   * The poles (phi) are at the positive and negative y axis.\n   * The equator starts at positive z.\n   */\n\n  function Spherical(radius, phi, theta) {\n    this.radius = radius !== undefined ? radius : 1.0;\n    this.phi = phi !== undefined ? phi : 0; // up / down towards top and bottom pole\n    this.theta = theta !== undefined ? theta : 0; // around the equator of the sphere\n\n    return this;\n  }\n\n  Object.assign(Spherical.prototype, {\n    set: function (radius, phi, theta) {\n      this.radius = radius;\n      this.phi = phi;\n      this.theta = theta;\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (other) {\n      this.radius = other.radius;\n      this.phi = other.phi;\n      this.theta = other.theta;\n\n      return this;\n    },\n\n    // restrict phi to be betwee EPS and PI-EPS\n    makeSafe: function () {\n      var EPS = 0.000001;\n      this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\n      return this;\n    },\n\n    setFromVector3: function (vec3) {\n      this.radius = vec3.length();\n\n      if (this.radius === 0) {\n        this.theta = 0;\n        this.phi = 0;\n      } else {\n        this.theta = Math.atan2(vec3.x, vec3.z); // equator angle around y-up axis\n        this.phi = Math.acos(_Math.clamp(vec3.y / this.radius, -1, 1)); // polar angle\n      }\n\n      return this;\n    },\n  });\n\n  /**\n   * @author Mugen87 / https://github.com/Mugen87\n   *\n   * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n   *\n   */\n\n  function Cylindrical(radius, theta, y) {\n    this.radius = radius !== undefined ? radius : 1.0; // distance from the origin to a point in the x-z plane\n    this.theta = theta !== undefined ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n    this.y = y !== undefined ? y : 0; // height above the x-z plane\n\n    return this;\n  }\n\n  Object.assign(Cylindrical.prototype, {\n    set: function (radius, theta, y) {\n      this.radius = radius;\n      this.theta = theta;\n      this.y = y;\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (other) {\n      this.radius = other.radius;\n      this.theta = other.theta;\n      this.y = other.y;\n\n      return this;\n    },\n\n    setFromVector3: function (vec3) {\n      this.radius = Math.sqrt(vec3.x * vec3.x + vec3.z * vec3.z);\n      this.theta = Math.atan2(vec3.x, vec3.z);\n      this.y = vec3.y;\n\n      return this;\n    },\n  });\n\n  /**\n   * @author bhouston / http://clara.io\n   */\n\n  function Box2(min, max) {\n    this.min = min !== undefined ? min : new Vector2(+Infinity, +Infinity);\n    this.max = max !== undefined ? max : new Vector2(-Infinity, -Infinity);\n  }\n\n  Object.assign(Box2.prototype, {\n    set: function (min, max) {\n      this.min.copy(min);\n      this.max.copy(max);\n\n      return this;\n    },\n\n    setFromPoints: function (points) {\n      this.makeEmpty();\n\n      for (var i = 0, il = points.length; i < il; i++) {\n        this.expandByPoint(points[i]);\n      }\n\n      return this;\n    },\n\n    setFromCenterAndSize: (function () {\n      var v1 = new Vector2();\n\n      return function setFromCenterAndSize(center, size) {\n        var halfSize = v1.copy(size).multiplyScalar(0.5);\n        this.min.copy(center).sub(halfSize);\n        this.max.copy(center).add(halfSize);\n\n        return this;\n      };\n    })(),\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (box) {\n      this.min.copy(box.min);\n      this.max.copy(box.max);\n\n      return this;\n    },\n\n    makeEmpty: function () {\n      this.min.x = this.min.y = +Infinity;\n      this.max.x = this.max.y = -Infinity;\n\n      return this;\n    },\n\n    isEmpty: function () {\n      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n      return this.max.x < this.min.x || this.max.y < this.min.y;\n    },\n\n    getCenter: function (target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Box2: .getCenter() target is now required\");\n        target = new Vector2();\n      }\n\n      return this.isEmpty()\n        ? target.set(0, 0)\n        : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n    },\n\n    getSize: function (target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Box2: .getSize() target is now required\");\n        target = new Vector2();\n      }\n\n      return this.isEmpty()\n        ? target.set(0, 0)\n        : target.subVectors(this.max, this.min);\n    },\n\n    expandByPoint: function (point) {\n      this.min.min(point);\n      this.max.max(point);\n\n      return this;\n    },\n\n    expandByVector: function (vector) {\n      this.min.sub(vector);\n      this.max.add(vector);\n\n      return this;\n    },\n\n    expandByScalar: function (scalar) {\n      this.min.addScalar(-scalar);\n      this.max.addScalar(scalar);\n\n      return this;\n    },\n\n    containsPoint: function (point) {\n      return point.x < this.min.x ||\n        point.x > this.max.x ||\n        point.y < this.min.y ||\n        point.y > this.max.y\n        ? false\n        : true;\n    },\n\n    containsBox: function (box) {\n      return (\n        this.min.x <= box.min.x &&\n        box.max.x <= this.max.x &&\n        this.min.y <= box.min.y &&\n        box.max.y <= this.max.y\n      );\n    },\n\n    getParameter: function (point, target) {\n      // This can potentially have a divide by zero if the box\n      // has a size dimension of 0.\n\n      if (target === undefined) {\n        console.warn(\"THREE.Box2: .getParameter() target is now required\");\n        target = new Vector2();\n      }\n\n      return target.set(\n        (point.x - this.min.x) / (this.max.x - this.min.x),\n        (point.y - this.min.y) / (this.max.y - this.min.y)\n      );\n    },\n\n    intersectsBox: function (box) {\n      // using 4 splitting planes to rule out intersections\n\n      return box.max.x < this.min.x ||\n        box.min.x > this.max.x ||\n        box.max.y < this.min.y ||\n        box.min.y > this.max.y\n        ? false\n        : true;\n    },\n\n    clampPoint: function (point, target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Box2: .clampPoint() target is now required\");\n        target = new Vector2();\n      }\n\n      return target.copy(point).clamp(this.min, this.max);\n    },\n\n    distanceToPoint: (function () {\n      var v1 = new Vector2();\n\n      return function distanceToPoint(point) {\n        var clampedPoint = v1.copy(point).clamp(this.min, this.max);\n        return clampedPoint.sub(point).length();\n      };\n    })(),\n\n    intersect: function (box) {\n      this.min.max(box.min);\n      this.max.min(box.max);\n\n      return this;\n    },\n\n    union: function (box) {\n      this.min.min(box.min);\n      this.max.max(box.max);\n\n      return this;\n    },\n\n    translate: function (offset) {\n      this.min.add(offset);\n      this.max.add(offset);\n\n      return this;\n    },\n\n    equals: function (box) {\n      return box.min.equals(this.min) && box.max.equals(this.max);\n    },\n  });\n\n  /**\n   * @author bhouston / http://clara.io\n   */\n\n  function Line3(start, end) {\n    this.start = start !== undefined ? start : new Vector3();\n    this.end = end !== undefined ? end : new Vector3();\n  }\n\n  Object.assign(Line3.prototype, {\n    set: function (start, end) {\n      this.start.copy(start);\n      this.end.copy(end);\n\n      return this;\n    },\n\n    clone: function () {\n      return new this.constructor().copy(this);\n    },\n\n    copy: function (line) {\n      this.start.copy(line.start);\n      this.end.copy(line.end);\n\n      return this;\n    },\n\n    getCenter: function (target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Line3: .getCenter() target is now required\");\n        target = new Vector3();\n      }\n\n      return target.addVectors(this.start, this.end).multiplyScalar(0.5);\n    },\n\n    delta: function (target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Line3: .delta() target is now required\");\n        target = new Vector3();\n      }\n\n      return target.subVectors(this.end, this.start);\n    },\n\n    distanceSq: function () {\n      return this.start.distanceToSquared(this.end);\n    },\n\n    distance: function () {\n      return this.start.distanceTo(this.end);\n    },\n\n    at: function (t, target) {\n      if (target === undefined) {\n        console.warn(\"THREE.Line3: .at() target is now required\");\n        target = new Vector3();\n      }\n\n      return this.delta(target).multiplyScalar(t).add(this.start);\n    },\n\n    closestPointToPointParameter: (function () {\n      var startP = new Vector3();\n      var startEnd = new Vector3();\n\n      return function closestPointToPointParameter(point, clampToLine) {\n        startP.subVectors(point, this.start);\n        startEnd.subVectors(this.end, this.start);\n\n        var startEnd2 = startEnd.dot(startEnd);\n        var startEnd_startP = startEnd.dot(startP);\n\n        var t = startEnd_startP / startEnd2;\n\n        if (clampToLine) {\n          t = _Math.clamp(t, 0, 1);\n        }\n\n        return t;\n      };\n    })(),\n\n    closestPointToPoint: function (point, clampToLine, target) {\n      var t = this.closestPointToPointParameter(point, clampToLine);\n\n      if (target === undefined) {\n        console.warn(\n          \"THREE.Line3: .closestPointToPoint() target is now required\"\n        );\n        target = new Vector3();\n      }\n\n      return this.delta(target).multiplyScalar(t).add(this.start);\n    },\n\n    applyMatrix4: function (matrix) {\n      this.start.applyMatrix4(matrix);\n      this.end.applyMatrix4(matrix);\n\n      return this;\n    },\n\n    equals: function (line) {\n      return line.start.equals(this.start) && line.end.equals(this.end);\n    },\n  });\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  function ImmediateRenderObject(material) {\n    Object3D.call(this);\n\n    this.material = material;\n    this.render = function (/* renderCallback */) {};\n  }\n\n  ImmediateRenderObject.prototype = Object.create(Object3D.prototype);\n  ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\n  ImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function VertexNormalsHelper(object, size, hex, linewidth) {\n    this.object = object;\n\n    this.size = size !== undefined ? size : 1;\n\n    var color = hex !== undefined ? hex : 0xff0000;\n\n    var width = linewidth !== undefined ? linewidth : 1;\n\n    //\n\n    var nNormals = 0;\n\n    var objGeometry = this.object.geometry;\n\n    if (objGeometry && objGeometry.isGeometry) {\n      nNormals = objGeometry.faces.length * 3;\n    } else if (objGeometry && objGeometry.isBufferGeometry) {\n      nNormals = objGeometry.attributes.normal.count;\n    }\n\n    //\n\n    var geometry = new BufferGeometry();\n\n    var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n\n    geometry.addAttribute(\"position\", positions);\n\n    LineSegments.call(\n      this,\n      geometry,\n      new LineBasicMaterial({ color: color, linewidth: width })\n    );\n\n    //\n\n    this.matrixAutoUpdate = false;\n\n    this.update();\n  }\n\n  VertexNormalsHelper.prototype = Object.create(LineSegments.prototype);\n  VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\n\n  VertexNormalsHelper.prototype.update = (function () {\n    var v1 = new Vector3();\n    var v2 = new Vector3();\n    var normalMatrix = new Matrix3();\n\n    return function update() {\n      var keys = [\"a\", \"b\", \"c\"];\n\n      this.object.updateMatrixWorld(true);\n\n      normalMatrix.getNormalMatrix(this.object.matrixWorld);\n\n      var matrixWorld = this.object.matrixWorld;\n\n      var position = this.geometry.attributes.position;\n\n      //\n\n      var objGeometry = this.object.geometry;\n\n      if (objGeometry && objGeometry.isGeometry) {\n        var vertices = objGeometry.vertices;\n\n        var faces = objGeometry.faces;\n\n        var idx = 0;\n\n        for (var i = 0, l = faces.length; i < l; i++) {\n          var face = faces[i];\n\n          for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n            var vertex = vertices[face[keys[j]]];\n\n            var normal = face.vertexNormals[j];\n\n            v1.copy(vertex).applyMatrix4(matrixWorld);\n\n            v2.copy(normal)\n              .applyMatrix3(normalMatrix)\n              .normalize()\n              .multiplyScalar(this.size)\n              .add(v1);\n\n            position.setXYZ(idx, v1.x, v1.y, v1.z);\n\n            idx = idx + 1;\n\n            position.setXYZ(idx, v2.x, v2.y, v2.z);\n\n            idx = idx + 1;\n          }\n        }\n      } else if (objGeometry && objGeometry.isBufferGeometry) {\n        var objPos = objGeometry.attributes.position;\n\n        var objNorm = objGeometry.attributes.normal;\n\n        var idx = 0;\n\n        // for simplicity, ignore index and drawcalls, and render every normal\n\n        for (var j = 0, jl = objPos.count; j < jl; j++) {\n          v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(\n            matrixWorld\n          );\n\n          v2.set(objNorm.getX(j), objNorm.getY(j), objNorm.getZ(j));\n\n          v2.applyMatrix3(normalMatrix)\n            .normalize()\n            .multiplyScalar(this.size)\n            .add(v1);\n\n          position.setXYZ(idx, v1.x, v1.y, v1.z);\n\n          idx = idx + 1;\n\n          position.setXYZ(idx, v2.x, v2.y, v2.z);\n\n          idx = idx + 1;\n        }\n      }\n\n      position.needsUpdate = true;\n    };\n  })();\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function SpotLightHelper(light, color) {\n    Object3D.call(this);\n\n    this.light = light;\n    this.light.updateMatrixWorld();\n\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    this.color = color;\n\n    var geometry = new BufferGeometry();\n\n    var positions = [\n      0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1,\n      0, 0, 0, 0, -1, 1,\n    ];\n\n    for (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n      var p1 = (i / l) * Math.PI * 2;\n      var p2 = (j / l) * Math.PI * 2;\n\n      positions.push(\n        Math.cos(p1),\n        Math.sin(p1),\n        1,\n        Math.cos(p2),\n        Math.sin(p2),\n        1\n      );\n    }\n\n    geometry.addAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n\n    var material = new LineBasicMaterial({ fog: false });\n\n    this.cone = new LineSegments(geometry, material);\n    this.add(this.cone);\n\n    this.update();\n  }\n\n  SpotLightHelper.prototype = Object.create(Object3D.prototype);\n  SpotLightHelper.prototype.constructor = SpotLightHelper;\n\n  SpotLightHelper.prototype.dispose = function () {\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n  };\n\n  SpotLightHelper.prototype.update = (function () {\n    var vector = new Vector3();\n    var vector2 = new Vector3();\n\n    return function update() {\n      this.light.updateMatrixWorld();\n\n      var coneLength = this.light.distance ? this.light.distance : 1000;\n      var coneWidth = coneLength * Math.tan(this.light.angle);\n\n      this.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n      vector.setFromMatrixPosition(this.light.matrixWorld);\n      vector2.setFromMatrixPosition(this.light.target.matrixWorld);\n\n      this.cone.lookAt(vector2.sub(vector));\n\n      if (this.color !== undefined) {\n        this.cone.material.color.set(this.color);\n      } else {\n        this.cone.material.color.copy(this.light.color);\n      }\n    };\n  })();\n\n  /**\n   * @author Sean Griffin / http://twitter.com/sgrif\n   * @author Michael Guerrero / http://realitymeltdown.com\n   * @author mrdoob / http://mrdoob.com/\n   * @author ikerr / http://verold.com\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  function getBoneList(object) {\n    var boneList = [];\n\n    if (object && object.isBone) {\n      boneList.push(object);\n    }\n\n    for (var i = 0; i < object.children.length; i++) {\n      boneList.push.apply(boneList, getBoneList(object.children[i]));\n    }\n\n    return boneList;\n  }\n\n  function SkeletonHelper(object) {\n    var bones = getBoneList(object);\n\n    var geometry = new BufferGeometry();\n\n    var vertices = [];\n    var colors = [];\n\n    var color1 = new Color(0, 0, 1);\n    var color2 = new Color(0, 1, 0);\n\n    for (var i = 0; i < bones.length; i++) {\n      var bone = bones[i];\n\n      if (bone.parent && bone.parent.isBone) {\n        vertices.push(0, 0, 0);\n        vertices.push(0, 0, 0);\n        colors.push(color1.r, color1.g, color1.b);\n        colors.push(color2.r, color2.g, color2.b);\n      }\n    }\n\n    geometry.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.addAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n\n    var material = new LineBasicMaterial({\n      vertexColors: VertexColors,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true,\n    });\n\n    LineSegments.call(this, geometry, material);\n\n    this.root = object;\n    this.bones = bones;\n\n    this.matrix = object.matrixWorld;\n    this.matrixAutoUpdate = false;\n  }\n\n  SkeletonHelper.prototype = Object.create(LineSegments.prototype);\n  SkeletonHelper.prototype.constructor = SkeletonHelper;\n\n  SkeletonHelper.prototype.updateMatrixWorld = (function () {\n    var vector = new Vector3();\n\n    var boneMatrix = new Matrix4();\n    var matrixWorldInv = new Matrix4();\n\n    return function updateMatrixWorld(force) {\n      var bones = this.bones;\n\n      var geometry = this.geometry;\n      var position = geometry.getAttribute(\"position\");\n\n      matrixWorldInv.getInverse(this.root.matrixWorld);\n\n      for (var i = 0, j = 0; i < bones.length; i++) {\n        var bone = bones[i];\n\n        if (bone.parent && bone.parent.isBone) {\n          boneMatrix.multiplyMatrices(matrixWorldInv, bone.matrixWorld);\n          vector.setFromMatrixPosition(boneMatrix);\n          position.setXYZ(j, vector.x, vector.y, vector.z);\n\n          boneMatrix.multiplyMatrices(matrixWorldInv, bone.parent.matrixWorld);\n          vector.setFromMatrixPosition(boneMatrix);\n          position.setXYZ(j + 1, vector.x, vector.y, vector.z);\n\n          j += 2;\n        }\n      }\n\n      geometry.getAttribute(\"position\").needsUpdate = true;\n\n      Object3D.prototype.updateMatrixWorld.call(this, force);\n    };\n  })();\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function PointLightHelper(light, sphereSize, color) {\n    this.light = light;\n    this.light.updateMatrixWorld();\n\n    this.color = color;\n\n    var geometry = new SphereBufferGeometry(sphereSize, 4, 2);\n    var material = new MeshBasicMaterial({ wireframe: true, fog: false });\n\n    Mesh.call(this, geometry, material);\n\n    this.matrix = this.light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    this.update();\n\n    /*\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\t\tvar d = light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\n\t\tthis.add( this.lightDistance );\n\t\t*/\n  }\n\n  PointLightHelper.prototype = Object.create(Mesh.prototype);\n  PointLightHelper.prototype.constructor = PointLightHelper;\n\n  PointLightHelper.prototype.dispose = function () {\n    this.geometry.dispose();\n    this.material.dispose();\n  };\n\n  PointLightHelper.prototype.update = function () {\n    if (this.color !== undefined) {\n      this.material.color.set(this.color);\n    } else {\n      this.material.color.copy(this.light.color);\n    }\n\n    /*\n\t\tvar d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n  };\n\n  /**\n   * @author abelnation / http://github.com/abelnation\n   * @author Mugen87 / http://github.com/Mugen87\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function RectAreaLightHelper(light, color) {\n    Object3D.call(this);\n\n    this.light = light;\n    this.light.updateMatrixWorld();\n\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    this.color = color;\n\n    var material = new LineBasicMaterial({ fog: false });\n\n    var geometry = new BufferGeometry();\n\n    geometry.addAttribute(\n      \"position\",\n      new BufferAttribute(new Float32Array(5 * 3), 3)\n    );\n\n    this.line = new Line(geometry, material);\n    this.add(this.line);\n\n    this.update();\n  }\n\n  RectAreaLightHelper.prototype = Object.create(Object3D.prototype);\n  RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\n\n  RectAreaLightHelper.prototype.dispose = function () {\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  };\n\n  RectAreaLightHelper.prototype.update = function () {\n    // calculate new dimensions of the helper\n\n    var hx = this.light.width * 0.5;\n    var hy = this.light.height * 0.5;\n\n    var position = this.line.geometry.attributes.position;\n    var array = position.array;\n\n    // update vertices\n\n    array[0] = hx;\n    array[1] = -hy;\n    array[2] = 0;\n    array[3] = hx;\n    array[4] = hy;\n    array[5] = 0;\n    array[6] = -hx;\n    array[7] = hy;\n    array[8] = 0;\n    array[9] = -hx;\n    array[10] = -hy;\n    array[11] = 0;\n    array[12] = hx;\n    array[13] = -hy;\n    array[14] = 0;\n\n    position.needsUpdate = true;\n\n    if (this.color !== undefined) {\n      this.line.material.color.set(this.color);\n    } else {\n      this.line.material.color.copy(this.light.color);\n    }\n  };\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  function HemisphereLightHelper(light, size, color) {\n    Object3D.call(this);\n\n    this.light = light;\n    this.light.updateMatrixWorld();\n\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    this.color = color;\n\n    var geometry = new OctahedronBufferGeometry(size);\n    geometry.rotateY(Math.PI * 0.5);\n\n    this.material = new MeshBasicMaterial({ wireframe: true, fog: false });\n    if (this.color === undefined) this.material.vertexColors = VertexColors;\n\n    var position = geometry.getAttribute(\"position\");\n    var colors = new Float32Array(position.count * 3);\n\n    geometry.addAttribute(\"color\", new BufferAttribute(colors, 3));\n\n    this.add(new Mesh(geometry, this.material));\n\n    this.update();\n  }\n\n  HemisphereLightHelper.prototype = Object.create(Object3D.prototype);\n  HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\n\n  HemisphereLightHelper.prototype.dispose = function () {\n    this.children[0].geometry.dispose();\n    this.children[0].material.dispose();\n  };\n\n  HemisphereLightHelper.prototype.update = (function () {\n    var vector = new Vector3();\n\n    var color1 = new Color();\n    var color2 = new Color();\n\n    return function update() {\n      var mesh = this.children[0];\n\n      if (this.color !== undefined) {\n        this.material.color.set(this.color);\n      } else {\n        var colors = mesh.geometry.getAttribute(\"color\");\n\n        color1.copy(this.light.color);\n        color2.copy(this.light.groundColor);\n\n        for (var i = 0, l = colors.count; i < l; i++) {\n          var color = i < l / 2 ? color1 : color2;\n\n          colors.setXYZ(i, color.r, color.g, color.b);\n        }\n\n        colors.needsUpdate = true;\n      }\n\n      mesh.lookAt(\n        vector.setFromMatrixPosition(this.light.matrixWorld).negate()\n      );\n    };\n  })();\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function GridHelper(size, divisions, color1, color2) {\n    size = size || 10;\n    divisions = divisions || 10;\n    color1 = new Color(color1 !== undefined ? color1 : 0x444444);\n    color2 = new Color(color2 !== undefined ? color2 : 0x888888);\n\n    var center = divisions / 2;\n    var step = size / divisions;\n    var halfSize = size / 2;\n\n    var vertices = [],\n      colors = [];\n\n    for (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n      vertices.push(-halfSize, 0, k, halfSize, 0, k);\n      vertices.push(k, 0, -halfSize, k, 0, halfSize);\n\n      var color = i === center ? color1 : color2;\n\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n    }\n\n    var geometry = new BufferGeometry();\n    geometry.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.addAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n\n    var material = new LineBasicMaterial({ vertexColors: VertexColors });\n\n    LineSegments.call(this, geometry, material);\n  }\n\n  GridHelper.prototype = Object.create(LineSegments.prototype);\n  GridHelper.prototype.constructor = GridHelper;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author Mugen87 / http://github.com/Mugen87\n   * @author Hectate / http://www.github.com/Hectate\n   */\n\n  function PolarGridHelper(\n    radius,\n    radials,\n    circles,\n    divisions,\n    color1,\n    color2\n  ) {\n    radius = radius || 10;\n    radials = radials || 16;\n    circles = circles || 8;\n    divisions = divisions || 64;\n    color1 = new Color(color1 !== undefined ? color1 : 0x444444);\n    color2 = new Color(color2 !== undefined ? color2 : 0x888888);\n\n    var vertices = [];\n    var colors = [];\n\n    var x, z;\n    var v, i, j, r, color;\n\n    // create the radials\n\n    for (i = 0; i <= radials; i++) {\n      v = (i / radials) * (Math.PI * 2);\n\n      x = Math.sin(v) * radius;\n      z = Math.cos(v) * radius;\n\n      vertices.push(0, 0, 0);\n      vertices.push(x, 0, z);\n\n      color = i & 1 ? color1 : color2;\n\n      colors.push(color.r, color.g, color.b);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    // create the circles\n\n    for (i = 0; i <= circles; i++) {\n      color = i & 1 ? color1 : color2;\n\n      r = radius - (radius / circles) * i;\n\n      for (j = 0; j < divisions; j++) {\n        // first vertex\n\n        v = (j / divisions) * (Math.PI * 2);\n\n        x = Math.sin(v) * r;\n        z = Math.cos(v) * r;\n\n        vertices.push(x, 0, z);\n        colors.push(color.r, color.g, color.b);\n\n        // second vertex\n\n        v = ((j + 1) / divisions) * (Math.PI * 2);\n\n        x = Math.sin(v) * r;\n        z = Math.cos(v) * r;\n\n        vertices.push(x, 0, z);\n        colors.push(color.r, color.g, color.b);\n      }\n    }\n\n    var geometry = new BufferGeometry();\n    geometry.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.addAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n\n    var material = new LineBasicMaterial({ vertexColors: VertexColors });\n\n    LineSegments.call(this, geometry, material);\n  }\n\n  PolarGridHelper.prototype = Object.create(LineSegments.prototype);\n  PolarGridHelper.prototype.constructor = PolarGridHelper;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function FaceNormalsHelper(object, size, hex, linewidth) {\n    // FaceNormalsHelper only supports THREE.Geometry\n\n    this.object = object;\n\n    this.size = size !== undefined ? size : 1;\n\n    var color = hex !== undefined ? hex : 0xffff00;\n\n    var width = linewidth !== undefined ? linewidth : 1;\n\n    //\n\n    var nNormals = 0;\n\n    var objGeometry = this.object.geometry;\n\n    if (objGeometry && objGeometry.isGeometry) {\n      nNormals = objGeometry.faces.length;\n    } else {\n      console.warn(\n        \"THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.\"\n      );\n    }\n\n    //\n\n    var geometry = new BufferGeometry();\n\n    var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n\n    geometry.addAttribute(\"position\", positions);\n\n    LineSegments.call(\n      this,\n      geometry,\n      new LineBasicMaterial({ color: color, linewidth: width })\n    );\n\n    //\n\n    this.matrixAutoUpdate = false;\n    this.update();\n  }\n\n  FaceNormalsHelper.prototype = Object.create(LineSegments.prototype);\n  FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\n  FaceNormalsHelper.prototype.update = (function () {\n    var v1 = new Vector3();\n    var v2 = new Vector3();\n    var normalMatrix = new Matrix3();\n\n    return function update() {\n      this.object.updateMatrixWorld(true);\n\n      normalMatrix.getNormalMatrix(this.object.matrixWorld);\n\n      var matrixWorld = this.object.matrixWorld;\n\n      var position = this.geometry.attributes.position;\n\n      //\n\n      var objGeometry = this.object.geometry;\n\n      var vertices = objGeometry.vertices;\n\n      var faces = objGeometry.faces;\n\n      var idx = 0;\n\n      for (var i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i];\n\n        var normal = face.normal;\n\n        v1.copy(vertices[face.a])\n          .add(vertices[face.b])\n          .add(vertices[face.c])\n          .divideScalar(3)\n          .applyMatrix4(matrixWorld);\n\n        v2.copy(normal)\n          .applyMatrix3(normalMatrix)\n          .normalize()\n          .multiplyScalar(this.size)\n          .add(v1);\n\n        position.setXYZ(idx, v1.x, v1.y, v1.z);\n\n        idx = idx + 1;\n\n        position.setXYZ(idx, v2.x, v2.y, v2.z);\n\n        idx = idx + 1;\n      }\n\n      position.needsUpdate = true;\n    };\n  })();\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function DirectionalLightHelper(light, size, color) {\n    Object3D.call(this);\n\n    this.light = light;\n    this.light.updateMatrixWorld();\n\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    this.color = color;\n\n    if (size === undefined) size = 1;\n\n    var geometry = new BufferGeometry();\n    geometry.addAttribute(\n      \"position\",\n      new Float32BufferAttribute(\n        [\n          -size,\n          size,\n          0,\n          size,\n          size,\n          0,\n          size,\n          -size,\n          0,\n          -size,\n          -size,\n          0,\n          -size,\n          size,\n          0,\n        ],\n        3\n      )\n    );\n\n    var material = new LineBasicMaterial({ fog: false });\n\n    this.lightPlane = new Line(geometry, material);\n    this.add(this.lightPlane);\n\n    geometry = new BufferGeometry();\n    geometry.addAttribute(\n      \"position\",\n      new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3)\n    );\n\n    this.targetLine = new Line(geometry, material);\n    this.add(this.targetLine);\n\n    this.update();\n  }\n\n  DirectionalLightHelper.prototype = Object.create(Object3D.prototype);\n  DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\n\n  DirectionalLightHelper.prototype.dispose = function () {\n    this.lightPlane.geometry.dispose();\n    this.lightPlane.material.dispose();\n    this.targetLine.geometry.dispose();\n    this.targetLine.material.dispose();\n  };\n\n  DirectionalLightHelper.prototype.update = (function () {\n    var v1 = new Vector3();\n    var v2 = new Vector3();\n    var v3 = new Vector3();\n\n    return function update() {\n      v1.setFromMatrixPosition(this.light.matrixWorld);\n      v2.setFromMatrixPosition(this.light.target.matrixWorld);\n      v3.subVectors(v2, v1);\n\n      this.lightPlane.lookAt(v3);\n\n      if (this.color !== undefined) {\n        this.lightPlane.material.color.set(this.color);\n        this.targetLine.material.color.set(this.color);\n      } else {\n        this.lightPlane.material.color.copy(this.light.color);\n        this.targetLine.material.color.copy(this.light.color);\n      }\n\n      this.targetLine.lookAt(v3);\n      this.targetLine.scale.z = v3.length();\n    };\n  })();\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author Mugen87 / https://github.com/Mugen87\n   *\n   *\t- shows frustum, line of sight and up of the camera\n   *\t- suitable for fast updates\n   * \t- based on frustum visualization in lightgl.js shadowmap example\n   *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n   */\n\n  function CameraHelper(camera) {\n    var geometry = new BufferGeometry();\n    var material = new LineBasicMaterial({\n      color: 0xffffff,\n      vertexColors: FaceColors,\n    });\n\n    var vertices = [];\n    var colors = [];\n\n    var pointMap = {};\n\n    // colors\n\n    var colorFrustum = new Color(0xffaa00);\n    var colorCone = new Color(0xff0000);\n    var colorUp = new Color(0x00aaff);\n    var colorTarget = new Color(0xffffff);\n    var colorCross = new Color(0x333333);\n\n    // near\n\n    addLine(\"n1\", \"n2\", colorFrustum);\n    addLine(\"n2\", \"n4\", colorFrustum);\n    addLine(\"n4\", \"n3\", colorFrustum);\n    addLine(\"n3\", \"n1\", colorFrustum);\n\n    // far\n\n    addLine(\"f1\", \"f2\", colorFrustum);\n    addLine(\"f2\", \"f4\", colorFrustum);\n    addLine(\"f4\", \"f3\", colorFrustum);\n    addLine(\"f3\", \"f1\", colorFrustum);\n\n    // sides\n\n    addLine(\"n1\", \"f1\", colorFrustum);\n    addLine(\"n2\", \"f2\", colorFrustum);\n    addLine(\"n3\", \"f3\", colorFrustum);\n    addLine(\"n4\", \"f4\", colorFrustum);\n\n    // cone\n\n    addLine(\"p\", \"n1\", colorCone);\n    addLine(\"p\", \"n2\", colorCone);\n    addLine(\"p\", \"n3\", colorCone);\n    addLine(\"p\", \"n4\", colorCone);\n\n    // up\n\n    addLine(\"u1\", \"u2\", colorUp);\n    addLine(\"u2\", \"u3\", colorUp);\n    addLine(\"u3\", \"u1\", colorUp);\n\n    // target\n\n    addLine(\"c\", \"t\", colorTarget);\n    addLine(\"p\", \"c\", colorCross);\n\n    // cross\n\n    addLine(\"cn1\", \"cn2\", colorCross);\n    addLine(\"cn3\", \"cn4\", colorCross);\n\n    addLine(\"cf1\", \"cf2\", colorCross);\n    addLine(\"cf3\", \"cf4\", colorCross);\n\n    function addLine(a, b, color) {\n      addPoint(a, color);\n      addPoint(b, color);\n    }\n\n    function addPoint(id, color) {\n      vertices.push(0, 0, 0);\n      colors.push(color.r, color.g, color.b);\n\n      if (pointMap[id] === undefined) {\n        pointMap[id] = [];\n      }\n\n      pointMap[id].push(vertices.length / 3 - 1);\n    }\n\n    geometry.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.addAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n\n    LineSegments.call(this, geometry, material);\n\n    this.camera = camera;\n    if (this.camera.updateProjectionMatrix)\n      this.camera.updateProjectionMatrix();\n\n    this.matrix = camera.matrixWorld;\n    this.matrixAutoUpdate = false;\n\n    this.pointMap = pointMap;\n\n    this.update();\n  }\n\n  CameraHelper.prototype = Object.create(LineSegments.prototype);\n  CameraHelper.prototype.constructor = CameraHelper;\n\n  CameraHelper.prototype.update = (function () {\n    var geometry, pointMap;\n\n    var vector = new Vector3();\n    var camera = new Camera();\n\n    function setPoint(point, x, y, z) {\n      vector.set(x, y, z).unproject(camera);\n\n      var points = pointMap[point];\n\n      if (points !== undefined) {\n        var position = geometry.getAttribute(\"position\");\n\n        for (var i = 0, l = points.length; i < l; i++) {\n          position.setXYZ(points[i], vector.x, vector.y, vector.z);\n        }\n      }\n    }\n\n    return function update() {\n      geometry = this.geometry;\n      pointMap = this.pointMap;\n\n      var w = 1,\n        h = 1;\n\n      // we need just camera projection matrix\n      // world matrix must be identity\n\n      camera.projectionMatrix.copy(this.camera.projectionMatrix);\n\n      // center / target\n\n      setPoint(\"c\", 0, 0, -1);\n      setPoint(\"t\", 0, 0, 1);\n\n      // near\n\n      setPoint(\"n1\", -w, -h, -1);\n      setPoint(\"n2\", w, -h, -1);\n      setPoint(\"n3\", -w, h, -1);\n      setPoint(\"n4\", w, h, -1);\n\n      // far\n\n      setPoint(\"f1\", -w, -h, 1);\n      setPoint(\"f2\", w, -h, 1);\n      setPoint(\"f3\", -w, h, 1);\n      setPoint(\"f4\", w, h, 1);\n\n      // up\n\n      setPoint(\"u1\", w * 0.7, h * 1.1, -1);\n      setPoint(\"u2\", -w * 0.7, h * 1.1, -1);\n      setPoint(\"u3\", 0, h * 2, -1);\n\n      // cross\n\n      setPoint(\"cf1\", -w, 0, 1);\n      setPoint(\"cf2\", w, 0, 1);\n      setPoint(\"cf3\", 0, -h, 1);\n      setPoint(\"cf4\", 0, h, 1);\n\n      setPoint(\"cn1\", -w, 0, -1);\n      setPoint(\"cn2\", w, 0, -1);\n      setPoint(\"cn3\", 0, -h, -1);\n      setPoint(\"cn4\", 0, h, -1);\n\n      geometry.getAttribute(\"position\").needsUpdate = true;\n    };\n  })();\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author Mugen87 / http://github.com/Mugen87\n   */\n\n  function BoxHelper(object, color) {\n    this.object = object;\n\n    if (color === undefined) color = 0xffff00;\n\n    var indices = new Uint16Array([\n      0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7,\n    ]);\n    var positions = new Float32Array(8 * 3);\n\n    var geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(indices, 1));\n    geometry.addAttribute(\"position\", new BufferAttribute(positions, 3));\n\n    LineSegments.call(this, geometry, new LineBasicMaterial({ color: color }));\n\n    this.matrixAutoUpdate = false;\n\n    this.update();\n  }\n\n  BoxHelper.prototype = Object.create(LineSegments.prototype);\n  BoxHelper.prototype.constructor = BoxHelper;\n\n  BoxHelper.prototype.update = (function () {\n    var box = new Box3();\n\n    return function update(object) {\n      if (object !== undefined) {\n        console.warn(\"THREE.BoxHelper: .update() has no longer arguments.\");\n      }\n\n      if (this.object !== undefined) {\n        box.setFromObject(this.object);\n      }\n\n      if (box.isEmpty()) return;\n\n      var min = box.min;\n      var max = box.max;\n\n      /*\n\t\t\t  5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\n\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n      var position = this.geometry.attributes.position;\n      var array = position.array;\n\n      array[0] = max.x;\n      array[1] = max.y;\n      array[2] = max.z;\n      array[3] = min.x;\n      array[4] = max.y;\n      array[5] = max.z;\n      array[6] = min.x;\n      array[7] = min.y;\n      array[8] = max.z;\n      array[9] = max.x;\n      array[10] = min.y;\n      array[11] = max.z;\n      array[12] = max.x;\n      array[13] = max.y;\n      array[14] = min.z;\n      array[15] = min.x;\n      array[16] = max.y;\n      array[17] = min.z;\n      array[18] = min.x;\n      array[19] = min.y;\n      array[20] = min.z;\n      array[21] = max.x;\n      array[22] = min.y;\n      array[23] = min.z;\n\n      position.needsUpdate = true;\n\n      this.geometry.computeBoundingSphere();\n    };\n  })();\n\n  BoxHelper.prototype.setFromObject = function (object) {\n    this.object = object;\n    this.update();\n\n    return this;\n  };\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function Box3Helper(box, hex) {\n    this.type = \"Box3Helper\";\n\n    this.box = box;\n\n    var color = hex !== undefined ? hex : 0xffff00;\n\n    var indices = new Uint16Array([\n      0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7,\n    ]);\n\n    var positions = [\n      1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1,\n      1, -1, -1,\n    ];\n\n    var geometry = new BufferGeometry();\n\n    geometry.setIndex(new BufferAttribute(indices, 1));\n\n    geometry.addAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n\n    LineSegments.call(this, geometry, new LineBasicMaterial({ color: color }));\n\n    this.geometry.computeBoundingSphere();\n  }\n\n  Box3Helper.prototype = Object.create(LineSegments.prototype);\n  Box3Helper.prototype.constructor = Box3Helper;\n\n  Box3Helper.prototype.updateMatrixWorld = function (force) {\n    var box = this.box;\n\n    if (box.isEmpty()) return;\n\n    box.getCenter(this.position);\n\n    box.getSize(this.scale);\n\n    this.scale.multiplyScalar(0.5);\n\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n  };\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  function PlaneHelper(plane, size, hex) {\n    this.type = \"PlaneHelper\";\n\n    this.plane = plane;\n\n    this.size = size === undefined ? 1 : size;\n\n    var color = hex !== undefined ? hex : 0xffff00;\n\n    var positions = [\n      1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1,\n      1, 1, 0, 0, 1, 0, 0, 0,\n    ];\n\n    var geometry = new BufferGeometry();\n    geometry.addAttribute(\"position\", new Float32BufferAttribute(positions, 3));\n    geometry.computeBoundingSphere();\n\n    Line.call(this, geometry, new LineBasicMaterial({ color: color }));\n\n    //\n\n    var positions2 = [\n      1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1,\n    ];\n\n    var geometry2 = new BufferGeometry();\n    geometry2.addAttribute(\n      \"position\",\n      new Float32BufferAttribute(positions2, 3)\n    );\n    geometry2.computeBoundingSphere();\n\n    this.add(\n      new Mesh(\n        geometry2,\n        new MeshBasicMaterial({\n          color: color,\n          opacity: 0.2,\n          transparent: true,\n          depthWrite: false,\n        })\n      )\n    );\n  }\n\n  PlaneHelper.prototype = Object.create(Line.prototype);\n  PlaneHelper.prototype.constructor = PlaneHelper;\n\n  PlaneHelper.prototype.updateMatrixWorld = function (force) {\n    var scale = -this.plane.constant;\n\n    if (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n    this.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\n    this.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n    this.lookAt(this.plane.normal);\n\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n  };\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   * @author zz85 / http://github.com/zz85\n   * @author bhouston / http://clara.io\n   *\n   * Creates an arrow for visualizing directions\n   *\n   * Parameters:\n   *  dir - Vector3\n   *  origin - Vector3\n   *  length - Number\n   *  color - color in hex value\n   *  headLength - Number\n   *  headWidth - Number\n   */\n\n  var lineGeometry, coneGeometry;\n\n  function ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n    // dir is assumed to be normalized\n\n    Object3D.call(this);\n\n    if (color === undefined) color = 0xffff00;\n    if (length === undefined) length = 1;\n    if (headLength === undefined) headLength = 0.2 * length;\n    if (headWidth === undefined) headWidth = 0.2 * headLength;\n\n    if (lineGeometry === undefined) {\n      lineGeometry = new BufferGeometry();\n      lineGeometry.addAttribute(\n        \"position\",\n        new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3)\n      );\n\n      coneGeometry = new CylinderBufferGeometry(0, 0.5, 1, 5, 1);\n      coneGeometry.translate(0, -0.5, 0);\n    }\n\n    this.position.copy(origin);\n\n    this.line = new Line(lineGeometry, new LineBasicMaterial({ color: color }));\n    this.line.matrixAutoUpdate = false;\n    this.add(this.line);\n\n    this.cone = new Mesh(coneGeometry, new MeshBasicMaterial({ color: color }));\n    this.cone.matrixAutoUpdate = false;\n    this.add(this.cone);\n\n    this.setDirection(dir);\n    this.setLength(length, headLength, headWidth);\n  }\n\n  ArrowHelper.prototype = Object.create(Object3D.prototype);\n  ArrowHelper.prototype.constructor = ArrowHelper;\n\n  ArrowHelper.prototype.setDirection = (function () {\n    var axis = new Vector3();\n    var radians;\n\n    return function setDirection(dir) {\n      // dir is assumed to be normalized\n\n      if (dir.y > 0.99999) {\n        this.quaternion.set(0, 0, 0, 1);\n      } else if (dir.y < -0.99999) {\n        this.quaternion.set(1, 0, 0, 0);\n      } else {\n        axis.set(dir.z, 0, -dir.x).normalize();\n\n        radians = Math.acos(dir.y);\n\n        this.quaternion.setFromAxisAngle(axis, radians);\n      }\n    };\n  })();\n\n  ArrowHelper.prototype.setLength = function (length, headLength, headWidth) {\n    if (headLength === undefined) headLength = 0.2 * length;\n    if (headWidth === undefined) headWidth = 0.2 * headLength;\n\n    this.line.scale.set(1, Math.max(0, length - headLength), 1);\n    this.line.updateMatrix();\n\n    this.cone.scale.set(headWidth, headLength, headWidth);\n    this.cone.position.y = length;\n    this.cone.updateMatrix();\n  };\n\n  ArrowHelper.prototype.setColor = function (color) {\n    this.line.material.color.copy(color);\n    this.cone.material.color.copy(color);\n  };\n\n  /**\n   * @author sroucheray / http://sroucheray.org/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function AxesHelper(size) {\n    size = size || 1;\n\n    var vertices = [\n      0,\n      0,\n      0,\n      size,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      size,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      size,\n    ];\n\n    var colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\n    var geometry = new BufferGeometry();\n    geometry.addAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.addAttribute(\"color\", new Float32BufferAttribute(colors, 3));\n\n    var material = new LineBasicMaterial({ vertexColors: VertexColors });\n\n    LineSegments.call(this, geometry, material);\n  }\n\n  AxesHelper.prototype = Object.create(LineSegments.prototype);\n  AxesHelper.prototype.constructor = AxesHelper;\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  function Face4(a, b, c, d, normal, color, materialIndex) {\n    console.warn(\n      \"THREE.Face4 has been removed. A THREE.Face3 will be created instead.\"\n    );\n    return new Face3(a, b, c, normal, color, materialIndex);\n  }\n\n  var LineStrip = 0;\n\n  var LinePieces = 1;\n\n  function MeshFaceMaterial(materials) {\n    console.warn(\n      \"THREE.MeshFaceMaterial has been removed. Use an Array instead.\"\n    );\n    return materials;\n  }\n\n  function MultiMaterial(materials) {\n    if (materials === undefined) materials = [];\n\n    console.warn(\"THREE.MultiMaterial has been removed. Use an Array instead.\");\n    materials.isMultiMaterial = true;\n    materials.materials = materials;\n    materials.clone = function () {\n      return materials.slice();\n    };\n    return materials;\n  }\n\n  function PointCloud(geometry, material) {\n    console.warn(\"THREE.PointCloud has been renamed to THREE.Points.\");\n    return new Points(geometry, material);\n  }\n\n  function Particle(material) {\n    console.warn(\"THREE.Particle has been renamed to THREE.Sprite.\");\n    return new Sprite(material);\n  }\n\n  function ParticleSystem(geometry, material) {\n    console.warn(\"THREE.ParticleSystem has been renamed to THREE.Points.\");\n    return new Points(geometry, material);\n  }\n\n  function PointCloudMaterial(parameters) {\n    console.warn(\n      \"THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.\"\n    );\n    return new PointsMaterial(parameters);\n  }\n\n  function ParticleBasicMaterial(parameters) {\n    console.warn(\n      \"THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.\"\n    );\n    return new PointsMaterial(parameters);\n  }\n\n  function ParticleSystemMaterial(parameters) {\n    console.warn(\n      \"THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.\"\n    );\n    return new PointsMaterial(parameters);\n  }\n\n  function Vertex(x, y, z) {\n    console.warn(\"THREE.Vertex has been removed. Use THREE.Vector3 instead.\");\n    return new Vector3(x, y, z);\n  }\n\n  //\n\n  function DynamicBufferAttribute(array, itemSize) {\n    console.warn(\n      \"THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.\"\n    );\n    return new BufferAttribute(array, itemSize).setDynamic(true);\n  }\n\n  function Int8Attribute(array, itemSize) {\n    console.warn(\n      \"THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.\"\n    );\n    return new Int8BufferAttribute(array, itemSize);\n  }\n\n  function Uint8Attribute(array, itemSize) {\n    console.warn(\n      \"THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.\"\n    );\n    return new Uint8BufferAttribute(array, itemSize);\n  }\n\n  function Uint8ClampedAttribute(array, itemSize) {\n    console.warn(\n      \"THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.\"\n    );\n    return new Uint8ClampedBufferAttribute(array, itemSize);\n  }\n\n  function Int16Attribute(array, itemSize) {\n    console.warn(\n      \"THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.\"\n    );\n    return new Int16BufferAttribute(array, itemSize);\n  }\n\n  function Uint16Attribute(array, itemSize) {\n    console.warn(\n      \"THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.\"\n    );\n    return new Uint16BufferAttribute(array, itemSize);\n  }\n\n  function Int32Attribute(array, itemSize) {\n    console.warn(\n      \"THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.\"\n    );\n    return new Int32BufferAttribute(array, itemSize);\n  }\n\n  function Uint32Attribute(array, itemSize) {\n    console.warn(\n      \"THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.\"\n    );\n    return new Uint32BufferAttribute(array, itemSize);\n  }\n\n  function Float32Attribute(array, itemSize) {\n    console.warn(\n      \"THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.\"\n    );\n    return new Float32BufferAttribute(array, itemSize);\n  }\n\n  function Float64Attribute(array, itemSize) {\n    console.warn(\n      \"THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.\"\n    );\n    return new Float64BufferAttribute(array, itemSize);\n  }\n\n  //\n\n  Curve.create = function (construct, getPoint) {\n    console.log(\"THREE.Curve.create() has been deprecated\");\n\n    construct.prototype = Object.create(Curve.prototype);\n    construct.prototype.constructor = construct;\n    construct.prototype.getPoint = getPoint;\n\n    return construct;\n  };\n\n  //\n\n  Object.assign(CurvePath.prototype, {\n    createPointsGeometry: function (divisions) {\n      console.warn(\n        \"THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.\"\n      );\n\n      // generate geometry from path points (for Line or Points objects)\n\n      var pts = this.getPoints(divisions);\n      return this.createGeometry(pts);\n    },\n\n    createSpacedPointsGeometry: function (divisions) {\n      console.warn(\n        \"THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.\"\n      );\n\n      // generate geometry from equidistant sampling along the path\n\n      var pts = this.getSpacedPoints(divisions);\n      return this.createGeometry(pts);\n    },\n\n    createGeometry: function (points) {\n      console.warn(\n        \"THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.\"\n      );\n\n      var geometry = new Geometry();\n\n      for (var i = 0, l = points.length; i < l; i++) {\n        var point = points[i];\n        geometry.vertices.push(new Vector3(point.x, point.y, point.z || 0));\n      }\n\n      return geometry;\n    },\n  });\n\n  //\n\n  Object.assign(Path.prototype, {\n    fromPoints: function (points) {\n      console.warn(\n        \"THREE.Path: .fromPoints() has been renamed to .setFromPoints().\"\n      );\n      this.setFromPoints(points);\n    },\n  });\n\n  //\n\n  function ClosedSplineCurve3(points) {\n    console.warn(\n      \"THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.\"\n    );\n\n    CatmullRomCurve3.call(this, points);\n    this.type = \"catmullrom\";\n    this.closed = true;\n  }\n\n  ClosedSplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);\n\n  //\n\n  function SplineCurve3(points) {\n    console.warn(\n      \"THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.\"\n    );\n\n    CatmullRomCurve3.call(this, points);\n    this.type = \"catmullrom\";\n  }\n\n  SplineCurve3.prototype = Object.create(CatmullRomCurve3.prototype);\n\n  //\n\n  function Spline(points) {\n    console.warn(\n      \"THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.\"\n    );\n\n    CatmullRomCurve3.call(this, points);\n    this.type = \"catmullrom\";\n  }\n\n  Spline.prototype = Object.create(CatmullRomCurve3.prototype);\n\n  Object.assign(Spline.prototype, {\n    initFromArray: function (/* a */) {\n      console.error(\"THREE.Spline: .initFromArray() has been removed.\");\n    },\n    getControlPointsArray: function (/* optionalTarget */) {\n      console.error(\"THREE.Spline: .getControlPointsArray() has been removed.\");\n    },\n    reparametrizeByArcLength: function (/* samplingCoef */) {\n      console.error(\n        \"THREE.Spline: .reparametrizeByArcLength() has been removed.\"\n      );\n    },\n  });\n\n  //\n\n  function AxisHelper(size) {\n    console.warn(\"THREE.AxisHelper has been renamed to THREE.AxesHelper.\");\n    return new AxesHelper(size);\n  }\n\n  function BoundingBoxHelper(object, color) {\n    console.warn(\n      \"THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.\"\n    );\n    return new BoxHelper(object, color);\n  }\n\n  function EdgesHelper(object, hex) {\n    console.warn(\n      \"THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.\"\n    );\n    return new LineSegments(\n      new EdgesGeometry(object.geometry),\n      new LineBasicMaterial({ color: hex !== undefined ? hex : 0xffffff })\n    );\n  }\n\n  GridHelper.prototype.setColors = function () {\n    console.error(\n      \"THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.\"\n    );\n  };\n\n  SkeletonHelper.prototype.update = function () {\n    console.error(\n      \"THREE.SkeletonHelper: update() no longer needs to be called.\"\n    );\n  };\n\n  function WireframeHelper(object, hex) {\n    console.warn(\n      \"THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.\"\n    );\n    return new LineSegments(\n      new WireframeGeometry(object.geometry),\n      new LineBasicMaterial({ color: hex !== undefined ? hex : 0xffffff })\n    );\n  }\n\n  //\n\n  Object.assign(Loader.prototype, {\n    extractUrlBase: function (url) {\n      console.warn(\n        \"THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.\"\n      );\n      return LoaderUtils.extractUrlBase(url);\n    },\n  });\n\n  function XHRLoader(manager) {\n    console.warn(\"THREE.XHRLoader has been renamed to THREE.FileLoader.\");\n    return new FileLoader(manager);\n  }\n\n  function BinaryTextureLoader(manager) {\n    console.warn(\n      \"THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.\"\n    );\n    return new DataTextureLoader(manager);\n  }\n\n  //\n\n  Object.assign(Box2.prototype, {\n    center: function (optionalTarget) {\n      console.warn(\"THREE.Box2: .center() has been renamed to .getCenter().\");\n      return this.getCenter(optionalTarget);\n    },\n    empty: function () {\n      console.warn(\"THREE.Box2: .empty() has been renamed to .isEmpty().\");\n      return this.isEmpty();\n    },\n    isIntersectionBox: function (box) {\n      console.warn(\n        \"THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().\"\n      );\n      return this.intersectsBox(box);\n    },\n    size: function (optionalTarget) {\n      console.warn(\"THREE.Box2: .size() has been renamed to .getSize().\");\n      return this.getSize(optionalTarget);\n    },\n  });\n\n  Object.assign(Box3.prototype, {\n    center: function (optionalTarget) {\n      console.warn(\"THREE.Box3: .center() has been renamed to .getCenter().\");\n      return this.getCenter(optionalTarget);\n    },\n    empty: function () {\n      console.warn(\"THREE.Box3: .empty() has been renamed to .isEmpty().\");\n      return this.isEmpty();\n    },\n    isIntersectionBox: function (box) {\n      console.warn(\n        \"THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().\"\n      );\n      return this.intersectsBox(box);\n    },\n    isIntersectionSphere: function (sphere) {\n      console.warn(\n        \"THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().\"\n      );\n      return this.intersectsSphere(sphere);\n    },\n    size: function (optionalTarget) {\n      console.warn(\"THREE.Box3: .size() has been renamed to .getSize().\");\n      return this.getSize(optionalTarget);\n    },\n  });\n\n  Line3.prototype.center = function (optionalTarget) {\n    console.warn(\"THREE.Line3: .center() has been renamed to .getCenter().\");\n    return this.getCenter(optionalTarget);\n  };\n\n  Object.assign(_Math, {\n    random16: function () {\n      console.warn(\n        \"THREE.Math: .random16() has been deprecated. Use Math.random() instead.\"\n      );\n      return Math.random();\n    },\n\n    nearestPowerOfTwo: function (value) {\n      console.warn(\n        \"THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().\"\n      );\n      return _Math.floorPowerOfTwo(value);\n    },\n\n    nextPowerOfTwo: function (value) {\n      console.warn(\n        \"THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().\"\n      );\n      return _Math.ceilPowerOfTwo(value);\n    },\n  });\n\n  Object.assign(Matrix3.prototype, {\n    flattenToArrayOffset: function (array, offset) {\n      console.warn(\n        \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"\n      );\n      return this.toArray(array, offset);\n    },\n    multiplyVector3: function (vector) {\n      console.warn(\n        \"THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.\"\n      );\n      return vector.applyMatrix3(this);\n    },\n    multiplyVector3Array: function (/* a */) {\n      console.error(\"THREE.Matrix3: .multiplyVector3Array() has been removed.\");\n    },\n    applyToBuffer: function (buffer /*, offset, length */) {\n      console.warn(\n        \"THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.\"\n      );\n      return this.applyToBufferAttribute(buffer);\n    },\n    applyToVector3Array: function (/* array, offset, length */) {\n      console.error(\"THREE.Matrix3: .applyToVector3Array() has been removed.\");\n    },\n  });\n\n  Object.assign(Matrix4.prototype, {\n    extractPosition: function (m) {\n      console.warn(\n        \"THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().\"\n      );\n      return this.copyPosition(m);\n    },\n    flattenToArrayOffset: function (array, offset) {\n      console.warn(\n        \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"\n      );\n      return this.toArray(array, offset);\n    },\n    getPosition: (function () {\n      var v1;\n\n      return function getPosition() {\n        if (v1 === undefined) v1 = new Vector3();\n        console.warn(\n          \"THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.\"\n        );\n        return v1.setFromMatrixColumn(this, 3);\n      };\n    })(),\n    setRotationFromQuaternion: function (q) {\n      console.warn(\n        \"THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().\"\n      );\n      return this.makeRotationFromQuaternion(q);\n    },\n    multiplyToArray: function () {\n      console.warn(\"THREE.Matrix4: .multiplyToArray() has been removed.\");\n    },\n    multiplyVector3: function (vector) {\n      console.warn(\n        \"THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.\"\n      );\n      return vector.applyMatrix4(this);\n    },\n    multiplyVector4: function (vector) {\n      console.warn(\n        \"THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.\"\n      );\n      return vector.applyMatrix4(this);\n    },\n    multiplyVector3Array: function (/* a */) {\n      console.error(\"THREE.Matrix4: .multiplyVector3Array() has been removed.\");\n    },\n    rotateAxis: function (v) {\n      console.warn(\n        \"THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.\"\n      );\n      v.transformDirection(this);\n    },\n    crossVector: function (vector) {\n      console.warn(\n        \"THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.\"\n      );\n      return vector.applyMatrix4(this);\n    },\n    translate: function () {\n      console.error(\"THREE.Matrix4: .translate() has been removed.\");\n    },\n    rotateX: function () {\n      console.error(\"THREE.Matrix4: .rotateX() has been removed.\");\n    },\n    rotateY: function () {\n      console.error(\"THREE.Matrix4: .rotateY() has been removed.\");\n    },\n    rotateZ: function () {\n      console.error(\"THREE.Matrix4: .rotateZ() has been removed.\");\n    },\n    rotateByAxis: function () {\n      console.error(\"THREE.Matrix4: .rotateByAxis() has been removed.\");\n    },\n    applyToBuffer: function (buffer /*, offset, length */) {\n      console.warn(\n        \"THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.\"\n      );\n      return this.applyToBufferAttribute(buffer);\n    },\n    applyToVector3Array: function (/* array, offset, length */) {\n      console.error(\"THREE.Matrix4: .applyToVector3Array() has been removed.\");\n    },\n    makeFrustum: function (left, right, bottom, top, near, far) {\n      console.warn(\n        \"THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.\"\n      );\n      return this.makePerspective(left, right, top, bottom, near, far);\n    },\n  });\n\n  Plane.prototype.isIntersectionLine = function (line) {\n    console.warn(\n      \"THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().\"\n    );\n    return this.intersectsLine(line);\n  };\n\n  Quaternion.prototype.multiplyVector3 = function (vector) {\n    console.warn(\n      \"THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.\"\n    );\n    return vector.applyQuaternion(this);\n  };\n\n  Object.assign(Ray.prototype, {\n    isIntersectionBox: function (box) {\n      console.warn(\n        \"THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().\"\n      );\n      return this.intersectsBox(box);\n    },\n    isIntersectionPlane: function (plane) {\n      console.warn(\n        \"THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().\"\n      );\n      return this.intersectsPlane(plane);\n    },\n    isIntersectionSphere: function (sphere) {\n      console.warn(\n        \"THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().\"\n      );\n      return this.intersectsSphere(sphere);\n    },\n  });\n\n  Object.assign(Triangle.prototype, {\n    area: function () {\n      console.warn(\"THREE.Triangle: .area() has been renamed to .getArea().\");\n      return this.getArea();\n    },\n    barycoordFromPoint: function (point, target) {\n      console.warn(\n        \"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"\n      );\n      return this.getBarycoord(point, target);\n    },\n    midpoint: function (target) {\n      console.warn(\n        \"THREE.Triangle: .midpoint() has been renamed to .getMidpoint().\"\n      );\n      return this.getMidpoint(target);\n    },\n    normal: function (target) {\n      console.warn(\n        \"THREE.Triangle: .normal() has been renamed to .getNormal().\"\n      );\n      return this.getNormal(target);\n    },\n    plane: function (target) {\n      console.warn(\"THREE.Triangle: .plane() has been renamed to .getPlane().\");\n      return this.getPlane(target);\n    },\n  });\n\n  Object.assign(Triangle, {\n    barycoordFromPoint: function (point, a, b, c, target) {\n      console.warn(\n        \"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"\n      );\n      return Triangle.getBarycoord(point, a, b, c, target);\n    },\n    normal: function (a, b, c, target) {\n      console.warn(\n        \"THREE.Triangle: .normal() has been renamed to .getNormal().\"\n      );\n      return Triangle.getNormal(a, b, c, target);\n    },\n  });\n\n  Object.assign(Shape.prototype, {\n    extractAllPoints: function (divisions) {\n      console.warn(\n        \"THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.\"\n      );\n      return this.extractPoints(divisions);\n    },\n    extrude: function (options) {\n      console.warn(\n        \"THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.\"\n      );\n      return new ExtrudeGeometry(this, options);\n    },\n    makeGeometry: function (options) {\n      console.warn(\n        \"THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.\"\n      );\n      return new ShapeGeometry(this, options);\n    },\n  });\n\n  Object.assign(Vector2.prototype, {\n    fromAttribute: function (attribute, index, offset) {\n      console.warn(\n        \"THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().\"\n      );\n      return this.fromBufferAttribute(attribute, index, offset);\n    },\n    distanceToManhattan: function (v) {\n      console.warn(\n        \"THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"\n      );\n      return this.manhattanDistanceTo(v);\n    },\n    lengthManhattan: function () {\n      console.warn(\n        \"THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().\"\n      );\n      return this.manhattanLength();\n    },\n  });\n\n  Object.assign(Vector3.prototype, {\n    setEulerFromRotationMatrix: function () {\n      console.error(\n        \"THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.\"\n      );\n    },\n    setEulerFromQuaternion: function () {\n      console.error(\n        \"THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.\"\n      );\n    },\n    getPositionFromMatrix: function (m) {\n      console.warn(\n        \"THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().\"\n      );\n      return this.setFromMatrixPosition(m);\n    },\n    getScaleFromMatrix: function (m) {\n      console.warn(\n        \"THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().\"\n      );\n      return this.setFromMatrixScale(m);\n    },\n    getColumnFromMatrix: function (index, matrix) {\n      console.warn(\n        \"THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().\"\n      );\n      return this.setFromMatrixColumn(matrix, index);\n    },\n    applyProjection: function (m) {\n      console.warn(\n        \"THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.\"\n      );\n      return this.applyMatrix4(m);\n    },\n    fromAttribute: function (attribute, index, offset) {\n      console.warn(\n        \"THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().\"\n      );\n      return this.fromBufferAttribute(attribute, index, offset);\n    },\n    distanceToManhattan: function (v) {\n      console.warn(\n        \"THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"\n      );\n      return this.manhattanDistanceTo(v);\n    },\n    lengthManhattan: function () {\n      console.warn(\n        \"THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().\"\n      );\n      return this.manhattanLength();\n    },\n  });\n\n  Object.assign(Vector4.prototype, {\n    fromAttribute: function (attribute, index, offset) {\n      console.warn(\n        \"THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().\"\n      );\n      return this.fromBufferAttribute(attribute, index, offset);\n    },\n    lengthManhattan: function () {\n      console.warn(\n        \"THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().\"\n      );\n      return this.manhattanLength();\n    },\n  });\n\n  //\n\n  Object.assign(Geometry.prototype, {\n    computeTangents: function () {\n      console.error(\"THREE.Geometry: .computeTangents() has been removed.\");\n    },\n    computeLineDistances: function () {\n      console.error(\n        \"THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.\"\n      );\n    },\n  });\n\n  Object.assign(Object3D.prototype, {\n    getChildByName: function (name) {\n      console.warn(\n        \"THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().\"\n      );\n      return this.getObjectByName(name);\n    },\n    renderDepth: function () {\n      console.warn(\n        \"THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.\"\n      );\n    },\n    translate: function (distance, axis) {\n      console.warn(\n        \"THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.\"\n      );\n      return this.translateOnAxis(axis, distance);\n    },\n    getWorldRotation: function () {\n      console.error(\n        \"THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.\"\n      );\n    },\n  });\n\n  Object.defineProperties(Object3D.prototype, {\n    eulerOrder: {\n      get: function () {\n        console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\");\n        return this.rotation.order;\n      },\n      set: function (value) {\n        console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\");\n        this.rotation.order = value;\n      },\n    },\n    useQuaternion: {\n      get: function () {\n        console.warn(\n          \"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\"\n        );\n      },\n      set: function () {\n        console.warn(\n          \"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\"\n        );\n      },\n    },\n  });\n\n  Object.defineProperties(LOD.prototype, {\n    objects: {\n      get: function () {\n        console.warn(\"THREE.LOD: .objects has been renamed to .levels.\");\n        return this.levels;\n      },\n    },\n  });\n\n  Object.defineProperty(Skeleton.prototype, \"useVertexTexture\", {\n    get: function () {\n      console.warn(\"THREE.Skeleton: useVertexTexture has been removed.\");\n    },\n    set: function () {\n      console.warn(\"THREE.Skeleton: useVertexTexture has been removed.\");\n    },\n  });\n\n  Object.defineProperty(Curve.prototype, \"__arcLengthDivisions\", {\n    get: function () {\n      console.warn(\n        \"THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.\"\n      );\n      return this.arcLengthDivisions;\n    },\n    set: function (value) {\n      console.warn(\n        \"THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.\"\n      );\n      this.arcLengthDivisions = value;\n    },\n  });\n\n  //\n\n  PerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n    console.warn(\n      \"THREE.PerspectiveCamera.setLens is deprecated. \" +\n        \"Use .setFocalLength and .filmGauge for a photographic setup.\"\n    );\n\n    if (filmGauge !== undefined) this.filmGauge = filmGauge;\n    this.setFocalLength(focalLength);\n  };\n\n  //\n\n  Object.defineProperties(Light.prototype, {\n    onlyShadow: {\n      set: function () {\n        console.warn(\"THREE.Light: .onlyShadow has been removed.\");\n      },\n    },\n    shadowCameraFov: {\n      set: function (value) {\n        console.warn(\n          \"THREE.Light: .shadowCameraFov is now .shadow.camera.fov.\"\n        );\n        this.shadow.camera.fov = value;\n      },\n    },\n    shadowCameraLeft: {\n      set: function (value) {\n        console.warn(\n          \"THREE.Light: .shadowCameraLeft is now .shadow.camera.left.\"\n        );\n        this.shadow.camera.left = value;\n      },\n    },\n    shadowCameraRight: {\n      set: function (value) {\n        console.warn(\n          \"THREE.Light: .shadowCameraRight is now .shadow.camera.right.\"\n        );\n        this.shadow.camera.right = value;\n      },\n    },\n    shadowCameraTop: {\n      set: function (value) {\n        console.warn(\n          \"THREE.Light: .shadowCameraTop is now .shadow.camera.top.\"\n        );\n        this.shadow.camera.top = value;\n      },\n    },\n    shadowCameraBottom: {\n      set: function (value) {\n        console.warn(\n          \"THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.\"\n        );\n        this.shadow.camera.bottom = value;\n      },\n    },\n    shadowCameraNear: {\n      set: function (value) {\n        console.warn(\n          \"THREE.Light: .shadowCameraNear is now .shadow.camera.near.\"\n        );\n        this.shadow.camera.near = value;\n      },\n    },\n    shadowCameraFar: {\n      set: function (value) {\n        console.warn(\n          \"THREE.Light: .shadowCameraFar is now .shadow.camera.far.\"\n        );\n        this.shadow.camera.far = value;\n      },\n    },\n    shadowCameraVisible: {\n      set: function () {\n        console.warn(\n          \"THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.\"\n        );\n      },\n    },\n    shadowBias: {\n      set: function (value) {\n        console.warn(\"THREE.Light: .shadowBias is now .shadow.bias.\");\n        this.shadow.bias = value;\n      },\n    },\n    shadowDarkness: {\n      set: function () {\n        console.warn(\"THREE.Light: .shadowDarkness has been removed.\");\n      },\n    },\n    shadowMapWidth: {\n      set: function (value) {\n        console.warn(\n          \"THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.\"\n        );\n        this.shadow.mapSize.width = value;\n      },\n    },\n    shadowMapHeight: {\n      set: function (value) {\n        console.warn(\n          \"THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.\"\n        );\n        this.shadow.mapSize.height = value;\n      },\n    },\n  });\n\n  //\n\n  Object.defineProperties(BufferAttribute.prototype, {\n    length: {\n      get: function () {\n        console.warn(\n          \"THREE.BufferAttribute: .length has been deprecated. Use .count instead.\"\n        );\n        return this.array.length;\n      },\n    },\n    copyIndicesArray: function (/* indices */) {\n      console.error(\n        \"THREE.BufferAttribute: .copyIndicesArray() has been removed.\"\n      );\n    },\n  });\n\n  Object.assign(BufferGeometry.prototype, {\n    addIndex: function (index) {\n      console.warn(\n        \"THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().\"\n      );\n      this.setIndex(index);\n    },\n    addDrawCall: function (start, count, indexOffset) {\n      if (indexOffset !== undefined) {\n        console.warn(\n          \"THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.\"\n        );\n      }\n      console.warn(\"THREE.BufferGeometry: .addDrawCall() is now .addGroup().\");\n      this.addGroup(start, count);\n    },\n    clearDrawCalls: function () {\n      console.warn(\n        \"THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().\"\n      );\n      this.clearGroups();\n    },\n    computeTangents: function () {\n      console.warn(\n        \"THREE.BufferGeometry: .computeTangents() has been removed.\"\n      );\n    },\n    computeOffsets: function () {\n      console.warn(\"THREE.BufferGeometry: .computeOffsets() has been removed.\");\n    },\n  });\n\n  Object.defineProperties(BufferGeometry.prototype, {\n    drawcalls: {\n      get: function () {\n        console.error(\n          \"THREE.BufferGeometry: .drawcalls has been renamed to .groups.\"\n        );\n        return this.groups;\n      },\n    },\n    offsets: {\n      get: function () {\n        console.warn(\n          \"THREE.BufferGeometry: .offsets has been renamed to .groups.\"\n        );\n        return this.groups;\n      },\n    },\n  });\n\n  //\n\n  Object.assign(ExtrudeBufferGeometry.prototype, {\n    getArrays: function () {\n      console.error(\n        \"THREE.ExtrudeBufferGeometry: .getArrays() has been removed.\"\n      );\n    },\n\n    addShapeList: function () {\n      console.error(\n        \"THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.\"\n      );\n    },\n\n    addShape: function () {\n      console.error(\n        \"THREE.ExtrudeBufferGeometry: .addShape() has been removed.\"\n      );\n    },\n  });\n\n  //\n\n  Object.defineProperties(Uniform.prototype, {\n    dynamic: {\n      set: function () {\n        console.warn(\n          \"THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.\"\n        );\n      },\n    },\n    onUpdate: {\n      value: function () {\n        console.warn(\n          \"THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.\"\n        );\n        return this;\n      },\n    },\n  });\n\n  //\n\n  Object.defineProperties(Material.prototype, {\n    wrapAround: {\n      get: function () {\n        console.warn(\"THREE.Material: .wrapAround has been removed.\");\n      },\n      set: function () {\n        console.warn(\"THREE.Material: .wrapAround has been removed.\");\n      },\n    },\n    wrapRGB: {\n      get: function () {\n        console.warn(\"THREE.Material: .wrapRGB has been removed.\");\n        return new Color();\n      },\n    },\n\n    shading: {\n      get: function () {\n        console.error(\n          \"THREE.\" +\n            this.type +\n            \": .shading has been removed. Use the boolean .flatShading instead.\"\n        );\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE.\" +\n            this.type +\n            \": .shading has been removed. Use the boolean .flatShading instead.\"\n        );\n        this.flatShading = value === FlatShading;\n      },\n    },\n  });\n\n  Object.defineProperties(MeshPhongMaterial.prototype, {\n    metal: {\n      get: function () {\n        console.warn(\n          \"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.\"\n        );\n        return false;\n      },\n      set: function () {\n        console.warn(\n          \"THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead\"\n        );\n      },\n    },\n  });\n\n  Object.defineProperties(ShaderMaterial.prototype, {\n    derivatives: {\n      get: function () {\n        console.warn(\n          \"THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"\n        );\n        return this.extensions.derivatives;\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"\n        );\n        this.extensions.derivatives = value;\n      },\n    },\n  });\n\n  //\n\n  Object.assign(WebGLRenderer.prototype, {\n    animate: function (callback) {\n      console.warn(\n        \"THREE.WebGLRenderer: .animate() is now .setAnimationLoop().\"\n      );\n      this.setAnimationLoop(callback);\n    },\n\n    getCurrentRenderTarget: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().\"\n      );\n      return this.getRenderTarget();\n    },\n\n    getMaxAnisotropy: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().\"\n      );\n      return this.capabilities.getMaxAnisotropy();\n    },\n\n    getPrecision: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.\"\n      );\n      return this.capabilities.precision;\n    },\n\n    resetGLState: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .resetGLState() is now .state.reset().\"\n      );\n      return this.state.reset();\n    },\n\n    supportsFloatTextures: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).\"\n      );\n      return this.extensions.get(\"OES_texture_float\");\n    },\n    supportsHalfFloatTextures: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).\"\n      );\n      return this.extensions.get(\"OES_texture_half_float\");\n    },\n    supportsStandardDerivatives: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).\"\n      );\n      return this.extensions.get(\"OES_standard_derivatives\");\n    },\n    supportsCompressedTextureS3TC: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).\"\n      );\n      return this.extensions.get(\"WEBGL_compressed_texture_s3tc\");\n    },\n    supportsCompressedTexturePVRTC: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).\"\n      );\n      return this.extensions.get(\"WEBGL_compressed_texture_pvrtc\");\n    },\n    supportsBlendMinMax: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).\"\n      );\n      return this.extensions.get(\"EXT_blend_minmax\");\n    },\n    supportsVertexTextures: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.\"\n      );\n      return this.capabilities.vertexTextures;\n    },\n    supportsInstancedArrays: function () {\n      console.warn(\n        \"THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).\"\n      );\n      return this.extensions.get(\"ANGLE_instanced_arrays\");\n    },\n    enableScissorTest: function (boolean) {\n      console.warn(\n        \"THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().\"\n      );\n      this.setScissorTest(boolean);\n    },\n    initMaterial: function () {\n      console.warn(\"THREE.WebGLRenderer: .initMaterial() has been removed.\");\n    },\n    addPrePlugin: function () {\n      console.warn(\"THREE.WebGLRenderer: .addPrePlugin() has been removed.\");\n    },\n    addPostPlugin: function () {\n      console.warn(\"THREE.WebGLRenderer: .addPostPlugin() has been removed.\");\n    },\n    updateShadowMap: function () {\n      console.warn(\"THREE.WebGLRenderer: .updateShadowMap() has been removed.\");\n    },\n    setFaceCulling: function () {\n      console.warn(\"THREE.WebGLRenderer: .setFaceCulling() has been removed.\");\n    },\n  });\n\n  Object.defineProperties(WebGLRenderer.prototype, {\n    shadowMapEnabled: {\n      get: function () {\n        return this.shadowMap.enabled;\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.\"\n        );\n        this.shadowMap.enabled = value;\n      },\n    },\n    shadowMapType: {\n      get: function () {\n        return this.shadowMap.type;\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.\"\n        );\n        this.shadowMap.type = value;\n      },\n    },\n    shadowMapCullFace: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\"\n        );\n        return undefined;\n      },\n      set: function (/* value */) {\n        console.warn(\n          \"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\"\n        );\n      },\n    },\n  });\n\n  Object.defineProperties(WebGLShadowMap.prototype, {\n    cullFace: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\"\n        );\n        return undefined;\n      },\n      set: function (/* cullFace */) {\n        console.warn(\n          \"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\"\n        );\n      },\n    },\n    renderReverseSided: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\"\n        );\n        return undefined;\n      },\n      set: function () {\n        console.warn(\n          \"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\"\n        );\n      },\n    },\n    renderSingleSided: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\"\n        );\n        return undefined;\n      },\n      set: function () {\n        console.warn(\n          \"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\"\n        );\n      },\n    },\n  });\n\n  //\n\n  Object.defineProperties(WebGLRenderTarget.prototype, {\n    wrapS: {\n      get: function () {\n        console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\");\n        return this.texture.wrapS;\n      },\n      set: function (value) {\n        console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\");\n        this.texture.wrapS = value;\n      },\n    },\n    wrapT: {\n      get: function () {\n        console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\");\n        return this.texture.wrapT;\n      },\n      set: function (value) {\n        console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\");\n        this.texture.wrapT = value;\n      },\n    },\n    magFilter: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"\n        );\n        return this.texture.magFilter;\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"\n        );\n        this.texture.magFilter = value;\n      },\n    },\n    minFilter: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"\n        );\n        return this.texture.minFilter;\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"\n        );\n        this.texture.minFilter = value;\n      },\n    },\n    anisotropy: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"\n        );\n        return this.texture.anisotropy;\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"\n        );\n        this.texture.anisotropy = value;\n      },\n    },\n    offset: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"\n        );\n        return this.texture.offset;\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"\n        );\n        this.texture.offset = value;\n      },\n    },\n    repeat: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"\n        );\n        return this.texture.repeat;\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"\n        );\n        this.texture.repeat = value;\n      },\n    },\n    format: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .format is now .texture.format.\"\n        );\n        return this.texture.format;\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .format is now .texture.format.\"\n        );\n        this.texture.format = value;\n      },\n    },\n    type: {\n      get: function () {\n        console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\");\n        return this.texture.type;\n      },\n      set: function (value) {\n        console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\");\n        this.texture.type = value;\n      },\n    },\n    generateMipmaps: {\n      get: function () {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"\n        );\n        return this.texture.generateMipmaps;\n      },\n      set: function (value) {\n        console.warn(\n          \"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"\n        );\n        this.texture.generateMipmaps = value;\n      },\n    },\n  });\n\n  //\n\n  Object.defineProperties(WebVRManager.prototype, {\n    standing: {\n      set: function (/* value */) {\n        console.warn(\"THREE.WebVRManager: .standing has been removed.\");\n      },\n    },\n  });\n\n  //\n\n  Audio.prototype.load = function (file) {\n    console.warn(\n      \"THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.\"\n    );\n    var scope = this;\n    var audioLoader = new AudioLoader();\n    audioLoader.load(file, function (buffer) {\n      scope.setBuffer(buffer);\n    });\n    return this;\n  };\n\n  AudioAnalyser.prototype.getData = function () {\n    console.warn(\"THREE.AudioAnalyser: .getData() is now .getFrequencyData().\");\n    return this.getFrequencyData();\n  };\n\n  //\n\n  CubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n    console.warn(\"THREE.CubeCamera: .updateCubeMap() is now .update().\");\n    return this.update(renderer, scene);\n  };\n\n  //\n\n  var GeometryUtils = {\n    merge: function (geometry1, geometry2, materialIndexOffset) {\n      console.warn(\n        \"THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.\"\n      );\n      var matrix;\n\n      if (geometry2.isMesh) {\n        geometry2.matrixAutoUpdate && geometry2.updateMatrix();\n\n        matrix = geometry2.matrix;\n        geometry2 = geometry2.geometry;\n      }\n\n      geometry1.merge(geometry2, matrix, materialIndexOffset);\n    },\n\n    center: function (geometry) {\n      console.warn(\n        \"THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.\"\n      );\n      return geometry.center();\n    },\n  };\n\n  ImageUtils.crossOrigin = undefined;\n\n  ImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n    console.warn(\n      \"THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.\"\n    );\n\n    var loader = new TextureLoader();\n    loader.setCrossOrigin(this.crossOrigin);\n\n    var texture = loader.load(url, onLoad, undefined, onError);\n\n    if (mapping) texture.mapping = mapping;\n\n    return texture;\n  };\n\n  ImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n    console.warn(\n      \"THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.\"\n    );\n\n    var loader = new CubeTextureLoader();\n    loader.setCrossOrigin(this.crossOrigin);\n\n    var texture = loader.load(urls, onLoad, undefined, onError);\n\n    if (mapping) texture.mapping = mapping;\n\n    return texture;\n  };\n\n  ImageUtils.loadCompressedTexture = function () {\n    console.error(\n      \"THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.\"\n    );\n  };\n\n  ImageUtils.loadCompressedTextureCube = function () {\n    console.error(\n      \"THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.\"\n    );\n  };\n\n  //\n\n  function Projector() {\n    console.error(\n      \"THREE.Projector has been moved to /examples/js/renderers/Projector.js.\"\n    );\n\n    this.projectVector = function (vector, camera) {\n      console.warn(\n        \"THREE.Projector: .projectVector() is now vector.project().\"\n      );\n      vector.project(camera);\n    };\n\n    this.unprojectVector = function (vector, camera) {\n      console.warn(\n        \"THREE.Projector: .unprojectVector() is now vector.unproject().\"\n      );\n      vector.unproject(camera);\n    };\n\n    this.pickingRay = function () {\n      console.error(\n        \"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\"\n      );\n    };\n  }\n\n  //\n\n  function CanvasRenderer() {\n    console.error(\n      \"THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js\"\n    );\n\n    this.domElement = document.createElementNS(\n      \"http://www.w3.org/1999/xhtml\",\n      \"canvas\"\n    );\n    this.clear = function () {};\n    this.render = function () {};\n    this.setClearColor = function () {};\n    this.setSize = function () {};\n  }\n\n  //\n\n  var SceneUtils = {\n    createMultiMaterialObject: function (/* geometry, materials */) {\n      console.error(\n        \"THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js\"\n      );\n    },\n\n    detach: function (/* child, parent, scene */) {\n      console.error(\n        \"THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js\"\n      );\n    },\n\n    attach: function (/* child, scene, parent */) {\n      console.error(\n        \"THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js\"\n      );\n    },\n  };\n\n  //\n\n  function LensFlare() {\n    console.error(\n      \"THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js\"\n    );\n  }\n\n  exports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n  exports.WebGLRenderTarget = WebGLRenderTarget;\n  exports.WebGLRenderer = WebGLRenderer;\n  exports.ShaderLib = ShaderLib;\n  exports.UniformsLib = UniformsLib;\n  exports.UniformsUtils = UniformsUtils;\n  exports.ShaderChunk = ShaderChunk;\n  exports.FogExp2 = FogExp2;\n  exports.Fog = Fog;\n  exports.Scene = Scene;\n  exports.Sprite = Sprite;\n  exports.LOD = LOD;\n  exports.SkinnedMesh = SkinnedMesh;\n  exports.Skeleton = Skeleton;\n  exports.Bone = Bone;\n  exports.Mesh = Mesh;\n  exports.LineSegments = LineSegments;\n  exports.LineLoop = LineLoop;\n  exports.Line = Line;\n  exports.Points = Points;\n  exports.Group = Group;\n  exports.VideoTexture = VideoTexture;\n  exports.DataTexture = DataTexture;\n  exports.CompressedTexture = CompressedTexture;\n  exports.CubeTexture = CubeTexture;\n  exports.CanvasTexture = CanvasTexture;\n  exports.DepthTexture = DepthTexture;\n  exports.Texture = Texture;\n  exports.CompressedTextureLoader = CompressedTextureLoader;\n  exports.DataTextureLoader = DataTextureLoader;\n  exports.CubeTextureLoader = CubeTextureLoader;\n  exports.TextureLoader = TextureLoader;\n  exports.ObjectLoader = ObjectLoader;\n  exports.MaterialLoader = MaterialLoader;\n  exports.BufferGeometryLoader = BufferGeometryLoader;\n  exports.DefaultLoadingManager = DefaultLoadingManager;\n  exports.LoadingManager = LoadingManager;\n  exports.JSONLoader = JSONLoader;\n  exports.ImageLoader = ImageLoader;\n  exports.ImageBitmapLoader = ImageBitmapLoader;\n  exports.FontLoader = FontLoader;\n  exports.FileLoader = FileLoader;\n  exports.Loader = Loader;\n  exports.LoaderUtils = LoaderUtils;\n  exports.Cache = Cache;\n  exports.AudioLoader = AudioLoader;\n  exports.SpotLightShadow = SpotLightShadow;\n  exports.SpotLight = SpotLight;\n  exports.PointLight = PointLight;\n  exports.RectAreaLight = RectAreaLight;\n  exports.HemisphereLight = HemisphereLight;\n  exports.DirectionalLightShadow = DirectionalLightShadow;\n  exports.DirectionalLight = DirectionalLight;\n  exports.AmbientLight = AmbientLight;\n  exports.LightShadow = LightShadow;\n  exports.Light = Light;\n  exports.StereoCamera = StereoCamera;\n  exports.PerspectiveCamera = PerspectiveCamera;\n  exports.OrthographicCamera = OrthographicCamera;\n  exports.CubeCamera = CubeCamera;\n  exports.ArrayCamera = ArrayCamera;\n  exports.Camera = Camera;\n  exports.AudioListener = AudioListener;\n  exports.PositionalAudio = PositionalAudio;\n  exports.AudioContext = AudioContext;\n  exports.AudioAnalyser = AudioAnalyser;\n  exports.Audio = Audio;\n  exports.VectorKeyframeTrack = VectorKeyframeTrack;\n  exports.StringKeyframeTrack = StringKeyframeTrack;\n  exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n  exports.NumberKeyframeTrack = NumberKeyframeTrack;\n  exports.ColorKeyframeTrack = ColorKeyframeTrack;\n  exports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n  exports.PropertyMixer = PropertyMixer;\n  exports.PropertyBinding = PropertyBinding;\n  exports.KeyframeTrack = KeyframeTrack;\n  exports.AnimationUtils = AnimationUtils;\n  exports.AnimationObjectGroup = AnimationObjectGroup;\n  exports.AnimationMixer = AnimationMixer;\n  exports.AnimationClip = AnimationClip;\n  exports.Uniform = Uniform;\n  exports.InstancedBufferGeometry = InstancedBufferGeometry;\n  exports.BufferGeometry = BufferGeometry;\n  exports.Geometry = Geometry;\n  exports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n  exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n  exports.InterleavedBuffer = InterleavedBuffer;\n  exports.InstancedBufferAttribute = InstancedBufferAttribute;\n  exports.Face3 = Face3;\n  exports.Object3D = Object3D;\n  exports.Raycaster = Raycaster;\n  exports.Layers = Layers;\n  exports.EventDispatcher = EventDispatcher;\n  exports.Clock = Clock;\n  exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n  exports.LinearInterpolant = LinearInterpolant;\n  exports.DiscreteInterpolant = DiscreteInterpolant;\n  exports.CubicInterpolant = CubicInterpolant;\n  exports.Interpolant = Interpolant;\n  exports.Triangle = Triangle;\n  exports.Math = _Math;\n  exports.Spherical = Spherical;\n  exports.Cylindrical = Cylindrical;\n  exports.Plane = Plane;\n  exports.Frustum = Frustum;\n  exports.Sphere = Sphere;\n  exports.Ray = Ray;\n  exports.Matrix4 = Matrix4;\n  exports.Matrix3 = Matrix3;\n  exports.Box3 = Box3;\n  exports.Box2 = Box2;\n  exports.Line3 = Line3;\n  exports.Euler = Euler;\n  exports.Vector4 = Vector4;\n  exports.Vector3 = Vector3;\n  exports.Vector2 = Vector2;\n  exports.Quaternion = Quaternion;\n  exports.Color = Color;\n  exports.ImmediateRenderObject = ImmediateRenderObject;\n  exports.VertexNormalsHelper = VertexNormalsHelper;\n  exports.SpotLightHelper = SpotLightHelper;\n  exports.SkeletonHelper = SkeletonHelper;\n  exports.PointLightHelper = PointLightHelper;\n  exports.RectAreaLightHelper = RectAreaLightHelper;\n  exports.HemisphereLightHelper = HemisphereLightHelper;\n  exports.GridHelper = GridHelper;\n  exports.PolarGridHelper = PolarGridHelper;\n  exports.FaceNormalsHelper = FaceNormalsHelper;\n  exports.DirectionalLightHelper = DirectionalLightHelper;\n  exports.CameraHelper = CameraHelper;\n  exports.BoxHelper = BoxHelper;\n  exports.Box3Helper = Box3Helper;\n  exports.PlaneHelper = PlaneHelper;\n  exports.ArrowHelper = ArrowHelper;\n  exports.AxesHelper = AxesHelper;\n  exports.Shape = Shape;\n  exports.Path = Path;\n  exports.ShapePath = ShapePath;\n  exports.Font = Font;\n  exports.CurvePath = CurvePath;\n  exports.Curve = Curve;\n  exports.ImageUtils = ImageUtils;\n  exports.ShapeUtils = ShapeUtils;\n  exports.WebGLUtils = WebGLUtils;\n  exports.WireframeGeometry = WireframeGeometry;\n  exports.ParametricGeometry = ParametricGeometry;\n  exports.ParametricBufferGeometry = ParametricBufferGeometry;\n  exports.TetrahedronGeometry = TetrahedronGeometry;\n  exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\n  exports.OctahedronGeometry = OctahedronGeometry;\n  exports.OctahedronBufferGeometry = OctahedronBufferGeometry;\n  exports.IcosahedronGeometry = IcosahedronGeometry;\n  exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\n  exports.DodecahedronGeometry = DodecahedronGeometry;\n  exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\n  exports.PolyhedronGeometry = PolyhedronGeometry;\n  exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\n  exports.TubeGeometry = TubeGeometry;\n  exports.TubeBufferGeometry = TubeBufferGeometry;\n  exports.TorusKnotGeometry = TorusKnotGeometry;\n  exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\n  exports.TorusGeometry = TorusGeometry;\n  exports.TorusBufferGeometry = TorusBufferGeometry;\n  exports.TextGeometry = TextGeometry;\n  exports.TextBufferGeometry = TextBufferGeometry;\n  exports.SphereGeometry = SphereGeometry;\n  exports.SphereBufferGeometry = SphereBufferGeometry;\n  exports.RingGeometry = RingGeometry;\n  exports.RingBufferGeometry = RingBufferGeometry;\n  exports.PlaneGeometry = PlaneGeometry;\n  exports.PlaneBufferGeometry = PlaneBufferGeometry;\n  exports.LatheGeometry = LatheGeometry;\n  exports.LatheBufferGeometry = LatheBufferGeometry;\n  exports.ShapeGeometry = ShapeGeometry;\n  exports.ShapeBufferGeometry = ShapeBufferGeometry;\n  exports.ExtrudeGeometry = ExtrudeGeometry;\n  exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\n  exports.EdgesGeometry = EdgesGeometry;\n  exports.ConeGeometry = ConeGeometry;\n  exports.ConeBufferGeometry = ConeBufferGeometry;\n  exports.CylinderGeometry = CylinderGeometry;\n  exports.CylinderBufferGeometry = CylinderBufferGeometry;\n  exports.CircleGeometry = CircleGeometry;\n  exports.CircleBufferGeometry = CircleBufferGeometry;\n  exports.BoxGeometry = BoxGeometry;\n  exports.BoxBufferGeometry = BoxBufferGeometry;\n  exports.ShadowMaterial = ShadowMaterial;\n  exports.SpriteMaterial = SpriteMaterial;\n  exports.RawShaderMaterial = RawShaderMaterial;\n  exports.ShaderMaterial = ShaderMaterial;\n  exports.PointsMaterial = PointsMaterial;\n  exports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n  exports.MeshStandardMaterial = MeshStandardMaterial;\n  exports.MeshPhongMaterial = MeshPhongMaterial;\n  exports.MeshToonMaterial = MeshToonMaterial;\n  exports.MeshNormalMaterial = MeshNormalMaterial;\n  exports.MeshLambertMaterial = MeshLambertMaterial;\n  exports.MeshDepthMaterial = MeshDepthMaterial;\n  exports.MeshDistanceMaterial = MeshDistanceMaterial;\n  exports.MeshBasicMaterial = MeshBasicMaterial;\n  exports.LineDashedMaterial = LineDashedMaterial;\n  exports.LineBasicMaterial = LineBasicMaterial;\n  exports.Material = Material;\n  exports.Float64BufferAttribute = Float64BufferAttribute;\n  exports.Float32BufferAttribute = Float32BufferAttribute;\n  exports.Uint32BufferAttribute = Uint32BufferAttribute;\n  exports.Int32BufferAttribute = Int32BufferAttribute;\n  exports.Uint16BufferAttribute = Uint16BufferAttribute;\n  exports.Int16BufferAttribute = Int16BufferAttribute;\n  exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n  exports.Uint8BufferAttribute = Uint8BufferAttribute;\n  exports.Int8BufferAttribute = Int8BufferAttribute;\n  exports.BufferAttribute = BufferAttribute;\n  exports.ArcCurve = ArcCurve;\n  exports.CatmullRomCurve3 = CatmullRomCurve3;\n  exports.CubicBezierCurve = CubicBezierCurve;\n  exports.CubicBezierCurve3 = CubicBezierCurve3;\n  exports.EllipseCurve = EllipseCurve;\n  exports.LineCurve = LineCurve;\n  exports.LineCurve3 = LineCurve3;\n  exports.QuadraticBezierCurve = QuadraticBezierCurve;\n  exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n  exports.SplineCurve = SplineCurve;\n  exports.REVISION = REVISION;\n  exports.MOUSE = MOUSE;\n  exports.CullFaceNone = CullFaceNone;\n  exports.CullFaceBack = CullFaceBack;\n  exports.CullFaceFront = CullFaceFront;\n  exports.CullFaceFrontBack = CullFaceFrontBack;\n  exports.FrontFaceDirectionCW = FrontFaceDirectionCW;\n  exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\n  exports.BasicShadowMap = BasicShadowMap;\n  exports.PCFShadowMap = PCFShadowMap;\n  exports.PCFSoftShadowMap = PCFSoftShadowMap;\n  exports.FrontSide = FrontSide;\n  exports.BackSide = BackSide;\n  exports.DoubleSide = DoubleSide;\n  exports.FlatShading = FlatShading;\n  exports.SmoothShading = SmoothShading;\n  exports.NoColors = NoColors;\n  exports.FaceColors = FaceColors;\n  exports.VertexColors = VertexColors;\n  exports.NoBlending = NoBlending;\n  exports.NormalBlending = NormalBlending;\n  exports.AdditiveBlending = AdditiveBlending;\n  exports.SubtractiveBlending = SubtractiveBlending;\n  exports.MultiplyBlending = MultiplyBlending;\n  exports.CustomBlending = CustomBlending;\n  exports.AddEquation = AddEquation;\n  exports.SubtractEquation = SubtractEquation;\n  exports.ReverseSubtractEquation = ReverseSubtractEquation;\n  exports.MinEquation = MinEquation;\n  exports.MaxEquation = MaxEquation;\n  exports.ZeroFactor = ZeroFactor;\n  exports.OneFactor = OneFactor;\n  exports.SrcColorFactor = SrcColorFactor;\n  exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n  exports.SrcAlphaFactor = SrcAlphaFactor;\n  exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n  exports.DstAlphaFactor = DstAlphaFactor;\n  exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n  exports.DstColorFactor = DstColorFactor;\n  exports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n  exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n  exports.NeverDepth = NeverDepth;\n  exports.AlwaysDepth = AlwaysDepth;\n  exports.LessDepth = LessDepth;\n  exports.LessEqualDepth = LessEqualDepth;\n  exports.EqualDepth = EqualDepth;\n  exports.GreaterEqualDepth = GreaterEqualDepth;\n  exports.GreaterDepth = GreaterDepth;\n  exports.NotEqualDepth = NotEqualDepth;\n  exports.MultiplyOperation = MultiplyOperation;\n  exports.MixOperation = MixOperation;\n  exports.AddOperation = AddOperation;\n  exports.NoToneMapping = NoToneMapping;\n  exports.LinearToneMapping = LinearToneMapping;\n  exports.ReinhardToneMapping = ReinhardToneMapping;\n  exports.Uncharted2ToneMapping = Uncharted2ToneMapping;\n  exports.CineonToneMapping = CineonToneMapping;\n  exports.UVMapping = UVMapping;\n  exports.CubeReflectionMapping = CubeReflectionMapping;\n  exports.CubeRefractionMapping = CubeRefractionMapping;\n  exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n  exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n  exports.SphericalReflectionMapping = SphericalReflectionMapping;\n  exports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n  exports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n  exports.RepeatWrapping = RepeatWrapping;\n  exports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n  exports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n  exports.NearestFilter = NearestFilter;\n  exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n  exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n  exports.LinearFilter = LinearFilter;\n  exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n  exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n  exports.UnsignedByteType = UnsignedByteType;\n  exports.ByteType = ByteType;\n  exports.ShortType = ShortType;\n  exports.UnsignedShortType = UnsignedShortType;\n  exports.IntType = IntType;\n  exports.UnsignedIntType = UnsignedIntType;\n  exports.FloatType = FloatType;\n  exports.HalfFloatType = HalfFloatType;\n  exports.UnsignedShort4444Type = UnsignedShort4444Type;\n  exports.UnsignedShort5551Type = UnsignedShort5551Type;\n  exports.UnsignedShort565Type = UnsignedShort565Type;\n  exports.UnsignedInt248Type = UnsignedInt248Type;\n  exports.AlphaFormat = AlphaFormat;\n  exports.RGBFormat = RGBFormat;\n  exports.RGBAFormat = RGBAFormat;\n  exports.LuminanceFormat = LuminanceFormat;\n  exports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n  exports.RGBEFormat = RGBEFormat;\n  exports.DepthFormat = DepthFormat;\n  exports.DepthStencilFormat = DepthStencilFormat;\n  exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n  exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n  exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n  exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n  exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n  exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n  exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n  exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n  exports.RGB_ETC1_Format = RGB_ETC1_Format;\n  exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n  exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n  exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n  exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n  exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n  exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n  exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n  exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n  exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n  exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n  exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n  exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n  exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n  exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n  exports.LoopOnce = LoopOnce;\n  exports.LoopRepeat = LoopRepeat;\n  exports.LoopPingPong = LoopPingPong;\n  exports.InterpolateDiscrete = InterpolateDiscrete;\n  exports.InterpolateLinear = InterpolateLinear;\n  exports.InterpolateSmooth = InterpolateSmooth;\n  exports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n  exports.ZeroSlopeEnding = ZeroSlopeEnding;\n  exports.WrapAroundEnding = WrapAroundEnding;\n  exports.TrianglesDrawMode = TrianglesDrawMode;\n  exports.TriangleStripDrawMode = TriangleStripDrawMode;\n  exports.TriangleFanDrawMode = TriangleFanDrawMode;\n  exports.LinearEncoding = LinearEncoding;\n  exports.sRGBEncoding = sRGBEncoding;\n  exports.GammaEncoding = GammaEncoding;\n  exports.RGBEEncoding = RGBEEncoding;\n  exports.LogLuvEncoding = LogLuvEncoding;\n  exports.RGBM7Encoding = RGBM7Encoding;\n  exports.RGBM16Encoding = RGBM16Encoding;\n  exports.RGBDEncoding = RGBDEncoding;\n  exports.BasicDepthPacking = BasicDepthPacking;\n  exports.RGBADepthPacking = RGBADepthPacking;\n  exports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n  exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n  exports.CubeGeometry = BoxGeometry;\n  exports.Face4 = Face4;\n  exports.LineStrip = LineStrip;\n  exports.LinePieces = LinePieces;\n  exports.MeshFaceMaterial = MeshFaceMaterial;\n  exports.MultiMaterial = MultiMaterial;\n  exports.PointCloud = PointCloud;\n  exports.Particle = Particle;\n  exports.ParticleSystem = ParticleSystem;\n  exports.PointCloudMaterial = PointCloudMaterial;\n  exports.ParticleBasicMaterial = ParticleBasicMaterial;\n  exports.ParticleSystemMaterial = ParticleSystemMaterial;\n  exports.Vertex = Vertex;\n  exports.DynamicBufferAttribute = DynamicBufferAttribute;\n  exports.Int8Attribute = Int8Attribute;\n  exports.Uint8Attribute = Uint8Attribute;\n  exports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n  exports.Int16Attribute = Int16Attribute;\n  exports.Uint16Attribute = Uint16Attribute;\n  exports.Int32Attribute = Int32Attribute;\n  exports.Uint32Attribute = Uint32Attribute;\n  exports.Float32Attribute = Float32Attribute;\n  exports.Float64Attribute = Float64Attribute;\n  exports.ClosedSplineCurve3 = ClosedSplineCurve3;\n  exports.SplineCurve3 = SplineCurve3;\n  exports.Spline = Spline;\n  exports.AxisHelper = AxisHelper;\n  exports.BoundingBoxHelper = BoundingBoxHelper;\n  exports.EdgesHelper = EdgesHelper;\n  exports.WireframeHelper = WireframeHelper;\n  exports.XHRLoader = XHRLoader;\n  exports.BinaryTextureLoader = BinaryTextureLoader;\n  exports.GeometryUtils = GeometryUtils;\n  exports.Projector = Projector;\n  exports.CanvasRenderer = CanvasRenderer;\n  exports.SceneUtils = SceneUtils;\n  exports.LensFlare = LensFlare;\n\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n});\n",
    "/*\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Util = {};\n\nUtil.base64 = function (mimeType, base64) {\n  return \"data:\" + mimeType + \";base64,\" + base64;\n};\n\nUtil.isMobile = function () {\n  var check = false;\n  (function (a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n};\n\nUtil.isIOS = function () {\n  return /(iPad|iPhone|iPod)/g.test(navigator.userAgent);\n};\n\nUtil.isIFrame = function () {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n};\n\nUtil.appendQueryParameter = function (url, key, value) {\n  // Determine delimiter based on if the URL already GET parameters in it.\n  var delimiter = url.indexOf(\"?\") < 0 ? \"?\" : \"&\";\n  url += delimiter + key + \"=\" + value;\n  return url;\n};\n\n// From http://goo.gl/4WX3tg\nUtil.getQueryParameter = function (name) {\n  name = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n  var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n    results = regex.exec(location.search);\n  return results === null\n    ? \"\"\n    : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n};\n\nUtil.isLandscapeMode = function () {\n  return window.orientation == 90 || window.orientation == -90;\n};\n\nmodule.exports = Util;\n",
    "/*\n * Copyright 2015 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Util = require(\"./util.js\");\n\n/**\n * Android and iOS compatible wakelock implementation.\n *\n * Refactored thanks to dkovalev@.\n */\nfunction AndroidWakeLock() {\n  var video = document.createElement(\"video\");\n\n  video.addEventListener(\"ended\", function () {\n    video.play();\n  });\n\n  this.request = function () {\n    if (video.paused) {\n      // Base64 version of videos_src/no-sleep-60s.webm.\n      video.src = Util.base64(\n        \"video/webm\",\n        \"GkXfowEAAAAAAAAfQoaBAUL3gQFC8oEEQvOBCEKChHdlYm1Ch4ECQoWBAhhTgGcBAAAAAAAH4xFNm3RALE27i1OrhBVJqWZTrIHfTbuMU6uEFlSua1OsggEwTbuMU6uEHFO7a1OsggfG7AEAAAAAAACkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmAQAAAAAAAEUq17GDD0JATYCNTGF2ZjU2LjQwLjEwMVdBjUxhdmY1Ni40MC4xMDFzpJAGSJTMbsLpDt/ySkipgX1fRImIQO1MAAAAAAAWVK5rAQAAAAAAADuuAQAAAAAAADLXgQFzxYEBnIEAIrWcg3VuZIaFVl9WUDmDgQEj44OEO5rKAOABAAAAAAAABrCBsLqBkB9DtnUBAAAAAAAAo+eBAKOmgQAAgKJJg0IAAV4BHsAHBIODCoAACmH2MAAAZxgz4dPSTFi5JACjloED6ACmAECSnABMQAADYAAAWi0quoCjloEH0ACmAECSnABNwAADYAAAWi0quoCjloELuACmAECSnABNgAADYAAAWi0quoCjloEPoACmAECSnABNYAADYAAAWi0quoCjloETiACmAECSnABNIAADYAAAWi0quoAfQ7Z1AQAAAAAAAJTnghdwo5aBAAAApgBAkpwATOAAA2AAAFotKrqAo5aBA+gApgBAkpwATMAAA2AAAFotKrqAo5aBB9AApgBAkpwATIAAA2AAAFotKrqAo5aBC7gApgBAkpwATEAAA2AAAFotKrqAo5aBD6AApgDAkpwAQ2AAA2AAAFotKrqAo5aBE4gApgBAkpwATCAAA2AAAFotKrqAH0O2dQEAAAAAAACU54Iu4KOWgQAAAKYAQJKcAEvAAANgAABaLSq6gKOWgQPoAKYAQJKcAEtgAANgAABaLSq6gKOWgQfQAKYAQJKcAEsAAANgAABaLSq6gKOWgQu4AKYAQJKcAEqAAANgAABaLSq6gKOWgQ+gAKYAQJKcAEogAANgAABaLSq6gKOWgROIAKYAQJKcAEnAAANgAABaLSq6gB9DtnUBAAAAAAAAlOeCRlCjloEAAACmAECSnABJgAADYAAAWi0quoCjloED6ACmAECSnABJIAADYAAAWi0quoCjloEH0ACmAMCSnABDYAADYAAAWi0quoCjloELuACmAECSnABI4AADYAAAWi0quoCjloEPoACmAECSnABIoAADYAAAWi0quoCjloETiACmAECSnABIYAADYAAAWi0quoAfQ7Z1AQAAAAAAAJTngl3Ao5aBAAAApgBAkpwASCAAA2AAAFotKrqAo5aBA+gApgBAkpwASAAAA2AAAFotKrqAo5aBB9AApgBAkpwAR8AAA2AAAFotKrqAo5aBC7gApgBAkpwAR4AAA2AAAFotKrqAo5aBD6AApgBAkpwAR2AAA2AAAFotKrqAo5aBE4gApgBAkpwARyAAA2AAAFotKrqAH0O2dQEAAAAAAACU54J1MKOWgQAAAKYAwJKcAENgAANgAABaLSq6gKOWgQPoAKYAQJKcAEbgAANgAABaLSq6gKOWgQfQAKYAQJKcAEagAANgAABaLSq6gKOWgQu4AKYAQJKcAEaAAANgAABaLSq6gKOWgQ+gAKYAQJKcAEZAAANgAABaLSq6gKOWgROIAKYAQJKcAEYAAANgAABaLSq6gB9DtnUBAAAAAAAAlOeCjKCjloEAAACmAECSnABF4AADYAAAWi0quoCjloED6ACmAECSnABFwAADYAAAWi0quoCjloEH0ACmAECSnABFoAADYAAAWi0quoCjloELuACmAECSnABFgAADYAAAWi0quoCjloEPoACmAMCSnABDYAADYAAAWi0quoCjloETiACmAECSnABFYAADYAAAWi0quoAfQ7Z1AQAAAAAAAJTngqQQo5aBAAAApgBAkpwARUAAA2AAAFotKrqAo5aBA+gApgBAkpwARSAAA2AAAFotKrqAo5aBB9AApgBAkpwARQAAA2AAAFotKrqAo5aBC7gApgBAkpwARQAAA2AAAFotKrqAo5aBD6AApgBAkpwAROAAA2AAAFotKrqAo5aBE4gApgBAkpwARMAAA2AAAFotKrqAH0O2dQEAAAAAAACU54K7gKOWgQAAAKYAQJKcAESgAANgAABaLSq6gKOWgQPoAKYAQJKcAESAAANgAABaLSq6gKOWgQfQAKYAwJKcAENgAANgAABaLSq6gKOWgQu4AKYAQJKcAERgAANgAABaLSq6gKOWgQ+gAKYAQJKcAERAAANgAABaLSq6gKOWgROIAKYAQJKcAEQgAANgAABaLSq6gB9DtnUBAAAAAAAAlOeC0vCjloEAAACmAECSnABEIAADYAAAWi0quoCjloED6ACmAECSnABEAAADYAAAWi0quoCjloEH0ACmAECSnABD4AADYAAAWi0quoCjloELuACmAECSnABDwAADYAAAWi0quoCjloEPoACmAECSnABDoAADYAAAWi0quoCjloETiACmAECSnABDgAADYAAAWi0quoAcU7trAQAAAAAAABG7j7OBALeK94EB8YIBd/CBAw==\"\n      );\n      video.play();\n    }\n  };\n\n  this.release = function () {\n    video.pause();\n    video.src = \"\";\n  };\n}\n\nfunction iOSWakeLock() {\n  var timer = null;\n\n  this.request = function () {\n    if (!timer) {\n      timer = setInterval(function () {\n        window.location.href = \"/\";\n        setTimeout(window.stop, 0);\n      }, 15000);\n    }\n  };\n\n  this.release = function () {\n    if (timer) {\n      clearInterval(timer);\n      timer = null;\n    }\n  };\n}\n\nfunction getWakeLock() {\n  var userAgent = navigator.userAgent || navigator.vendor || window.opera;\n  if (userAgent.match(/iPhone/i) || userAgent.match(/iPod/i)) {\n    return iOSWakeLock;\n  } else {\n    return AndroidWakeLock;\n  }\n}\n\nmodule.exports = getWakeLock();\n"
  ]
}